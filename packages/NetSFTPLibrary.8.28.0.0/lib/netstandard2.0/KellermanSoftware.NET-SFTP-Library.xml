<?xml version="1.0"?>
<doc>
    <assembly>
        <name>KellermanSoftware.NET-SFTP-Library</name>
    </assembly>
    <members>
        <member name="T:KellermanSoftware.NetSFtpLibrary.Interfaces.CompressionMode">
            <summary>
            Determines which compression is used when transferring files
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetSFtpLibrary.Interfaces.CompressionMode.None">
            <summary>
            No compression
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetSFtpLibrary.Interfaces.CompressionMode.Zlib">
            <summary>
            ZLib compression
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetSFtpLibrary.Interfaces.CompressionMode.OpenZlib">
            <summary>
            Open ZLib compression
            </summary>
        </member>
        <member name="T:KellermanSoftware.NetSFtpLibrary.Interfaces.ExternalException">
            <summary>
            Exception class for exceptions inside External classes
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.Interfaces.IExternalChannel.Connect">
            <summary>
            Connect to the SFTP Channel
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.Interfaces.IExternalChannel.IsConnected">
            <summary>
            Is channel connected
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.Interfaces.IExternalChannel.Disconnect">
            <summary>
            Disconnect from the SFTP Channel
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.Interfaces.IExternalExecChannel.SCPGetBinary(System.IO.Stream,System.String,KellermanSoftware.NetSFtpLibrary.Interfaces.IFireProgress)">
            <summary>
            Download a binary stream via SCP
            </summary>
            <param name="localStream">A local file stream</param>
            <param name="remoteFileName">The remote filename</param>        
            <param name="fireProgress">Notify transfer progress</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.Interfaces.IExternalExecChannel.SCPPutBinary(System.IO.Stream,System.String,System.DateTime,System.DateTime,System.String,KellermanSoftware.NetSFtpLibrary.Interfaces.IFireProgress)">
            <summary>
            Upload a binary stream via SCP
            </summary>
            <param name="localStream">A local file stream</param>
            <param name="remoteFileName">The remote file name</param>
            <param name="modifiedDate">Modifield Date</param>
            <param name="accessDate">Acces Date</param>
            <param name="permissions">Permissions 7777</param>
            <param name="fireProgress">Notify transfer progress</param>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.Interfaces.IExternalSFTPAdapter.MaxAuthorizationTries">
            <summary>
            When trying to connect the .NET SFTP Library will try User Name and Password, Public Key Authentication, and Keyboard Interactive Authentication By Default.  
            There are a default of three authorization attempts.  If set to 1, it will only try User Name and Password, if set to 2 then User Name/Password then Public Key, if 3 then Keyboard Interactive Authentication
            </summary>
            <value>The Maximum Authorization Tries</value>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.Interfaces.IExternalSFTPAdapter.FipsCompliantMode">
            <summary>
            If true, only AES and 3DES algorithms will be allowed for communication.  Only HMAC SHA1 will be used for the handshake.  The default is false.
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.Interfaces.IExternalSFTPAdapter.BufferSize">
            <summary>
            Set the Buffer Size In Bytes For Uploading and Downloading. The default is 32767 bytes
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.Interfaces.IExternalSFTPAdapter.IsConnected">
            <summary>
            Returns true if we are connected to the FTP server
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.Interfaces.IExternalSFTPAdapter.SshKeyFile">
            <summary>
            A private key file for an SSH connection in OpenSSH or Putty format
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.Interfaces.IExternalSFTPAdapter.SshKeyStream">
            <summary>
            As an alternate to the SSH Key File, create a memory stream for the key
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.Interfaces.IExternalSFTPAdapter.SshPassphrase">
            <summary>
            A passphrase for the SshKeyFile or SshKeyStream if required 
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.Interfaces.IExternalSFTPAdapter.HostAddress">
            <summary>
            Specifies the host name or IP Address of the SFTP Server.
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.Interfaces.IExternalSFTPAdapter.UserName">
            <summary>
            Specifies the user name to use while communicating with the SFTP Server.
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.Interfaces.IExternalSFTPAdapter.Password">
            <summary>
            The password to connect to the SFTP Server
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.Interfaces.IExternalSFTPAdapter.Proxy">
            <summary>
            Hold Information about the Proxy Server. Socks 5 is normally used for proxy
            servers with port 1080. The older Socks 4 is supported, this also normally operates on
            port 1080.
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.Interfaces.IExternalSFTPAdapter.Port">
            <summary>
            The port to connect to, defaults to 22
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.Interfaces.IExternalSFTPAdapter.Timeout">
            <summary>
            The connection timeout in milliseconds
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.Interfaces.IExternalSFTPAdapter.CompressionMode">
            <summary>
            Compression.  The default is None. 
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.Interfaces.IExternalSFTPAdapter.OverrideCiphers(System.String)">
            <summary>
            Override the ciphers used
            </summary>
            <param name="ciphers"></param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.Interfaces.IExternalSFTPAdapter.OverrideMacs(System.String)">
            <summary>
            Override the macs used
            </summary>
            <param name="macs"></param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.Interfaces.IExternalSFTPAdapter.OverrideKeyExchanges(System.String)">
            <summary>
            Override the key exchanges used
            </summary>
            <param name="macs"></param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.Interfaces.IExternalSFTPAdapter.GenerateSshKey(System.String,System.String,System.String,System.String,KellermanSoftware.NetSFtpLibrary.Interfaces.SshKeyAlgorithm,KellermanSoftware.NetSFtpLibrary.Interfaces.SshKeySize,KellermanSoftware.NetSFtpLibrary.Interfaces.SshPublicKeyType,KellermanSoftware.NetSFtpLibrary.Interfaces.SshPrivateKeyType)">
            <summary>
            Generate a public/private key pair for SSH. 
            </summary>
            <param name="outputPath"></param>
            <param name="keyName"></param>
            <param name="passPhrase"></param>
            <param name="comment"></param>
            <param name="keyAlgorithm"></param>
            <param name="keySize"></param>
            <param name="publicKeyType"></param>
            <param name="privateKeyType"></param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.Interfaces.IExternalSFTPAdapter.Connect">
            <summary>
            Connect to the SFTP Server
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.Interfaces.IExternalSFTPAdapter.Disconnect">
            <summary>
            Disconnect from the SFTP Server
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.Interfaces.IExternalSFTPAdapter.CreatePortForwardingL(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Creates a local-side port forwarding.
            </summary>
            <param name="boundAddress"> The network interface we should be listening on</param>
            <param name="lPort">The local port to listen on. If 0, the system randomly selects a port (and returns this number).</param>
            <param name="host">The remote host (i.e. at the server-side) to forward the connections to.</param>
            <param name="rPort">The port at the remote host to forward the connections to.</param>
            <returns>The local port number we now are listening on.</returns>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.Interfaces.IExternalSFTPAdapter.DeletePortForwardingL(System.String,System.Int32)">
            <summary>
            Delete local-side port forwarding 
            </summary>
            <param name="boundAddress">The network interface we should be listening on</param>
            <param name="lPort">The local port we are listening on</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.Interfaces.IExternalSFTPAdapter.GetPortForwardingL">
            <summary>
            Returns a snapshot of the current local port forwarding configurations.
            </summary>
            <returns>an array of strings, each describing one forwarding. Each string is of the form
            localport:remotehost:remoteport
            with the numbers in decimal representation.
            </returns>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.Interfaces.IExternalSFTPAdapter.CreatePortForwardingR(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Creates a remote side port forwarding to a host at the local side.
            </summary>
            <param name="bind_address">The network interface to bind on on the remote side. If null, bind to (remote) localhost, if "" or "*", bind to all interfaces.</param>
            <param name="rport">The port to listen on on the remote side.</param>
            <param name="host">The host on the local side to forward connections to.</param>
            <param name="lport">The port at host to forward connections to.</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.Interfaces.IExternalSFTPAdapter.DeletePortForwardingR(System.Int32)">
            <summary>
            Removes a remote port forwarding.
            </summary>
            <param name="rport">The remote listening port.</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.Interfaces.IExternalSFTPChannel.GetCurrentDirectory">
            <summary>
            Get the current directory
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.Interfaces.IExternalSFTPChannel.ChangeDirectory(System.String)">
            <summary>
            Change the current directory
            </summary>
            <param name="directory"></param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.Interfaces.IExternalSFTPChannel.CreateDirectory(System.String)">
            <summary>
            Create a directory in the current directory
            </summary>
            <param name="directoryName"></param>
            <returns>True if the directory was created</returns>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.Interfaces.IExternalSFTPChannel.DeleteDirectory(System.String)">
            <summary>
            Remove a directory in the current directory
            </summary>
            <param name="directoryName"></param>
            <returns>True if the directory was deleted</returns>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.Interfaces.IExternalSFTPChannel.DeleteFile(System.String)">
            <summary>
            Remove a file in the current directory
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.Interfaces.IExternalSFTPChannel.SetPermissions(System.String,System.String)">
            <summary>
            Set file or directory permissions.  It must be in the same format as the permissions string in the FileInfo
            </summary>
            <param name="fileOrDirectoryName"></param>
            <param name="permissionsString"></param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.Interfaces.IExternalSFTPChannel.GetFileSize(System.String)">
            <summary>
            Get the file size in bytes for a file in the current directory
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.Interfaces.IExternalSFTPChannel.GetFileDate(System.String)">
            <summary>
            >Gets the modification date of a remote file.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.Interfaces.IExternalSFTPChannel.GetDirectoryListing">
            <summary>
            Return a list of the files in the current ftp directory
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.Interfaces.IExternalSFTPChannel.GetDirectoryListing(System.String)">
            <summary>
            Return a list of the files in the current directory with a wildcard pattern
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.Interfaces.IExternalSFTPChannel.RenameDirectory(System.String,System.String)">
            <summary>
            Renames a directory in the current SFTP directory
            </summary>
            <param name="oldName"></param>
            <param name="newName"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.Interfaces.IExternalSFTPChannel.RenameFile(System.String,System.String)">
            <summary>
            Renames a file in the current SFTP directory
            </summary>
            <param name="oldName"></param>
            <param name="newName"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.Interfaces.IExternalSFTPChannel.GetBinary(System.IO.Stream,System.String,System.Int64,KellermanSoftware.NetSFtpLibrary.Interfaces.IFireProgress)">
            <summary>
            Download a binary stream
            </summary>
            <param name="localStream">A local file stream</param>
            <param name="remoteFileName">The remote filename</param>
            <param name="restart">The start position</param>
            <param name="fireProgress">Notify transfer progress</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.Interfaces.IExternalSFTPChannel.GetBinary(System.IO.Stream,System.String,System.Int64,System.Int64,KellermanSoftware.NetSFtpLibrary.Interfaces.IFireProgress)">
            <summary>
            Download a binary stream
            </summary>
            <param name="localStream">A local file stream</param>
            <param name="remoteFileName">The remote filename</param>
            <param name="startingPosition">The Starting Position</param>
            <param name="length">The length for download</param>
            <param name="fireProgress">Notify transfer progress</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.Interfaces.IExternalSFTPChannel.PutBinary(System.IO.Stream,System.String,System.Int64,KellermanSoftware.NetSFtpLibrary.Interfaces.IFireProgress)">
            <summary>
            Upload a binary stream
            </summary>
            <param name="localStream">A local file stream</param>
            <param name="remoteFileName">The remote file name</param>
            <param name="restart">The start position</param>
            <param name="fireProgress">Notify transfer progress</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.Interfaces.IExternalSFTPChannel.DirectoryExists(System.String)">
            <summary>
            Return true if the directory exists
            </summary>
            <param name="directoryName"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.Interfaces.IExternalSFTPChannel.FileExists(System.String)">
            <summary>
            Return true if the file exists
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="T:KellermanSoftware.NetSFtpLibrary.Interfaces.IExternalShellChannel">
            <summary>
            Shell Channel Interface
            </summary>
        </member>
        <member name="T:KellermanSoftware.NetSFtpLibrary.Interfaces.ProxyInfo">
            <summary>
            Information about the Proxy Server
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.Interfaces.ProxyInfo.Type">
            <summary>
            The type of protocol to use for the Proxy Server
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.Interfaces.ProxyInfo.Host">
            <summary>
            The IP Address or Host Name of the Proxy Server
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.Interfaces.ProxyInfo.Port">
            <summary>
            The port of the proxy server
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.Interfaces.ProxyInfo.UserName">
            <summary>
            The user name to use to log in to the proxy server
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.Interfaces.ProxyInfo.Password">
            <summary>
            The password to use to log in to the proxy server
            </summary>
        </member>
        <member name="T:KellermanSoftware.NetSFtpLibrary.Interfaces.ProxyType">
            <summary>
            The Protocol to use for the Proxy Server
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetSFtpLibrary.Interfaces.ProxyType.None">
            <summary>
            No proxy protocol is used
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetSFtpLibrary.Interfaces.ProxyType.Socks4">
            <summary>
            Use the socks 4 Protocol
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetSFtpLibrary.Interfaces.ProxyType.Socks5">
            <summary>
            Use the socks 5 Protocol
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetSFtpLibrary.Interfaces.ProxyType.Http">
            <summary>
            Use the HTTP Protocol
            </summary>
        </member>
        <member name="T:KellermanSoftware.NetSFtpLibrary.Interfaces.SshKeyAlgorithm">
            <summary>
            Algorithim for key usage
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.Implementation.JCraft.Util.Time_T2DateTime(System.UInt32)">
            <summary>
            Converts a time_t to DateTime
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.Implementation.JCraft.Util.stripLeadingZeros(System.Byte[])">
            Utility method to delete the leading zeros from the modulus.
            @param a modulus
            @return modulus
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.Implementation.SftpException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.NetSFtpLibrary.Implementation.SftpException"/> class.
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.Implementation.SftpException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.NetSFtpLibrary.Implementation.SftpException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.Implementation.SftpException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.NetSFtpLibrary.Implementation.SftpException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="T:KellermanSoftware.NetSFtpLibrary.AsyncException">
            <summary>
            FTP Operation attempted while asynchronous operation in progress.
            Instantiate another FTP object to perform multiple asynchronous operations.
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.AsyncException.#ctor(System.String)">
            <summary>
            Message Constructor
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.AsyncException.#ctor(System.String,System.Exception)">
            <summary>
            Message/Inner Exception Constructor
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:KellermanSoftware.NetSFtpLibrary.SFTP">
            <summary>
            Connect to an SSH Server and perform file operations
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetSFtpLibrary.SFTP._filesToTransfer">
            <summary>
            The files and directories to be Transferred
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.SFTP.IgnoreDirectoriesWithNoPermission">
            <summary>
            By default, local directories that do not have permission to be read will throw an unauthorized exception.  Setting this flag ignores those errors.
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.SFTP.Timeout">
            <summary>
            Gets/Sets the number of milliseconds to wait for a request from the FTP server.
            The default is to wait 30000 (30 seconds).
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.SFTP.ExactDirectoryMode">
            <summary>
            Some FTP servers do not allow root access. Kellerman FTP automatically detects this but it can be overridden.
            Example:
            _sftp.Connect();
            _sftp.CurrentDirectory="MyDirectory";
            _sftp.ExactDirectoryMode=false;
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.SFTP.LastFtpCommand">
            <summary>Return the last FTP Command Attempted.</summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            sftp.CreateDirectory("test");
            FtpCommand cmd = _sftp.LastFtpCommand;
            System.Console.WriteLine("Last Command: {0}, Parameters: {1}", cmd.Command, cmd.Param);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            sftp.CreateDirectory("test")
            Dim cmd As FtpCommand = _sftp.LastFtpCommand
            System.Console.WriteLine("Last Command: {0}, Parameters: {1}", cmd.Command, cmd.Param)
                </code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.SFTP.LastFtpResponse">
            <summary>Return the last FTP Response from the server.</summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            sftp.CreateDirectory("test");
            FtpResponse response = _sftp.LastFtpResponse;
            System.Console.WriteLine("Last Response Code: {0}, Full Text Response: {1}", response.Code, response.Text);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            sftp.CreateDirectory("test")
            Dim response As FtpResponse = _sftp.LastFtpResponse
            System.Console.WriteLine("Last Response Code: {0}, Full Text Response: {1}", response.Code, response.Text)
                </code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.SFTP.CurrentDirectory">
            <summary>Specifies the current FTP directory.</summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            // gets or sets the current directory for the ftp server.
            // / represents the root of the ftp file system
            sftp.CurrentDirectory = "/";
            System.Console.WriteLine("Current directory is {0}", sftp.CurrentDirectory);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            ' gets or sets the current directory for the ftp server.
            ' / represents the root of the ftp file system
            sftp.CurrentDirectory = "/"
            System.Console.WriteLine("Current directory is {0}", sftp.CurrentDirectory)
                </code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.SFTP.CustomLogger">
            <summary>
            Attach a custom logger for logging
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.SFTP.AsyncInProgress">
            <summary>
            If true there is an Asynchronous tranfer in progress
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.SFTP.CurrentDirectoryBeingTransferred">
            <summary>
            The name of the current directory being transferred (the source directory name).
            This property is filled durring asynchronous uploads/downloads for directories. For
            single file operations, this property is string.empty.
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            sftp.UploadDirectoryAsync("C:\\Download", "TestDir");
             
            System.Threading.Thread.Sleep(300);
             
            //Gets  The name of the current directory being transferred (the source directory name) This property is filled durring asynchronous uploads/downloads for directories Do NOT show the host name in this property as part of the path For single file operations, this property is string.empty 
            //This property is filled durring asynchronous uploads/downloads for directories 
            //Does NOT show the host name in this property as part of the path 
            //For single file operations, this property is string.empty 
            System.Console.WriteLine("Current asynchronously Transferred directory is {0}", sftp.CurrentDirectoryBeingTransferred);
             
            // we wait while this operation takes place
            while (sftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("TestDir has now {0} KB", sftp.GetDirectorySize("TestDir") / 1024);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            sftp.UploadDirectoryAsync("C:\\Download", "TestDir")
             
            System.Threading.Thread.Sleep(300)
             
            'Gets  The name of the current directory being transferred (the source directory name) This property is filled durring asynchronous uploads/downloads for directories Do NOT show the host name in this property as part of the path For single file operations, this property is string.empty 
            'This property is filled durring asynchronous uploads/downloads for directories 
            'Does NOT show the host name in this property as part of the path 
            'For single file operations, this property is string.empty 
            System.Console.WriteLine("Current asynchronously Transferred directory is {0}", sftp.CurrentDirectoryBeingTransferred)
             
            ' we wait while this operation takes place
            Do While sftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("TestDir has now {0} KB", sftp.GetDirectorySize("TestDir") / 1024)
                </code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.SFTP.CurrentDirectoryNumber">
            <summary>
            When uploading/downloading directories this is the number of the current
            directory or subdirectory being transferred.
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            sftp.UploadDirectoryAsync("C:\\Download", "TestDir");
             
            System.Threading.Thread.Sleep(300);
             
            //When uploading/downloading directories this is the number of the current 
            //directory being transferred 
            System.Console.WriteLine("Current directory number is {0}", sftp.CurrentDirectoryNumber);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            sftp.UploadDirectoryAsync("C:\\Download", "TestDir")
             
            System.Threading.Thread.Sleep(300)
             
            'When uploading/downloading directories this is the number of the current 
            'directory being transferred 
            System.Console.WriteLine("Current directory number is {0}", sftp.CurrentDirectoryNumber)
                </code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.SFTP.CurrentFileBeingTransferred">
            <summary>
            The name of the current file being transferred. This property is filled during
            asynchronous uploads/downloads.
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            sftp.UploadDirectoryAsync("C:\\Download", "TestDir");
             
            System.Threading.Thread.Sleep(300);
             
            //The name of the current file being transferred (the destination file name) 
            //This property is filled durring asynchronous uploads/downloads 
            System.Console.WriteLine("Current asynchronously transferred file is {0}", sftp.CurrentFileBeingTransferred);
             
            while (sftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            sftp.UploadDirectoryAsync("C:\\Download", "TestDir")
             
            System.Threading.Thread.Sleep(300)
             
            'The name of the current file being transferred (the destination file name) 
            'This property is filled durring asynchronous uploads/downloads 
            System.Console.WriteLine("Current asynchronously transferred file is {0}", sftp.CurrentFileBeingTransferred)
             
            Do While sftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
                </code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.SFTP.CurrentFileBeingTransferredDestination">
            <summary>
            The currently transferring file destination. This property is filled during
            asynchronous uploads/downloads.
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            sftp.UploadDirectoryAsync("C:\\Download", "TestDir");
             
            System.Threading.Thread.Sleep(300);
             
            //The name of the current file being transferred (the destination file name) 
            //This property is filled durring asynchronous uploads/downloads 
            System.Console.WriteLine("Current asynchronously Transferred file is {0}", sftp.CurrentFileBeingTransferredDestination);
             
            while (sftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            sftp.UploadDirectoryAsync("C:\\Download", "TestDir")
             
            System.Threading.Thread.Sleep(300)
             
            'The name of the current file being transferred (the destination file name) 
            'This property is filled durring asynchronous uploads/downloads 
            System.Console.WriteLine("Current asynchronously Transferred file is {0}", sftp.CurrentFileBeingTransferredDestination)
             
            Do While sftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
                </code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.SFTP.CurrentFileNumber">
            <summary>
            When uploading/downloading directories this is the number of the current file
            being transferred.
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            sftp.UploadDirectoryAsync("C:\\Download", "TestDir");
             
            System.Threading.Thread.Sleep(300);
             
            //When uploading/downloading directories this is the number of the current 
            //files being transferred 
            System.Console.WriteLine("Current file`s number is {0}", sftp.CurrentFileNumber);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            sftp.UploadDirectoryAsync("C:\\Download", "TestDir")
             
            System.Threading.Thread.Sleep(300)
             
            'When uploading/downloading directories this is the number of the current 
            'files being transferred 
            System.Console.WriteLine("Current file`s number is {0}", sftp.CurrentFileNumber)
                </code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.SFTP.DirectoryCount">
            <summary>
            When uploading/downloading directories, this is the total number of directories
            and sub directories to be transferred.
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            sftp.UploadDirectoryAsync("C:\\Download", "TestDir");
             
            System.Threading.Thread.Sleep(300);
             
            //When uploading/downloading directories this is the total directories and subdirectories to transfer
            System.Console.WriteLine("Count of directories is {0}", sftp.DirectoryCount);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            sftp.UploadDirectoryAsync("C:\\Download", "TestDir")
             
            System.Threading.Thread.Sleep(300)
             
            'When uploading/downloading directories this is the total directories and subdirectories to transfer
            System.Console.WriteLine("Count of directories is {0}", sftp.DirectoryCount)
                </code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.SFTP.EstimatedTimeRemaining">
            <summary>
            During a file/directory transfer operation, this is the time that remains. This
            is calculated by the average KB/Second and the remaining bytes to transfer.
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            sftp.UploadDirectoryAsync("C:\\Download", "TestDir");
             
            //we wait 1 second for data to be Transferred 
            System.Threading.Thread.Sleep(1000);
             
            //During a file/directory transfer operation, this is the time that remains 
            //This is calculated by the average KB/Second and the remaining bytes to transfer 
            System.Console.WriteLine("Estimated Time Remaining  is {0}", sftp.EstimatedTimeRemaining);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            sftp.UploadDirectoryAsync("C:\\Download", "TestDir")
             
            'we wait 1 second for data to be Transferred 
            System.Threading.Thread.Sleep(1000)
             
            'During a file/directory transfer operation, this is the time that remains 
            'This is calculated by the average KB/Second and the remaining bytes to transfer 
            System.Console.WriteLine("Estimated Time Remaining  is {0}", sftp.EstimatedTimeRemaining)
                </code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.SFTP.FileCount">
            <summary>
            When uploading/downloading directories this is the total number of files to be
            transferred.
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            sftp.UploadDirectoryAsync("C:\\Download", "TestDir");
             
            System.Threading.Thread.Sleep(300);
             
            //When uploading/downloading directories this is the total number of files to transfer
            System.Console.WriteLine("File count is {0}", sftp.FileCount);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            sftp.UploadDirectoryAsync("C:\\Download", "TestDir")
             
            System.Threading.Thread.Sleep(300)
             
            'When uploading/downloading directories this is the total number of files to transfer
            System.Console.WriteLine("File count is {0}", sftp.FileCount)
                </code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.SFTP.ReadWriteTimeout">
            <summary>
            Gets/Sets the timeout in milliseconds when reading/writing to a local file stream
            or network stream. The default is to wait 30000 (30 seconds).
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            sftp.ReadWriteTimeout = 30000; //30 seconds
             
            //Gets/Sets the timeout when reading/writing to a stream 
            System.Console.WriteLine("The FTP component will trigger an exception if reading/writing from/to a stream takes more than {0} milliseconds", sftp.ReadWriteTimeout);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            sftp.ReadWriteTimeout = 30000 '30 seconds
             
            'Gets/Sets the timeout when reading/writing to a stream 
            System.Console.WriteLine("The FTP component will trigger an exception if reading/writing from/to a stream takes more than {0} milliseconds", sftp.ReadWriteTimeout)
                </code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.SFTP.HostAddress">
            <summary>Specifies the host name or IP Address of the FTP Server.</summary>
            <example>
            	<code lang="CS">
            // this is for the trial version. Uncomment and use the version you need
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
             
            System.Console.WriteLine("The SSH server is {0}", sftp.HostAddress);
                </code>
            	<code lang="VB">
            ' this is for the trial version. Uncomment and use the version you need
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
             
            System.Console.WriteLine("The SSH server is {0}", sftp.HostAddress)
                </code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.SFTP.HourDifference">
            <summary>
            The difference in hours between the local time and the FTP Server Time. See the
            CalcHourDifference to automatically calculate the hour difference between the local PC
            and the FTP Server.
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Calculate the hour difference between this PC and the FTP Server
            sftp.CalcHourDifference();
            System.Console.WriteLine("The difference in hours is {0}", sftp.HourDifference);
            </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Calculate the hour difference between this PC and the FTP Server
            sftp.CalcHourDifference()
            System.Console.WriteLine("The difference in hours is {0}", sftp.HourDifference)
            </code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.SFTP.IsBusy">
            <summary>Returns true when any FTP operation is in progress.</summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            sftp.UploadDirectoryAsync("C:\\Download", "TestDir");
             
            // Returns true when any FTP operation is in progress 
            System.Console.WriteLine("There are {0} FTP operations in progress ", sftp.IsBusy == true ? "some" : "no");
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            sftp.UploadDirectoryAsync("C:\\Download", "TestDir")
             
            ' Returns true when any FTP operation is in progress 
            If sftp.IsBusy = True Then
                System.Console.WriteLine("There are {0} FTP operations in progress ","some")
            Else
                System.Console.WriteLine("There are {0} FTP operations in progress ","no")
            End If
                </code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.SFTP.KiloByteAverage">
            <summary>
            During a file or directory transfer operation, this is the average transfer rate
            in KB/Sec.
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            sftp.UploadDirectory("C:\\Download", "TestDir");
             
            //During a file or directory transfer operation, this is the averate transfer rate in KB/Sec 
            System.Console.WriteLine("Estimated average speed is {0}(KBS)", sftp.KiloByteAverage);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            sftp.UploadDirectory("C:\\Download", "TestDir")
             
            'During a file or directory transfer operation, this is the average transfer rate in KB/Sec 
            System.Console.WriteLine("Estimated average speed is {0}(KBS)", sftp.KiloByteAverage)
                </code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.SFTP.KiloBytePeak">
            <summary>
            During a file or directory transfer operation, this is the highest transfer rate
            in KB/Sec.
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            sftp.UploadDirectory("C:\\Download", "TestDir");
             
            //During a file or directory transfer operation, this is the highest transfer rate in KB/Sec             
            System.Console.WriteLine("The highest transfer rate for the current operation is {0}(KBS)", sftp.KiloBytePeak);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            sftp.UploadDirectory("C:\\Download", "TestDir")
             
            'During a file or directory transfer operation, this is the highest transfer rate in KB/Sec             
            System.Console.WriteLine("The highest transfer rate for the current operation is {0}(KBS)", sftp.KiloBytePeak)
                </code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.SFTP.KiloBytePerSecond">
            <summary>This is the current speed of a file or directory transfer in KB/Sec.</summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            sftp.UploadDirectory("C:\\Download", "TestDir");
              
            //This is the current speed of a file or directory transfer in KB/Sec 
            System.Console.WriteLine("Current speed is {0}(KBS)", sftp.KiloBytePerSecond);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            sftp.UploadDirectory("C:\\Download", "TestDir")
             
            'This is the current speed of a file or directory transfer in KB/Sec 
            System.Console.WriteLine("Current speed is {0}(KBS)", sftp.KiloBytePerSecond)
                </code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.SFTP.KiloBytePerSecThrottle">
            <summary>
            This is the maximum number of KB/Sec of bandwidth that the FTP component will use
            If zero, it will transfer at top speed.
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            // This is the maximum number of KB/Sec of bandwidth that the FTP component will use 
            // If zero, it will transfer at top speed 
            sftp.KiloBytePerSecThrottle = new Decimal(19.5m);
             
            sftp.UploadDirectoryAsync("C:\\Download", "TestDir");
             
            //we wait 1 second for data to be Transferred 
            System.Threading.Thread.Sleep(1000);
             
            System.Console.WriteLine("Current bandwidth allocation for the ftp transfer is {0}(KBS)", sftp.KiloBytePerSecThrottle);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            ' This is the maximum number of KB/Sec of bandwidth that the FTP component will use 
            ' If zero, it will transfer at top speed 
            sftp.KiloBytePerSecThrottle = New Decimal(19.5D)
             
            sftp.UploadDirectoryAsync("C:\\Download", "TestDir")
             
            'we wait 1 second for data to be Transferred 
            System.Threading.Thread.Sleep(1000)
             
            System.Console.WriteLine("Current bandwidth allocation for the ftp transfer is {0}(KBS)", sftp.KiloBytePerSecThrottle)
                </code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.SFTP.KiloBytesSkipped">
            <summary>
            When synchronizing, or when not overwriting files, this is the current number of
            bytes that didn't need to be transferred.
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            sftp.OverwriteFiles = false; //The default is true
            sftp.OverwriteReadOnlyFiles = false; //The default is false
            sftp.SynchronizeDownload("C://Downloads", "TestDir");
             
            //if a.txt exists on both folders its size will show up in the KiloBytesSkipped property
             
            //When synchronizing, or when not overwriting files,
            //this is the current number of bytes that didn't need to be transferred 
            System.Console.WriteLine("The FTP component did not have to transfer {0}(KB)", sftp.KiloBytesSkipped);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            sftp.OverwriteFiles = False 'The default is true
            sftp.OverwriteReadOnlyFiles = False 'The default is false
            sftp.SynchronizeDownload("C://Downloads", "TestDir")
             
            'if a.txt exists on both folders its size will show up in the KiloBytesSkipped property
             
            'When synchronizing, or when not overwriting files,
            'this is the current number of bytes that didn't need to be transferred 
            System.Console.WriteLine("The FTP component did not have to transfer {0}(KB)", sftp.KiloBytesSkipped)
                </code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.SFTP.LastException">
            <summary>
            Get the last exception that occurred during an FTP Operation. This value is
            automatically set to null each time a new FTP Session is Connected. The default for
            this property is null.
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.SFTP.MaskUserNamePassword">
            <summary>
            If true, the user name and password will be replaced with **** when logging, otherwise they will be displayed.
            The default is true.
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.SFTP.OverwriteFiles">
            <summary>
            If a file already exists locally it will be overwritten during a download. The
            default for this property is false.
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //If a file already exists locally it will be overwritten durring a download 
            sftp.OverwriteFiles = true;
            System.Console.WriteLine("A file that already exist will {0} durring a download ", sftp.OverwriteFiles == true ? "be overwritten" : "not be overwritten");
             
            sftp.DownloadFile("a.txt", "a.txt");
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'If a file already exists locally it will be overwritten durring a download 
            sftp.OverwriteFiles = True
            If sftp.OverwriteFiles = True Then
                System.Console.WriteLine("A file that already exist will {0} durring a download ","be overwritten")
            Else
                System.Console.WriteLine("A file that already exist will {0} durring a download ","not be overwritten")
            End If
             
            sftp.DownloadFile("a.txt", "a.txt")
                </code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.SFTP.OverwriteReadOnlyFiles">
            <summary>
            If a local file is a read only file it will be overwritten durring a download.
            The default for this property is false.
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //If a local file is a read only file it will be overwritten durring a download 
            sftp.OverwriteReadOnlyFiles = false;
            System.Console.WriteLine("A readonly file that already exist will {0} durring a download ", sftp.OverwriteReadOnlyFiles == true ? "be overwritten" : "not be overwritten");
             
            sftp.DownloadFile("a.txt", "a.txt");
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'If a local file is a read only file it will be overwritten durring a download 
            sftp.OverwriteReadOnlyFiles = False
            If sftp.OverwriteReadOnlyFiles = True Then
                System.Console.WriteLine("A readonly file that already exist will {0} durring a download ","be overwritten")
            Else
                System.Console.WriteLine("A readonly file that already exist will {0} durring a download ","not be overwritten")
            End If
             
            sftp.DownloadFile("a.txt", "a.txt")
                </code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.SFTP.ParentDirectory">
            <summary>
            Returns the parent directory for the current directory or the root
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            sftp.CreateDirectory("test");
            sftp.CurrentDirectory = "/test";
            sftp.CreateDirectory("testSub");
            sftp.CurrentDirectory = "/ZTEST/ZTESTSub";
             
            Console.WriteLine("The parent directory is {0}",sftp.ParentDirectory);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            sftp.CreateDirectory("test")
            sftp.CurrentDirectory = "/test"
            sftp.CreateDirectory("testSub")
            sftp.CurrentDirectory = "/ZTEST/ZTESTSub"
             
            Console.WriteLine("The parent directory is {0}",sftp.ParentDirectory)
                </code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.SFTP.Password">
            <summary>Specifies the password to use while communicating with the FTP Server.</summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            sftp.Password = "anonymous@johnDoes.com"; // email as password for anonymous users
             
            System.Console.WriteLine("The login password  is {0}", sftp.Password);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            sftp.Password = "anonymous@johnDoes.com" ' email as password for anonymous users
             
            System.Console.WriteLine("The login password  is {0}", sftp.Password)
                </code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.SFTP.PercentComplete">
            <summary>
            The percent complete for the overall transfer
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.SFTP.Port">
            <summary>Specifies the port to communicate with the FTP Server. The default is 21.</summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            // set the port on which the ftp server listens
            sftp.Port = 21; // default is 21
             
            System.Console.WriteLine("The servers port is {0}", sftp.Port);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            ' set the port on which the ftp server listens
            sftp.Port = 21 ' default is 21
             
            System.Console.WriteLine("The servers port is {0}", sftp.Port)
                </code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.SFTP.Proxy">
            <summary>
            Hold Information about the FTP Proxy Server. Socks 5 is normally used for proxy
            servers with port 1080. The older Socks 4 is supported, this also normally operates on
            port 1080.
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // Set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace With your user name
            sftp.Password = "user@mail.com"; // replace With your password
             
            ProxyInfo proxy = New ProxyInfo();
            proxy.Type = ProxyType.Socks5;
            proxy.Host = "localhost";
            proxy.UserName = "admin";
            proxy.Password = "secret";
            proxy.Port = 1080;
            sftp.Proxy = proxy;
            sftp.Connect();
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            Dim proxy As ProxyInfo = New ProxyInfo()
            proxy.Type = ProxyType.Socks5
            proxy.Host = "localhost"
            proxy.UserName = "admin"
            proxy.Password = "secret"
            proxy.Port = 1080
            sftp.Proxy = proxy
            sftp.Connect()
                </code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.SFTP.RestartSupported">
            <summary>
            By default the .NET FTP Library assumes your FTP Server supports the REST command when connections are lost.
            If set to false, the entire file is re-transfered when the connection is lost
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.SFTP.RetryTimeout">
            <summary>
            Retry timeout in milliseconds if a network connection drops. The default is to
            wait 5 minutes if the network drops and then retry an upload or download from the last
            byte position. If no retry is desired set to -1.
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            sftp.RetryTimeout = 300000; //5 minutes
             
            //Gets/Sets the time to wait to retry when the network connection drops
            System.Console.WriteLine("The FTP component will retry a download if the network connection drops for {0} milliseconds", sftp.RetryTimeout);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            sftp.RetryTimeout = 300000 '5 minutes
             
            'Gets/Sets the time to wait to retry when the network connection drops
            System.Console.WriteLine("The FTP component will retry a download if the network connection drops for {0} milliseconds", sftp.RetryTimeout)
                </code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.SFTP.SessionGuid">
            <summary>
            Uniquely identifies this instantiated FTP object
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.SFTP.SkippedFiles">
            <summary>
            When synchronizing, or when not overwriting files, this is the current number of
            files that didn't need to be transferred.
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            sftp.OverwriteFiles = false; //The default is true
            sftp.OverwriteReadOnlyFiles = false; //The default is false
            sftp.SynchronizeDownload("C:\\Download", "TestDir");
             
            //if a.txt exists on both folders and if its the same file, there will be no need to
            // transfer it
             
            // When synchronizing, or when not overwriting files, 
            //  this is the current number of files that didn't need to be transferred 
            System.Console.WriteLine("The FTP component did not have to transfer {0} files", sftp.SkippedFiles);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            sftp.OverwriteFiles = False 'The default is true
            sftp.OverwriteReadOnlyFiles = False 'The default is false
            sftp.SynchronizeDownload("C:\\Download", "TestDir")
             
            'if a.txt exists on both folders and if its the same file, there will be no need to
            ' transfer it
             
            ' When synchronizing, or when not overwriting files, 
            '  this is the current number of files that didn't need to be transferred 
            System.Console.WriteLine("The FTP component did not have to transfer {0} files", sftp.SkippedFiles)
                </code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.SFTP.TimeElapsed">
            <summary>
            During a file/directory transfer operation, this is the time that has
            elapsed.
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            sftp.UploadDirectoryAsync("C:\\Download", "TestDir");
             
            //we wait 1 second for data to be Transferred 
            System.Threading.Thread.Sleep(1000);
             
            //During a file/directory transfer operation, this is the time that has elapsed 
            System.Console.WriteLine("The currents operation elapsed time is {0}", sftp.TimeElapsed);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            sftp.UploadDirectoryAsync("C:\\Download", "TestDir")
             
            'we wait 1 second for data to be Transferred 
            System.Threading.Thread.Sleep(1000)
             
            'During a file/directory transfer operation, this is the time that has elapsed 
            System.Console.WriteLine("The currents operation elapsed time is {0}", sftp.TimeElapsed)
                </code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.SFTP.TimeZoneList">
            <summary>
            Return a list of all the time zones and their GMT offset. This can be used to
            populate a drop down list similar to the Date Property Dialog in Windows XP or Windows
            Vista.
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Return a list of all the time zones and their GMT offset Used to populate a drop down 
            // list similar to the Date Property Dialog in Windows XP 
            System.Console.WriteLine("The FTP component`s registered time zones are");
             
            foreach (string timezone in sftp.TimeZoneList.Keys)
            {
                System.Console.WriteLine(timezone);
            }
                </code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.SFTP.UserName">
            <summary>Specifies the user name to use while communicating with the FTP Server.</summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the user name to use against the ftp server
            sftp.UserName  = "anonymous"; // anonymous user
             
            System.Console.WriteLine("The login user  is {0}", sftp.UserName );
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the user name to use against the ftp server
            sftp.UserName  = "anonymous" ' anonymous user
             
            System.Console.WriteLine("The login user  is {0}", sftp.UserName )
                </code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.SFTP.BytesSkipped">
            <summary>
            The number of bytes that were skipped during a Syncronize Upload or Download because the files were the same
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.SFTP.IsCancelled">
            <summary>
            If true, the SFTP operation has been cancelled
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.SFTP.ImplicitConnection">
            <summary>
            If false, the user Explicitly connected 
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.SFTP.LastSuccessfulTime">
            <summary>
            The last time we made a successfull connection
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.SFTP.RetryInfo">
            <summary>
            Information about what to retry for a failed FTP Async Operation
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.SFTP.CustomObject">
            <summary>
            Custom object that the user sets during an async transfer
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.UploadFilesInParallelAsync(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
             Upload files in Parallel as an Async Task using two threads with two SFTP connections
            </summary>
            <param name="files">The key of the dictionary is the local file path and the value is the sftp file path</param>
            <returns></returns>
            <example>
              <code title="Example" description="" lang="CS">
            //Create some test files to upload
            Dictionary&lt;string, string&gt; files = new Dictionary&lt;string, string&gt;();
             
            for (int i = 0; i &lt; 10; i++)
            {
                string filePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "uploadfile" + i + ".txt");
                File.WriteAllText(filePath, "This is a test");
                files.Add(filePath, Path.GetFileName(filePath));
            }
             
            Stopwatch watch = new Stopwatch();
             
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SFTP server( its URL )
            sftp.HostAddress = "sftp.fsz.bme.hu"; // a hungarian university. change this to your sftp server
            sftp.UserName = "anonymus"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            sftp.EnableLogging();
            sftp.Connect();
             
            sftp.CurrentDirectory = "/TestDir";
             
            await sftp.UploadFilesInParallelAsync(files);
                    
            sftp.Disconnect();</code>
              <code title="Example2" description="" lang="VB.NET">
            'Create some test files to upload
            Dim files As New Dictionary(Of String, String)()
             
            For i As Integer = 0 To 9
                Dim filePath As String = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "uploadfile" &amp; i &amp; ".txt")
                File.WriteAllText(filePath, "This is a test")
                files.Add(filePath, Path.GetFileName(filePath))
            Next i
             
            Dim watch As New Stopwatch()
             
            Dim sftp As New SFTP() 'Trial Mode
            'SFTP sftp = new SFTP("place user name here", "place license key here");
             
            ' set the name of the SFTP server( its URL )
            sftp.HostAddress = "sftp.fsz.bme.hu" ' a hungarian university. change this to your sftp server
            sftp.UserName = "anonymus" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            sftp.EnableLogging()
            sftp.Connect()
             
            sftp.CurrentDirectory = "/TestDir"
             
            await sftp.UploadFilesInParallelAsync(files)
             
            sftp.Disconnect()</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.UploadFilesInParallel(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Upload files in Parallel using two threads with two SFTP connections
            </summary>
            <param name="files">The key of the dictionary is the local file path and the value is the sftp file path</param>
            <example>
              <code title="Example" description="" lang="CS">
            //Create some test files to upload
            Dictionary&lt;string, string&gt; files = new Dictionary&lt;string, string&gt;();
             
            for (int i = 0; i &lt; 10; i++)
            {
                string filePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "uploadfile" + i + ".txt");
                File.WriteAllText(filePath, "This is a test");
                files.Add(filePath, Path.GetFileName(filePath));
            }
             
            Stopwatch watch = new Stopwatch();
             
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SFTP server( its URL )
            sftp.HostAddress = "sftp.fsz.bme.hu"; // a hungarian university. change this to your sftp server
            sftp.UserName = "anonymus"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            sftp.EnableLogging();
            sftp.Connect();
             
            sftp.CurrentDirectory = "/TestDir";
             
            sftp.UploadFilesInParallel(files);
                    
            sftp.Disconnect();</code>
              <code title="Example2" description="" lang="VB.NET">
            'Create some test files to upload
            Dim files As New Dictionary(Of String, String)()
             
            For i As Integer = 0 To 9
                Dim filePath As String = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "uploadfile" &amp; i &amp; ".txt")
                File.WriteAllText(filePath, "This is a test")
                files.Add(filePath, Path.GetFileName(filePath))
            Next i
             
            Dim watch As New Stopwatch()
             
            Dim sftp As New SFTP() 'Trial Mode
            'SFTP sftp = new SFTP("place user name here", "place license key here");
             
            ' set the name of the SFTP server( its URL )
            sftp.HostAddress = "sftp.fsz.bme.hu" ' a hungarian university. change this to your sftp server
            sftp.UserName = "anonymus" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            sftp.EnableLogging()
            sftp.Connect()
             
            sftp.CurrentDirectory = "/TestDir"
             
            sftp.UploadFilesInParallel(files)
             
            sftp.Disconnect()</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.DownloadFilesInParallelAsync(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Download files in Parallel as an Async Task using two threads with two SFTP connections
            </summary>
            <param name="files">The key of the dictionary is the local file path and the value is the sftp file path</param>
            <returns></returns>
            <example>
              <code title="Example" description="" lang="CS">
            //Create some test files
            Dictionary&lt;string, string&gt; files = new Dictionary&lt;string, string&gt;();
             
            for (int i = 0; i &lt; 10; i++)
            {
                string filePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "uploadfile" + i + ".txt");
                File.WriteAllText(filePath, "This is a test");
                files.Add(filePath, Path.GetFileName(filePath));
            }
             
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SFTP server( its URL )
            sftp.HostAddress = "sftp.fsz.bme.hu"; // a hungarian university. change this to your sftp server
            sftp.UserName = "anonymus"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            sftp.Connect();
             
            sftp.CurrentDirectory = "/";
             
            await sftp.UploadFilesInParallelAsync(files);
             
            //Delete local files
            foreach (var file in files)
            {
                File.Delete(file.Key);
            }
             
            await sftp.DownloadFilesInParallelAsync(files);
             
            sftp.Disconnect();</code>
              <code title="Example2" description="" lang="VB.NET">
            'Create some test files
            Dim files As New Dictionary(Of String, String)()
             
            For i As Integer = 0 To 9
                Dim filePath As String = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "uploadfile" &amp; i &amp; ".txt")
                File.WriteAllText(filePath, "This is a test")
                files.Add(filePath, Path.GetFileName(filePath))
            Next i
             
            Dim sftp As New SFTP() 'Trial Mode
            'SFTP sftp = new SFTP("place user name here", "place license key here");
             
            ' set the name of the SFTP server( its URL )
            sftp.HostAddress = "sftp.fsz.bme.hu" ' a hungarian university. change this to your sftp server
            sftp.UserName = "anonymus" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            sftp.Connect()
             
            sftp.CurrentDirectory = "/"
             
            await sftp.UploadFilesInParallelAsync(files)
             
            'Delete local files
            For Each file In files
                System.IO.File.Delete(file.Key)
            Next file
             
            await sftp.DownloadFilesInParallelAsync(files)
             
            sftp.Disconnect()</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.DownloadFilesInParallel(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Download files in Parallel using two threads with two SFTP connections
            </summary>
            <param name="files">The key of the dictionary is the local file path and the value is the sftp file path</param>
            <example>
              <code title="Example" description="" lang="CS">
            //Create some test files
            Dictionary&lt;string, string&gt; files = new Dictionary&lt;string, string&gt;();
             
            for (int i = 0; i &lt; 10; i++)
            {
                string filePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "uploadfile" + i + ".txt");
                File.WriteAllText(filePath, "This is a test");
                files.Add(filePath, Path.GetFileName(filePath));
            }
             
            Stopwatch watch = new Stopwatch();
             
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SFTP server( its URL )
            sftp.HostAddress = "sftp.fsz.bme.hu"; // a hungarian university. change this to your sftp server
            sftp.UserName = "anonymus"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            sftp.Connect();
             
            sftp.CurrentDirectory = "/";
             
            sftp.UploadFilesInParallel(files);
             
            //Delete local files
            foreach (var file in files)
            {
                File.Delete(file.Key);
            }
             
            sftp.DownloadFilesInParallel(files);
             
            sftp.Disconnect();</code>
              <code title="Example2" description="" lang="VB.NET">
            'Create some test files
            Dim files As New Dictionary(Of String, String)()
             
            For i As Integer = 0 To 9
                Dim filePath As String = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "uploadfile" &amp; i &amp; ".txt")
                File.WriteAllText(filePath, "This is a test")
                files.Add(filePath, Path.GetFileName(filePath))
            Next i
             
            Dim watch As New Stopwatch()
             
            Dim sftp As New SFTP() 'Trial Mode
            'SFTP sftp = new SFTP("place user name here", "place license key here");
             
            ' set the name of the SFTP server( its URL )
            sftp.HostAddress = "sftp.fsz.bme.hu" ' a hungarian university. change this to your sftp server
            sftp.UserName = "anonymus" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            sftp.Connect()
             
            sftp.CurrentDirectory = "/"
             
            sftp.UploadFilesInParallel(files)
             
            'Delete local files
            For Each file In files
                System.IO.File.Delete(file.Key)
            Next file
             
            sftp.DownloadFilesInParallel(files)
             
            sftp.Disconnect()</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.DownloadDirectoryInParallel(System.String,System.String)">
            <summary>
            Download a directory and all subdirectories in Parallel using two threads and two SFTP connections
            </summary>
            <param name="localDirectory">The local path to put the directory</param>
            <param name="sftpDirectory">The SFTP directory to download</param>
            <returns>A list of files transferred</returns>
            <example>
              <code title="Example" description="" lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SFTP server( its URL )
            sftp.HostAddress = "sftp.fsz.bme.hu"; // a hungarian university. change this to your sftp server
            sftp.UserName = "anonymus"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            sftp.EnableLogging();
             
            sftp.Connect();
             
            sftp.CurrentDirectory = "/";
             
            sftp.DownloadDirectoryInParallel("C:\\Download", "TestDir");
             
            sftp.Disconnect();</code>
              <code title="Example2" description="" lang="VB.NET">
            Dim sftp As New SFTP() 'Trial Mode
            'SFTP sftp = new SFTP("place user name here", "place license key here");
             
            ' set the name of the SFTP server( its URL )
            sftp.HostAddress = "sftp.fsz.bme.hu" ' a hungarian university. change this to your sftp server
            sftp.UserName = "anonymus" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            sftp.EnableLogging()
             
            sftp.Connect()
             
            sftp.CurrentDirectory = "/"
             
            sftp.DownloadDirectoryInParallel("C:\Download", "TestDir")
             
            sftp.Disconnect()</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.DownloadDirectoryInParallelAsync(System.String,System.String)">
            <summary>
            Download a directory and all subdirectories in Parallel using two threads and two SFTP connections
            </summary>
            <param name="localDirectory">The local path to put the directory</param>
            <param name="sftpDirectory">The SFTP directory to download</param>
            <returns>A list of files transferred</returns>
            <example>
              <code title="Example" description="" lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SFTP server( its URL )
            sftp.HostAddress = "sftp.fsz.bme.hu"; // a hungarian university. change this to your sftp server
            sftp.UserName = "anonymus"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            sftp.EnableLogging();
             
            sftp.Connect();
             
            sftp.CurrentDirectory = "/";
             
            await sftp.DownloadDirectoryInParallelAsync("C:\\Download", "TestDir");
             
            sftp.Disconnect();</code>
              <code title="Example2" description="" lang="VB.NET">
            Dim sftp As New SFTP() 'Trial Mode
            'SFTP sftp = new SFTP("place user name here", "place license key here");
             
            ' set the name of the SFTP server( its URL )
            sftp.HostAddress = "sftp.fsz.bme.hu" ' a hungarian university. change this to your sftp server
            sftp.UserName = "anonymus" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            sftp.EnableLogging()
             
            sftp.Connect()
             
            sftp.CurrentDirectory = "/"
             
            await sftp.DownloadDirectoryInParallelAsync("C:\Download", "TestDir")
             
            sftp.Disconnect()</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.UploadDirectoryInParallelAsync(System.String,System.String)">
            <summary>
            Download a directory and all sub directories in parallel using two threads and two SFTP connections
            </summary>
            <param name="localDirectory">The local path to put the directory</param>
            <param name="sftpDirectory">The SFTP directory to download</param>
            <returns>A list of files transferred</returns>
            <example>
              <code title="Example" description="" lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SFTP server( its URL )
            sftp.HostAddress = "sftp.fsz.bme.hu"; // a hungarian university. change this to your sftp server
            sftp.UserName = "anonymus"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            sftp.EnableLogging();
            sftp.Connect();
             
            sftp.CurrentDirectory = "/";
             
            await sftp.UploadDirectoryInParallelAsync("C:\\Download", "TestDir");
             
            sftp.Disconnect();</code>
              <code title="Example2" description="" lang="VB.NET">
            Dim sftp As New SFTP() 'Trial Mode
            'SFTP sftp = new SFTP("place user name here", "place license key here");
             
            ' set the name of the SFTP server( its URL )
            sftp.HostAddress = "sftp.fsz.bme.hu" ' a hungarian university. change this to your sftp server
            sftp.UserName = "anonymus" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            sftp.EnableLogging()
            sftp.Connect()
             
            sftp.CurrentDirectory = "/"
             
            await sftp.UploadDirectoryInParallelAsync("C:\Download", "TestDir")
             
            sftp.Disconnect()</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.UploadDirectoryInParallel(System.String,System.String)">
            <summary>
            Upload a directory and all sub directories in parallel using two threads and two SFTP connections
            </summary>
            <param name="localDirectory">The local path to put the directory</param>
            <param name="sftpDirectory">The SFTP directory to download</param>
            <returns>A list of files transferred</returns>
            <example>
              <code title="Example" description="" lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SFTP server( its URL )
            sftp.HostAddress = "sftp.fsz.bme.hu"; // a hungarian university. change this to your sftp server
            sftp.UserName = "anonymus"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            sftp.EnableLogging();
            sftp.Connect();
             
            sftp.CurrentDirectory = "/";
             
            sftp.UploadDirectoryInParallel("C:\\Download", "TestDir");
             
            sftp.Disconnect();</code>
              <code title="Example2" description="" lang="VB.NET">
            Dim sftp As New SFTP() 'Trial Mode
            'SFTP sftp = new SFTP("place user name here", "place license key here");
             
            ' set the name of the SFTP server( its URL )
            sftp.HostAddress = "sftp.fsz.bme.hu" ' a hungarian university. change this to your sftp server
            sftp.UserName = "anonymus" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            sftp.EnableLogging()
            sftp.Connect()
             
            sftp.CurrentDirectory = "/"
             
            sftp.UploadDirectoryInParallel("C:\Download", "TestDir")
             
            sftp.Disconnect()</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.SortDirectoryListing(System.Collections.Generic.List{KellermanSoftware.NetSFtpLibrary.FTPFileInfo},System.Boolean,KellermanSoftware.NetSFtpLibrary.FtpSortColumn,System.Boolean)">
            <example>
            	<code title="" description="" lang="CS">SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            List&lt;FtpFileInfo&gt; sortedList= sftp.SortDirectoryListing(GetDirectoryListing(), directoriesOnTop, sftp.FtpSortColumn.FileName, true);</code>
            	<code title="" description="" lang="VB">Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            List And lt
            FtpFileInfo And gt
            sortedList= sftp.SortDirectoryListing(GetDirectoryListing(), directoriesOnTop, sftp.FtpSortColumn.FileName, True)</code>
            </example>
            <summary>Sort an FTP Directory Listing</summary>
            <param name="directoryListing">A directory listing from the GetDirectoryListing method</param>
            <param name="directoriesOnTop">Float directories to the top</param>
            <param name="sortColumn">What column to sort on</param>
            <param name="ascending">If true, sort the list ascending, otherwise sort descending</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.GetDirectoryListing(System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Get a listing of the files in the current FTP directory and filter between a start and end date
            </summary>
            <param name="startDate">Minimum date</param>
            <param name="endDate">Maximum date</param>
            <param name="showDirectories">If true, directory names are returned</param>
            <returns>A list of files</returns>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.GetDirectoryListing(System.Int64,System.Int64,System.Boolean)">
            <summary>
            Get a listing of the files in the current FTP directory between a range of bytes
            </summary>
            <param name="minSizeInBytes">Minimum file size in bytes</param>
            <param name="maxSizeInBytes">Maximum file size in bytes</param>
            <param name="showDirectories">If true, directory names are returned</param>
            <returns>A list of files</returns>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.GetDirectoryListing(System.Text.RegularExpressions.Regex,System.Boolean)">
            <summary>
            Get a listing of the files in the current FTP directory matching the passed regular expression
            </summary>
            <param name="regularExpression">Regular Expression to match</param>
            <param name="showDirectories">If true, directory names are returned</param>
            <returns>A list of files</returns>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.GetDirectoryListingAsXML(System.Collections.Generic.List{KellermanSoftware.NetSFtpLibrary.FTPFileInfo})">
            <summary>Get a directory listing as XML</summary>
            <param name="directoryListing"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.ResumeUploadStream(System.IO.Stream,System.String)">
            <example>
            	<code title="" description="" lang="CS">SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            Stream myStream = File.OpenRead("c:\\uploadfile1.txt");
            sftp.ResumeUploadStream(myStream, "uploadfile1.txt");
            myStream.Close();</code>
            	<code title="" description="" lang="VB">Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            Dim myStream As Stream = File.OpenRead("c:\uploadfile1.txt")
            sftp.ResumeUploadStream(myStream, "uploadfile1.txt")
            myStream.Close()</code>
            </example>
            <summary>Resume an upload from a local stream to an FTP file. It automatically starts at
            where it left off.</summary>
            <param name="localStream">The local file stream</param>
            <param name="ftpFileName">The FTP file name</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.ResumeUploadStreamAsync(System.IO.Stream,System.String,System.Object)">
            <summary>
            Resume an upload from a local stream to an FTP file. It automatically starts at
            where it left off.
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            Stream myStream = File.OpenRead("c:\\uploadfile1.txt");
            sftp.ResumeUploadStreamAsync(myStream, "uploadfile1.txt");
             
            while (sftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            myStream.Close();
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            Dim myStream As Stream = File.OpenRead("c:\uploadfile1.txt")
            sftp.ResumeUploadStreamAsync(myStream, "uploadfile1.txt")
             
            Do While sftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            myStream.Close()
                </code>
            </example>
            <param name="localStream">The local file stream</param>
            <param name="ftpFileName">The FTP file name</param>
            <param name="customObject">Your custom object to be returned with Started, Progress, and Completed Events</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.ResumeUploadStreamAsync(System.IO.Stream,System.String)">
            <summary>
            Resume an upload from a local stream to an FTP file. It automatically starts at
            where it left off.
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            Stream myStream = File.OpenRead("c:\\uploadfile1.txt");
            sftp.ResumeUploadStreamAsync(myStream, "uploadfile1.txt");
             
            while (sftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            myStream.Close();
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            Dim myStream As Stream = File.OpenRead("c:\uploadfile1.txt")
            sftp.ResumeUploadStreamAsync(myStream, "uploadfile1.txt")
             
            Do While sftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            myStream.Close()
                </code>
            </example>
            <param name="localStream">The local file stream</param>
            <param name="ftpFileName">The FTP file name</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.ResumeUploadFile(System.String,System.String)">
            <example>
            	<code title="" description="" lang="CS">SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            sftp.ResumeUploadFile("c:\\uploadfile1.txt", "uploadfile1.txt");</code>
            	<code title="" description="" lang="VB">Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            sftp.ResumeUploadFile("c:\uploadfile1.txt", "uploadfile1.txt")</code>
            </example>
            <summary>Resume an upload for a file synchronously using sftp.  It automatically resumes where it left off.</summary>
            <param name="localFilePath">The full path of the file, including the file name</param>
            <param name="ftpFileName">The full path of the FTP file, including the ftp directory and file name</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.ResumeUploadFileAsync(System.String,System.String,System.Object)">
            <summary>
            Resume an upload for a file asynchronously using sftp.  It automatically resumes where it left off.
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            sftp.ResumeUploadFileAsync("c:\\uploadfile1.txt", "uploadfile1.txt");
             
            while (sftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            sftp.ResumeUploadFileAsync("c:\uploadfile1.txt", "uploadfile1.txt")
             
            Do While sftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
                </code>
            </example>
            <param name="localFilePath">The full path of the file, including the file name</param>
            <param name="ftpFileName">The full path of the FTP file, including the ftp directory and file name</param>
            <param name="customObject">Your custom object to be returned with Started, Progress, and Completed Events</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.ResumeUploadFileAsync(System.String,System.String)">
            <summary>
            Resume an upload for a file asynchronously using sftp.  It automatically resumes where it left off.
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            sftp.ResumeUploadFileAsync("c:\\uploadfile1.txt", "uploadfile1.txt");
             
            while (sftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            sftp.ResumeUploadFileAsync("c:\uploadfile1.txt", "uploadfile1.txt")
             
            Do While sftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
                </code>
            </example>
            <param name="localFilePath">The full path of the file, including the file name</param>
            <param name="ftpFileName">The full path of the FTP file, including the ftp directory and file name</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.UploadStream(System.IO.Stream,System.String)">
            <summary>Upload a file stream to the SSH server synchronously.</summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            Stream myStream = File.OpenRead("c:\\uploadfile1.txt");
            sftp.UploadStream(myStream, "uploadfile1.txt");
            myStream.Close();
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            Dim myStream As Stream = File.OpenRead("c:\uploadfile1.txt")
            sftp.UploadStream(myStream, "uploadfile1.txt")
            myStream.Close()
                </code>
            </example>
            <param name="localStream">The local file stream.</param>
            <param name="ftpFileName">The ftp path to upload to.</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.UploadStream(System.IO.Stream,System.String,System.Int64)">
            <summary>Upload a file stream to the SSH server using the specified byte offset.</summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            Stream myStream = File.OpenRead("c:\\uploadfile1.txt");
            sftp.UploadStream(myStream, "uploadfile1.txt", 2500);
            myStream.Close();
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            Dim myStream As Stream = File.OpenRead("c:\uploadfile1.txt")
            sftp.UploadStream(myStream, "uploadfile1.txt", 2500)
            myStream.Close()
                </code>
            </example>
            <param name="localStream">The local file stream</param>
            <param name="ftpFileName">The FTP file path</param>
            <param name="restart">The byte offset to start at</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.UploadFile(System.String,System.String)">
            <example>
            	<code title="" description="" lang="CS">SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymus"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            System.Console.WriteLine("We are uploading the a.txt file the Current FTP folder .This is a blocking call");
             
            sftp.UploadFile("C://Download/a.txt", "a.txt");
             
            System.Console.WriteLine("a.txt {0}", sftp.FileExists("a.txt") == true ? "is on the ftp server" : "does not exist on the ftp server");</code>
            	<code title="" description="" lang="VB">Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymus" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            System.Console.WriteLine("We are uploading the a.txt file the Current FTP folder .This is a blocking call")
             
            sftp.UploadFile("C://Download/a.txt", "a.txt")
             
            If sftp.FileExists("a.txt") = True Then
                System.Console.WriteLine("a.txt {0}","is on the ftp server")
            Else
                System.Console.WriteLine("a.txt {0}","does not exist on the ftp server")
            End If</code>
            </example>
            <summary>Upload a file name synchronously using FTP</summary>
            <param name="localFilePath">The full path of the file, including the file name</param>
            <param name="ftpFileName">The full path of the FTP file, including the ftp directory and file name</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.UploadFileAsync(System.String,System.String,System.Object)">
            <summary>Upload a file asynchronously.</summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            sftp.UploadFileAsync("c:\\uploadfile1.txt","uploadfile1.txt", 2500);
             
            while (sftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            sftp.UploadFileAsync("c:\uploadfile1.txt","uploadfile1.txt", 2500)
             
            Do While sftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
                </code>
            </example>
            <param name="localFilePath">The local file path</param>
            <param name="ftpFileName">The FTP file path</param>
            <param name="customObject">Your custom object to be returned with Started, Progress, and Completed Events</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.UploadFileAsync(System.String,System.String)">
            <summary>Upload a file asynchronously.</summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            sftp.UploadFileAsync("c:\\uploadfile1.txt","uploadfile1.txt", 2500);
             
            while (sftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            sftp.UploadFileAsync("c:\uploadfile1.txt","uploadfile1.txt", 2500)
             
            Do While sftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
                </code>
            </example>
            <param name="localFilePath">The local file path</param>
            <param name="ftpFileName">The FTP file path</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.UploadStreamAsync(System.IO.Stream,System.String,System.Object)">
            <summary>
            Upload a file stream asynchronously to the SSH server
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            Stream myStream = File.OpenRead("c:\\uploadfile1.txt");
            sftp.UploadStream(myStream, "uploadfile1.txt");
             
            while (sftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            myStream.Close();
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            Dim myStream As Stream = File.OpenRead("c:\uploadfile1.txt")
            sftp.UploadStream(myStream, "uploadfile1.txt")
             
            Do While sftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            myStream.Close()
                </code>
            </example>
            <param name="localStream">The local file stream</param>
            <param name="ftpFileName">The FTP file name</param>
            <param name="customObject">Your custom object to be returned with Started, Progress, and Completed Events</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.UploadStreamAsync(System.IO.Stream,System.String)">
            <summary>
            Upload a file stream asynchronously to the SSH server
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            Stream myStream = File.OpenRead("c:\\uploadfile1.txt");
            sftp.UploadStream(myStream, "uploadfile1.txt");
             
            while (sftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            myStream.Close();
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            Dim myStream As Stream = File.OpenRead("c:\uploadfile1.txt")
            sftp.UploadStream(myStream, "uploadfile1.txt")
             
            Do While sftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            myStream.Close()
                </code>
            </example>
            <param name="localStream">The local file stream</param>
            <param name="ftpFileName">The FTP file name</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.UploadStreamAsync(System.IO.Stream,System.String,System.Int64,System.Object)">
            <summary>
            Upload a file stream asynchronously to the SSH server using the specified byte
            offset.
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            Stream myStream = File.OpenRead("c:\\uploadfile1.txt");
            sftp.UploadStream(myStream, "uploadfile1.txt", 2500);
             
            while (sftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            myStream.Close();
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            Dim myStream As Stream = File.OpenRead("c:\uploadfile1.txt")
            sftp.UploadStream(myStream, "uploadfile1.txt", 2500)
             
            Do While sftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            myStream.Close()
                </code>
            </example>
            <param name="localStream">The local file stream</param>
            <param name="ftpFileName">The FTP file name</param>
            <param name="restart">The byte offset to restart at</param>
            <param name="customObject">Your custom object to be returned with Started, Progress, and Completed Events</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.UploadStreamAsync(System.IO.Stream,System.String,System.Int64)">
            <summary>
            Upload a file stream asynchronously to the SSH server using the specified byte
            offset.
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            Stream myStream = File.OpenRead("c:\\uploadfile1.txt");
            sftp.UploadStream(myStream, "uploadfile1.txt", 2500);
             
            while (sftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            myStream.Close();
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            Dim myStream As Stream = File.OpenRead("c:\uploadfile1.txt")
            sftp.UploadStream(myStream, "uploadfile1.txt", 2500)
             
            Do While sftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            myStream.Close()
                </code>
            </example>
            <param name="localStream">The local file stream</param>
            <param name="ftpFileName">The FTP file name</param>
            <param name="restart">The byte offset to restart at</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.UploadFileAsync(System.String,System.String,System.Int64,System.Object)">
            <summary>
            Upload a file asynchronously using FTP
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            System.Console.WriteLine("We are uploading the a.txt file the Current FTP folder .This is a non-blocking call");
             
            sftp.UploadFileAsync("C://Download/a.txt", "a.txt");
             
            // we wait while this operation takes place
            while (sftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("a.txt {0}", sftp.FileExists("a.txt") == true ? "is on the ftp server" : "does not exist on the ftp server");
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            System.Console.WriteLine("We are uploading the a.txt file the Current FTP folder .This is a non-blocking call")
             
            sftp.UploadFileAsync("C://Download/a.txt", "a.txt")
             
            ' we wait while this operation takes place
            Do While sftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            If sftp.FileExists("a.txt") = True Then
                System.Console.WriteLine("a.txt {0}","is on the ftp server")
            Else
                System.Console.WriteLine("a.txt {0}","does not exist on the ftp server")
            End If
                </code>
            </example>
            <param name="localFilePath">The full path of the file, including the file name</param>
            <param name="ftpFileName">The full path of the FTP file, including the ftp directory and file name</param>
            <param name="restart">The byte offset to begin uploading</param>
            <param name="customObject">Your custom object to be returned with Started, Progress, and Completed Events</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.UploadFileAsync(System.String,System.String,System.Int64)">
            <summary>
            Upload a file asynchronously using FTP
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            System.Console.WriteLine("We are uploading the a.txt file the Current FTP folder .This is a non-blocking call");
             
            sftp.UploadFileAsync("C://Download/a.txt", "a.txt");
             
            // we wait while this operation takes place
            while (sftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("a.txt {0}", sftp.FileExists("a.txt") == true ? "is on the ftp server" : "does not exist on the ftp server");
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            System.Console.WriteLine("We are uploading the a.txt file the Current FTP folder .This is a non-blocking call")
             
            sftp.UploadFileAsync("C://Download/a.txt", "a.txt")
             
            ' we wait while this operation takes place
            Do While sftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            If sftp.FileExists("a.txt") = True Then
                System.Console.WriteLine("a.txt {0}","is on the ftp server")
            Else
                System.Console.WriteLine("a.txt {0}","does not exist on the ftp server")
            End If
                </code>
            </example>
            <param name="localFilePath">The full path of the file, including the file name</param>
            <param name="ftpFileName">The full path of the FTP file, including the ftp directory and file name</param>
            <param name="restart">The byte offset to begin uploading</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.UploadFileUnique(System.String,System.String)">
            <example>
            	<code title="" description="" lang="CS">SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            string uniqueFile = _sftp.UploadFileUnique("c:\\uploadfile1.txt", "uploadfile1.txt");
             
            System.Console.WriteLine("Unique file created is {0}",uniqueFile);</code>
            	<code title="" description="" lang="VB">Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            Dim uniqueFile As String = _sftp.UploadFileUnique("c:\uploadfile1.txt", "uploadfile1.txt")
             
            System.Console.WriteLine("Unique file created is {0}",uniqueFile)</code>
            </example>
            <summary>Upload a file with a unique file name synchronously using FTP</summary>
            <returns>The unique name</returns>
            <param name="localFilePath">The full path of the file, including the file name</param>
            <param name="ftpFileName">The full path of the FTP file, including the ftp directory and file name</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.MakeUniqueName(System.String)">
            <summary>
            Finds a unique file name that doesn't already exist
            </summary>
            <param name="name">The file name to test</param>
            <returns>A unique name</returns>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.DownloadFileAsync(System.String,System.String,System.Int64)">
            <summary>
            Download a file from the SSH server asynchronously from the specified byte
            offset.
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymus"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            System.Console.WriteLine("We are downloading the a.txt file.  This is a non blocking call");
             
            sftp.DownloadFileAsync("c:\\a.txt", "a.txt", 2500);
             
            while (sftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("{0} files have been transfered", sftp.FileCount);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymus" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            System.Console.WriteLine("We are downloading the a.txt file.  This is a non blocking call")
             
            sftp.DownloadFileAsync("c:\a.txt", "a.txt", 2500)
             
            Do While sftp.IsBusy = True
               System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("{0} files have been transfered", sftp.FileCount)
                </code>
            </example>
            <param name="localFilePath">The local file path</param>
            <param name="ftpFileName">The FTP file path</param>
            <param name="restart">The byte offset to start downloading from</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.DownloadFileAsync(System.String,System.String,System.Int64,System.Object)">
            <summary>
            Download a file from the SSH server asynchronously from the specified byte
            offset.
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymus"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            System.Console.WriteLine("We are downloading the a.txt file.  This is a non blocking call");
             
            sftp.DownloadFileAsync("c:\\a.txt", "a.txt", 2500);
             
            while (sftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("{0} files have been transfered", sftp.FileCount);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymus" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            System.Console.WriteLine("We are downloading the a.txt file.  This is a non blocking call")
             
            sftp.DownloadFileAsync("c:\a.txt", "a.txt", 2500)
             
            Do While sftp.IsBusy = True
               System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("{0} files have been transfered", sftp.FileCount)
                </code>
            </example>
            <param name="localFilePath">The local file path</param>
            <param name="ftpFileName">The FTP file path</param>
            <param name="restart">The byte offset to start downloading from</param>
            <param name="customObject">Your custom object to be returned with Started, Progress, and Completed Events</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.DownloadFileAsync(System.String,System.String,System.Object)">
            <summary>
            Download a file asynchronously
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymus"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            System.Console.WriteLine("We are downloading the a.txt file.This is a blocking call");
             
            sftp.DownloadFileAsync("c:\\a.txt", "a.txt");
             
            while (sftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("{0} files have been transfered", sftp.FileCount);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymus" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            System.Console.WriteLine("We are downloading the a.txt file.This is a blocking call")
             
            sftp.DownloadFileAsync("c:\a.txt", "a.txt")
             
            Do While sftp.IsBusy = True
               System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("{0} files have been transfered", sftp.FileCount)
                </code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.DownloadStreamAsync(System.IO.Stream,System.String,System.Int64)">
            <summary>
            Download to a file stream from the SSH server asynchronously from the specified
            byte offset.
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            Stream myStream = File.OpenWrite("c:\\uploadfile1.txt");
            sftp.DownloadStreamAsync(myStream, "uploadfile1.txt", 2500);
             
            while (sftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            myStream.Close();
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            Dim myStream As Stream = File.OpenWrite("c:\uploadfile1.txt")
            sftp.DownloadStreamAsync(myStream, "uploadfile1.txt", 2500)
             
            Do While sftp.IsBusy = True
               System.Threading.Thread.Sleep(100)
            Loop
             
            myStream.Close()
                </code>
            </example>
            <param name="localStream">The local file stream to write to</param>
            <param name="ftpFileName">The FTP file path</param>
            <param name="restart">The byte offset to start downloading from</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.DownloadStreamAsync(System.IO.Stream,System.String,System.Int64,System.Object)">
            <summary>
            Download to a file stream from the SSH server asynchronously from the specified
            byte offset.
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            Stream myStream = File.OpenWrite("c:\\uploadfile1.txt");
            sftp.DownloadStreamAsync(myStream, "uploadfile1.txt", 2500);
             
            while (sftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            myStream.Close();
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            Dim myStream As Stream = File.OpenWrite("c:\uploadfile1.txt")
            sftp.DownloadStreamAsync(myStream, "uploadfile1.txt", 2500)
             
            Do While sftp.IsBusy = True
               System.Threading.Thread.Sleep(100)
            Loop
             
            myStream.Close()
                </code>
            </example>
            <param name="localStream">The local file stream to write to</param>
            <param name="ftpFileName">The FTP file path</param>
            <param name="restart">The byte offset to start downloading from</param>
            <param name="customObject">Your custom object to be returned with Started, Progress, and Completed Events</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.DownloadStreamAsync(System.IO.Stream,System.String)">
            <summary>Download to a file stream from the SSH server asynchronously.</summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            Stream myStream = File.OpenWrite("c:\\uploadfile1.txt");
            sftp.DownloadStreamAsync(myStream, "uploadfile1.txt", 2500);
             
            while (sftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            myStream.Close();
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            Dim myStream As Stream = File.OpenWrite("c:\uploadfile1.txt")
            sftp.DownloadStreamAsync(myStream, "uploadfile1.txt", 2500)
             
            Do While sftp.IsBusy = True
               System.Threading.Thread.Sleep(100)
            Loop
             
            myStream.Close()
                </code>
            </example>
            <param name="localStream">The local file stream to write to</param>
            <param name="ftpFileName">The path of the FTP file</param>        
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.DownloadStreamAsync(System.IO.Stream,System.String,System.Object)">
            <summary>Download to a file stream from the SSH server asynchronously.</summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            Stream myStream = File.OpenWrite("c:\\uploadfile1.txt");
            sftp.DownloadStreamAsync(myStream, "uploadfile1.txt", 2500);
             
            while (sftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            myStream.Close();
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            Dim myStream As Stream = File.OpenWrite("c:\uploadfile1.txt")
            sftp.DownloadStreamAsync(myStream, "uploadfile1.txt", 2500)
             
            Do While sftp.IsBusy = True
               System.Threading.Thread.Sleep(100)
            Loop
             
            myStream.Close()
                </code>
            </example>
            <param name="localStream">The local file stream to write to</param>
            <param name="ftpFileName">The path of the FTP file</param>     
            <param name="customObject">Your custom object to be returned with Started, Progress, and Completed Events</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.ResumeDownloadFileAsync(System.String,System.String)">
            <summary>
            Resume downloading a file asynchronously. It automatically starts at where it
            left off.
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            System.Console.WriteLine("We are downloading the a.txt file.This is a blocking call");
             
            sftp.ResumeDownloadFileAsync("a.txt", "a.txt");
             
            while (sftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            System.Console.WriteLine("We are downloading the a.txt file.This is a blocking call")
             
            sftp.ResumeDownloadFileAsync("a.txt", "a.txt")
             
            Do While sftp.IsBusy = True
               System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount)
                </code>
            </example>
            <param name="localFilePath">The local file path to download to</param>
            <param name="ftpFileName">The FTP path to download from</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.ResumeDownloadFileAsync(System.String,System.String,System.Object)">
            <summary>
            Resume downloading a file asynchronously. It automatically starts at where it
            left off.
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            System.Console.WriteLine("We are downloading the a.txt file.This is a blocking call");
             
            sftp.ResumeDownloadFileAsync("a.txt", "a.txt");
             
            while (sftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            System.Console.WriteLine("We are downloading the a.txt file.This is a blocking call")
             
            sftp.ResumeDownloadFileAsync("a.txt", "a.txt")
             
            Do While sftp.IsBusy = True
               System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount)
                </code>
            </example>
            <param name="localFilePath">The local file path to download to</param>
            <param name="ftpFileName">The FTP path to download from</param>
            <param name="customObject">Your custom object to be returned with Started, Progress, and Completed Events</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.ResumeDownloadFile(System.String,System.String)">
            <example>
            	<code title="" description="" lang="CS">SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            System.Console.WriteLine("We are downloading the a.txt file.This is a blocking call");
             
            sftp.ResumeDownloadFile("a.txt", "a.txt");
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount);</code>
            	<code title="" description="" lang="VB">Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            System.Console.WriteLine("We are downloading the a.txt file.This is a blocking call")
             
            sftp.ResumeDownloadFile("a.txt", "a.txt")
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount)</code>
            </example>
            <summary>Automatically resume downloading a file where it was left off.</summary>
            <param name="localFilePath">The local file path to download to</param>
            <param name="ftpFileName">The FTP file to download</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.DownloadStream(System.IO.Stream,System.String)">
            <summary>Download to a file stream from the FTP Server synchronously.</summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            Stream myStream = File.OpenWrite("c:\\uploadfile1.txt");
            sftp.DownloadStream(myStream, "uploadfile1.txt");
             
            while (sftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            myStream.Close();
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            Dim myStream As Stream = File.OpenWrite("c:\uploadfile1.txt")
            sftp.DownloadStream(myStream, "uploadfile1.txt")
             
            Do While sftp.IsBusy = True
               System.Threading.Thread.Sleep(100)
            Loop
             
            myStream.Close()
                </code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.DownloadStream(System.IO.Stream,System.String,System.Int64)">
            <summary>
            Download to a file stream from the SSH server synchronously using the specified
            byte offset.
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            Stream myStream = File.OpenWrite("c:\\uploadfile1.txt");
            sftp.DownloadStream(myStream, "uploadfile1.txt", 2500);
            myStream.Close();
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            Dim myStream As Stream = File.OpenWrite("c:\uploadfile1.txt")
            sftp.DownloadStream(myStream, "uploadfile1.txt", 2500)
            myStream.Close()
                </code>
            </example>
            <param name="localStream">The local file stream</param>
            <param name="ftpFileName">The FTP file path</param>
            <param name="restart">The byte offset to start downloading from.</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.ResumeDownloadStream(System.IO.Stream,System.String)">
            <summary>Resume a download from the current stream position</summary>
            <param name="localStream"></param>
            <param name="ftpFileName"></param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.DownloadFileAsync(System.String,System.String)">
            <summary>
            Download a file asynchronously
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymus"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            System.Console.WriteLine("We are downloading the a.txt file.This is a blocking call");
             
            sftp.DownloadFileAsync("c:\\a.txt", "a.txt");
             
            while (sftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("{0} files have been transfered", sftp.FileCount);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymus" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            System.Console.WriteLine("We are downloading the a.txt file.This is a blocking call")
             
            sftp.DownloadFileAsync("c:\a.txt", "a.txt")
             
            Do While sftp.IsBusy = True
               System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("{0} files have been transfered", sftp.FileCount)
                </code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.DownloadFile(System.String,System.String)">
            <example>
            	<code title="" description="" lang="CS">SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymus"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            System.Console.WriteLine("We are downloading the a.txt file.This is a blocking call");
             
            sftp.DownloadFile("a.txt", "a.txt");
             
            System.Console.WriteLine("{0} files have been transfered", sftp.FileCount);</code>
            	<code title="" description="" lang="VB">Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymus" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            System.Console.WriteLine("We are downloading the a.txt file.This is a blocking call")
             
            sftp.DownloadFile("a.txt", "a.txt")
             
            System.Console.WriteLine("{0} files have been transfered", sftp.FileCount)</code>
            </example>
            <summary>Download a file name synchronously using FTP</summary>
            <param name="localFilePath">The full path of the file, including the file name</param>
            <param name="ftpFileName">The full path of the FTP file, including the ftp directory and file name</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.SynchronizeDownload(System.String,System.String)">
            <summary>
            Transfer files that do not exist locally synchronously OR Files that have a
            different byte count OR Files that have a modification date difference in seconds
            greater 60. The hour difference between the local machine and
            the SSH server is taken into account when CalcHourDifference has been called. By
            default all files and sub directories are attempted to be synchronized.
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60 
            sftp.SynchronizeDownload("TestDir", "C:\\Download");
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60 
            sftp.SynchronizeDownload("TestDir", "C:\\Download")
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local path to put the directory</param>
            <param name="ftpDirectory">The FTP directory to download</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.SynchronizeDownloadWithDelete(System.String,System.String)">
            <summary>
            Transfer files that do not exist locally synchronously OR Files that have a
            different byte count OR Files that have a modification date difference in seconds
            greater 60. The hour difference between the local machine and
            the SSH server is taken into account when CalcHourDifference has been called. By
            default all files and sub directories are attempted to be synchronized.
            Local files and directories will be deleted if they do not exist in the corresponding FTP directory.
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60 
            sftp.SynchronizeDownloadWithDelete("TestDir", "C:\\Download");
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60 
            sftp.SynchronizeDownloadWithDelete("TestDir", "C:\\Download")
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local path to put the directory</param>
            <param name="ftpDirectory">The FTP directory to download</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.SynchronizeDownloadWithDeleteAsync(System.String,System.String,System.Boolean,System.Object,System.Collections.Generic.List{System.String})">
            <summary>
            Transfer files that do not exist locally asynchronously OR Files that have a
            different byte count OR Files that have a modification date difference in seconds
            greater than 60. The hour difference between the local machine and
            the SSH server is taken into account when CalcHourDifference has been called. By
            default all files and sub directories are attempted to be synchronized.
            Local files and directories will be deleted if they do not exist in the corresponding FTP directory.
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60 
            sftp.SynchronizeDownloadWithDeleteAsync("TestDir", "C:\\Download", true, null, new List&lt;string&gt; { "web.config"});
             
            while (sftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60 
            sftp.SynchronizeDownloadWithDeleteAsync("TestDir", "C:\\Download", true, null, new List&lt;string&gt; { "web.config"})
             
            Do While sftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local path to put the directory</param>
            <param name="ftpDirectory">The FTP directory to download</param>
            <param name="subDirectories">If true, download subdirectories</param>
            <param name="customObject">Your custom object to be returned with Started, Progress, and Completed Events</param>
            <param name="filesAndDirectoriesToExclude">List of files or directories to exclude. Wildcards can be used.</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.SynchronizeDownloadAsync(System.String,System.String,System.Object)">
            <summary>
            Transfer files that do not exist locally asynchronously OR Files that have a
            different byte count OR Files that have a modification date difference in seconds
            greater than 60. The hour difference between the local machine and
            the SSH server is taken into account when CalcHourDifference has been called. By
            default all files and sub directories are attempted to be synchronized.
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60 
            sftp.SynchronizeDownloadAsync("TestDir", "C:\\Download");
             
            while (sftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60 
            sftp.SynchronizeDownloadAsync("TestDir", "C:\\Download")
             
            Do While sftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local path to put the directory</param>
            <param name="ftpDirectory">The FTP directory to download</param>
            <param name="customObject">Your custom object to be returned with Started, Progress, and Completed Events</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.SynchronizeDownloadWithDeleteAsync(System.String,System.String,System.Object)">
            <summary>
            Transfer files that do not exist locally asynchronously OR Files that have a
            different byte count OR Files that have a modification date difference in seconds
            greater than 60. The hour difference between the local machine and
            the SSH server is taken into account when CalcHourDifference has been called. By
            default all files and sub directories are attempted to be synchronized.
            Local files and directories will be deleted if they do not exist in the corresponding FTP directory.
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60 
            sftp.SynchronizeDownloadWithDeleteAsync("TestDir", "C:\\Download");
             
            while (sftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60 
            sftp.SynchronizeDownloadWithDeleteAsync("TestDir", "C:\\Download")
             
            Do While sftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local path to put the directory</param>
            <param name="ftpDirectory">The FTP directory to download</param>
            <param name="customObject">Your custom object to be returned with Started, Progress, and Completed Events</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.SynchronizeDownloadAsync(System.String,System.String)">
            <summary>
            Transfer files that do not exist locally asynchronously OR Files that have a
            different byte count OR Files that have a modification date difference in seconds
            greater than 60. The hour difference between the local machine and
            the SSH server is taken into account when CalcHourDifference has been called. By
            default all files and sub directories are attempted to be synchronized.
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60 
            sftp.SynchronizeDownloadAsync("TestDir", "C:\\Download");
             
            while (sftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60 
            sftp.SynchronizeDownloadAsync("TestDir", "C:\\Download")
             
            Do While sftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local path to put the directory</param>
            <param name="ftpDirectory">The FTP directory to download</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.SynchronizeDownloadWithDeleteAsync(System.String,System.String)">
            <summary>
            Transfer files that do not exist locally asynchronously OR Files that have a
            different byte count OR Files that have a modification date difference in seconds
            greater than 60. The hour difference between the local machine and
            the SSH server is taken into account when CalcHourDifference has been called. By
            default all files and sub directories are attempted to be synchronized.
            Local files and directories will be deleted if they do not exist in the corresponding FTP directory.
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60 
            sftp.SynchronizeDownloadWithDeleteAsync("TestDir", "C:\\Download");
             
            while (sftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60 
            sftp.SynchronizeDownloadWithDeleteAsync("TestDir", "C:\\Download")
             
            Do While sftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local path to put the directory</param>
            <param name="ftpDirectory">The FTP directory to download</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.SynchronizeDownload(System.String,System.String,System.Boolean)">
            <summary>
            Transfer files that do not exist locally synchronously OR Files that have a
            different byte count OR Files that have a modification date difference in seconds
            greater than 60. The hour difference between the local machine and
            the SSH server is taken into account when CalcHourDifference has been called. By
            default all files and sub directories are attempted to be synchronized.
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Only synchronize files in the specified directory, do not do sub directories
            sftp.SynchronizeDownload("TestDir", "C:\\Download", false);
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Only synchronize files in the specified directory, do not do sub directories
            sftp.SynchronizeDownload("TestDir", "C:\\Download", False)
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local path to put the directory</param>
            <param name="ftpDirectory">The FTP directory to download</param>
            <param name="subDirectories">If true, download subdirectories</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.SynchronizeDownload(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Transfer files that meet the wildcard pattern. If the file meets the wildcard pattern it is checked if it 
            does not exist locally OR it has a different byte count, or has a modification date difference in seconds
            greater than 60. The hour difference between the local machine and
            the SSH server is taken into account when CalcHourDifference has been called. By
            default all files and sub directories are attempted to be synchronized.
            </summary>
            <param name="localDirectory">The local path to put the directory</param>
            <param name="ftpDirectory">The FTP directory to download</param>
            <param name="subDirectories">If true, download subdirectories</param>
            <param name="wildCardPattern">The file pattern to match</param>
            <returns>A list of files that were transfered</returns>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.SynchronizeDownloadWithDelete(System.String,System.String,System.Boolean)">
            <summary>
            Transfer files that do not exist locally synchronously OR Files that have a
            different byte count OR Files that have a modification date difference in seconds
            greater than 60. The hour difference between the local machine and
            the SSH server is taken into account when CalcHourDifference has been called. By
            default all files and sub directories are attempted to be synchronized.
            Local files and directories will be deleted if they do not exist in the corresponding FTP directory.
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Only synchronize files in the specified directory, do not do sub directories
            sftp.SynchronizeDownloadWithDelete("TestDir", "C:\\Download", false);
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Only synchronize files in the specified directory, do not do sub directories
            sftp.SynchronizeDownloadWithDelete("TestDir", "C:\\Download", False)
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local path to put the directory</param>
            <param name="ftpDirectory">The FTP directory to download</param>
            <param name="subDirectories">If true, download subdirectories</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.SynchronizeDownloadAsync(System.String,System.String,System.Boolean,System.Object)">
            <summary>
            Transfer files that do not exist locally asynchronously OR Files that have a
            different byte count OR Files that have a modification date difference in seconds
            greater than 60. The hour difference between the local machine and
            the SSH server is taken into account when CalcHourDifference has been called. By
            default all files and sub directories are attempted to be synchronized.
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Only synchronize files in the specified directory, do not do sub directories
            sftp.SynchronizeDownload("TestDir", "C:\\Download", false);
             
            while (sftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Only synchronize files in the specified directory, do not do sub directories
            sftp.SynchronizeDownload("TestDir", "C:\\Download", False)
             
            Do While sftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local path to put the directory</param>
            <param name="ftpDirectory">The FTP directory to download</param>
            <param name="subDirectories">If true, download subdirectories</param>
            <param name="customObject">Your custom object to be returned with Started, Progress, and Completed Events</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.SynchronizeDownloadWithDeleteAsync(System.String,System.String,System.Boolean,System.Object)">
            <summary>
            Transfer files that do not exist locally asynchronously OR Files that have a
            different byte count OR Files that have a modification date difference in seconds
            greater than 60. The hour difference between the local machine and
            the SSH server is taken into account when CalcHourDifference has been called. By
            default all files and sub directories are attempted to be synchronized.
            Local files and directories will be deleted if they do not exist in the corresponding FTP directory.
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Only synchronize files in the specified directory, do not do sub directories
            sftp.SynchronizeDownloadWithDeleteAsync("TestDir", "C:\\Download", false);
             
            while (sftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Only synchronize files in the specified directory, do not do sub directories
            sftp.SynchronizeDownloadWithDeleteAsync("TestDir", "C:\\Download", False)
             
            Do While sftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local path to put the directory</param>
            <param name="ftpDirectory">The FTP directory to download</param>
            <param name="subDirectories">If true, download subdirectories</param>
            <param name="customObject">Your custom object to be returned with Started, Progress, and Completed Events</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.SynchronizeDownloadAsync(System.String,System.String,System.Boolean)">
            <summary>
            Transfer files that do not exist locally asynchronously OR Files that have a
            different byte count OR Files that have a modification date difference in seconds
            greater than 60. The hour difference between the local machine and
            the SSH server is taken into account when CalcHourDifference has been called. By
            default all files and sub directories are attempted to be synchronized.
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Only synchronize files in the specified directory, do not do sub directories
            sftp.SynchronizeDownload("TestDir", "C:\\Download", false);
             
            while (sftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Only synchronize files in the specified directory, do not do sub directories
            sftp.SynchronizeDownload("TestDir", "C:\\Download", False)
             
            Do While sftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local path to put the directory</param>
            <param name="ftpDirectory">The FTP directory to download</param>
            <param name="subDirectories">If true, download subdirectories</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.SynchronizeDownloadWithDeleteAsync(System.String,System.String,System.Boolean)">
            <summary>
            Transfer files that do not exist locally asynchronously OR Files that have a
            different byte count OR Files that have a modification date difference in seconds
            greater than 60. The hour difference between the local machine and
            the SSH server is taken into account when CalcHourDifference has been called. By
            default all files and sub directories are attempted to be synchronized.
            Local files and directories will be deleted if they do not exist in the corresponding FTP directory.
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Only synchronize files in the specified directory, do not do sub directories
            sftp.SynchronizeDownloadWithDeleteAsync("TestDir", "C:\\Download", false);
             
            while (sftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Only synchronize files in the specified directory, do not do sub directories
            sftp.SynchronizeDownloadWithDeleteAsync("TestDir", "C:\\Download", False)
             
            Do While sftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local path to put the directory</param>
            <param name="ftpDirectory">The FTP directory to download</param>
            <param name="subDirectories">If true, download subdirectories</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.DownloadDirectory(System.String,System.String,System.Boolean,System.String)">
            <summary>Download files matching the wildcard pattern.</summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Downloads all directories, subdirectories and files in the selected Directory asynchronously from FTP 
            System.Console.WriteLine("We are downloading the TestDir folder.This is a non-blocking call");
             
            // All these calls do the same thing
            sftp.DownloadDirectory("TestDir", "C:\\Download");
            /* sftp.DownloadDirectory("TestDir", "C:\\Download", true, "*.*");
             sftp.DownloadDirectory("TestDir", "C:\\Download", true, new Regex(".+"));
             sftp.DownloadDirectory("TestDir", "C:\\Download", true, DateTime.MinValue, DateTime.MaxValue);
             sftp.DownloadDirectory("TestDir", "C:\\Download", true, 0, Int64.MaxValue);
              */
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Downloads all directories, subdirectories and files in the selected Directory asynchronously from FTP 
            System.Console.WriteLine("We are downloading the TestDir folder.This is a non-blocking call")
             
            ' All these calls do the same thing
            sftp.DownloadDirectory("TestDir", "C:\\Download")
            ' sftp.DownloadDirectory("TestDir", "C:\\Download", true, "*.*");
            'sftp.DownloadDirectory("TestDir", "C:\\Download", true, new Regex(".+"));
            'sftp.DownloadDirectory("TestDir", "C:\\Download", true, DateTime.MinValue, DateTime.MaxValue);
            'sftp.DownloadDirectory("TestDir", "C:\\Download", true, 0, Int64.MaxValue);
            '
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local path to put the directory</param>
            <param name="ftpDirectory">The FTP directory to download</param>
            <param name="subDirectories">Download files in sub directories</param>
            <param name="wildCardPattern">Standard wildcard pattern</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.DownloadDirectoryAsync(System.String,System.String,System.Boolean,System.String,System.Object)">
            <summary>Download files matching the wildcard pattern.</summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Downloads all directories, subdirectories and files in the selected Directory asynchronously from FTP 
            System.Console.WriteLine("We are downloading the TestDir folder.This is a non-blocking call");
             
            // All these calls do the same thing
            sftp.DownloadDirectory("TestDir", "C:\\Download");
            /* sftp.DownloadDirectory("TestDir", "C:\\Download", true, "*.*");
             sftp.DownloadDirectory("TestDir", "C:\\Download", true, new Regex(".+"));
             sftp.DownloadDirectory("TestDir", "C:\\Download", true, DateTime.MinValue, DateTime.MaxValue);
             sftp.DownloadDirectory("TestDir", "C:\\Download", true, 0, Int64.MaxValue);
              */
             
            while (sftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Downloads all directories, subdirectories and files in the selected Directory asynchronously from FTP 
            System.Console.WriteLine("We are downloading the TestDir folder.This is a non-blocking call")
             
            ' All these calls do the same thing
            sftp.DownloadDirectory("TestDir", "C:\\Download")
            ' sftp.DownloadDirectory("TestDir", "C:\\Download", true, "*.*");
             'sftp.DownloadDirectory("TestDir", "C:\\Download", true, new Regex(".+"));
             'sftp.DownloadDirectory("TestDir", "C:\\Download", true, DateTime.MinValue, DateTime.MaxValue);
             'sftp.DownloadDirectory("TestDir", "C:\\Download", true, 0, Int64.MaxValue);
              '
             
            Do While sftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local path to put the directory</param>
            <param name="ftpDirectory">The FTP directory to download</param>
            <param name="subDirectories">Download files in sub directories</param>
            <param name="wildCardPattern">Standard wildcard pattern</param>
            <param name="customObject">Your custom object to be returned with Started, Progress, and Completed Events</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.DownloadDirectoryAsync(System.String,System.String,System.Boolean,System.String)">
            <summary>Download files matching the wildcard pattern.</summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Downloads all directories, subdirectories and files in the selected Directory asynchronously from FTP 
            System.Console.WriteLine("We are downloading the TestDir folder.This is a non-blocking call");
             
            // All these calls do the same thing
            sftp.DownloadDirectory("TestDir", "C:\\Download");
            /* sftp.DownloadDirectory("TestDir", "C:\\Download", true, "*.*");
             sftp.DownloadDirectory("TestDir", "C:\\Download", true, new Regex(".+"));
             sftp.DownloadDirectory("TestDir", "C:\\Download", true, DateTime.MinValue, DateTime.MaxValue);
             sftp.DownloadDirectory("TestDir", "C:\\Download", true, 0, Int64.MaxValue);
              */
             
            while (sftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Downloads all directories, subdirectories and files in the selected Directory asynchronously from FTP 
            System.Console.WriteLine("We are downloading the TestDir folder.This is a non-blocking call")
             
            ' All these calls do the same thing
            sftp.DownloadDirectory("TestDir", "C:\\Download")
            ' sftp.DownloadDirectory("TestDir", "C:\\Download", true, "*.*");
             'sftp.DownloadDirectory("TestDir", "C:\\Download", true, new Regex(".+"));
             'sftp.DownloadDirectory("TestDir", "C:\\Download", true, DateTime.MinValue, DateTime.MaxValue);
             'sftp.DownloadDirectory("TestDir", "C:\\Download", true, 0, Int64.MaxValue);
              '
             
            Do While sftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local path to put the directory</param>
            <param name="ftpDirectory">The FTP directory to download</param>
            <param name="subDirectories">Download files in sub directories</param>
            <param name="wildCardPattern">Standard wildcard pattern</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.DownloadDirectory(System.String,System.String,System.Boolean,System.Text.RegularExpressions.Regex)">
            <summary>Download files matching the regular expression.</summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Downloads all directories, subdirectories and files in the selected Directory asynchronously from FTP 
            System.Console.WriteLine("We are downloading the TestDir folder.This is a non-blocking call");
             
            // All these calls do the same thing
            sftp.DownloadDirectory("TestDir", "C:\\Download");
            /* sftp.DownloadDirectory("TestDir", "C:\\Download", true, "*.*");
             sftp.DownloadDirectory("TestDir", "C:\\Download", true, new Regex(".+"));
             sftp.DownloadDirectory("TestDir", "C:\\Download", true, DateTime.MinValue, DateTime.MaxValue);
             sftp.DownloadDirectory("TestDir", "C:\\Download", true, 0, Int64.MaxValue);
              */
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Downloads all directories, subdirectories and files in the selected Directory asynchronously from FTP 
            System.Console.WriteLine("We are downloading the TestDir folder.This is a non-blocking call")
             
            ' All these calls do the same thing
            sftp.DownloadDirectory("TestDir", "C:\\Download")
            ' sftp.DownloadDirectory("TestDir", "C:\\Download", true, "*.*");
            'sftp.DownloadDirectory("TestDir", "C:\\Download", true, new Regex(".+"));
            'sftp.DownloadDirectory("TestDir", "C:\\Download", true, DateTime.MinValue, DateTime.MaxValue);
            'sftp.DownloadDirectory("TestDir", "C:\\Download", true, 0, Int64.MaxValue);
            '
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local path to put the directory</param>
            <param name="ftpDirectory">The FTP directory to download</param>
            <param name="subDirectories">Download files in sub directories</param>
            <param name="regularExpression">Regular Expression</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.DownloadDirectoryAsync(System.String,System.String,System.Boolean,System.Text.RegularExpressions.Regex,System.Object)">
            <summary>Download files matching the regular expression.</summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Downloads all directories, subdirectories and files in the selected Directory asynchronously from FTP 
            System.Console.WriteLine("We are downloading the TestDir folder.This is a non-blocking call");
             
            // All these calls do the same thing
            sftp.DownloadDirectory("TestDir", "C:\\Download");
            /* sftp.DownloadDirectory("TestDir", "C:\\Download", true, "*.*");
             sftp.DownloadDirectory("TestDir", "C:\\Download", true, new Regex(".+"));
             sftp.DownloadDirectory("TestDir", "C:\\Download", true, DateTime.MinValue, DateTime.MaxValue);
             sftp.DownloadDirectory("TestDir", "C:\\Download", true, 0, Int64.MaxValue);
              */
             
            while (sftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Downloads all directories, subdirectories and files in the selected Directory asynchronously from FTP 
            System.Console.WriteLine("We are downloading the TestDir folder.This is a non-blocking call")
             
            ' All these calls do the same thing
            sftp.DownloadDirectory("TestDir", "C:\\Download")
            ' sftp.DownloadDirectory("TestDir", "C:\\Download", true, "*.*");
             'sftp.DownloadDirectory("TestDir", "C:\\Download", true, new Regex(".+"));
             'sftp.DownloadDirectory("TestDir", "C:\\Download", true, DateTime.MinValue, DateTime.MaxValue);
             'sftp.DownloadDirectory("TestDir", "C:\\Download", true, 0, Int64.MaxValue);
              '
             
            Do While sftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local path to put the directory</param>
            <param name="ftpDirectory">The FTP directory to download</param>
            <param name="subDirectories">Download files in sub directories</param>
            <param name="regularExpression">Regular Expression</param>
            <param name="customObject">Your custom object to be returned with Started, Progress, and Completed Events</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.DownloadDirectoryAsync(System.String,System.String,System.Boolean,System.Text.RegularExpressions.Regex)">
            <summary>Download files matching the regular expression.</summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Downloads all directories, subdirectories and files in the selected Directory asynchronously from FTP 
            System.Console.WriteLine("We are downloading the TestDir folder.This is a non-blocking call");
             
            // All these calls do the same thing
            sftp.DownloadDirectory("TestDir", "C:\\Download");
            /* sftp.DownloadDirectory("TestDir", "C:\\Download", true, "*.*");
             sftp.DownloadDirectory("TestDir", "C:\\Download", true, new Regex(".+"));
             sftp.DownloadDirectory("TestDir", "C:\\Download", true, DateTime.MinValue, DateTime.MaxValue);
             sftp.DownloadDirectory("TestDir", "C:\\Download", true, 0, Int64.MaxValue);
              */
             
            while (sftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Downloads all directories, subdirectories and files in the selected Directory asynchronously from FTP 
            System.Console.WriteLine("We are downloading the TestDir folder.This is a non-blocking call")
             
            ' All these calls do the same thing
            sftp.DownloadDirectory("TestDir", "C:\\Download")
            ' sftp.DownloadDirectory("TestDir", "C:\\Download", true, "*.*");
             'sftp.DownloadDirectory("TestDir", "C:\\Download", true, new Regex(".+"));
             'sftp.DownloadDirectory("TestDir", "C:\\Download", true, DateTime.MinValue, DateTime.MaxValue);
             'sftp.DownloadDirectory("TestDir", "C:\\Download", true, 0, Int64.MaxValue);
              '
             
            Do While sftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local path to put the directory</param>
            <param name="ftpDirectory">The FTP directory to download</param>
            <param name="subDirectories">Download files in sub directories</param>
            <param name="regularExpression">Regular Expression</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.DownloadDirectoryAsync(System.String,System.String,System.Object)">
            <summary>
            Download an entire directory, subdirectories, and files asynchronously using
            sftp.
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Download an entire directory, subdirectories, 
            // and files asynchronously using FTP 
            sftp.DownloadDirectory("C:\\Download", "TestDir");
             
            while (sftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("TestDir has been downloaded");
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Download an entire directory, subdirectories, 
            ' and files asynchronously using FTP 
            sftp.DownloadDirectory("C:\\Download", "TestDir")
             
            Do While sftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("TestDir has been downloaded")
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local path to put the directory</param>
            <param name="ftpDirectory">The FTP directory to download</param>
            <param name="customObject">Your custom object to be returned with Started, Progress, and Completed Events</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.DownloadDirectoryAsync(System.String,System.String,System.Boolean,System.DateTime,System.DateTime)">
            <summary>Download files that are modified between two dates.</summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Downloads all directories, subdirectories and files in the selected Directory asynchronously from FTP 
            System.Console.WriteLine("We are downloading the TestDir folder.This is a non-blocking call");
             
            // All these calls do the same thing
            sftp.DownloadDirectory("TestDir", "C:\\Download");
            /* sftp.DownloadDirectory("TestDir", "C:\\Download", true, "*.*");
             sftp.DownloadDirectory("TestDir", "C:\\Download", true, new Regex(".+"));
             sftp.DownloadDirectory("TestDir", "C:\\Download", true, DateTime.MinValue, DateTime.MaxValue);
             sftp.DownloadDirectory("TestDir", "C:\\Download", true, 0, Int64.MaxValue);
              */
             
            while (sftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Downloads all directories, subdirectories and files in the selected Directory asynchronously from FTP 
            System.Console.WriteLine("We are downloading the TestDir folder.This is a non-blocking call")
             
            ' All these calls do the same thing
            sftp.DownloadDirectory("TestDir", "C:\\Download")
            ' sftp.DownloadDirectory("TestDir", "C:\\Download", true, "*.*");
             'sftp.DownloadDirectory("TestDir", "C:\\Download", true, new Regex(".+"));
             'sftp.DownloadDirectory("TestDir", "C:\\Download", true, DateTime.MinValue, DateTime.MaxValue);
             'sftp.DownloadDirectory("TestDir", "C:\\Download", true, 0, Int64.MaxValue);
              '
             
            Do While sftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local path to put the directory</param>
            <param name="ftpDirectory">The FTP directory to download</param>
            <param name="subDirectories">Download files in sub directories</param>
            <param name="startDate">The earliest file to upload</param>
            <param name="endDate">The latest file to upload</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.DownloadDirectory(System.String,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>Download files that are in a certain size range.</summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Downloads all directories, subdirectories and files in the selected Directory asynchronously from FTP 
            System.Console.WriteLine("We are downloading the TestDir folder.This is a non-blocking call");
             
            // All these calls do the same thing
            sftp.DownloadDirectory("TestDir", "C:\\Download");
            /* sftp.DownloadDirectory("TestDir", "C:\\Download", true, "*.*");
             sftp.DownloadDirectory("TestDir", "C:\\Download", true, new Regex(".+"));
             sftp.DownloadDirectory("TestDir", "C:\\Download", true, DateTime.MinValue, DateTime.MaxValue);
             sftp.DownloadDirectory("TestDir", "C:\\Download", true, 0, Int64.MaxValue);
              */
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Downloads all directories, subdirectories and files in the selected Directory asynchronously from FTP 
            System.Console.WriteLine("We are downloading the TestDir folder.This is a non-blocking call")
             
            ' All these calls do the same thing
            sftp.DownloadDirectory("TestDir", "C:\\Download")
            ' sftp.DownloadDirectory("TestDir", "C:\\Download", true, "*.*");
            'sftp.DownloadDirectory("TestDir", "C:\\Download", true, new Regex(".+"));
            'sftp.DownloadDirectory("TestDir", "C:\\Download", true, DateTime.MinValue, DateTime.MaxValue);
            'sftp.DownloadDirectory("TestDir", "C:\\Download", true, 0, Int64.MaxValue);
            '
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local path to put the directory</param>
            <param name="ftpDirectory">The FTP directory to download</param>
            <param name="subDirectories">Download files in sub directories</param>
            <param name="minSizeInBytes">The smallest size file to download in bytes</param>
            <param name="maxSizeInBytes">The biggest size file to download in bytes</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.DownloadDirectoryAsync(System.String,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Download files that are in a certain size range
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Downloads all directories, subdirectories and files in the selected Directory asynchronously from FTP 
            System.Console.WriteLine("We are downloading the TestDir folder.This is a non-blocking call");
             
            // All these calls do the same thing
            sftp.DownloadDirectory("TestDir", "C:\\Download");
            /* sftp.DownloadDirectory("TestDir", "C:\\Download", true, "*.*");
             sftp.DownloadDirectory("TestDir", "C:\\Download", true, new Regex(".+"));
             sftp.DownloadDirectory("TestDir", "C:\\Download", true, DateTime.MinValue, DateTime.MaxValue);
             sftp.DownloadDirectory("TestDir", "C:\\Download", true, 0, Int64.MaxValue);
              */
             
            while (sftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Downloads all directories, subdirectories and files in the selected Directory asynchronously from FTP 
            System.Console.WriteLine("We are downloading the TestDir folder.This is a non-blocking call")
             
            ' All these calls do the same thing
            sftp.DownloadDirectory("TestDir", "C:\\Download")
            ' sftp.DownloadDirectory("TestDir", "C:\\Download", true, "*.*");
             'sftp.DownloadDirectory("TestDir", "C:\\Download", true, new Regex(".+"));
             'sftp.DownloadDirectory("TestDir", "C:\\Download", true, DateTime.MinValue, DateTime.MaxValue);
             'sftp.DownloadDirectory("TestDir", "C:\\Download", true, 0, Int64.MaxValue);
              '
             
            Do While sftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local path to put the directory</param>
            <param name="ftpDirectory">The FTP directory to download</param>
            <param name="subDirectories">Download files in sub directories</param>
            <param name="minSizeInBytes">The smallest size file to download in bytes</param>
            <param name="maxSizeInBytes">The biggest size file to download in bytes</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.DownloadDirectoryAsync(System.String,System.String,System.Boolean,System.Int32,System.Int32,System.Object)">
            <summary>
            Download files that are in a certain size range
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Downloads all directories, subdirectories and files in the selected Directory asynchronously from FTP 
            System.Console.WriteLine("We are downloading the TestDir folder.This is a non-blocking call");
             
            // All these calls do the same thing
            sftp.DownloadDirectory("TestDir", "C:\\Download");
            /* sftp.DownloadDirectory("TestDir", "C:\\Download", true, "*.*");
             sftp.DownloadDirectory("TestDir", "C:\\Download", true, new Regex(".+"));
             sftp.DownloadDirectory("TestDir", "C:\\Download", true, DateTime.MinValue, DateTime.MaxValue);
             sftp.DownloadDirectory("TestDir", "C:\\Download", true, 0, Int64.MaxValue);
              */
             
            while (sftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Downloads all directories, subdirectories and files in the selected Directory asynchronously from FTP 
            System.Console.WriteLine("We are downloading the TestDir folder.This is a non-blocking call")
             
            ' All these calls do the same thing
            sftp.DownloadDirectory("TestDir", "C:\\Download")
            ' sftp.DownloadDirectory("TestDir", "C:\\Download", true, "*.*");
             'sftp.DownloadDirectory("TestDir", "C:\\Download", true, new Regex(".+"));
             'sftp.DownloadDirectory("TestDir", "C:\\Download", true, DateTime.MinValue, DateTime.MaxValue);
             'sftp.DownloadDirectory("TestDir", "C:\\Download", true, 0, Int64.MaxValue);
              '
             
            Do While sftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local path to put the directory</param>
            <param name="ftpDirectory">The FTP directory to download</param>
            <param name="subDirectories">Download files in sub directories</param>
            <param name="minSizeInBytes">The smallest size file to download in bytes</param>
            <param name="maxSizeInBytes">The biggest size file to download in bytes</param>
            <param name="customObject">Your custom object to be returned with Started, Progress, and Completed Events</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.DownloadDirectoryAsync(System.String,System.String,System.Boolean,System.DateTime,System.DateTime,System.Object)">
            <summary>Download files that are modified between two dates.</summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Downloads all directories, subdirectories and files in the selected Directory asynchronously from FTP 
            System.Console.WriteLine("We are downloading the TestDir folder.This is a non-blocking call");
             
            // All these calls do the same thing
            sftp.DownloadDirectory("TestDir", "C:\\Download");
            /* sftp.DownloadDirectory("TestDir", "C:\\Download", true, "*.*");
             sftp.DownloadDirectory("TestDir", "C:\\Download", true, new Regex(".+"));
             sftp.DownloadDirectory("TestDir", "C:\\Download", true, DateTime.MinValue, DateTime.MaxValue);
             sftp.DownloadDirectory("TestDir", "C:\\Download", true, 0, Int64.MaxValue);
              */
             
            while (sftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Downloads all directories, subdirectories and files in the selected Directory asynchronously from FTP 
            System.Console.WriteLine("We are downloading the TestDir folder.This is a non-blocking call")
             
            ' All these calls do the same thing
            sftp.DownloadDirectory("TestDir", "C:\\Download")
            ' sftp.DownloadDirectory("TestDir", "C:\\Download", true, "*.*");
             'sftp.DownloadDirectory("TestDir", "C:\\Download", true, new Regex(".+"));
             'sftp.DownloadDirectory("TestDir", "C:\\Download", true, DateTime.MinValue, DateTime.MaxValue);
             'sftp.DownloadDirectory("TestDir", "C:\\Download", true, 0, Int64.MaxValue);
              '
             
            Do While sftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local path to put the directory</param>
            <param name="ftpDirectory">The FTP directory to download</param>
            <param name="subDirectories">Download files in sub directories</param>
            <param name="startDate">The earliest file to upload</param>
            <param name="endDate">The latest file to upload</param>
            <param name="customObject">Your custom object to be returned with Started, Progress, and Completed Events</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.DownloadDirectory(System.String,System.String,System.Boolean,System.DateTime,System.DateTime)">
            <summary>Download files that are modified between two dates.</summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Downloads all directories, subdirectories and files in the selected Directory asynchronously from FTP 
            System.Console.WriteLine("We are downloading the TestDir folder.This is a non-blocking call");
             
            // All these calls do the same thing
                sftp.DownloadDirectory("TestDir", "C:\\Download");
                /* sftp.DownloadDirectory("TestDir", "C:\\Download", true, "*.*");
                 sftp.DownloadDirectory("TestDir", "C:\\Download", true, new Regex(".+"));
                 sftp.DownloadDirectory("TestDir", "C:\\Download", true, DateTime.MinValue, DateTime.MaxValue);
                 sftp.DownloadDirectory("TestDir", "C:\\Download", true, 0, Int64.MaxValue);
                  */
              
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Downloads all directories, subdirectories and files in the selected Directory asynchronously from FTP 
            System.Console.WriteLine("We are downloading the TestDir folder.This is a non-blocking call")
             
            ' All these calls do the same thing
            sftp.DownloadDirectory("TestDir", "C:\\Download")
            ' sftp.DownloadDirectory("TestDir", "C:\\Download", true, "*.*");
            'sftp.DownloadDirectory("TestDir", "C:\\Download", true, new Regex(".+"));
            'sftp.DownloadDirectory("TestDir", "C:\\Download", true, DateTime.MinValue, DateTime.MaxValue);
            'sftp.DownloadDirectory("TestDir", "C:\\Download", true, 0, Int64.MaxValue);
            '
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local path to put the directory</param>
            <param name="ftpDirectory">The FTP directory to download</param>
            <param name="subDirectories">Download files in sub directories</param>
            <param name="startDate">The earliest file to upload</param>
            <param name="endDate">The latest file to upload</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.DownloadDirectoryAsync(System.String,System.String)">
            <summary>
            Download an entire directory, subdirectories, and files asynchronously using
            sftp.
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Download an entire directory, subdirectories, 
            // and files asynchronously using FTP 
            sftp.DownloadDirectory("C:\\Download", "TestDir");
             
            while (sftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("TestDir has been downloaded");
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Download an entire directory, subdirectories, 
            ' and files asynchronously using FTP 
            sftp.DownloadDirectory("C:\\Download", "TestDir")
             
            Do While sftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("TestDir has been downloaded")
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local path to put the directory</param>
            <param name="ftpDirectory">The FTP directory to download</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.DownloadDirectory(System.String,System.String)">
            <summary>
            Download an entire directory, subdirectories, and files synchronously using FTP
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Download an entire directory, subdirectories, 
            // and files synchronously using FTP 
            System.Console.WriteLine("We are downloading the TestDir folder.This is a blocking call");
            sftp.DownloadDirectory("C:\\Download", "TestDir");
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Download an entire directory, subdirectories, 
            ' and files synchronously using FTP 
            System.Console.WriteLine("We are downloading the TestDir folder.This is a blocking call")
            sftp.DownloadDirectory("C:\\Download", "TestDir")
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local path to put the directory</param>
            <param name="ftpDirectory">The FTP directory to download</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.UploadDirectory(System.String,System.String)">
            <summary>
            Upload an entire directory, subdirectories, and files synchronously using
            sftp.
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Upload an entire directory, subdirectories, and files synchronously 
            System.Console.WriteLine("Transferring files from the Download folder to the TestDir FTP folder. This call is blocking");
            sftp.UploadDirectory("C:\\Download", "TestDir");
             
            System.Console.WriteLine("TestDir has now {0} KB", sftp.GetDirectorySize("TestDir") / 1024);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Upload an entire directory, subdirectories, and files synchronously 
            System.Console.WriteLine("Transferring files from the Download folder to the TestDir FTP folder. This call is blocking")
            sftp.UploadDirectory("C:\\Download", "TestDir")
             
            System.Console.WriteLine("TestDir has now {0} KB", sftp.GetDirectorySize("TestDir") / 1024)
                </code>
            </example>
            <param name="localDirectory">The local path to upload</param>
            <param name="ftpDirectory">The FTP directory to upload to</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.UploadDirectoryAsync(System.String,System.String,System.Object)">
            <summary>
            Upload an entire directory, subdirectories, and files asynchronously using
            sftp.
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Upload an entire directory, subdirectories, and files asynchronously 
            System.Console.WriteLine("Transferring files from the Download folder to the TestDir FTP folder. This call is not blocking");
            sftp.UploadDirectoryAsync("C:\\Download", "TestDir");
             
            while (sftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("TestDir has now {0} KB", sftp.GetDirectorySize("TestDir") / 1024);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Upload an entire directory, subdirectories, and files asynchronously 
            System.Console.WriteLine("Transferring files from the Download folder to the TestDir FTP folder. This call is not blocking")
            sftp.UploadDirectoryAsync("C:\\Download", "TestDir")
             
            Do While sftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("TestDir has now {0} KB", sftp.GetDirectorySize("TestDir") / 1024)
                </code>
            </example>
            <param name="localDirectory">Local path to upload</param>
            <param name="ftpDirectory">FTP path to upload to.</param>
            <param name="customObject">Your custom object to be returned with Started, Progress, and Completed Events</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.UploadDirectoryAsync(System.String,System.String)">
            <summary>
            Upload an entire directory, subdirectories, and files asynchronously using
            sftp.
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Upload an entire directory, subdirectories, and files asynchronously 
            System.Console.WriteLine("Transferring files from the Download folder to the TestDir FTP folder. This call is not blocking");
            sftp.UploadDirectoryAsync("C:\\Download", "TestDir");
             
            while (sftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("TestDir has now {0} KB", sftp.GetDirectorySize("TestDir") / 1024);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Upload an entire directory, subdirectories, and files asynchronously 
            System.Console.WriteLine("Transferring files from the Download folder to the TestDir FTP folder. This call is not blocking")
            sftp.UploadDirectoryAsync("C:\\Download", "TestDir")
             
            Do While sftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("TestDir has now {0} KB", sftp.GetDirectorySize("TestDir") / 1024)
                </code>
            </example>
            <param name="localDirectory">Local path to upload</param>
            <param name="ftpDirectory">FTP path to upload to.</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.UploadDirectory(System.String,System.String,System.Boolean,System.DateTime,System.DateTime)">
            <summary>Upload files that are modified between two dates.</summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Uploads all directories, subdirectories and files in the selected Directory asynchronously to the SSH server 
            System.Console.WriteLine("We are uploading the Download folder to the TestDir folder .This is a non-blocking call");
             
            // All these calls do the same thing
            sftp.CreateDirectory("TestDir");
            sftp.UploadDirectory("C:\\Download", "TestDir");
            /* sftp.UploadDirectory( "C:\\Download", "TestDir" , true, "*.*");
             sftp.UploadDirectory( "C:\\Download", "TestDir" , true, new Regex(".+"));
             sftp.UploadDirectory( "C:\\Download", "TestDir" , true, DateTime.MinValue, DateTime.MaxValue);
             sftp.UploadDirectory( "C:\\Download", "TestDir" , true, 0, Int64.MaxValue);
            */
              
            System.Console.WriteLine("TestDir has now {0} KB", sftp.GetDirectorySize("TestDir") / 1024);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Uploads all directories, subdirectories and files in the selected Directory asynchronously to the SSH server 
            System.Console.WriteLine("We are uploading the Download folder to the TestDir folder .This is a non-blocking call")
             
            ' All these calls do the same thing
            sftp.CreateDirectory("TestDir")
            sftp.UploadDirectory("C:\\Download", "TestDir")
            ' sftp.UploadDirectory( "C:\\Download", "TestDir" , true, "*.*");
             'sftp.UploadDirectory( "C:\\Download", "TestDir" , true, new Regex(".+"));
             'sftp.UploadDirectory( "C:\\Download", "TestDir" , true, DateTime.MinValue, DateTime.MaxValue);
             'sftp.UploadDirectory( "C:\\Download", "TestDir" , true, 0, Int64.MaxValue);
            '
             
            System.Console.WriteLine("TestDir has now {0} KB", sftp.GetDirectorySize("TestDir") / 1024)
                </code>
            </example>
            <param name="localDirectory">The local path to upload</param>
            <param name="ftpDirectory">The FTP directory to upload to</param>
            <param name="subDirectories">Upload files in sub directories</param>
            <param name="startDate">The earliest file to upload</param>
            <param name="endDate">The latest file to upload</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.UploadDirectoryAsync(System.String,System.String,System.Boolean,System.DateTime,System.DateTime,System.Object)">
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // Set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace With your user name
            sftp.Password = "user@mail.com"; // replace With your password
             
            //Uploads all directories, subdirectories And files In the selected Directory asynchronously To the SSH server 
            System.Console.WriteLine("We are uploading the Download folder to the TestDir folder .This is a non-blocking call");
             
            // All these calls Do the same thing
            sftp.CreateDirectory("TestDir");
            sftp.UploadDirectoryAsync("C:\\Download", "TestDir");
            /* sftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , True, "*.*");
             sftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , True, New Regex(".+"));
             sftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , True, DateTime.MinValue, DateTime.MaxValue);
             sftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , True, 0, Int64.MaxValue);
            */
              
            While (sftp.IsBusy == True)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("TestDir has now {0} KB", sftp.GetDirectorySize("TestDir") / 1024);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Uploads all directories, subdirectories and files in the selected Directory asynchronously to the SSH server 
            System.Console.WriteLine("We are uploading the Download folder to the TestDir folder .This is a non-blocking call")
             
            ' All these calls do the same thing
            sftp.CreateDirectory("TestDir")
            sftp.UploadDirectoryAsync("C:\\Download", "TestDir")
            ' sftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, "*.*");
             'sftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, new Regex(".+"));
             'sftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, DateTime.MinValue, DateTime.MaxValue);
             'sftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, 0, Int64.MaxValue);
            '
             
            Do While sftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("TestDir has now {0} KB", sftp.GetDirectorySize("TestDir") / 1024)
                </code>
            </example>
            <summary>Upload files that are modified between two dates.</summary>
            <param name="localDirectory">The local path to upload</param>
            <param name="ftpDirectory">The FTP path to upload to</param>
            <param name="subDirectories">If true, upload subdirectories</param>
            <param name="startDate">The earliest file to upload</param>
            <param name="endDate">The latest file to upload</param>
            <param name="customObject">Your custom object to be returned with Started, Progress, and Completed Events</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.UploadDirectoryAsync(System.String,System.String,System.Boolean,System.DateTime,System.DateTime)">
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // Set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace With your user name
            sftp.Password = "user@mail.com"; // replace With your password
             
            //Uploads all directories, subdirectories And files In the selected Directory asynchronously To the SSH server 
            System.Console.WriteLine("We are uploading the Download folder to the TestDir folder .This is a non-blocking call");
             
            // All these calls Do the same thing
            sftp.CreateDirectory("TestDir");
            sftp.UploadDirectoryAsync("C:\\Download", "TestDir");
            /* sftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , True, "*.*");
             sftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , True, New Regex(".+"));
             sftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , True, DateTime.MinValue, DateTime.MaxValue);
             sftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , True, 0, Int64.MaxValue);
            */
              
            While (sftp.IsBusy == True)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("TestDir has now {0} KB", sftp.GetDirectorySize("TestDir") / 1024);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Uploads all directories, subdirectories and files in the selected Directory asynchronously to the SSH server 
            System.Console.WriteLine("We are uploading the Download folder to the TestDir folder .This is a non-blocking call")
             
            ' All these calls do the same thing
            sftp.CreateDirectory("TestDir")
            sftp.UploadDirectoryAsync("C:\\Download", "TestDir")
            ' sftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, "*.*");
             'sftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, new Regex(".+"));
             'sftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, DateTime.MinValue, DateTime.MaxValue);
             'sftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, 0, Int64.MaxValue);
            '
             
            Do While sftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("TestDir has now {0} KB", sftp.GetDirectorySize("TestDir") / 1024)
                </code>
            </example>
            <summary>Upload files that are modified between two dates.</summary>
            <param name="localDirectory">The local path to upload</param>
            <param name="ftpDirectory">The FTP path to upload to</param>
            <param name="subDirectories">If true, upload subdirectories</param>
            <param name="startDate">The earliest file to upload</param>
            <param name="endDate">The latest file to upload</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.UploadDirectory(System.String,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Upload files that are in a certain size range
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Uploads all directories, subdirectories and files in the selected Directory asynchronously to the SSH server 
            System.Console.WriteLine("We are uploading the Download folder to the TestDir folder .This is a non-blocking call");
             
            // All these calls do the same thing
            sftp.CreateDirectory("TestDir");
            sftp.UploadDirectory("C:\\Download", "TestDir");
            /* sftp.UploadDirectory( "C:\\Download", "TestDir" , true, "*.*");
             sftp.UploadDirectory( "C:\\Download", "TestDir" , true, new Regex(".+"));
             sftp.UploadDirectory( "C:\\Download", "TestDir" , true, DateTime.MinValue, DateTime.MaxValue);
             sftp.UploadDirectory( "C:\\Download", "TestDir" , true, 0, Int64.MaxValue);
            */
              
            System.Console.WriteLine("TestDir has now {0} KB", sftp.GetDirectorySize("TestDir") / 1024);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Uploads all directories, subdirectories and files in the selected Directory asynchronously to the SSH server 
            System.Console.WriteLine("We are uploading the Download folder to the TestDir folder .This is a non-blocking call")
             
            ' All these calls do the same thing
            sftp.CreateDirectory("TestDir")
            sftp.UploadDirectory("C:\\Download", "TestDir")
            ' sftp.UploadDirectory( "C:\\Download", "TestDir" , true, "*.*");
             'sftp.UploadDirectory( "C:\\Download", "TestDir" , true, new Regex(".+"));
             'sftp.UploadDirectory( "C:\\Download", "TestDir" , true, DateTime.MinValue, DateTime.MaxValue);
             'sftp.UploadDirectory( "C:\\Download", "TestDir" , true, 0, Int64.MaxValue);
            '
             
            System.Console.WriteLine("TestDir has now {0} KB", sftp.GetDirectorySize("TestDir") / 1024)
                </code>
            </example>
            <param name="localDirectory">The local path to upload</param>
            <param name="ftpDirectory">The FTP directory to upload to</param>
            <param name="subDirectories">Upload files in sub directories</param>
            <param name="minSizeInBytes">The smallest size file to upload in bytes</param>
            <param name="maxSizeInBytes">The biggest size file to upload in bytes</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.UploadDirectoryAsync(System.String,System.String,System.Boolean,System.Int32,System.Int32,System.Object)">
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Uploads all directories, subdirectories and files in the selected Directory asynchronously to the SSH server 
            System.Console.WriteLine("We are uploading the Download folder to the TestDir folder .This is a non-blocking call");
             
            // All these calls do the same thing
            sftp.CreateDirectory("TestDir");
            sftp.UploadDirectoryAsync("C:\\Download", "TestDir");
            /* sftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, "*.*");
             sftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, new Regex(".+"));
             sftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, DateTime.MinValue, DateTime.MaxValue);
             sftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, 0, Int64.MaxValue);
            */
              
            while (sftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("TestDir has now {0} KB", sftp.GetDirectorySize("TestDir") / 1024);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Uploads all directories, subdirectories and files in the selected Directory asynchronously to the SSH server 
            System.Console.WriteLine("We are uploading the Download folder to the TestDir folder .This is a non-blocking call")
             
            ' All these calls do the same thing
            sftp.CreateDirectory("TestDir")
            sftp.UploadDirectoryAsync("C:\\Download", "TestDir")
            ' sftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, "*.*");
             'sftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, new Regex(".+"));
             'sftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, DateTime.MinValue, DateTime.MaxValue);
             'sftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, 0, Int64.MaxValue);
            '
             
            Do While sftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("TestDir has now {0} KB", sftp.GetDirectorySize("TestDir") / 1024)
                </code>
            </example>
            <summary>Upload files that are in a certain size range.</summary>
            <param name="localDirectory">The local directory to upload</param>
            <param name="ftpDirectory">The FTP directory to upload to</param>
            <param name="subDirectories">If true, upload sub directories</param>
            <param name="minSizeInBytes">The minimum file size to upload</param>
            <param name="maxSizeInBytes">The maximum file size to upload</param>
            <param name="customObject">Your custom object to be returned with Started, Progress, and Completed Events</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.UploadDirectoryAsync(System.String,System.String,System.Boolean,System.Int32,System.Int32)">
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Uploads all directories, subdirectories and files in the selected Directory asynchronously to the SSH server 
            System.Console.WriteLine("We are uploading the Download folder to the TestDir folder .This is a non-blocking call");
             
            // All these calls do the same thing
            sftp.CreateDirectory("TestDir");
            sftp.UploadDirectoryAsync("C:\\Download", "TestDir");
            /* sftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, "*.*");
             sftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, new Regex(".+"));
             sftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, DateTime.MinValue, DateTime.MaxValue);
             sftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, 0, Int64.MaxValue);
            */
              
            while (sftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("TestDir has now {0} KB", sftp.GetDirectorySize("TestDir") / 1024);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Uploads all directories, subdirectories and files in the selected Directory asynchronously to the SSH server 
            System.Console.WriteLine("We are uploading the Download folder to the TestDir folder .This is a non-blocking call")
             
            ' All these calls do the same thing
            sftp.CreateDirectory("TestDir")
            sftp.UploadDirectoryAsync("C:\\Download", "TestDir")
            ' sftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, "*.*");
             'sftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, new Regex(".+"));
             'sftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, DateTime.MinValue, DateTime.MaxValue);
             'sftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, 0, Int64.MaxValue);
            '
             
            Do While sftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("TestDir has now {0} KB", sftp.GetDirectorySize("TestDir") / 1024)
                </code>
            </example>
            <summary>Upload files that are in a certain size range.</summary>
            <param name="localDirectory">The local directory to upload</param>
            <param name="ftpDirectory">The FTP directory to upload to</param>
            <param name="subDirectories">If true, upload sub directories</param>
            <param name="minSizeInBytes">The minimum file size to upload</param>
            <param name="maxSizeInBytes">The maximum file size to upload</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.UploadDirectory(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Upload files matching the wildcard pattern using FTP
            Uses standard wild card pattern such as *.xls
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Uploads all directories, subdirectories and files in the selected Directory asynchronously to the SSH server 
            System.Console.WriteLine("We are uploading the Download folder to the TestDir folder .This is a non-blocking call");
             
            // All these calls do the same thing
            sftp.CreateDirectory("TestDir");
            sftp.UploadDirectory("C:\\Download", "TestDir");
            /* sftp.UploadDirectory( "C:\\Download", "TestDir" , true, "*.*");
             sftp.UploadDirectory( "C:\\Download", "TestDir" , true, new Regex(".+"));
             sftp.UploadDirectory( "C:\\Download", "TestDir" , true, DateTime.MinValue, DateTime.MaxValue);
             sftp.UploadDirectory( "C:\\Download", "TestDir" , true, 0, Int64.MaxValue);
            */
              
            System.Console.WriteLine("TestDir has now {0} KB", sftp.GetDirectorySize("TestDir") / 1024);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Uploads all directories, subdirectories and files in the selected Directory asynchronously to the SSH server 
            System.Console.WriteLine("We are uploading the Download folder to the TestDir folder .This is a non-blocking call")
             
            ' All these calls do the same thing
            sftp.CreateDirectory("TestDir")
            sftp.UploadDirectory("C:\\Download", "TestDir")
            ' sftp.UploadDirectory( "C:\\Download", "TestDir" , true, "*.*");
             'sftp.UploadDirectory( "C:\\Download", "TestDir" , true, new Regex(".+"));
             'sftp.UploadDirectory( "C:\\Download", "TestDir" , true, DateTime.MinValue, DateTime.MaxValue);
             'sftp.UploadDirectory( "C:\\Download", "TestDir" , true, 0, Int64.MaxValue);
            '
             
            System.Console.WriteLine("TestDir has now {0} KB", sftp.GetDirectorySize("TestDir") / 1024)
                </code>
            </example>
            <param name="localDirectory">The local path to put the directory</param>
            <param name="ftpDirectory">The FTP directory to download</param>
            <param name="subDirectories">Upload files in sub directories</param>
            <param name="wildCardPattern">Standard wildcard pattern</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.UploadDirectoryAsync(System.String,System.String,System.Boolean,System.String,System.Object)">
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Uploads all directories, subdirectories and files in the selected Directory asynchronously to the SSH server 
            System.Console.WriteLine("We are uploading the Download folder to the TestDir folder .This is a non-blocking call");
             
            // All these calls do the same thing
            sftp.CreateDirectory("TestDir");
            sftp.UploadDirectoryAsync("C:\\Download", "TestDir");
            /* sftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, "*.*");
             sftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, new Regex(".+"));
             sftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, DateTime.MinValue, DateTime.MaxValue);
             sftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, 0, Int64.MaxValue);
            */
              
            while (sftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("TestDir has now {0} KB", sftp.GetDirectorySize("TestDir") / 1024);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Uploads all directories, subdirectories and files in the selected Directory asynchronously to the SSH server 
            System.Console.WriteLine("We are uploading the Download folder to the TestDir folder .This is a non-blocking call")
             
            ' All these calls do the same thing
            sftp.CreateDirectory("TestDir")
            sftp.UploadDirectoryAsync("C:\\Download", "TestDir")
            ' sftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, "*.*");
             'sftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, new Regex(".+"));
             'sftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, DateTime.MinValue, DateTime.MaxValue);
             'sftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, 0, Int64.MaxValue);
            '
             
            Do While sftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("TestDir has now {0} KB", sftp.GetDirectorySize("TestDir") / 1024)
                </code>
            </example>
            <summary>
            Upload files matching the wildcard pattern using FTP Uses standard wild card
            pattern such as *.xls
            </summary>
            <param name="localDirectory">The local directory to upload</param>
            <param name="ftpDirectory">The FTP directory to upload to</param>
            <param name="subDirectories">If true, upload sub directories</param>
            <param name="wildCardPattern">The file pattern</param>
            <param name="customObject">Your custom object to be returned with Started, Progress, and Completed Events</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.UploadDirectoryAsync(System.String,System.String,System.Boolean,System.String)">
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Uploads all directories, subdirectories and files in the selected Directory asynchronously to the SSH server 
            System.Console.WriteLine("We are uploading the Download folder to the TestDir folder .This is a non-blocking call");
             
            // All these calls do the same thing
            sftp.CreateDirectory("TestDir");
            sftp.UploadDirectoryAsync("C:\\Download", "TestDir");
            /* sftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, "*.*");
             sftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, new Regex(".+"));
             sftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, DateTime.MinValue, DateTime.MaxValue);
             sftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, 0, Int64.MaxValue);
            */
              
            while (sftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("TestDir has now {0} KB", sftp.GetDirectorySize("TestDir") / 1024);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Uploads all directories, subdirectories and files in the selected Directory asynchronously to the SSH server 
            System.Console.WriteLine("We are uploading the Download folder to the TestDir folder .This is a non-blocking call")
             
            ' All these calls do the same thing
            sftp.CreateDirectory("TestDir")
            sftp.UploadDirectoryAsync("C:\\Download", "TestDir")
            ' sftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, "*.*");
             'sftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, new Regex(".+"));
             'sftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, DateTime.MinValue, DateTime.MaxValue);
             'sftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, 0, Int64.MaxValue);
            '
             
            Do While sftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("TestDir has now {0} KB", sftp.GetDirectorySize("TestDir") / 1024)
                </code>
            </example>
            <summary>
            Upload files matching the wildcard pattern using FTP Uses standard wild card
            pattern such as *.xls
            </summary>
            <param name="localDirectory">The local directory to upload</param>
            <param name="ftpDirectory">The FTP directory to upload to</param>
            <param name="subDirectories">If true, upload sub directories</param>
            <param name="wildCardPattern">The file pattern</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.UploadDirectory(System.String,System.String,System.Boolean,System.Text.RegularExpressions.Regex)">
            <summary>Upload files matching the regular expression.</summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Uploads all directories, subdirectories and files in the selected Directory asynchronously to the SSH server 
            System.Console.WriteLine("We are uploading the Download folder to the TestDir folder .This is a non-blocking call");
             
            // All these calls do the same thing
            sftp.CreateDirectory("TestDir");
            sftp.UploadDirectory("C:\\Download", "TestDir");
            /* sftp.UploadDirectory( "C:\\Download", "TestDir" , true, "*.*");
             sftp.UploadDirectory( "C:\\Download", "TestDir" , true, new Regex(".+"));
             sftp.UploadDirectory( "C:\\Download", "TestDir" , true, DateTime.MinValue, DateTime.MaxValue);
             sftp.UploadDirectory( "C:\\Download", "TestDir" , true, 0, Int64.MaxValue);
            */
              
            System.Console.WriteLine("TestDir has now {0} KB", sftp.GetDirectorySize("TestDir") / 1024);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Uploads all directories, subdirectories and files in the selected Directory asynchronously to the SSH server 
            System.Console.WriteLine("We are uploading the Download folder to the TestDir folder .This is a non-blocking call")
             
            ' All these calls do the same thing
            sftp.CreateDirectory("TestDir")
            sftp.UploadDirectory("C:\\Download", "TestDir")
            ' sftp.UploadDirectory( "C:\\Download", "TestDir" , true, "*.*");
             'sftp.UploadDirectory( "C:\\Download", "TestDir" , true, new Regex(".+"));
             'sftp.UploadDirectory( "C:\\Download", "TestDir" , true, DateTime.MinValue, DateTime.MaxValue);
             'sftp.UploadDirectory( "C:\\Download", "TestDir" , true, 0, Int64.MaxValue);
            '
             
            System.Console.WriteLine("TestDir has now {0} KB", sftp.GetDirectorySize("TestDir") / 1024)
                </code>
            </example>
            <param name="localDirectory">The local path to upload</param>
            <param name="ftpDirectory">The FTP directory to upload to</param>
            <param name="subDirectories">Upload files in sub directories</param>
            <param name="regularExpression">Regular Expression</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.UploadDirectoryAsync(System.String,System.String,System.Boolean,System.Text.RegularExpressions.Regex,System.Object)">
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Uploads all directories, subdirectories and files in the selected Directory asynchronously to the SSH server 
            System.Console.WriteLine("We are uploading the Download folder to the TestDir folder .This is a non-blocking call");
             
            // All these calls do the same thing
            sftp.CreateDirectory("TestDir");
            sftp.UploadDirectoryAsync("C:\\Download", "TestDir");
            /* sftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, "*.*");
             sftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, new Regex(".+"));
             sftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, DateTime.MinValue, DateTime.MaxValue);
             sftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, 0, Int64.MaxValue);
            */
              
            while (sftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("TestDir has now {0} KB", sftp.GetDirectorySize("TestDir") / 1024);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Uploads all directories, subdirectories and files in the selected Directory asynchronously to the SSH server 
            System.Console.WriteLine("We are uploading the Download folder to the TestDir folder .This is a non-blocking call")
             
            ' All these calls do the same thing
            sftp.CreateDirectory("TestDir")
            sftp.UploadDirectoryAsync("C:\\Download", "TestDir")
            ' sftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, "*.*");
             'sftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, new Regex(".+"));
             'sftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, DateTime.MinValue, DateTime.MaxValue);
             'sftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, 0, Int64.MaxValue);
            '
             
            Do While sftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("TestDir has now {0} KB", sftp.GetDirectorySize("TestDir") / 1024)
                </code>
            </example>
            <summary>Upload files matching the regular expression.</summary>
            <param name="localDirectory">The local directory to upload</param>
            <param name="ftpDirectory">The FTP directory to upload to</param>
            <param name="subDirectories">If true, upload subdirectories.</param>
            <param name="regularExpression">The regular expression to match the files.</param>
            <param name="customObject">Your custom object to be returned with Started, Progress, and Completed Events</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.UploadDirectoryAsync(System.String,System.String,System.Boolean,System.Text.RegularExpressions.Regex)">
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Uploads all directories, subdirectories and files in the selected Directory asynchronously to the SSH server 
            System.Console.WriteLine("We are uploading the Download folder to the TestDir folder .This is a non-blocking call");
             
            // All these calls do the same thing
            sftp.CreateDirectory("TestDir");
            sftp.UploadDirectoryAsync("C:\\Download", "TestDir");
            /* sftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, "*.*");
             sftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, new Regex(".+"));
             sftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, DateTime.MinValue, DateTime.MaxValue);
             sftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, 0, Int64.MaxValue);
            */
              
            while (sftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("TestDir has now {0} KB", sftp.GetDirectorySize("TestDir") / 1024);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Uploads all directories, subdirectories and files in the selected Directory asynchronously to the SSH server 
            System.Console.WriteLine("We are uploading the Download folder to the TestDir folder .This is a non-blocking call")
             
            ' All these calls do the same thing
            sftp.CreateDirectory("TestDir")
            sftp.UploadDirectoryAsync("C:\\Download", "TestDir")
            ' sftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, "*.*");
             'sftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, new Regex(".+"));
             'sftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, DateTime.MinValue, DateTime.MaxValue);
             'sftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, 0, Int64.MaxValue);
            '
             
            Do While sftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("TestDir has now {0} KB", sftp.GetDirectorySize("TestDir") / 1024)
                </code>
            </example>
            <summary>Upload files matching the regular expression.</summary>
            <param name="localDirectory">The local directory to upload</param>
            <param name="ftpDirectory">The FTP directory to upload to</param>
            <param name="subDirectories">If true, upload subdirectories.</param>
            <param name="regularExpression">The regular expression to match the files.</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.SynchronizeUpload(System.String,System.String)">
            <summary>
            Transfer files that do not exist locally synchronously OR Files that have a
            different byte count OR Files that have a modification date difference in seconds
            greater than 60. The hour difference between the local machine and
            the SSH server is taken into account when CalcHourDifference has been called. By
            default all files and sub directories are attempted to be synchronized.
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60 *
            sftp.SynchronizeUpload("C:\\Download", "TestDir");
            System.Console.WriteLine("transferring unsynchronized files to the TestDir FTP folder");
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60 *
            sftp.SynchronizeUpload("C:\\Download", "TestDir")
            System.Console.WriteLine("transferring unsynchronized files to the TestDir FTP folder")
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local directory to upload</param>
            <param name="ftpDirectory">The FTP directory to upload to</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.SynchronizeUploadWithDelete(System.String,System.String)">
            <summary>
            Transfer files that do not exist locally synchronously OR Files that have a
            different byte count OR Files that have a modification date difference in seconds
            greater than 60. The hour difference between the local machine and
            the SSH server is taken into account when CalcHourDifference has been called. By
            default all files and sub directories are attempted to be synchronized.
            FTP files and directories will be deleted if they do not exist in the corresponding local directory.
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60 *
            sftp.SynchronizeUploadWithDelete("C:\\Download", "TestDir");
            System.Console.WriteLine("transferring unsynchronized files to the TestDir FTP folder");
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60 *
            sftp.SynchronizeUploadWithDelete("C:\\Download", "TestDir")
            System.Console.WriteLine("transferring unsynchronized files to the TestDir FTP folder")
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local directory to upload</param>
            <param name="ftpDirectory">The FTP directory to upload to</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.SynchronizeUploadAsync(System.String,System.String,System.Object)">
            <summary>
            Transfer files that do not exist locally synchronously OR Files that have a
            different byte count OR Files that have a modification date difference in seconds
            greater than 60. The hour difference between the local machine and
            the SSH server is taken into account when CalcHourDifference has been called. By
            default all files and sub directories are attempted to be synchronized.
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60 *
            sftp.SynchronizeUploadAsync("C:\\Download", "TestDir");
            System.Console.WriteLine("Transferring unsynchronized files to the TestDir FTP folder");
             
            while (sftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60 *
            sftp.SynchronizeUploadAsync("C:\\Download", "TestDir")
            System.Console.WriteLine("Transferring unsynchronized files to the TestDir FTP folder")
             
            Do While sftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local directory to upload</param>
            <param name="ftpDirectory">The FTP directory to upload to</param>
            <param name="customObject">Your custom object to be returned with Started, Progress, and Completed Events</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.SynchronizeUploadWithDeleteAsync(System.String,System.String,System.Object)">
            <summary>
            Transfer files that do not exist locally synchronously OR Files that have a
            different byte count OR Files that have a modification date difference in seconds
            greater than 60. The hour difference between the local machine and
            the SSH server is taken into account when CalcHourDifference has been called. By
            default all files and sub directories are attempted to be synchronized.
            FTP files and directories will be deleted if they do not exist in the corresponding local directory.
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60 *
            sftp.SynchronizeUploadWithDeleteAsync("C:\\Download", "TestDir");
            System.Console.WriteLine("Transferring unsynchronized files to the TestDir FTP folder");
             
            while (sftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60 *
            sftp.SynchronizeUploadWithDeleteAsync("C:\\Download", "TestDir")
            System.Console.WriteLine("Transferring unsynchronized files to the TestDir FTP folder")
             
            Do While sftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local directory to upload</param>
            <param name="ftpDirectory">The FTP directory to upload to</param>
            <param name="customObject">Your custom object to be returned with Started, Progress, and Completed Events</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.SynchronizeUpload(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Synchronize Upload a Directory and Exclude a List of files, directories, or wildcards. Useful for synchronizing to different environments, DEV, QA, PROD, where server specific settings such as the web.config are different. 
            </summary>
            <remarks>
            bin  (Directory or file named bin anywhere in the structure)
            somefile.txt (a file)
            *.bak (Exclude all files with *.bak)
            </remarks>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60 *
            sftp.SynchronizeUpload("C:\\Download", "TestDir", new List&lt;string&gt; { "web.config"} );
            System.Console.WriteLine("transferring unsynchronized files to the TestDir FTP folder");
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60 *
            sftp.SynchronizeUpload("C:\\Download", "TestDir", new List&lt;string&gt; { "web.config"} )
            System.Console.WriteLine("transferring unsynchronized files to the TestDir FTP folder")
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The path for the local directory</param>
            <param name="ftpDirectory">The ftp directory</param>
            <param name="filesAndDirectoriesToExclude">files or directories or wildcard pattern to exclude</param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.SynchronizeUploadAsync(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Synchronize Upload a Directory and Exclude a List of files, directories, or wildcards.  Useful for synchronizing to different environments, DEV, QA, PROD, where server specific settings such as the web.config are different. 
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60 *
            sftp.SynchronizeUploadAsync("C:\\Download", "TestDir", new List&lt;string&gt; { "web.config"});
            System.Console.WriteLine("Transferring unsynchronized files to the TestDir FTP folder");
             
            while (sftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60 *
            sftp.SynchronizeUploadAsync("C:\\Download", "TestDir", new List&lt;string&gt; { "web.config"})
            System.Console.WriteLine("Transferring unsynchronized files to the TestDir FTP folder")
             
            Do While sftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount)
                </code>
            </example>
            <remarks>
            bin  (Directory or file named bin anywhere in the structure)
            somefile.txt (a file)
            *.bak (Exclude all files with *.bak)
            </remarks>
            <param name="localDirectory">The path for the local directory</param>
            <param name="ftpDirectory">The ftp directory</param>
            <param name="filesAndDirectoriesToExclude">files or directories or wildcard pattern to exclude</param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.SynchronizeUploadWithDelete(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Synchronize Upload a Directory With Delete and Exclude a List of files, directories, or wildcards.  Useful for synchronizing to different environments, DEV, QA, PROD, where server specific settings such as the web.config are different. 
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60 *
            sftp.SynchronizeUploadWithDelete("C:\\Download", "TestDir", new List&lt;string&gt; { "web.config"});
            System.Console.WriteLine("transferring unsynchronized files to the TestDir FTP folder");
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60 *
            sftp.SynchronizeUploadWithDelete("C:\\Download", "TestDir", new List&lt;string&gt; { "web.config"})
            System.Console.WriteLine("transferring unsynchronized files to the TestDir FTP folder")
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount)
                </code>
            </example>
            <remarks>
            bin  (Directory or file named bin anywhere in the structure)
            somefile.txt (a file)
            *.bak (Exclude all files with *.bak)
            </remarks>
            <param name="localDirectory">The path for the local directory</param>
            <param name="ftpDirectory">The ftp directory</param>
            <param name="filesAndDirectoriesToExclude">files or directories or wildcard pattern to exclude</param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.SynchronizeUploadWithDeleteAsync(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Synchronize Upload a Directory With Delete and Exclude a List of files, directories, or wildcards. Useful for synchronizing to different environments, DEV, QA, PROD, where server specific settings such as the web.config are different. 
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60 *
            sftp.SynchronizeUploadWithDeleteAsync("C:\\Download", "TestDir", new List&lt;string&gt; { "web.config"});
            System.Console.WriteLine("Transferring unsynchronized files to the TestDir FTP folder");
             
            while (sftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60 *
            sftp.SynchronizeUploadWithDeleteAsync("C:\\Download", "TestDir", new List&lt;string&gt; { "web.config"})
            System.Console.WriteLine("Transferring unsynchronized files to the TestDir FTP folder")
             
            Do While sftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount)
                </code>
            </example>
            <remarks>
            bin  (Directory or file named bin anywhere in the structure)
            somefile.txt (a file)
            *.bak (Exclude all files with *.bak)
            </remarks>
            <param name="localDirectory">The path for the local directory</param>
            <param name="ftpDirectory">The ftp directory</param>
            <param name="filesAndDirectoriesToExclude">files or directories or wildcard pattern to exclude</param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.SynchronizeUploadAsync(System.String,System.String)">
            <summary>
            Transfer files that do not exist locally synchronously OR Files that have a
            different byte count OR Files that have a modification date difference in seconds
            greater than 60. The hour difference between the local machine and
            the SSH server is taken into account when CalcHourDifference has been called. By
            default all files and sub directories are attempted to be synchronized.
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60 *
            sftp.SynchronizeUploadAsync("C:\\Download", "TestDir");
            System.Console.WriteLine("Transferring unsynchronized files to the TestDir FTP folder");
             
            while (sftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60 *
            sftp.SynchronizeUploadAsync("C:\\Download", "TestDir")
            System.Console.WriteLine("Transferring unsynchronized files to the TestDir FTP folder")
             
            Do While sftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local directory to upload</param>
            <param name="ftpDirectory">The FTP directory to upload to</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.SynchronizeUploadWithDeleteAsync(System.String,System.String)">
            <summary>
            Transfer files that do not exist locally synchronously OR Files that have a
            different byte count OR Files that have a modification date difference in seconds
            greater than 60. The hour difference between the local machine and
            the SSH server is taken into account when CalcHourDifference has been called. By
            default all files and sub directories are attempted to be synchronized.
            FTP files and directories will be deleted if they do not exist in the corresponding local directory.
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60 *
            sftp.SynchronizeUploadWithDeleteAsync("C:\\Download", "TestDir");
            System.Console.WriteLine("Transferring unsynchronized files to the TestDir FTP folder");
             
            while (sftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60 *
            sftp.SynchronizeUploadWithDeleteAsync("C:\\Download", "TestDir")
            System.Console.WriteLine("Transferring unsynchronized files to the TestDir FTP folder")
             
            Do While sftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local directory to upload</param>
            <param name="ftpDirectory">The FTP directory to upload to</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.SynchronizeUpload(System.String,System.String,System.Boolean)">
            <summary>
            Transfer files that do not exist remotely synchronously OR Files that have a
            different byte count OR Files that have a modification date difference in seconds
            greater than 60. The hour difference between the local machine and
            the SSH server is taken into account when CalcHourDifference has been called. By
            default all files and sub directories are attempted to be synchronized.
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60 *
            sftp.SynchronizeUpload("C:\\Download", "TestDir");
            System.Console.WriteLine("transferring unsynchronized files to the TestDir FTP folder");
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60 *
            sftp.SynchronizeUpload("C:\\Download", "TestDir")
            System.Console.WriteLine("transferring unsynchronized files to the TestDir FTP folder")
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local directory to upload</param>
            <param name="ftpDirectory">The FTP directory to upload to</param>
            <param name="subDirectories">If true, upload sub directories</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.SynchronizeUpload(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Transfer files that match the passed wildcard pattern that do not exist remotely synchronously OR Files that have a
            different byte count OR Files that have a modification date difference in seconds
            greater than 60. The hour difference between the local machine and
            the SSH server is taken into account when CalcHourDifference has been called. By
            default all files and sub directories are attempted to be synchronized.
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60 *
            sftp.SynchronizeUpload("C:\\Download", "TestDir");
            System.Console.WriteLine("transferring unsynchronized files to the TestDir FTP folder");
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60 *
            sftp.SynchronizeUpload("C:\\Download", "TestDir")
            System.Console.WriteLine("transferring unsynchronized files to the TestDir FTP folder")
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local directory to upload</param>
            <param name="ftpDirectory">The FTP directory to upload to</param>
            <param name="subDirectories">If true, upload sub directories</param>
            <param name="wildcardPattern"></param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.SynchronizeUploadWithDelete(System.String,System.String,System.Boolean)">
            <summary>
            Transfer files that do not exist locally synchronously OR Files that have a
            different byte count OR Files that have a modification date difference in seconds
            greater than 60. The hour difference between the local machine and
            the SSH server is taken into account when CalcHourDifference has been called. By
            default all files and sub directories are attempted to be synchronized.
            FTP files and directories will be deleted if they do not exist in the corresponding local directory.
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60 *
            sftp.SynchronizeUploadWithDelete("C:\\Download", "TestDir");
            System.Console.WriteLine("transferring unsynchronized files to the TestDir FTP folder");
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60 *
            sftp.SynchronizeUploadWithDelete("C:\\Download", "TestDir")
            System.Console.WriteLine("transferring unsynchronized files to the TestDir FTP folder")
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local directory to upload</param>
            <param name="ftpDirectory">The FTP directory to upload to</param>
            <param name="subDirectories">If true, upload sub directories</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.SynchronizeUploadAsync(System.String,System.String,System.Boolean,System.Object)">
            <summary>
            Transfer files that do not exist locally synchronously OR Files that have a
            different byte count OR Files that have a modification date difference in seconds
            greater than 60. The hour difference between the local machine and
            the SSH server is taken into account when CalcHourDifference has been called. By
            default all files and sub directories are attempted to be synchronized.
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60 *
            sftp.SynchronizeUploadAsync("C:\\Download", "TestDir");
            System.Console.WriteLine("Transferring unsynchronized files to the TestDir FTP folder");
             
            while (sftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60 *
            sftp.SynchronizeUploadAsync("C:\\Download", "TestDir")
            System.Console.WriteLine("Transferring unsynchronized files to the TestDir FTP folder")
             
            Do While sftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local directory to upload</param>
            <param name="ftpDirectory">The FTP directory to upload to</param>
            <param name="subDirectories">If true, upload subdirectories</param>
            <param name="customObject">Your custom object to be returned with Started, Progress, and Completed Events</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.SynchronizeUploadWithDeleteAsync(System.String,System.String,System.Boolean,System.Object)">
            <summary>
            Transfer files that do not exist locally synchronously OR Files that have a
            different byte count OR Files that have a modification date difference in seconds
            greater than 60. The hour difference between the local machine and
            the SSH server is taken into account when CalcHourDifference has been called. By
            default all files and sub directories are attempted to be synchronized.
            FTP files and directories will be deleted if they do not exist in the corresponding local directory.
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60 *
            sftp.SynchronizeUploadWithDeleteAsync("C:\\Download", "TestDir");
            System.Console.WriteLine("Transferring unsynchronized files to the TestDir FTP folder");
             
            while (sftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60 *
            sftp.SynchronizeUploadWithDeleteAsync("C:\\Download", "TestDir")
            System.Console.WriteLine("Transferring unsynchronized files to the TestDir FTP folder")
             
            Do While sftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local directory to upload</param>
            <param name="ftpDirectory">The FTP directory to upload to</param>
            <param name="subDirectories">If true, upload subdirectories</param>
            <param name="customObject">Your custom object to be returned with Started, Progress, and Completed Events</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.SynchronizeUploadAsync(System.String,System.String,System.Boolean)">
            <summary>
            Transfer files that do not exist locally synchronously OR Files that have a
            different byte count OR Files that have a modification date difference in seconds
            greater than 60. The hour difference between the local machine and
            the SSH server is taken into account when CalcHourDifference has been called. By
            default all files and sub directories are attempted to be synchronized.
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60 *
            sftp.SynchronizeUploadAsync("C:\\Download", "TestDir");
            System.Console.WriteLine("Transferring unsynchronized files to the TestDir FTP folder");
             
            while (sftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60 *
            sftp.SynchronizeUploadAsync("C:\\Download", "TestDir")
            System.Console.WriteLine("Transferring unsynchronized files to the TestDir FTP folder")
             
            Do While sftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local directory to upload</param>
            <param name="ftpDirectory">The FTP directory to upload to</param>
            <param name="subDirectories">If true, upload subdirectories</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.CompressBytes(KellermanSoftware.NetSFtpLibrary.CompressionType,System.Byte[])">
            <example>
            	<code title="" description="" lang="CS">SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            byte[] input = System.Text.ASCIIEncoding.ASCII.GetBytes(string.Empty.PadRight(8000, '*'));           
            byte[] results = sftp.CompressBytes(KellermanSoftware.EncryptionLibrary.CompressionType.GZip, input);
             
            Console.WriteLine("Compressed from {0} to {1}", input.Length, results.Length);</code>
            	<code title="" description="" lang="VB">Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            Dim Input As Byte() = System.Text.ASCIIEncoding.ASCII.GetBytes(String.Empty.PadRight(8000, "*"c))
            Dim results As Byte() = sftp.CompressBytes(KellermanSoftware.EncryptionLibrary.CompressionType.GZip, Input)
             
            Console.WriteLine("Compressed from {0} to {1}", Input.Length, results.Length)</code>
            </example>
            <summary>Compress the passed bytes using the specified compression type</summary>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.DecompressBytes(KellermanSoftware.NetSFtpLibrary.CompressionType,System.Byte[])">
            <example>
            	<code title="" description="" lang="CS">SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            string originalString = string.Empty.PadRight(8000, '*');
            byte[] input = System.Text.ASCIIEncoding.ASCII.GetBytes(originalString);
             
            encrypted = sftp.CompressBytes(KellermanSoftware.EncryptionLibrary.CompressionType.GZip, input);
            decrypted = sftp.DecompressBytes(KellermanSoftware.EncryptionLibrary.CompressionType.GZip, encrypted);
            string decryptedString = System.Text.ASCIIEncoding.ASCII.GetString(decrypted);
             
            Console.WriteLine("The strings are equal : {0}", originalString == decryptedString);</code>
            	<code title="" description="" lang="VB">Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            Dim originalString As String = String.Empty.PadRight(8000, "*"c)
            Dim Input As Byte() = System.Text.ASCIIEncoding.ASCII.GetBytes(originalString)
             
            encrypted = sftp.CompressBytes(KellermanSoftware.EncryptionLibrary.CompressionType.GZip, Input)
            decrypted = sftp.DecompressBytes(KellermanSoftware.EncryptionLibrary.CompressionType.GZip, encrypted)
            Dim decryptedString As String = System.Text.ASCIIEncoding.ASCII.GetString(decrypted)
             
            Console.WriteLine("The strings are equal : {0}", originalString = decryptedString)</code>
            </example>
            <summary>Decompress the passed bytes using the specified compression type</summary>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.CompressStream(KellermanSoftware.NetSFtpLibrary.CompressionType,System.IO.Stream,System.IO.Stream)">
            <summary>Compress a stream using the specified compression type</summary>
            <param name="compressionType"></param>
            <param name="input"></param>
            <param name="output"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.DecompressStream(KellermanSoftware.NetSFtpLibrary.CompressionType,System.IO.Stream,System.IO.Stream)">
            <summary>Decompress a stream using the specified compression type</summary>
            <param name="compressionType"></param>
            <param name="input"></param>
            <param name="output"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.CompressFile(KellermanSoftware.NetSFtpLibrary.CompressionType,System.String,System.String)">
            <example>
            	<code title="" description="" lang="CS">SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            string inputFilePath = "c:\\bigfile.txt");
            string outputFilePath = "c:\\compressed.txt");
            sftp.CompressFile(KellermanSoftware.EncryptionLibrary.CompressionType.GZip, inputFilePath, outputFilePath);</code>
            	<code title="" description="" lang="VB">Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            Dim inputFilePath As String = "c:\bigfile.txt")
            Dim outputFilePath As String = "c:\compressed.txt")
            sftp.CompressFile(KellermanSoftware.EncryptionLibrary.CompressionType.GZip, inputFilePath, outputFilePath)</code>
            </example>
            <summary>Compress a file using the specified compression type</summary>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.DecompressFile(KellermanSoftware.NetSFtpLibrary.CompressionType,System.String,System.String)">
            <example>
            	<code title="" description="" lang="CS">SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            string inputFilePath = "c:\\bigfile.txt");
            string compressedPath = "c:\compressed.txt");
            string decompressedPath = "c:\decompressed.txt");
             
            sftp.CompressFile(KellermanSoftware.EncryptionLibrary.CompressionType.GZip, inputFilePath, compressedPath);
            sftp.DecompressFile(KellermanSoftware.EncryptionLibrary.CompressionType.GZip, compressedPath, decompressedPath);</code>
            	<code title="" description="" lang="VB">Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            Dim inputFilePath As String = "c:\bigfile.txt")
            Dim compressedPath As String = "c:\compressed.txt")
            Dim decompressedPath As String = "c:\decompressed.txt")
             
            sftp.CompressFile(KellermanSoftware.EncryptionLibrary.CompressionType.GZip, inputFilePath, compressedPath)
            sftp.DecompressFile(KellermanSoftware.EncryptionLibrary.CompressionType.GZip, compressedPath, decompressedPath)</code>
            </example>
            <summary>Decompress a file using the specified compression type</summary>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.WildcardToRegex(System.String)">
            <example>
            	<code title="" description="" lang="CS">SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            string wildcard = "*.cs";
            string regexString = sftp.WildcardToRegex(wildcard);
             
            Console.WriteLine("Pattern {0} was changed to {1}",wildcard,regexString);</code>
            	<code title="" description="" lang="VB">Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            Dim wildcard As String = "*.cs"
            Dim regexString As String = sftp.WildcardToRegex(wildcard)
             
            Console.WriteLine("Pattern {0} was changed to {1}",wildcard,regexString)</code>
            </example>
            <summary>Translate a wildcard pattern to a regex string</summary>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.GetDirectorySize(System.String)">
            <example>
            	<code title="" description="" lang="CS">SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Gets the size of a remote directory  
            long size = sftp.GetDirectorySize("TestDir");
             
            System.Console.WriteLine("The TestDir directory has {0}( KB)", size / 1024);</code>
            	<code title="" description="" lang="VB">Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Gets the size of a remote directory  
            Dim size As Long = sftp.GetDirectorySize("TestDir")
             
            System.Console.WriteLine("The TestDir directory has {0}( KB)", size / 1024)</code>
            </example>
            <summary>Gets the size of a remote directory in bytes</summary>
            <returns>The directory size, or -1 on failure</returns>
            <param name="folderName">Name of the folder in the current directory</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.GetCrcLocal(System.String)">
            <summary>Get the CRC32 of a local file in hexadecimal</summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.FileExistsByRegex(System.Text.RegularExpressions.Regex)">
            <summary>Returns true if a file exists in the current directory matching the regular expression</summary>
            <param name="regularExpression"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.DeleteByWildcard(System.String,System.Boolean)">
            <summary>
            Deletes all of the files in the current directory matching a pattern
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Deletes all of the files in the current directory matching a pattern 
            System.Console.WriteLine("We are trying to delete all files in the current directory and all subdirs");
             
            sftp.DeleteByWildcard("*.txt", true);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Deletes all of the files in the current directory matching a pattern
            System.Console.WriteLine("We are trying to delete all files in the current directory and all subdirs")
             
            sftp.DeleteByWildcard("*.txt", True)
                </code>
            </example>
            <param name="pattern">Files to delete, in the format of *.ext</param>
            <param name="subDirectories">Whether or not to recurse sub directories</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.DirectoriesEqual(System.String,System.String)">
            <example>
            	<code title="" description="" lang="CS">SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            bool result = sftp.DirectoriesEqual("c:\\directory1", "c:\\directory2");
            Console.WriteLine("The directories are the same : {0}",result);</code>
            	<code title="" description="" lang="VB">Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            Dim result As Boolean = sftp.DirectoriesEqual("c:\directory1", "c:\directory2")
            Console.WriteLine("The directories are the same : {0}",result)</code>
            </example>
            <summary>Returns true if the Cyclic Redundancy Check Passes for all files in two local directories</summary>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.DeleteByWildcard(System.Text.RegularExpressions.Regex,System.Boolean)">
            <summary>Deletes a file by a regular expression.</summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Delete files that start with the letter B
            sftp.CurrentDirectory = "test";
            sftp.DeleteByDateRange(new Regex("^B.+$"), true);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Delete files that start with the letter B
            sftp.CurrentDirectory = "test"
            sftp.DeleteByDateRange(New Regex("^B.+$"), True)
                </code>
            </example>
            <param name="pattern">Regex to match</param>
            <param name="subDirectories">Whether to recurse subdirectories</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.DeleteByDateRange(System.DateTime,System.DateTime,System.Boolean)">
            <example>
            	<code title="" description="" lang="CS">SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Delete files from yesterday until right now in the directory "test"
            DateTime minDate = DateTime.Now.AddDays(-1);
            DateTime maxDate = DateTime.Now;
            sftp.CurrentDirectory = "test";
            sftp.DeleteByDateRange(minDate, maxDate, subDirectories);</code>
            	<code title="" description="" lang="VB">Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Delete files from yesterday until right now in the directory "test"
            Dim minDate As DateTime = DateTime.Now.AddDays(-1)
            Dim maxDate As DateTime = DateTime.Now
            sftp.CurrentDirectory = "test"
            sftp.DeleteByDateRange(minDate, maxDate, subDirectories)</code>
            </example>
            <summary>Delete all files in the current FTP directory with a modification date within the
            specified date range</summary>
            <param name="minDate">The minimum file date to delete</param>
            <param name="maxDate">The maximum file date to delete</param>
            <param name="subDirectories">If true, delete files in sub directories</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.CalcHourDifference">
            <example>
            	<code title="" description="" lang="CS">SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Calculate the hour difference between this PC and the FTP Server
            sftp.CalcHourDifference();
            System.Console.WriteLine("The difference in hours is {0}", sftp.HourDifference);</code>
            	<code title="" description="" lang="VB">Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Calculate the hour difference between this PC and the FTP Server
            sftp.CalcHourDifference()
            System.Console.WriteLine("The difference in hours is {0}", sftp.HourDifference)</code>
            </example>
            <summary>Calculate the difference in hours between the local pc and the remote ftp server.
            The current logged in user must have write access to the current ftp directory.</summary>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.CrcEqualLocal(System.String,System.String)">
            <example>
            	<code title="" description="" lang="CS">SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            bool result = sftp.CrcEqual("c:\\file1.txt", "c:\\file2.txt");
            Console.WriteLine("The files are the same : {0}",result);</code>
            	<code title="" description="" lang="VB">Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            Dim result As Boolean = sftp.CrcEqual("c:\file1.txt", "c:\file2.txt")
            Console.WriteLine("The files are the same : {0}",result)</code>
            </example>
            <summary>Return true if the Cyclic Redundancy Check is the same for two local files. This
            is a fast way to compare if two files are the same</summary>
            <param name="file1">The local file path of the first file</param>
            <param name="file2">The local file path of the second file</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.GetFileSize(System.String)">
            <example>
            	<code title="" description="" lang="CS">SFTP sftp = new SFTP(); //Trial Mode
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Gets the file size of a remote file 
            long size = sftp.GetFileSize("a.txt");
             
            System.Console.WriteLine("a.txt`s size is {0}", size);</code>
            	<code title="" description="" lang="VB">Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Gets the file size of a remote file
            Dim size As Long = sftp.GetFileSize("a.txt")
             
            System.Console.WriteLine("a.txt`s size is {0}", size)</code>
            </example>
            <summary>Gets the file size of a remote file in bytes.</summary>
            <returns>The file size, or -1 on failure</returns>
            <param name="fileName">Name of file in the current directory</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.Connect">
            <example>
            	<code title="" description="" lang="CS">SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            sftp.Connect();</code>
            	<code title="" description="" lang="VB">Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            sftp.Connect()</code>
            </example>
            <summary>Open the FTP Server connection explicitly and leave it open until explicitly
            closed.</summary>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.Cancel">
            <example>
            	<code title="" description="" lang="CS">SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            sftp.UploadDirectoryAsync("C:\\Download", "TestDir");
             
            //we wait 1 second for data to be Transferred 
            System.Threading.Thread.Sleep(1000);
             
            //Cancels any async transfers 
            System.Console.WriteLine("We are canceling any async transfer");
            sftp.Cancel();
             
            System.Console.WriteLine("Async operations {0) cancelled", sftp.IsBusy == true ? "have not" : "have been" );</code>
            	<code title="" description="" lang="VB">Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here");
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            sftp.UploadDirectoryAsync("C:\\Download", "TestDir")
             
            'we wait 1 second for data to be Transferred
            System.Threading.Thread.Sleep(1000)
             
            'Cancels any async transfers
            System.Console.WriteLine("We are canceling any async transfer")
            sftp.Cancel()
             
            If sftp.IsBusy = True Then
                System.Console.WriteLine("Async operations {0) cancelled","have not")
            Else
                System.Console.WriteLine("Async operations {0) cancelled","have been")
            End If</code>
            </example>
            <summary>Cancels any async transfers</summary>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.EnableLogging(System.IO.MemoryStream@)">
            <summary>
            Log all FTP operations to a memory stream. 
            </summary>
            <param name="memStream"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.EnableLogging">
            <summary>
            Log all FTP commands, responses, and exceptions to the console.
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.EnableLogging(System.String)">
            <summary>
            Log all FTP commands, responses and exceptions to a file.
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.DisableLogging">
            <summary>Disable all logging.</summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.ClearLog(System.String)">
            <summary>
            Clear the file log
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.ClearLog(System.IO.MemoryStream@)">
            <summary>
            Clear the memory stream
            </summary>
            <param name="memStream"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.GetDirectorySizeForUpload(System.IO.DirectoryInfo,System.String,System.Boolean,KellermanSoftware.NetSFtpLibrary.DirectoryTransferModes,System.Object)">
            <summary>
            Recursively get a local directories size and add each file/directory to upload into TransferFiles
            </summary>
            <param name="d">The path of a local directory</param>
            <param name="filter">The filter to screen what files to transfer</param>
            <param name="mode">What type of filter to use</param>
            <param name="remotePath">The remote directory to determine directory size</param>
            <param name="subDirectories">True to recurse the sub directories</param>
            <returns>The size of the directory</returns>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.VerifyLocalDirectoryForUpload(System.String)">
            <summary>
            Ensure that the local directory can be uploaded
            </summary>
            <param name="localDirectory"></param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.VerifyFtpDirectoryForUpload(System.String)">
            <summary>
            Verify that we have an FTP directory name
            </summary>
            <param name="ftpDirectory"></param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.GetRemoteDirectorySize(System.String)">
            <summary>
            Recursively get a remote directories size
            </summary>
            <param name="dir">Sub folder name</param>
            <returns>Size of the directory</returns>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.GetRemoteDirectorySizeForDownload(System.String,System.String,System.Boolean,KellermanSoftware.NetSFtpLibrary.DirectoryTransferModes,System.Object)">
            <summary>
            Recursively get a remote directories size and create the structures needed to transfer it
            </summary>
            <param name="d">The path of a remote directory</param>
            <param name="filter">The filter to screen what files to transfer</param>
            <param name="mode">What type of filter to use</param>
            <param name="localPath">The remote directory to determine directory size</param>
            <param name="subDirectories">True to recurse the sub directories</param>
            <returns>The size of a remote directory</returns>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.VerifyFtpDirectoryForDownload(System.String)">
            <summary>
            Verify that the FTP directory exists
            </summary>
            <param name="ftpDirectory"></param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.VerifyLocalDirectoryForDownload(System.String)">
            <summary>
            Ensure that the local directory can be written to
            </summary>
            <param name="localDirectory"></param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.VerifyLocalStreamForDownload(System.IO.Stream,System.Int64)">
            <summary>
            Verify that the local stream can be downloaded
            </summary>
            <param name="localStream"></param>
            <param name="restart"></param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.VerifyFtpPathForDownload(System.String,System.Int64,System.Int64)">
            <summary>
            Ensure the file exists on the FTP Server
            </summary>
            <param name="ftpFileName"></param>
            <param name="ftpFileSize"></param>
            <param name="restart"></param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.VerifyLocalFilePathForDownload(System.String,System.Int64)">
            <summary>
            Verify that the local path exists and that we can download to it
            </summary>
            <param name="localFilePath"></param>
            <param name="restart"></param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.VerifyLocalStreamForUpload(System.IO.Stream,System.Int64)">
            <summary>
            Ensure the local stream can be uploaded
            </summary>
            <param name="localStream"></param>
            <param name="restart"></param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.VerifyLocalFilePathForUpload(System.String,System.Int64)">
            <summary>
            Verify that the local file exists 
            </summary>
            <param name="localFilePath"></param>
            <param name="restart"></param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.GetLocalFileSize(System.String)">
            <summary>
            Get the size in bytes of a local file
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.ClearProgress">
            <summary>
            Clear the progress statistics
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.VerifyFtpPathForUpload(System.String)">
            <summary>
            Make sure there is an FTP path 
            </summary>
            <param name="ftpFileName"></param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.Throttle(System.Int64,System.Int64,System.DateTime)">
            <summary>
            Calculates the current and average transfer speed, throttling it if needed
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.DisconnectImplicit">
            <summary>
            Disconnect implicitly 
            </summary>
        </member>
        <member name="E:KellermanSoftware.NetSFtpLibrary.SFTP.FileTransferCompleteEvent">
            <summary>
            Fired when an asynchronous transfer has completed
            </summary>
        </member>
        <member name="T:KellermanSoftware.NetSFtpLibrary.SFTP.FileTransferCompleteEventHandler">
            <summary>
            Occurs when an asynchronous download/upload file completes.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:KellermanSoftware.NetSFtpLibrary.SFTP.CustomLoggerEventHandler">
            <summary>Occurs when there is something to log</summary>
            <param name="sender"></param>
            <param name="message"></param>
        </member>
        <member name="T:KellermanSoftware.NetSFtpLibrary.SFTP.CommandSentEventHandler">
            <summary>Delegate of a function to be called when an event is sent to the SSH server</summary>
            <param name="sender">The FTP class firing the event</param>
            <param name="e">The structure holding the command and parameters</param>
        </member>
        <member name="T:KellermanSoftware.NetSFtpLibrary.SFTP.FailureEventHandler">
            <summary>
            Occurs when an error occurs during an asynchronous operation.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:KellermanSoftware.NetSFtpLibrary.SFTP.ResponseReceivedEventHandler">
            <summary>Delegate of a function to be called when an event is received from the SSH server</summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:KellermanSoftware.NetSFtpLibrary.SFTP.TransferProgressChangedEventHandler">
            <summary>Called during a transfer to report the progress completed</summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:KellermanSoftware.NetSFtpLibrary.SFTP.TransferStartedEventHandler">
            <summary>Fired when an asyncronous transfer is started.
            When transferring entire directories, it is fired once right before the first file begins transferring.</summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:KellermanSoftware.NetSFtpLibrary.SFTP.TransferCompleteEventHandler">
            <summary>Occurs when an asynchronous download/upload operation completes.
            When transferring entire directories, it is fired when everything is transferred</summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:KellermanSoftware.NetSFtpLibrary.SFTP.TransferCancelEventHandler">
            <summary>Occurs when an asynchronous download/upload operation is cancelled.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="E:KellermanSoftware.NetSFtpLibrary.SFTP.CommandLoggerEvent">
            <summary>
            Occurs when there is something to log
            </summary>
        </member>
        <member name="E:KellermanSoftware.NetSFtpLibrary.SFTP.ResponseReceivedEvent">
            <summary>
            Fired when a response is received from the FTP Sever
            </summary>
        </member>
        <member name="E:KellermanSoftware.NetSFtpLibrary.SFTP.FileProgressEvent">
            <summary>
            Fired for upload/download progress of the current file
            </summary>
        </member>
        <member name="E:KellermanSoftware.NetSFtpLibrary.SFTP.OverallProgressEvent">
            <summary>
            When downloading/uploading directories this is the overall progress 
            </summary>
        </member>
        <member name="E:KellermanSoftware.NetSFtpLibrary.SFTP.TransferStartedEvent">
            <summary>
            Fired when an asynchronous transfer has started
            </summary>
        </member>
        <member name="E:KellermanSoftware.NetSFtpLibrary.SFTP.TransferCancelEvent">
            <summary>
            Fired when an asynchronous transfer has cancelled
            </summary>
        </member>
        <member name="E:KellermanSoftware.NetSFtpLibrary.SFTP.TransferCompleteEvent">
            <summary>
            Fired when an asynchronous transfere has completed
            </summary>
        </member>
        <member name="E:KellermanSoftware.NetSFtpLibrary.SFTP.CommandSentEvent">
            <summary>
            Fired when a command is sent to the FTP server
            </summary>
        </member>
        <member name="E:KellermanSoftware.NetSFtpLibrary.SFTP.FailureEvent">
            <summary>
            Fired when an exception occurs during an asyncronous operation
            </summary>
        </member>
        <member name="T:KellermanSoftware.NetSFtpLibrary.SFTP.CommandSentEventArgs">
            <summary>Structure passed with events when a command is sent to the remote server</summary>
        </member>
        <member name="F:KellermanSoftware.NetSFtpLibrary.SFTP.CommandSentEventArgs.command">
            <summary>
            The FTP command
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetSFtpLibrary.SFTP.CommandSentEventArgs.param">
            <summary>
            A parameter passed with the command, normally a file or directory name - can be null
            </summary>
        </member>
        <member name="T:KellermanSoftware.NetSFtpLibrary.SFTP.ResponseReceivedEventArgs">
            <summary>Structure to hold the response from the FTP Server</summary>
        </member>
        <member name="F:KellermanSoftware.NetSFtpLibrary.SFTP.ResponseReceivedEventArgs.code">
            <summary>
            The response code received from the FTP Server
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetSFtpLibrary.SFTP.ResponseReceivedEventArgs.text">
            <summary>
            The response text received from the FTP Server
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.Dispose">
            <summary>
            Disposes the object by canceling any async transfer and destroying the FTPRequest object
            </summary>
            <example>
            	<code lang="CS">
            //Disposes the object by canceling any async transfer 
            //and destroying the FTPRequest object 
             
            // Dispose is called by .net when writing something like
            using (SFTP sftp = new SFTP())
            {
             
            }
            // dispose is called here for the ftp object
             
            //Alternate way
            SFTP sftp = new SFTP();
            sftp.Dispose();
                </code>
            	<code lang="VB">
            'Disposes the object by canceling any async transfer
            'and destroying the FTPRequest object
             
            ' Dispose is called by .net when writing something like
            Using ftp As FTP = New FTP()
             
            End Using
            ' dispose is called here for the ftp object
             
            'Alternate way
            Dim sftp As SFTP = New SFTP()
            sftp.Dispose()
                </code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.CheckLicense(System.String,System.String)">
            <summary>
            The variables below are specific to the licensing component
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.#ctor">
            <summary>Constructor for Trial Version.</summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode
            </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            </code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.#ctor(System.String,System.String)">
            <summary>Constructor for Licensed Version.</summary>
            <example>
            	<code lang="CS">
            		<![CDATA[
            SFTP sftp = new SFTP("place user name here", "place license key here");]]>
            	</code>
            	<code lang="VB">
            		<![CDATA[
            Dim sftp as SFTP = New SFTP("place user name here", "place license key here")]]>
            	</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.#ctor(System.String)">
            <summary>
            Extend the trial of the Software
            </summary>
            <param name="trialExtensionCode"></param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.Finalize">
            <summary>
            Finalize
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.SFTP.DisableRemoteDirectoryDetection">
            <summary>
            If true when uploading a file do not check if the target directory is the same name as the file being uploaded
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.SFTP.SynchronizationMode">
            <summary>
            Determines which files are transferred during synchronization.  Default is CopyIfTheSizeIsDifferentOrDateIsNewer
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.SFTP.TransferMode">
            <summary>
            Determines if files are transferred as binary or ASCII.  The default is binary.  See the TransferMode enum for more information.
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.SFTP.MaxAuthorizationTries">
            <summary>
            When trying to connect the .NET SFTP Library will try User Name and Password, Public Key Authentication, and Keyboard Interactive Authentication By Default.  
            There are a default of three authorization attempts.  If set to 1, it will only try User Name and Password, if set to 2 then User Name/Password then Public Key, if 3 then Keyboard Interactive Authentication
            </summary>
            <value>The Maximum Authorization Tries</value>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.SFTP.DefaultDirectory">
            <summary>
            This is a property that is set after connecting to the default directory.  When disconnected, this property is null.
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.SFTP.OverrideCiphers">
            <summary>
            Explicitly override the ciphers that should be used when connecting.  This is a comma delimited list.
            Valid Ciphers are: aes128-ctr,aes128-cbc,aes192-ctr,aes192-cbc,aes256-ctr,aes256-cbc,3des-ctr,3des-cbc,blowfish-cbc,arcfour256,arcfour128,arcfour,twofish128-ctr,twofish192-ctr,twofish256-ctr,twofish128-cbc,twofish192-cbc,twofish256-cbc,serpent128-cbc,serpent128-ctr,serpent192-cbc,serpent192-ctr,serpent256-cbc,serpent256-ctr,cast128-ctr,cast128-cbc
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.SFTP.OverrideMacs">
            <summary>
            Explicity override the MAC integrity checking when connecting.  This is a comma delimited list.
            Valid MAC algorithims are: hmac-sha2-256,hmac-sha2-256-96,hmac-sha2-512,hmac-sha2-512-96,hmac-md5,hmac-sha1,hmac-sha1-96,hmac-md5-96
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.SFTP.OverrideKeyExchanges">
            <summary>
            Explicitly override the Key Exchanges when connecting.  This is a comma delimited list.
            Valid Key exchanges are:  diffie-hellman-group-exchange-sha256,diffie-hellman-group1-sha1,diffie-hellman-group14-sha1,diffie-hellman-group-exchange-sha1
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.SFTP.Compression">
            <summary>
            Compression.  The default is autodetect.  If the server supports ZLib compression it will atomatically be used.  
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.SFTP.FipsCompliantMode">
            <summary>
            FIPS 140-2 Mode.  If true, only AES and 3DES algorithms will be allowed for communication.  Only HMAC SHA1 will be used for the handshake.  The default is false.  Your remote SSH Server must support FIPS 140-2 in order to connect.
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.SFTP.BufferSize">
            <summary>
            Set the Buffer Size In Bytes For Uploading and Downloading. The default is 32767 bytes
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.SFTP.IsConnected">
            <summary>Returns true if we are connected to the FTP server.</summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SFTP server( its URL )
            sftp.HostAddress = "some.sftp.server.com";
            sftp.UserName = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //It should default to false
            Console.WriteLine("Connected: {0}", sftp.IsConnected);
             
            sftp.Connect();
            //We should now be connected
            Console.WriteLine("Connected: {0}", sftp.IsConnected);
             
            sftp.Disconnect();
            //We are now disconnected
            Console.WriteLine("Connected: {0}", sftp.IsConnected);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp = New SFTP("place user name here", "place license key here")
             
            ' set the name of the SFTP server( its URL )
            sftp.HostAddress = "some.sftp.server.com"
            sftp.UserName = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'It should default to false
            Console.WriteLine("Connected: {0}", sftp.IsConnected)
             
            sftp.Connect()
            'We should now be connected
            Console.WriteLine("Connected: {0}", sftp.IsConnected)
             
            sftp.Disconnect()
            'We are now disconnected
            Console.WriteLine("Connected: {0}", sftp.IsConnected)
                </code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.SFTP.SshKeyFile">
            <summary>
            A private key file for an SSH connection in OpenSSH or Putty format
            </summary>
            <example>
            	<code lang="CS" title="SshKeyFileCsharp">
            		<![CDATA[
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
            sftp.SshKeyFile = @"c:\mykey";
            sftp.SshPassphrase = "qazzaq";
             
            // set the name of the SFTP server( its URL )
            sftp.HostAddress = "some.sftp.server.com";
            sftp.UserName = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
                    
            sftp.Connect();]]>
            	</code>
            	<code lang="VB" title="SshKeyFileVB">
            		<![CDATA[
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here")
            sftp.SshKeyFile = "c:\mykey"
            sftp.SshPassphrase = "qazzaq"
             
            ' set the name of the SFTP server( its URL )
            sftp.HostAddress = "some.sftp.server.com"
            sftp.UserName = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            sftp.Connect()]]>
            	</code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.SFTP.SshKeyStream">
            <summary>
            As an alternate to the SSH Key File, create a memory stream for the key
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.SFTP.SshPassphrase">
            <summary>
            A passphrase for the SshKeyFile or SshKeyStream if required 
            </summary>
            <example>
            	<code lang="CS" title="SshPassphrase">
            		<![CDATA[
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
            sftp.SshKeyFile = @"c:\mykey";
            sftp.SshPassphrase = "qazzaq";
             
            // set the name of the SFTP server( its URL )
            sftp.HostAddress = "some.sftp.server.com";
            sftp.UserName = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
                    
            sftp.Connect();]]>
            	</code>
            	<code lang="VB" title="SshPassphraseVB">
            		<![CDATA[
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp As SFTP = New SFTP("place user name here", "place license key here")
            sftp.SshKeyFile = "c:\mykey"
            sftp.SshPassphrase = "qazzaq"
             
            ' set the name of the SFTP server( its URL )
            sftp.HostAddress = "some.sftp.server.com"
            sftp.UserName = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            sftp.Connect()]]>
            	</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.CreatePortForwardingL(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Creates a local-side port forwarding.
            </summary>
            <param name="boundAddress"> The network interface we should be listening on</param>
            <param name="lPort">The local port to listen on. If 0, the system randomly selects a port (and returns this number).</param>
            <param name="host">The remote host (i.e. at the server-side) to forward the connections to.</param>
            <param name="rPort">The port at the remote host to forward the connections to.</param>
            <returns>The local port number we now are listening on.</returns>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.DeletePortForwardingL(System.String,System.Int32)">
            <summary>
            Delete local-side port forwarding 
            </summary>
            <param name="boundAddress">The network interface we should be listening on</param>
            <param name="lPort">The local port we are listening on</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.GetPortForwardingL">
            <summary>
            Returns a snapshot of the current local port forwarding configurations.
            </summary>
            <returns>an array of strings, each describing one forwarding. Each string is of the form
            localport:remotehost:remoteport
            with the numbers in decimal representation.
            </returns>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.CreatePortForwardingR(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Creates a remote side port forwarding to a host at the local side.
            </summary>
            <param name="bind_address">The network interface to bind on on the remote side. If null, bind to (remote) localhost, if "" or "*", bind to all interfaces.</param>
            <param name="rport">The port to listen on on the remote side.</param>
            <param name="host">The host on the local side to forward connections to.</param>
            <param name="lport">The port at host to forward connections to.</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.DeletePortForwardingR(System.Int32)">
            <summary>
            Removes a remote port forwarding.
            </summary>
            <param name="rport">The remote listening port.</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.ExecuteShellCommand(System.String,System.Int32)">
            <summary>
            Execute a shell command on an SSH Server
            </summary>
            <param name="request">The command to execute</param>
            <param name="timeout">Timeout, msec</param>
            <returns>Response</returns>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.SCPPutBinary(System.IO.Stream,System.String,System.DateTime,System.DateTime,System.String,KellermanSoftware.NetSFtpLibrary.Interfaces.IFireProgress)">
            <summary>
            Upload a file using the SCP Protocol
            </summary>
            <param name="localStream">Local file stream</param>
            <param name="remoteFileName">Remote file name</param>
            <param name="modifiedDate">The modification date to set</param>
            <param name="accessDate">The acess date to set</param>
            <param name="permissions">A permissions string</param>
            <param name="fireProgress">Monitor the progress</param>
            <remarks>https://blogs.oracle.com/janp/entry/how_the_scp_protocol_works</remarks>
            <example>
            	<code title="Example" description="" lang="C#">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymus"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            sftp.Connect();
             
            byte[] buffer = new byte[] { 0x01, 0x02, 0x03 };
            MemoryStream stream = new MemoryStream(buffer);
            string newFileName = Guid.NewGuid().ToString() + ".dat";
             
            DateTime accessDate = new DateTime(2011, 10, 09, 08, 07, 06, 0, DateTimeKind.Utc);
            DateTime modifiedDate = new DateTime(2012, 11, 10, 09, 08, 07, 0, DateTimeKind.Utc);
            sftp.SCPPutBinary(stream, "TestFolder/" + newFileName, modifiedDate, accessDate, "3765", null);</code>
            	<code title="Example2" description="" lang="VB.NET">
            Dim sftp As New SFTP() 'Trial Mode
            'Dim sftp = New SFTP("place user name here", "place license key here")
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName = "anonymus" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            sftp.Connect()
             
            Dim buffer() As Byte = { &amp;H1, &amp;H2, &amp;H3 }
            Dim stream As New MemoryStream(buffer)
            Dim newFileName As String = Guid.NewGuid().ToString() &amp; ".dat"
             
            Dim accessDate As New Date(2011, 10, 09, 08, 07, 06, 0, DateTimeKind.Utc)
            Dim modifiedDate As New Date(2012, 11, 10, 09, 08, 07, 0, DateTimeKind.Utc)
            sftp.SCPPutBinary(stream, "TestFolder/" &amp; newFileName, modifiedDate, accessDate, "3765", Nothing)</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.SCPPutBinary(System.String,System.String,KellermanSoftware.NetSFtpLibrary.Interfaces.IFireProgress)">
            <summary>
            Upload a file using SCP
            </summary>
            <param name="localFilePath">A fully qualified local file path</param>
            <param name="remoteFileName">Remote file name</param>
            <param name="fireProgress">Monitor the progress</param>
            <remarks>https://blogs.oracle.com/janp/entry/how_the_scp_protocol_works</remarks>
            <example>
            	<code title="Example" description="" lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymus"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            sftp.SCPPutBinary("C://Download/a.txt", "a.txt");
             
            System.Console.WriteLine("a.txt {0}", sftp.FileExists("a.txt") == true ? "is on the ftp server" : "does not exist on the ftp server");</code>
            	<code title="Example2" description="" lang="VB.NET">
            Dim sftp As New SFTP() 'Trial Mode
            'Dim sftp = New SFTP("place user name here", "place license key here")
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName = "anonymus" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            sftp.SCPPutBinary("C://Download/a.txt", "a.txt")
             
            System.Console.WriteLine("a.txt {0}",If(sftp.FileExists("a.txt") = True, "is on the ftp server", "does not exist on the ftp server"))</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.SCPPutBinary(System.String,System.String)">
            <summary>
            Upload a file using SCP
            </summary>
            <param name="localFilePath">A fully qualified local file path</param>
            <param name="remoteFileName">Remote file name</param>
            <remarks>https://blogs.oracle.com/janp/entry/how_the_scp_protocol_works</remarks>
            <example>
            	<code title="Example" description="" lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymus"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            sftp.SCPPutBinary("C://Download/a.txt", "a.txt");
             
            System.Console.WriteLine("a.txt {0}", sftp.FileExists("a.txt") == true ? "is on the ftp server" : "does not exist on the ftp server");</code>
            	<code title="Example2" description="" lang="VB.NET">
            Dim sftp As New SFTP() 'Trial Mode
            'Dim sftp = New SFTP("place user name here", "place license key here")
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName = "anonymus" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            sftp.SCPPutBinary("C://Download/a.txt", "a.txt")
             
            System.Console.WriteLine("a.txt {0}",If(sftp.FileExists("a.txt") = True, "is on the ftp server", "does not exist on the ftp server"))</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.SCPGetBinary(System.IO.Stream,System.String,KellermanSoftware.NetSFtpLibrary.Interfaces.IFireProgress)">
            <summary>
            Get a file using the SCP Protocol
            </summary>
            <param name="localStream">A local file stream</param>
            <param name="remoteFileName">The remote file name</param>
            <param name="fireProgress">Monitor the progress</param>
            <remarks>https://blogs.oracle.com/janp/entry/how_the_scp_protocol_works</remarks>
            <example>
            	<code title="Example" description="" lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymus"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            using (FileStream fileStream = new FileStream("a.txt", FileMode.Create, FileAccess.Write))
            {
                sftp.SCPGetBinary(fileStream, "a.txt", null);
            }</code>
            	<code title="Example2" description="" lang="VB.NET">
            Dim sftp As New SFTP() 'Trial Mode
            'Dim sftp = New SFTP("place user name here", "place license key here")
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName = "anonymus" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            Using fileStream As New FileStream("a.txt", FileMode.Create, FileAccess.Write)
                sftp.SCPGetBinary(fileStream, "a.txt", Nothing)
            End Using</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.SCPGetBinary(System.String,System.String)">
            <summary>
            Download a file using SCP
            </summary>
            <param name="localFilePath">A fully qualified path with the file name</param>
            <param name="remoteFileName">The name of the file to get</param>
            <remarks>https://blogs.oracle.com/janp/entry/how_the_scp_protocol_works</remarks>
            <example>
            	<code title="Example" description="" lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymus"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            sftp.SCPGetBinary("a.txt", "a.txt");</code>
            	<code title="Example2" description="" lang="VB.NET">
            Dim sftp As New SFTP() 'Trial Mode
            'Dim sftp = New SFTP("place user name here", "place license key here")
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName = "anonymus" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            sftp.SCPGetBinary("a.txt", "a.txt")</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.SCPGetBinary(System.String,System.String,KellermanSoftware.NetSFtpLibrary.Interfaces.IFireProgress)">
            <summary>
            Download a file using SCP
            </summary>
            <param name="localFilePath">A fully qualified path with the file name</param>
            <param name="remoteFileName">The name of the file to get</param>
            <param name="fireProgress">Monitor the progress</param>
            <remarks>https://blogs.oracle.com/janp/entry/how_the_scp_protocol_works</remarks>
            <example>
            	<code title="Example" description="" lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your SFTP server
            sftp.UserName  = "anonymus"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            sftp.SCPGetBinary("a.txt", "a.txt");</code>
            	<code title="Example2" description="" lang="VB.NET">
            Dim sftp As New SFTP() 'Trial Mode
            'Dim sftp = New SFTP("place user name here", "place license key here")
             
            ' set the name of the SSH server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your SFTP server
            sftp.UserName = "anonymus" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            sftp.SCPGetBinary("a.txt", "a.txt")</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.SCPCreateDirectory(System.String)">
            <summary>
            Create a directory using the SCP Protocol
            </summary>
            <param name="directoryName"></param>
            <remarks>https://blogs.oracle.com/janp/entry/how_the_scp_protocol_works</remarks>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.GenerateSshKey(System.String,System.String,System.String,System.String,KellermanSoftware.NetSFtpLibrary.Interfaces.SshKeyAlgorithm,KellermanSoftware.NetSFtpLibrary.Interfaces.SshKeySize,KellermanSoftware.NetSFtpLibrary.Interfaces.SshPublicKeyType,KellermanSoftware.NetSFtpLibrary.Interfaces.SshPrivateKeyType)">
            <summary>
            Generate a public/private key pair for SSH. 
            </summary>
            <param name="outputPath">The output directory</param>
            <param name="keyName">The name for the key</param>
            <param name="passPhrase">The passphrase (use string.Empty for no passphrase)</param>
            <param name="comment">The comment for the public key</param>
            <param name="keyAlgorithm">RSA or DSA</param>
            <param name="keySize">DSA keys are 1024 bits, RSA keys can be 1024, 2048, or 4096 bits</param>
            <param name="publicKeyType">IETF or OpenSSH</param>
            <param name="privateKeyType">IETF, OpenSSH, or Putty</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.UploadFile(System.String,System.String,System.Int64)">
            <summary>
            Upload a file name synchronously using FTP
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SFTP server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your sftp server
            sftp.UserName = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            System.Console.WriteLine("We are uploading the a.txt file the Current FTP folder .This is a blocking call");
             
            sftp.UploadFile("C://Download/a.txt", "a.txt");
             
            System.Console.WriteLine("a.txt {0}", sftp.FileExists("a.txt") == true ? "is on the ftp server" : "does not exist on the ftp server");
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp = New SFTP("place user name here", "place license key here")
             
            ' set the name of the SFTP server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your sftp server
            sftp.UserName = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            System.Console.WriteLine("We are uploading the a.txt file the Current FTP folder .This is a blocking call")
             
            sftp.UploadFile("C://Download/a.txt", "a.txt")
             
            If sftp.FileExists("a.txt") = True Then
                System.Console.WriteLine("a.txt {0}","is on the ftp server")
            Else
                System.Console.WriteLine("a.txt {0}","does not exist on the ftp server")
            End If
                </code>
            </example>
            <param name="localFilePath">The full path of the file, including the file name</param>
            <param name="ftpFileName">The full path of the FTP file, including the ftp directory and file name</param>
            <param name="restart">The byte offset to begin uploading</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.DownloadFile(System.String,System.String,System.Int64)">
            <summary>
            Download a file name synchronously using FTP from the specified byte
            offset
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SFTP server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your sftp server
            sftp.UserName = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            System.Console.WriteLine("We are downloading the a.txt file.  This is a blocking call");
             
            sftp.DownloadFile("a.txt", "a.txt");
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp = New SFTP("place user name here", "place license key here")
             
            ' set the name of the SFTP server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your sftp server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            System.Console.WriteLine("We are downloading the a.txt file.  This is a blocking call")
             
            sftp.DownloadFile("a.txt", "a.txt")
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount)
                </code>
            </example>
            <param name="localFilePath">The full path of the file, including the file name</param>
            <param name="ftpFileName">The full path of the FTP file, including the ftp directory and file name</param>
            <param name="restart">The byte offset to start downloading</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.DownloadFile(System.String,System.String,System.Int64,System.Int64)">
            <summary>
            Download a section of a file name synchronously using FTP from the specified byte
            offset and length
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SFTP server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your sftp server
            sftp.UserName = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            System.Console.WriteLine("We are downloading the a.txt file.  This is a blocking call");
             
            sftp.DownloadFile("a.txt", "a.txt");
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp = New SFTP("place user name here", "place license key here")
             
            ' set the name of the SFTP server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your sftp server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            System.Console.WriteLine("We are downloading the a.txt file.  This is a blocking call")
             
            sftp.DownloadFile("a.txt", "a.txt")
             
            System.Console.WriteLine("{0} files have been Transferred", sftp.FileCount)
                </code>
            </example>
            <param name="localFilePath">The full path of the file, including the file name</param>
            <param name="ftpFileName">The full path of the FTP file, including the ftp directory and file name</param>
            <param name="restart">The byte offset to start downloading</param>
            <param name="maxLength">The number of bytes to download</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.UploadDirectory(System.String,System.String,System.Boolean,KellermanSoftware.NetSFtpLibrary.DirectoryTransferModes,System.Object)">
            <summary>
            Uploads a local directory to an ftp directory
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.SetPermissions(System.String,System.String)">
            <summary>
            Set file or directory permissions.  It must be in the same format as the permissions string in the FileInfo
            </summary>
            <param name="fileOrDirectoryName"></param>
            <param name="permissionsString"></param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.GetAllFiles(System.String)">
            <summary>
            Recursively get a list of files in the specified directory and all subdirectories
            </summary>
            <param name="ftpDirectory">The starting path</param>
            <returns>A list of files</returns>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.GetDirectoryListing">
            <summary>
            Return a list of the files in the current ftp directory
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SFTP server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your sftp server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Return a list of the files and dirs in the current ftp directory 
            List&lt;FTPFileInfo&gt; files = sftp.GetDirectoryListing();
             
            System.Console.WriteLine("Listing the files/dirs in the current FTP directory");
             
            foreach (FTPFileInfo fi in files)
            {
                System.Console.WriteLine("{0} --  {1} ", fi.FileName, fi.IsDirectory);
            }
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp = New SFTP("place user name here", "place license key here")
             
            ' set the name of the SFTP server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your sftp server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Return a list of the files and dirs in the current ftp directory
            List And lt
            FTPFileInfo And gt
            files = sftp.GetDirectoryListing()
             
            System.Console.WriteLine("Listing the files/dirs in the current FTP directory")
             
            For Each fi As FTPFileInfo In files
               System.Console.WriteLine("{0} --  {1} ", fi.FileName, fi.IsDirectory)
            Next fi
                </code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.FileExistsByWildcard(System.String)">
            <summary>Returns true if a file exists in the current directory matching the wildcard pattern</summary>
            <param name="wildcardPattern"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.GetDirectoryListing(System.String,System.Boolean)">
            <summary>
            Get a listing of the files in the current FTP directory matching the passed wildcard expression
            </summary>
            <param name="wildCardPattern">Wildcard pattern to match</param>
            <param name="showDirectories">If true, directory names are returned</param>
            <returns>A list of files</returns>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.ExceptionHandler(System.Exception)">
            <summary>
            Logs the exception, sets last exception and then throws it
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.CreateDirectory(System.String)">
            <summary>
            Create a directory in the current FTP directory
            </summary>
            <returns>True if the directory is successfully created</returns>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SFTP server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your sftp server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Creates a directory in the current FTP directory 
            bool status = sftp.CreateDirectory("TestDir");
             
            System.Console.WriteLine("TestDir {0} created", status == true ? "has been" : "could not be");
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp = New SFTP("place user name here", "place license key here")
             
            ' set the name of the SFTP server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your sftp server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Creates a directory in the current FTP directory
            Dim status As Boolean = sftp.CreateDirectory("TestDir")
             
            If status = True Then
                System.Console.WriteLine("TestDir {0} created","has been")
            Else
                System.Console.WriteLine("TestDir {0} created","could not be")
            End If
                </code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.DeleteDirectory(System.String)">
            <summary>
            Delete a directory in the current FTP directory. It deletes all files and sub
            directories within a directory.
            </summary>
            <returns>True if the directory is successfully deleted</returns>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SFTP server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your sftp server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
             
            //Delete a directory in the current FTP directory 
            //It deletes all files and subdirectories within a directory 
            System.Console.WriteLine("We are trying to delete all files in the TestDir directory and all its subdirs");
             
            bool status = false;
             
            status = sftp.DeleteDirectory("TestDir");
             
            System.Console.WriteLine("TestDir and all its files and subfolders {0} deleted", status == true ? "has been" : "could not be");
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp = New SFTP("place user name here", "place license key here")
             
            ' set the name of the SFTP server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your sftp server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
             
            'Delete a directory in the current FTP directory 
            'It deletes all files and subdirectories within a directory 
            System.Console.WriteLine("We are trying to delete all files in the TestDir directory and all its subdirs")
             
            Dim status As Boolean = False
             
            status = sftp.DeleteDirectory("TestDir")
             
            If status = True Then
                System.Console.WriteLine("TestDir and all its files and subfolders {0} deleted","has been")
            Else
                System.Console.WriteLine("TestDir and all its files and subfolders {0} deleted","could not be")
            End If
                </code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.DeleteFile(System.String)">
            <summary>
            Delete a file in the current FTP directory
            </summary>
            <returns>True if the file is successfully deleted OR the file does not exist</returns>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SFTP server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your sftp server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Delete a file in the current FTP directory 
            System.Console.WriteLine("We are trying to delete TestFile");
             
            bool status = sftp.DeleteFile("TestFile");
             
            System.Console.WriteLine("TestFile {0} deleted", status == true ? "has been" : "could not be");
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp = New SFTP("place user name here", "place license key here")
             
            ' set the name of the SFTP server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your sftp server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Delete a file in the current FTP directory
            System.Console.WriteLine("We are trying to delete TestFile")
             
            Dim status As Boolean = sftp.DeleteFile("TestFile")
             
            If status = True Then
                System.Console.WriteLine("TestFile {0} deleted","has been")
            Else
                System.Console.WriteLine("TestFile {0} deleted","could not be")
            End If
                </code>
            </example>
            <param name="fileName">The file to delete</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.DirectoryExists(System.String)">
            <summary>Check to see if an FTP directory exists.</summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SFTP server( its URL )
            sftp.HostAddress = "some.sftp.server.com";
            sftp.UserName = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            bool result = sftp.DirectoryExists("/test")
            Console.WriteLine("The SFTP directory exists : {0}",result);
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp = New SFTP("place user name here", "place license key here")
             
            ' set the name of the SFTP server( its URL )
            sftp.HostAddress = "some.sftp.server.com"
            sftp.UserName = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            Dim result As Boolean = sftp.DirectoryExists("/test")
            Console.WriteLine("The SFTP directory exists : {0}",result)
                </code>
            </example>        
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.Disconnect">
            <summary>Explicitly disconnect from the SFTP server.</summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SFTP server( its URL )
            sftp.HostAddress = "some.sftp.server.com";
            sftp.UserName = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            sftp.Connect();
             
            sftp.Disconnect();
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp = New SFTP("place user name here", "place license key here")
             
            ' set the name of the SFTP server( its URL )
            sftp.HostAddress = "some.sftp.server.com"
            sftp.UserName = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            sftp.Connect()
             
            sftp.Disconnect()
                </code>
            </example>		
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.FileExists(System.String)">
            <summary>
            Check to see if a file exists in the current FTP directory
            </summary>
            <returns>True if the file exists in the current FTP directory</returns>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SFTP server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your sftp server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Check to see if a file exists in the current FTP directory 
            bool status = sftp.FileExists("a.txt");
             
            System.Console.WriteLine("a.txt {0} on the server", status == true ? "exists" : "does not exist");
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp = New SFTP("place user name here", "place license key here")
             
            ' set the name of the SFTP server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your sftp server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Check to see if a file exists in the current FTP directory
            Dim status As Boolean = sftp.FileExists("a.txt")
             
            If status = True Then
                System.Console.WriteLine("a.txt {0} on the server","exists")
            Else
                System.Console.WriteLine("a.txt {0} on the server","does not exist")
            End If
                </code>
            </example>
            <param name="fileName">The FTP file name</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.GetFileDate(System.String)">
            <summary>Gets the modification date of a remote file.</summary>
            <returns>The modification date or DateTime(0) if it fails</returns>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SFTP server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your sftp server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Gets the file size of a remote file 
            DateTime dateTime = sftp.GetFileDate("a.txt");
             
            System.Console.WriteLine("a.txt was created on {0}", dateTime.ToString());
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp = New SFTP("place user name here", "place license key here")
             
            ' set the name of the SFTP server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your sftp server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Gets the file size of a remote file
            Dim dateTime As DateTime = sftp.GetFileDate("a.txt")
             
            System.Console.WriteLine("a.txt was created on {0}", dateTime.ToString())
                </code>
            </example>
            <param name="fileName">Name of file in the current directory</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.RenameDirectory(System.String,System.String)">
            <summary>
            Renames a directory in the current FTP directory
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SFTP server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your sftp server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Renames a directory in the current FTP directory 
            bool status = sftp.RenameDirectory("TestDir", "newDir");
             
            if (status == true)
                sftp.RenameDirectory("newDir", "TestDir");
             
            System.Console.WriteLine("TestDir has {0} renamed to newDir and back again", status == true ? "been" : "not been");
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp = New SFTP("place user name here", "place license key here")
             
            ' set the name of the SFTP server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your sftp server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Renames a directory in the current FTP directory
            Dim status As Boolean = sftp.RenameDirectory("TestDir", "newDir")
             
            If status = True Then
               sftp.RenameDirectory("newDir", "TestDir")
            End If
             
            If status = True Then
                System.Console.WriteLine("TestDir has {0} renamed to newDir and back again","been")
            Else
                System.Console.WriteLine("TestDir has {0} renamed to newDir and back again","not been")
            End If
                </code>
            </example>
            <param name="oldName">The current directory name</param>
            <param name="newName">The new directory name</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.MoveFile(System.String,System.String)">
            <summary>
            Move a file on the SFTP Server
            </summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SFTP server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your sftp server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Move a file from one directory to another
            bool status = sftp.MoveFile("/ZTEST/InnerDirectory1/TestFile.txt", "/ZTEST/InnerDirectory2/TestFile.txt");
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp = New SFTP("place user name here", "place license key here")
             
            ' set the name of the SFTP server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your sftp server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Renames a file in the current FTP directory
            Dim status As Boolean = sftp.MoveFile("/ZTEST/InnerDirectory1/TestFile.txt", "/ZTEST/InnerDirectory2/TestFile.txt")
             
                </code>
            </example>        /// <param name="oldPathAndName">The old path and file name</param>
            <param name="newPathAndName">The new path and file name</param>
            <returns>True if the move was successful</returns>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.RenameFile(System.String,System.String)">
            <summary>Renames a file in the current FTP directory.</summary>
            <example>
            	<code lang="CS">
            SFTP sftp = new SFTP(); //Trial Mode            
            //SFTP sftp = new SFTP("place user name here", "place license key here");
             
            // set the name of the SFTP server( its URL )
            sftp.HostAddress = "some.sftp.server.com"; // replace with your sftp server
            sftp.UserName  = "anonymous"; // replace with your user name
            sftp.Password = "user@mail.com"; // replace with your password
             
            //Renames a file in the current FTP directory 
            bool status = sftp.RenameFile("a.txt", "b.txt");
             
            if (status == true)
                sftp.RenameFile("b.txt", "a.txt");
             
             
            System.Console.WriteLine("a.txt has {0} renamed to newDir and back again", status == true ? "been" : "not been");
                </code>
            	<code lang="VB">
            Dim sftp As SFTP = New SFTP() 'Trial Mode
            'Dim sftp = New SFTP("place user name here", "place license key here")
             
            ' set the name of the SFTP server( its URL )
            sftp.HostAddress = "some.sftp.server.com" ' replace with your sftp server
            sftp.UserName  = "anonymous" ' replace with your user name
            sftp.Password = "user@mail.com" ' replace with your password
             
            'Renames a file in the current FTP directory
            Dim status As Boolean = sftp.RenameFile("a.txt", "b.txt")
             
            If status = True Then
               sftp.RenameFile("b.txt", "a.txt")
            End If
             
             
            If status = True Then
                System.Console.WriteLine("a.txt has {0} renamed to newDir and back again","been")
            Else
                System.Console.WriteLine("a.txt has {0} renamed to newDir and back again","not been")
            End If
                </code>
            </example>
            <param name="oldName">The current file name</param>
            <param name="newName">The new file name</param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.Retry">
            <summary>
            Retry after a failed Asynchronous FTP Operation
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.ToString">
            <summary>
            Get connected host
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.SiteToSiteTransferFile(KellermanSoftware.NetSFtpLibrary.SFTP,System.String)">
            <summary>
            Transfer specified by name file from current SFTP to destination SFTP.
            </summary>
            <example>
            	<code title="Example" description="" lang="CS">
            //Connect to the source
            SFTP sftpSource = new SFTP();
            sftpSource.HostAddress = "source server address";
            sftpSource.UserName = "source user name";
            sftpSource.Password = "source password";
            sftpSource.EnableLogging();
            sftpSource.Connect();
             
            //Create a source directory on the source SFTP server
            sftpSource.CreateDirectory("SourceDir");
            sftpSource.CurrentDirectory = "SourceDir";
             
            //Create a test file and upload to the source directory
            File.WriteAllText("test.txt", "This is a test");
            sftpSource.UploadFile("test.txt", "test.txt");
             
            //Connect to the destination
            SFTP sftpDest = new SFTP();
            sftpDest.HostAddress = "dest server address"; 
            sftpDest.UserName = "dest user name";
            sftpDest.Password = "dest password";
            sftpDest.EnableLogging();
            sftpDest.Connect();
             
            //Create a dest directory on the dest SFTP server
            sftpDest.CreateDirectory("DestDir");
            sftpDest.CurrentDirectory = "DestDir";
             
            sftpSource.SiteToSiteTransferFile(sftpDest,"test.txt");
             
            if (sftpDest.FileExists("test.txt"))
                Console.WriteLine("Success!");</code>
            	<code title="Example2" description="" lang="VB.NET">
            'Connect to the source
            Dim sftpSource As New SFTP()
            sftpSource.HostAddress = "source server address"
            sftpSource.UserName = "source user name"
            sftpSource.Password = "source password"
            sftpSource.EnableLogging()
            sftpSource.Connect()
             
            'Create a source directory on the source SFTP server
            sftpSource.CreateDirectory("SourceDir")
            sftpSource.CurrentDirectory = "SourceDir"
             
            'Create a test file and upload to the source directory
            File.WriteAllText("test.txt", "This is a test")
            sftpSource.UploadFile("test.txt", "test.txt")
             
            'Connect to the destination
            Dim sftpDest As New SFTP()
            sftpDest.HostAddress = "dest server address"
            sftpDest.UserName = "dest user name"
            sftpDest.Password = "dest password"
            sftpDest.EnableLogging()
            sftpDest.Connect()
             
            'Create a dest directory on the dest SFTP server
            sftpDest.CreateDirectory("DestDir")
            sftpDest.CurrentDirectory = "DestDir"
             
            sftpSource.SiteToSiteTransferFile(sftpDest,"test.txt")
             
            If sftpDest.FileExists("test.txt") Then
                Console.WriteLine("Success!")
            End If</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.SiteToSiteTransferFileAsync(KellermanSoftware.NetSFtpLibrary.SFTP,System.String)">
            <summary>
            Transfer specified by name file from current SFTP to destination SFTP asynchronously.
            </summary>
            <example>
            	<code title="Example" description="" lang="CS">
            //Connect to the source
            SFTP sftpSource = new SFTP();
            sftpSource.HostAddress = "source server address";
            sftpSource.UserName = "source user name";
            sftpSource.Password = "source password";
            sftpSource.EnableLogging();
            sftpSource.Connect();
             
            //Create a source directory on the source SFTP server
            sftpSource.CreateDirectory("SourceDir");
            sftpSource.CurrentDirectory = "SourceDir";
             
            //Create a test file and upload to the source directory
            File.WriteAllText("test.txt", "This is a test");
            sftpSource.UploadFile("test.txt", "test.txt");
             
            //Connect to the destination
            SFTP sftpDest = new SFTP();
            sftpDest.HostAddress = "dest server address"; 
            sftpDest.UserName = "dest user name";
            sftpDest.Password = "dest password";
            sftpDest.EnableLogging();
            sftpDest.Connect();
             
            //Create a dest directory on the dest SFTP server
            sftpDest.CreateDirectory("DestDir");
            sftpDest.CurrentDirectory = "DestDir";
             
            sftpSource.SiteToSiteTransferFile(sftpDest,"test.txt");
             
            if (sftpDest.FileExists("test.txt"))
                Console.WriteLine("Success!");</code>
            	<code title="Example2" description="" lang="VB.NET">
            'Connect to the source
            Dim sftpSource As New SFTP()
            sftpSource.HostAddress = "source server address"
            sftpSource.UserName = "source user name"
            sftpSource.Password = "source password"
            sftpSource.EnableLogging()
            sftpSource.Connect()
             
            'Create a source directory on the source SFTP server
            sftpSource.CreateDirectory("SourceDir")
            sftpSource.CurrentDirectory = "SourceDir"
             
            'Create a test file and upload to the source directory
            File.WriteAllText("test.txt", "This is a test")
            sftpSource.UploadFile("test.txt", "test.txt")
             
            'Connect to the destination
            Dim sftpDest As New SFTP()
            sftpDest.HostAddress = "dest server address"
            sftpDest.UserName = "dest user name"
            sftpDest.Password = "dest password"
            sftpDest.EnableLogging()
            sftpDest.Connect()
             
            'Create a dest directory on the dest SFTP server
            sftpDest.CreateDirectory("DestDir")
            sftpDest.CurrentDirectory = "DestDir"
             
            sftpSource.SiteToSiteTransferFile(sftpDest,"test.txt")
             
            If sftpDest.FileExists("test.txt") Then
                Console.WriteLine("Success!")
            End If</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.SiteToSiteDirectorySynchronization(KellermanSoftware.NetSFtpLibrary.SFTP,System.String)">
            <summary>
            Synchronize specified by name directory on current SFTP and destination SFTP.
            </summary>
            <example>
            	<code title="Example" description="" lang="CS">
            //Connect to the source
            SFTP sftpSource = new SFTP();
            sftpSource.HostAddress = "source host address";
            sftpSource.UserName = "source user name";
            sftpSource.Password = "source password";
            sftpSource.EnableLogging();
            sftpSource.Connect();
             
            //Create a source directory on the source SFTP server
            sftpSource.CreateDirectory("/SourceDir/Test");
            sftpSource.CurrentDirectory = "/SourceDir/Test";
             
            //Create a test file and upload two files to the source directory
            File.WriteAllText("test1.txt", "This is test 1");
            sftpSource.UploadFile("test1.txt", "test1.txt");
             
            File.WriteAllText("test2.txt", "This is test 2");
            sftpSource.UploadFile("test2.txt", "test2.txt");
             
            sftpSource.CurrentDirectory = "/SourceDir";
             
            //Connect to the destination
            SFTP sftpDest = new SFTP();
            sftpDest.HostAddress = "dest host address";
            sftpDest.UserName = "dest user name";
            sftpDest.Password = "dest password";
            sftpDest.EnableLogging();
            sftpDest.Connect();
             
            //Create a dest directory on the dest SFTP server
            sftpDest.CreateDirectory("DestDir/Test");
            sftpDest.CurrentDirectory = "DestDir";
             
            sftpSource.SiteToSiteDirectorySynchronization(sftpDest, "Test");
             
            if (sftpDest.FileExists("test1.txt") &amp;&amp; sftpDest.FileExists("test2.txt"))
                Console.WriteLine("Success!");</code>
            	<code title="Example2" description="" lang="VB.NET">
            'Connect to the source
            Dim sftpSource As New SFTP()
            sftpSource.HostAddress = "source host address"
            sftpSource.UserName = "source user name"
            sftpSource.Password = "source password"
            sftpSource.EnableLogging()
            sftpSource.Connect()
             
            'Create a source directory on the source SFTP server
            sftpSource.CreateDirectory("/SourceDir/Test")
            sftpSource.CurrentDirectory = "/SourceDir/Test"
             
            'Create a test file and upload two files to the source directory
            File.WriteAllText("test1.txt", "This is test 1")
            sftpSource.UploadFile("test1.txt", "test1.txt")
             
            File.WriteAllText("test2.txt", "This is test 2")
            sftpSource.UploadFile("test2.txt", "test2.txt")
             
            sftpSource.CurrentDirectory = "/SourceDir"
             
            'Connect to the destination
            Dim sftpDest As New SFTP()
            sftpDest.HostAddress = "dest host address"
            sftpDest.UserName = "dest user name"
            sftpDest.Password = "dest password"
            sftpDest.EnableLogging()
            sftpDest.Connect()
             
            'Create a dest directory on the dest SFTP server
            sftpDest.CreateDirectory("DestDir/Test")
            sftpDest.CurrentDirectory = "DestDir"
             
            sftpSource.SiteToSiteDirectorySynchronization(sftpDest, "Test")
             
            If sftpDest.FileExists("test1.txt") AndAlso sftpDest.FileExists("test2.txt") Then
                Console.WriteLine("Success!")
            End If</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.SiteToSiteDirectorySynchronizationAsync(KellermanSoftware.NetSFtpLibrary.SFTP,System.String)">
            <summary>
            Synchronize specified by name directory on current SFTP and destination SFTP asynchronously
            </summary>
            <example>
            	<code title="Example" description="" lang="CS">
            //Connect to the source
            SFTP sftpSource = new SFTP();
            sftpSource.HostAddress = "source host address";
            sftpSource.UserName = "source user name";
            sftpSource.Password = "source password";
            sftpSource.EnableLogging();
            sftpSource.Connect();
             
            //Create a source directory on the source SFTP server
            sftpSource.CreateDirectory("/SourceDir/Test");
            sftpSource.CurrentDirectory = "/SourceDir/Test";
             
            //Create a test file and upload two files to the source directory
            File.WriteAllText("test1.txt", "This is test 1");
            sftpSource.UploadFile("test1.txt", "test1.txt");
             
            File.WriteAllText("test2.txt", "This is test 2");
            sftpSource.UploadFile("test2.txt", "test2.txt");
             
            sftpSource.CurrentDirectory = "/SourceDir";
             
            //Connect to the destination
            SFTP sftpDest = new SFTP();
            sftpDest.HostAddress = "dest host address";
            sftpDest.UserName = "dest user name";
            sftpDest.Password = "dest password";
            sftpDest.EnableLogging();
            sftpDest.Connect();
             
            //Create a dest directory on the dest SFTP server
            sftpDest.CreateDirectory("DestDir/Test");
            sftpDest.CurrentDirectory = "DestDir";
             
            sftpSource.SiteToSiteDirectorySynchronization(sftpDest, "Test");
             
            if (sftpDest.FileExists("test1.txt") &amp;&amp; sftpDest.FileExists("test2.txt"))
                Console.WriteLine("Success!");</code>
            	<code title="Example2" description="" lang="VB.NET">
            'Connect to the source
            Dim sftpSource As New SFTP()
            sftpSource.HostAddress = "source host address"
            sftpSource.UserName = "source user name"
            sftpSource.Password = "source password"
            sftpSource.EnableLogging()
            sftpSource.Connect()
             
            'Create a source directory on the source SFTP server
            sftpSource.CreateDirectory("/SourceDir/Test")
            sftpSource.CurrentDirectory = "/SourceDir/Test"
             
            'Create a test file and upload two files to the source directory
            File.WriteAllText("test1.txt", "This is test 1")
            sftpSource.UploadFile("test1.txt", "test1.txt")
             
            File.WriteAllText("test2.txt", "This is test 2")
            sftpSource.UploadFile("test2.txt", "test2.txt")
             
            sftpSource.CurrentDirectory = "/SourceDir"
             
            'Connect to the destination
            Dim sftpDest As New SFTP()
            sftpDest.HostAddress = "dest host address"
            sftpDest.UserName = "dest user name"
            sftpDest.Password = "dest password"
            sftpDest.EnableLogging()
            sftpDest.Connect()
             
            'Create a dest directory on the dest SFTP server
            sftpDest.CreateDirectory("DestDir/Test")
            sftpDest.CurrentDirectory = "DestDir"
             
            sftpSource.SiteToSiteDirectorySynchronization(sftpDest, "Test")
             
            If sftpDest.FileExists("test1.txt") AndAlso sftpDest.FileExists("test2.txt") Then
                Console.WriteLine("Success!")
            End If</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.PutBinary(System.String,System.String)">
            <summary>
            Upload a binary file
            </summary>
            <param name="localPath"></param>
            <param name="remoteFile"></param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.GetBinary(System.String,System.String,System.Int64,System.Int64,System.Nullable{System.Int64},System.Boolean)">
            <summary>  
            Get as binary file, i.e. straight transfer of data
            </summary>
            <param name="localPath">  
            full path of local file to write to
            </param>
            <param name="remoteFile"> 
            name of remote file
            </param>
            <param name="fileSize"></param>
            <param name="restart"></param>
            <param name="append"></param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.GetBinary(System.IO.Stream,System.String,System.Int64,System.Int64,System.Nullable{System.Int64})">
            <summary>
            Get a binary stream
            </summary>
            <param name="localStream"></param>
            <param name="remote"></param>
            <param name="restart"></param>
            <param name="fileSize"></param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.PutBinary(System.IO.Stream,System.String,System.Int64,System.Boolean)">
            <summary>
            Upload a binary stream
            </summary>
            <param name="localStream"></param>
            <param name="remote"></param>
            <param name="restart"></param>
            <param name="append"></param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.InitDirectoryMode">
            <summary>
            This is to account for the user not having access to the root directory
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.ChangeDirectory(System.String)">
            <summary>
            Change the directory to the current directory
            The directory is changed every time, some FTP servers have a timeout and it goes back to the root
            </summary>
            <param name="directory"></param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.NoRootAccessGoToSubDirectory(System.String)">
            <summary>
            The user does not have access to the root directory.  Going into a sub directory where the full path is specified
            </summary>
            <example>
             /home/stihl
             /home/stihl/export
            </example>
            <param name="directory"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.NoRootAccessGoToPreviousOrAnotherDirectory(System.String)">
            <summary>
            The user does not have access to the root directory.  Go to a previous directory or another directory.
            </summary>
            <param name="directory"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.SetDefaultDirectory">
            <summary>
            Get the default working directory when we log in
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SFTP.ReconnectRetryLoop">
            <summary>
            Attempt to reconnect from a failed connection 
            and wait the entire amount until the remote server closes the connection
            </summary>
            <returns></returns>
        </member>
        <member name="T:KellermanSoftware.NetSFtpLibrary.ByteRange">
            <summary>
            Structure to represent a range of bytes
            </summary>
        </member>
        <member name="T:KellermanSoftware.NetSFtpLibrary.CompressionType">
            <summary>
            The compression method 
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetSFtpLibrary.CompressionType.GZip">
            <summary>
            GNU Zip Compression
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetSFtpLibrary.CompressionType.Deflate">
            <summary>
            Deflate Compression
            </summary>
        </member>
        <member name="T:KellermanSoftware.NetSFtpLibrary.DateRange">
            <summary>
            Structure to represent a range of dates
            </summary>
        </member>
        <member name="T:KellermanSoftware.NetSFtpLibrary.DirectoryTransferModes">
            <summary>
            Enum to represent the different filters that can be applied to a directory transfer
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetSFtpLibrary.DirectoryTransferModes.Normal">
            <summary>
            No filtering
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetSFtpLibrary.DirectoryTransferModes.Pattern">
            <summary>
            Filtering by a Wildcard pattern
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetSFtpLibrary.DirectoryTransferModes.Regex">
            <summary>
            Filtering by a regular expression
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetSFtpLibrary.DirectoryTransferModes.ByteSize">
            <summary>
            Filtering by min/max sizes
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetSFtpLibrary.DirectoryTransferModes.DateRange">
            <summary>
            Filtering by a date range
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetSFtpLibrary.DirectoryTransferModes.Sync">
            <summary>
            Synchronize but do not delete files that do not exist on the source
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetSFtpLibrary.DirectoryTransferModes.DirectoryOnly">
            <summary>
            Top level directory only
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetSFtpLibrary.DirectoryTransferModes.SyncWithDelete">
            <summary>
            Synchronize and delete files that do not exist on the source
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.FileCompleteEventArgs.LocalFilePath">
            <summary>
            The local file path
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.FileCompleteEventArgs.FtpDirectory">
            <summary>
            The remote FTP directory
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.FileCompleteEventArgs.FtpFilename">
            <summary>
            The remote FTP filename
            </summary>
        </member>
        <member name="T:KellermanSoftware.NetSFtpLibrary.FtpCommand">
            <summary>
            An FTP command with parameters
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.FtpCommand.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="commandString">FTP Command and Parameters</param>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.FtpCommand.Command">
            <summary>
            The FTP command
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.FtpCommand.Param">
            <summary>
            The FTP Parameters
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.FtpCommand.ToString">
            <summary>
            Get the FTP Command and Parameters
            </summary>
            <returns></returns>
        </member>
        <member name="T:KellermanSoftware.NetSFtpLibrary.FtpException">
            <summary>
            Occurs when an error occurs when an FTP command is sent to an FTP Server
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.FtpException.#ctor(KellermanSoftware.NetSFtpLibrary.FtpCommand,KellermanSoftware.NetSFtpLibrary.FtpResponse)">
            <summary>
            An unexpected response occurs for a sent FTP command
            </summary>
            <param name="command"></param>
            <param name="response"></param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.FtpException.#ctor(KellermanSoftware.NetSFtpLibrary.FtpStatus,System.Object[])">
            <summary>
            Format a message and arguments
            </summary>
            <param name="status"></param>
            <param name="data"></param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.FtpException.#ctor(KellermanSoftware.NetSFtpLibrary.FtpStatus,System.Exception,System.Object[])">
            <summary>
            Format a message and arguments and attach an inner exception
            </summary>
            <param name="status"></param>
            <param name="innerException"></param>
            <param name="data"></param>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.FtpException.Command">
            <summary>
            The FTP command that was sent to the FTP Server
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.FtpException.Status">
            <summary>
            The general status of the FTP Error
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.FtpException.Response">
            <summary>
            The response received from the FTP Server
            </summary>
        </member>
        <member name="T:KellermanSoftware.NetSFtpLibrary.FTPFileInfo">
            <summary>
            Structure to hold a directory listing
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.FTPFileInfo.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.FTPFileInfo.Permissions">
            <summary>
            The permissions of the file or directory
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.FTPFileInfo.IsLinked">
            <summary>
            True if this is a linked directory or file
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.FTPFileInfo.LinkedName">
            <summary>
            Contains the name of the real file or directory that the filename points to
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.FTPFileInfo.FileName">
            <summary>
            The filename including the extension
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.FTPFileInfo.IsDirectory">
            <summary>
            True if this is a directory, false if this is a file
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.FTPFileInfo.Modified">
            <summary>
            The date the file was modified. If a CalcHourDifference has been called, the date
            will be adjusted to the current users timezone. The default is the timezone of the FTP
            server.
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.FTPFileInfo.SizeInBytes">
            <summary>The file size in bytes. This property is zero for directories.</summary>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.FTPFileInfo.ToString">
            <summary>
            Get the filename
            </summary>
            <returns></returns>
        </member>
        <member name="T:KellermanSoftware.NetSFtpLibrary.FtpResponse">
            <summary>
            FTP Response Code and Status
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.FtpResponse.#ctor(System.Int32,System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.FtpResponse.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="response">FTP Response Code and Status</param>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.FtpResponse.Code">
            <summary>
            FTP Response Code
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.FtpResponse.Text">
            <summary>
            FTP Response Status
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.FtpResponse.Dash">
            <summary>
            True if this is a multi-line response
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.FtpResponse.ToString">
            <summary>
            Get the response code and status
            </summary>
            <returns></returns>
        </member>
        <member name="T:KellermanSoftware.NetSFtpLibrary.FtpSortColumn">
            <summary>
            Enumeration used to sort an FTP Directory Listing
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetSFtpLibrary.FtpSortColumn.FileName">
            <summary>
            Sort by the file name
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetSFtpLibrary.FtpSortColumn.Modified">
            <summary>
            Sort by the modified date
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetSFtpLibrary.FtpSortColumn.SizeInBytes">
            <summary>
            Sort by the size in bytes
            </summary>
        </member>
        <member name="T:KellermanSoftware.NetSFtpLibrary.FtpStatus">
            <summary>
            General Errors received from the FTP Server
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetSFtpLibrary.FtpStatus.UnknownError">
            <summary>
            An unknown error has occured
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetSFtpLibrary.FtpStatus.CommandResponseError">
            <summary>
            An unexpected response was received for the FTP command that was sent
            </summary>
        </member>
        <member name="T:KellermanSoftware.NetSFtpLibrary.RetryAction">
            <summary>
            The action to retry when an exception occurs during an asynchronous transfer
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetSFtpLibrary.RetryAction.UploadDirectory">
            <summary>
            Retry uploading a directory
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetSFtpLibrary.RetryAction.DownloadDirectory">
            <summary>
            Retry downloading a directory
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetSFtpLibrary.RetryAction.UploadFile">
            <summary>
            Retry uploading a file
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetSFtpLibrary.RetryAction.UploadStream">
            <summary>
            Retry uploading a stream
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetSFtpLibrary.RetryAction.DownloadFile">
            <summary>
            Retry downloading a file
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetSFtpLibrary.RetryAction.DownloadStream">
            <summary>
            Retry downloading a stream
            </summary>
        </member>
        <member name="T:KellermanSoftware.NetSFtpLibrary.RetryInfo">
            <summary>
            Information about the operation to retry
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.RetryInfo.SFtp">
            <summary>
            Reference to the FTP Instance
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.RetryInfo.CurrentDirectory">
            <summary>
            The current directory when the operation was started
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.RetryInfo.SubDirectories">
            <summary>
            If true, transfer subdirectories
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.RetryInfo.Mode">
            <summary>
            Type of filter
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.RetryInfo.Filter">
            <summary>
            What to filter by
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.RetryInfo.Action">
            <summary>
            Upload/Download/UploadDirectory
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.RetryInfo.LocalLocation">
            <summary>
            Local file or directory
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.RetryInfo.FtpLocation">
            <summary>
            FTP file path or directory
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.RetryInfo.LocalStream">
            <summary>
            Local stream for uploading or downloading
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.RetryInfo.RestartOffset">
            <summary>
            The byte offset to restart
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.RetryInfo.Retry">
            <summary>
            Retry a failed FTP Operation
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SimpleLog.Log(System.String)">
            <summary>
            Log strings to either a console, file or a memory stream depending on the user settings
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SimpleLog.Log(System.Exception)">
            <summary>
            Get all the lines for an exception and log them
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.SimpleLog.GetExceptionLines(System.Exception,System.String)">
            <summary>
            Construct a text string in the correct format for logging an exception
            </summary>
            <param name="ex">The exception to log</param>
            <param name="indent">The current indent level</param>
            <returns>A string that is structured for logging</returns>
        </member>
        <member name="T:KellermanSoftware.NetSFtpLibrary.SynchronizationMode">
            <summary>
            Determines which files are uploaded or downloaded during synchronization
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetSFtpLibrary.SynchronizationMode.CopyOnlyIfTheFileDoesNotExist">
            <summary>
            Files will only be synchronized if it does not exist
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetSFtpLibrary.SynchronizationMode.CopyIfTheSizeIsDifferentOrDateIsNewer">
            <summary>
            Files will be synchronized if the size is different or if the file date is newer (default)
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetSFtpLibrary.SynchronizationMode.CopyOnlyIfNewer">
            <summary>
            Files will be synchronized only if the file is newer
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetSFtpLibrary.SynchronizationMode.CopyOnlyIfSizeIsDifferent">
            <summary>
            Files will be synchronized only if the size is different
            </summary>
        </member>
        <member name="T:KellermanSoftware.NetSFtpLibrary.TransferCancelEventArgs">
            <summary>
            Holds information about the Cancel event
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.TransferCancelEventArgs.SessionGuid">
            <summary>
            A unique identifier for this instantiated ftp session
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.TransferCancelEventArgs.CustomObject">
            <summary>
            A custom user object passed as a parameter of an async operation
            </summary>
        </member>
        <member name="T:KellermanSoftware.NetSFtpLibrary.TransferCompletedEventArgs">
            <summary>
            Holds information about the transfer event
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.TransferCompletedEventArgs.#ctor(KellermanSoftware.NetSFtpLibrary.SFTP)">
            <summary>
            Constructor for Transfer Complete
            </summary>
            <param name="ftpInstance"></param>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.TransferCompletedEventArgs.SFtp">
            <summary>
            Reference to the FTP Instance
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.TransferCompletedEventArgs.RetryInfo">
            <summary>
            Information about what will be retried
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.TransferCompletedEventArgs.LastException">
            <summary>
            The exception that occured while transfering or null if no exception
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.TransferCompletedEventArgs.SessionGuid">
            <summary>
            A unique identifier for this instantiated ftp session
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.TransferCompletedEventArgs.CustomObject">
            <summary>
            A custom user object passed as a parameter of an async operation
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.TransferCompletedEventArgs.FilesTransfered">
            <summary>
            A list of the files transfered
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.TransferCompletedEventArgs.Retry">
            <summary>
            Attempt to Retry the operation when there is a failure
            </summary>
        </member>
        <member name="T:KellermanSoftware.NetSFtpLibrary.TransferInfo">
            <summary>
            Class to hold what files were downloaded or uploaded during the transfer of a directory
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.TransferInfo.FileInfo">
            <summary>
            The information about the file transfered
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.TransferInfo.Dest">
            <summary>
            The destination path
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.TransferInfo.Source">
            <summary>
            The Source Path
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetSFtpLibrary.TransferInfo.ToString">
            <summary>
            Get file name with additional info
            </summary>
            <returns></returns>
        </member>
        <member name="T:KellermanSoftware.NetSFtpLibrary.TransferMode">
            <summary>
            Determines if files are transferred as binary or ASCII 
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetSFtpLibrary.TransferMode.Binary">
            <summary>
            The transfer is performed in binary
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetSFtpLibrary.TransferMode.AsciiRemoteServerNotWindows">
            <summary>
            During an upload the CR characters are removed before being transferred to the remote server.
            During a download if the local machine is detected to be a windows machine, CR characters will be added during the transfer.
            During a download if the local machine is detected not to be a windows machine, CR characters are removed during the transfer.
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetSFtpLibrary.TransferMode.AsciiRemoteServerWindows">
            <summary>
            During an upload CR characters will be added if needed before each LF character before being transferred to the remote server.
            During a download if the local machine is detected to be a windows machine, CR characters will be added during the transfer.
            During a download if the local machine is detected not to be a windows machine, CR characters are removed during the transfer.
            </summary>
        </member>
        <member name="T:KellermanSoftware.NetSFtpLibrary.TransferProgressChangedEventArgs">
            <summary>
            Class passed with events to hold the transfer progress
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.TransferProgressChangedEventArgs.SessionGuid">
            <summary>
            A unique identifier for this instantiated ftp session
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.TransferProgressChangedEventArgs.CustomObject">
            <summary>
            A custom user object passed as a parameter of an async operation
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.TransferProgressChangedEventArgs.TotalBytesToTransfer">
            <summary>
            The amount of bytes to be Transferred
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.TransferProgressChangedEventArgs.BytesTransferred">
            <summary>
            The amount of bytes already Transferred
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.TransferProgressChangedEventArgs.ProgressPercentage">
            <summary>
            The percentage Transferred
            </summary>
        </member>
        <member name="T:KellermanSoftware.NetSFtpLibrary.TransferStartedEventArgs">
            <summary>
            Holds information about the transfer event
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.TransferStartedEventArgs.SessionGuid">
            <summary>
            A unique identifier for this instantiated ftp session
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetSFtpLibrary.TransferStartedEventArgs.CustomObject">
            <summary>
            A custom user object passed as a parameter of an async operation
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Abstractions.CryptoAbstraction.GenerateRandom(System.Int32)">
            <summary>
            Generates a <see cref="T:System.Byte"/> array of the specified length, and fills it with a
            cryptographically strong random sequence of values.
            </summary>
            <param name="length">The length of the array generate.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Abstractions.CryptoAbstraction.GenerateRandom(System.Byte[])">
            <summary>
            Fills an array of bytes with a cryptographically strong random sequence of values.
            </summary>
            <param name="data">The array to fill with cryptographically strong random bytes.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="data"/> is <c>null</c>.</exception>
            <remarks>
            The length of the byte array determines how many random bytes are produced.
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Abstractions.DnsAbstraction.GetHostAddresses(System.String)">
            <summary>
            Returns the Internet Protocol (IP) addresses for the specified host.
            </summary>
            <param name="hostNameOrAddress">The host name or IP address to resolve</param>
            <returns>
            An array of type <see cref="T:System.Net.IPAddress"/> that holds the IP addresses for the host that
            is specified by the <paramref name="hostNameOrAddress"/> parameter.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="hostNameOrAddress"/> is <c>null</c>.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An error is encountered when resolving <paramref name="hostNameOrAddress"/>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Abstractions.FileSystemAbstraction.EnumerateFiles(System.IO.DirectoryInfo,System.String)">
            <summary>
            Returns an enumerable collection of file information that matches a search pattern.
            </summary>
            <param name="directoryInfo"></param>
            <param name="searchPattern">The search string to match against the names of files.</param>
            <returns>
            An enumerable collection of files that matches <paramref name="searchPattern"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="directoryInfo"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="searchPattern"/> is <c>null</c>.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path represented by <paramref name="directoryInfo"/> does not exist or is not valid.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Abstractions.SocketAbstraction.CanWrite(System.Net.Sockets.Socket)">
            <summary>
            Returns a value indicating whether the specified <see cref="T:System.Net.Sockets.Socket"/> can be used
            to send data.
            </summary>
            <param name="socket">The <see cref="T:System.Net.Sockets.Socket"/> to check.</param>
            <returns>
            <c>true</c> if <paramref name="socket"/> can be written to; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Abstractions.SocketAbstraction.ReadByte(System.Net.Sockets.Socket,System.TimeSpan)">
            <summary>
            Reads a byte from the specified <see cref="T:System.Net.Sockets.Socket"/>.
            </summary>
            <param name="socket">The <see cref="T:System.Net.Sockets.Socket"/> to read from.</param>
            <param name="timeout">Specifies the amount of time after which the call will time out.</param>
            <returns>
            The byte read, or <c>-1</c> if the socket was closed.
            </returns>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshOperationTimeoutException">The read operation timed out.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">The read failed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Abstractions.SocketAbstraction.SendByte(System.Net.Sockets.Socket,System.Byte)">
            <summary>
            Sends a byte using the specified <see cref="T:System.Net.Sockets.Socket"/>.
            </summary>
            <param name="socket">The <see cref="T:System.Net.Sockets.Socket"/> to write to.</param>
            <param name="value">The value to send.</param>
            <exception cref="T:System.Net.Sockets.SocketException">The write failed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Abstractions.SocketAbstraction.Read(System.Net.Sockets.Socket,System.Int32,System.TimeSpan)">
            <summary>
            Receives data from a bound <see cref="T:System.Net.Sockets.Socket"/>.
            </summary>
            <param name="socket"></param>
            <param name="size">The number of bytes to receive.</param>
            <param name="timeout">Specifies the amount of time after which the call will time out.</param>
            <returns>
            The bytes received.
            </returns>
            <remarks>
            If no data is available for reading, the <see cref="M:KellermanSoftware.Renci.SshNet.Abstractions.SocketAbstraction.Read(System.Net.Sockets.Socket,System.Int32,System.TimeSpan)"/> method will
            block until data is available or the time-out value is exceeded. If the time-out value is exceeded, the
            <see cref="M:KellermanSoftware.Renci.SshNet.Abstractions.SocketAbstraction.Read(System.Net.Sockets.Socket,System.Int32,System.TimeSpan)"/> call will throw a <see cref="T:KellermanSoftware.Renci.SshNet.Common.SshOperationTimeoutException"/>.
             If you are in non-blocking mode, and there is no data available in the in the protocol stack buffer, the
            <see cref="M:KellermanSoftware.Renci.SshNet.Abstractions.SocketAbstraction.Read(System.Net.Sockets.Socket,System.Int32,System.TimeSpan)"/> method will complete immediately and throw a <see cref="T:System.Net.Sockets.SocketException"/>.
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Abstractions.SocketAbstraction.Read(System.Net.Sockets.Socket,System.Byte[],System.Int32,System.Int32,System.TimeSpan)">
            <summary>
            Receives data from a bound <see cref="T:System.Net.Sockets.Socket"/> into a receive buffer.
            </summary>
            <param name="socket"></param>
            <param name="buffer">An array of type <see cref="T:System.Byte"/> that is the storage location for the received data. </param>
            <param name="offset">The position in <paramref name="buffer"/> parameter to store the received data.</param>
            <param name="size">The number of bytes to receive.</param>
            <param name="readTimeout">The maximum time to wait until <paramref name="size"/> bytes have been received.</param>
            <returns>
            The number of bytes received.
            </returns>
            <remarks>
            <para>
            If no data is available for reading, the <see cref="M:KellermanSoftware.Renci.SshNet.Abstractions.SocketAbstraction.Read(System.Net.Sockets.Socket,System.Byte[],System.Int32,System.Int32,System.TimeSpan)"/> method will
            block until data is available or the time-out value is exceeded. If the time-out value is exceeded, the
            <see cref="M:KellermanSoftware.Renci.SshNet.Abstractions.SocketAbstraction.Read(System.Net.Sockets.Socket,System.Byte[],System.Int32,System.Int32,System.TimeSpan)"/> call will throw a <see cref="T:KellermanSoftware.Renci.SshNet.Common.SshOperationTimeoutException"/>.
            </para>
            <para>
            If you are in non-blocking mode, and there is no data available in the in the protocol stack buffer, the
            <see cref="M:KellermanSoftware.Renci.SshNet.Abstractions.SocketAbstraction.Read(System.Net.Sockets.Socket,System.Byte[],System.Int32,System.Int32,System.TimeSpan)"/> method will complete immediately and throw a <see cref="T:System.Net.Sockets.SocketException"/>.
            </para>
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Abstractions.ThreadAbstraction.Sleep(System.Int32)">
            <summary>
            Suspends the current thread for the specified number of milliseconds.
            </summary>
            <param name="millisecondsTimeout">The number of milliseconds for which the thread is suspended.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Abstractions.ThreadAbstraction.ExecuteThread(System.Action)">
            <summary>
            Executes the specified action in a separate thread.
            </summary>
            <param name="action">The action to execute.</param>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.AuthenticationMethod">
            <summary>
            Base class for all supported authentication methods
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.AuthenticationMethod.Name">
            <summary>
            Gets the name of the authentication method.
            </summary>
            <value>
            The name of the authentication method.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.AuthenticationMethod.Username">
            <summary>
            Gets connection username.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.AuthenticationMethod.AllowedAuthentications">
            <summary>
            Gets list of allowed authentications.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.AuthenticationMethod.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.AuthenticationMethod"/> class.
            </summary>
            <param name="username">The username.</param>
            <exception cref="T:System.ArgumentException"><paramref name="username"/> is whitespace or <c>null</c>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.AuthenticationMethod.Authenticate(KellermanSoftware.Renci.SshNet.Session)">
            <summary>
            Authenticates the specified session.
            </summary>
            <param name="session">The session to authenticate.</param>
            <returns>
            The result of the authentication process.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.AuthenticationMethod.KellermanSoftware#Renci#SshNet#IAuthenticationMethod#Authenticate(KellermanSoftware.Renci.SshNet.ISession)">
            <summary>
            Authenticates the specified session.
            </summary>
            <param name="session">The session to authenticate.</param>
            <returns>
            The result of the authentication process.
            </returns>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.AuthenticationResult">
            <summary>
            Represents possible authentication methods results
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.AuthenticationResult.Success">
            <summary>
            Authentication was successful.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.AuthenticationResult.PartialSuccess">
            <summary>
            Authentication completed with partial success.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.AuthenticationResult.Failure">
            <summary>
            Authentication failed.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.BaseClient">
            <summary>
            Serves as base class for client implementations, provides common client functionality.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.BaseClient._ownsConnectionInfo">
            <summary>
            Holds value indicating whether the connection info is owned by this client.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.BaseClient.Session">
            <summary>
            Gets the current session.
            </summary>
            <value>
            The current session.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.BaseClient.ServiceFactory">
            <summary>
            Gets the factory for creating new services.
            </summary>
            <value>
            The factory for creating new services.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.BaseClient.ConnectionInfo">
            <summary>
            Gets the connection info.
            </summary>
            <value>
            The connection info.
            </value>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.BaseClient.IsConnected">
            <summary>
            Gets a value indicating whether this client is connected to the server.
            </summary>
            <value>
            <c>true</c> if this client is connected; otherwise, <c>false</c>.
            </value>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.BaseClient.KeepAliveInterval">
            <summary>
            Gets or sets the keep-alive interval.
            </summary>
            <value>
            The keep-alive interval. Specify negative one (-1) milliseconds to disable the
            keep-alive. This is the default value.
            </value>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.BaseClient.ErrorOccurred">
            <summary>
            Occurs when an error occurred.
            </summary>
            <example>
              <code source="..\..\src\Renci.SshNet.Tests\Classes\SshClientTest.cs" region="Example SshClient Connect ErrorOccurred" language="C#" title="Handle ErrorOccurred event" />
            </example>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.BaseClient.HostKeyReceived">
            <summary>
            Occurs when host key received.
            </summary>
            <example>
              <code source="..\..\src\Renci.SshNet.Tests\Classes\SshClientTest.cs" region="Example SshClient Connect HostKeyReceived" language="C#" title="Handle HostKeyReceived event" />
            </example>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.BaseClient.#ctor(KellermanSoftware.Renci.SshNet.ConnectionInfo,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.BaseClient"/> class.
            </summary>
            <param name="connectionInfo">The connection info.</param>
            <param name="ownsConnectionInfo">Specified whether this instance owns the connection info.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="connectionInfo"/> is <c>null</c>.</exception>
            <remarks>
            If <paramref name="ownsConnectionInfo"/> is <c>true</c>, then the
            connection info will be disposed when this instance is disposed.
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.BaseClient.#ctor(KellermanSoftware.Renci.SshNet.ConnectionInfo,System.Boolean,KellermanSoftware.Renci.SshNet.IServiceFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.BaseClient"/> class.
            </summary>
            <param name="connectionInfo">The connection info.</param>
            <param name="ownsConnectionInfo">Specified whether this instance owns the connection info.</param>
            <param name="serviceFactory">The factory to use for creating new services.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="connectionInfo"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="serviceFactory"/> is <c>null</c>.</exception>
            <remarks>
            If <paramref name="ownsConnectionInfo"/> is <c>true</c>, then the
            connection info will be disposed when this instance is disposed.
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.BaseClient.Connect">
            <summary>
            Connects client to the server.
            </summary>
            <exception cref="T:System.InvalidOperationException">The client is already connected.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">Socket connection to the SSH server or proxy server could not be established, or an error occurred while resolving the hostname.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">SSH session could not be established.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshAuthenticationException">Authentication of SSH session failed.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.ProxyException">Failed to establish proxy connection.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.BaseClient.Disconnect">
            <summary>
            Disconnects client from the server.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.BaseClient.SendKeepAlive">
            <summary>
            Sends a keep-alive message to the server.
            </summary>
            <remarks>
            Use <see cref="P:KellermanSoftware.Renci.SshNet.BaseClient.KeepAliveInterval"/> to configure the client to send a keep-alive at regular
            intervals.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.BaseClient.OnConnecting">
            <summary>
            Called when client is connecting to the server.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.BaseClient.OnConnected">
            <summary>
            Called when client is connected to the server.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.BaseClient.OnDisconnecting">
            <summary>
            Called when client is disconnecting from the server.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.BaseClient.OnDisconnected">
            <summary>
            Called when client is disconnected from the server.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.BaseClient.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.BaseClient.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.BaseClient.CheckDisposed">
            <summary>
            Check if the current instance is disposed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">THe current instance is disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.BaseClient.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:KellermanSoftware.Renci.SshNet.BaseClient"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.BaseClient.StopKeepAliveTimer">
            <summary>
            Stops the keep-alive timer, and waits until all timer callbacks have been
            executed.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.BaseClient.StartKeepAliveTimer">
            <summary>
            Starts the keep-alive timer.
            </summary>
            <remarks>
            When <see cref="P:KellermanSoftware.Renci.SshNet.BaseClient.KeepAliveInterval"/> is negative one (-1) milliseconds, then
            the timer will not be started.
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.BaseClient.CreateKeepAliveTimer(System.TimeSpan,System.TimeSpan)">
            <summary>
            Creates a <see cref="T:System.Threading.Timer"/> with the specified due time and interval.
            </summary>
            <param name="dueTime">The amount of time to delay before the keep-alive message is first sent. Specify negative one (-1) milliseconds to prevent the timer from starting. Specify zero (0) to start the timer immediately.</param>
            <param name="period">The time interval between attempts to send a keep-alive message. Specify negative one (-1) milliseconds to disable periodic signaling.</param>
            <returns>
            A <see cref="T:System.Threading.Timer"/> with the specified due time and interval.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.BaseClient.DisposeSession">
            <summary>
            Disposes the SSH session, and assigns <c>null</c> to <see cref="P:KellermanSoftware.Renci.SshNet.BaseClient.Session"/>.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.BaseClient.IsSessionConnected">
            <summary>
            Returns a value indicating whether the SSH session is established.
            </summary>
            <returns>
            <c>true</c> if the SSH session is established; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Channels.Channel">
            <summary>
            Represents base class for SSH channel implementations.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Channels.Channel._closeMessageSent">
            <summary>
            Holds a value indicating whether the SSH_MSG_CHANNEL_CLOSE has been sent to the remote party.
            </summary>
            <value>
            <c>true</c> when a SSH_MSG_CHANNEL_CLOSE message has been sent to the other party;
            otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Channels.Channel._closeMessageReceived">
            <summary>
            Holds a value indicating whether a SSH_MSG_CHANNEL_CLOSE has been received from the other
            party.
            </summary>
            <value>
            <c>true</c> when a SSH_MSG_CHANNEL_CLOSE message has been received from the other party;
            otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Channels.Channel._eofMessageReceived">
            <summary>
            Holds a value indicating whether the SSH_MSG_CHANNEL_EOF has been received from the other party.
            </summary>
            <value>
            <c>true</c> when a SSH_MSG_CHANNEL_EOF message has been received from the other party;
            otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Channels.Channel._eofMessageSent">
            <summary>
            Holds a value indicating whether the SSH_MSG_CHANNEL_EOF has been sent to the remote party.
            </summary>
            <value>
            <c>true</c> when a SSH_MSG_CHANNEL_EOF message has been sent to the remote party;
            otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.Channels.Channel.Exception">
            <summary>
            Occurs when an exception is thrown when processing channel messages.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.Channel.#ctor(KellermanSoftware.Renci.SshNet.ISession,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new <see cref="T:KellermanSoftware.Renci.SshNet.Channels.Channel"/> instance.
            </summary>
            <param name="session">The session.</param>
            <param name="localChannelNumber">The local channel number.</param>
            <param name="localWindowSize">Size of the window.</param>
            <param name="localPacketSize">Size of the packet.</param>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Channels.Channel.Session">
            <summary>
            Gets the session.
            </summary>
            <value>
             Thhe session.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Channels.Channel.ChannelType">
            <summary>
            Gets the type of the channel.
            </summary>
            <value>
            The type of the channel.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Channels.Channel.LocalChannelNumber">
            <summary>
            Gets the local channel number.
            </summary>
            <value>
            The local channel number.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Channels.Channel.LocalPacketSize">
            <summary>
            Gets the maximum size of a data packet that we can receive using the channel.
            </summary>
            <value>
            The maximum size of a packet.
            </value>
            <remarks>
            <para>
            This is the maximum size (in bytes) we support for the data (payload) of a
            <c>SSH_MSG_CHANNEL_DATA</c> message we receive.
            </para>
            <para>
            We currently do not enforce this limit.
            </para>
            </remarks>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Channels.Channel.LocalWindowSize">
            <summary>
            Gets the size of the local window.
            </summary>
            <value>
            The size of the local window.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Channels.Channel.RemoteChannelNumber">
            <summary>
            Gets the remote channel number.
            </summary>
            <value>
            The remote channel number.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Channels.Channel.RemotePacketSize">
            <summary>
            Gets the maximum size of a data packet that we can send using the channel.
            </summary>
            <value>
            The maximum size of data that can be sent using a <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelDataMessage"/>
            on the current channel.
            </value>
            <exception cref="T:System.InvalidOperationException">The channel has not been opened, or the open has not yet been confirmed.</exception>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Channels.Channel.RemoteWindowSize">
            <summary>
            Gets the window size of the remote server.
            </summary>
            <value>
            The size of the server window.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Channels.Channel.IsOpen">
            <summary>
            Gets a value indicating whether this channel is open.
            </summary>
            <value>
            <c>true</c> if this channel is open; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.Channels.Channel.DataReceived">
            <summary>
            Occurs when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelDataMessage"/> is received.
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.Channels.Channel.ExtendedDataReceived">
            <summary>
            Occurs when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelExtendedDataMessage"/> is received.
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.Channels.Channel.EndOfData">
            <summary>
            Occurs when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelEofMessage"/> is received.
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.Channels.Channel.Closed">
            <summary>
            Occurs when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelCloseMessage"/> is received.
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.Channels.Channel.RequestReceived">
            <summary>
            Occurs when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelRequestMessage"/> is received.
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.Channels.Channel.RequestSucceeded">
            <summary>
            Occurs when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelSuccessMessage"/> is received.
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.Channels.Channel.RequestFailed">
            <summary>
            Occurs when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelFailureMessage"/> is received.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Channels.Channel.IsConnected">
            <summary>
            Gets a value indicating whether the session is connected.
            </summary>
            <value>
            <c>true</c> if the session is connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Channels.Channel.ConnectionInfo">
            <summary>
            Gets the connection info.
            </summary>
            <value>The connection info.</value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Channels.Channel.SessionSemaphore">
            <summary>
            Gets the session semaphore to control number of session channels.
            </summary>
            <value>The session semaphore.</value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.Channel.SendData(System.Byte[])">
            <summary>
            Sends a SSH_MSG_CHANNEL_DATA message with the specified payload.
            </summary>
            <param name="data">The payload to send.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.Channel.SendData(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sends a SSH_MSG_CHANNEL_DATA message with the specified payload.
            </summary>
            <param name="data">An array of <see cref="T:System.Byte"/> containing the payload to send.</param>
            <param name="offset">The zero-based offset in <paramref name="data"/> at which to begin taking data from.</param>
            <param name="size">The number of bytes of <paramref name="data"/> to send.</param>
            <remarks>
            <para>
            When the size of the data to send exceeds the maximum packet size or the remote window
            size does not allow the full data to be sent, then this method will send the data in
            multiple chunks and will wait for the remote window size to be adjusted when it's zero.
            </para>
            <para>
            This is done to support SSH servers will a small window size that do not agressively
            increase their window size. We need to take into account that there may be SSH servers
            that only increase their window size when it has reached zero.
            </para>
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.Channel.OnWindowAdjust(System.UInt32)">
            <summary>
            Called when channel window need to be adjust.
            </summary>
            <param name="bytesToAdd">The bytes to add.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.Channel.OnData(System.Byte[])">
            <summary>
            Called when channel data is received.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.Channel.OnExtendedData(System.Byte[],System.UInt32)">
            <summary>
            Called when channel extended data is received.
            </summary>
            <param name="data">The data.</param>
            <param name="dataTypeCode">The data type code.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.Channel.OnEof">
            <summary>
            Called when channel has no more data to receive.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.Channel.OnClose">
            <summary>
            Called when channel is closed by the server.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.Channel.OnRequest(KellermanSoftware.Renci.SshNet.Messages.Connection.RequestInfo)">
            <summary>
            Called when channel request received.
            </summary>
            <param name="info">Channel request information.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.Channel.OnSuccess">
            <summary>
            Called when channel request was successful
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.Channel.OnFailure">
            <summary>
            Called when channel request failed.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.Channel.RaiseExceptionEvent(System.Exception)">
            <summary>
            Raises <see cref="E:KellermanSoftware.Renci.SshNet.Channels.Channel.Exception"/> event.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.Channel.TrySendMessage(KellermanSoftware.Renci.SshNet.Messages.Message)">
            <summary>
            Sends a message to the server.
            </summary>
            <param name="message">The message to send.</param>
            <returns>
            <c>true</c> if the message was sent to the server; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.InvalidOperationException">The size of the packet exceeds the maximum size defined by the protocol.</exception>
            <remarks>
            This methods returns <c>false</c> when the attempt to send the message results in a
            <see cref="T:System.Net.Sockets.SocketException"/> or a <see cref="T:KellermanSoftware.Renci.SshNet.Common.SshException"/>.
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.Channel.SendMessage(KellermanSoftware.Renci.SshNet.Messages.Message)">
            <summary>
            Sends SSH message to the server.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.Channel.SendEof">
            <summary>
            Sends a SSH_MSG_CHANNEL_EOF message to the remote server.
            </summary>
            <exception cref="T:System.InvalidOperationException">The channel is closed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.Channel.WaitOnHandle(System.Threading.WaitHandle)">
            <summary>
            Waits for the handle to be signaled or for an error to occurs.
            </summary>
            <param name="waitHandle">The wait handle.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.Channel.Close">
            <summary>
            Closes the channel, waiting for the SSH_MSG_CHANNEL_CLOSE message to be received from the server.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.Channel.OnChannelException(System.Exception)">
            <summary>
            Called when an <see cref="E:KellermanSoftware.Renci.SshNet.Channels.Channel.Exception"/> occurs while processing a channel message.
            </summary>
            <param name="ex">The <see cref="E:KellermanSoftware.Renci.SshNet.Channels.Channel.Exception"/>.</param>
            <remarks>
            This method will in turn invoke <see cref="M:KellermanSoftware.Renci.SshNet.Channels.Channel.OnErrorOccured(System.Exception)"/>, and
            raise the <see cref="E:KellermanSoftware.Renci.SshNet.Channels.Channel.Exception"/> event.
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.Channel.GetDataLengthThatCanBeSentInMessage(System.Int32)">
            <summary>
            Determines the length of data that currently can be sent in a single message.
            </summary>
            <param name="messageLength">The length of the message that must be sent.</param>
            <returns>
            The actual data length that currently can be sent.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.Channel.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.Channel.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.Channel.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:KellermanSoftware.Renci.SshNet.Channels.Channel"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Channels.ChannelDirectTcpip">
            <summary>
            Implements "direct-tcpip" SSH channel.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.ChannelDirectTcpip.#ctor(KellermanSoftware.Renci.SshNet.ISession,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new <see cref="T:KellermanSoftware.Renci.SshNet.Channels.ChannelDirectTcpip"/> instance.
            </summary>
            <param name="session">The session.</param>
            <param name="localChannelNumber">The local channel number.</param>
            <param name="localWindowSize">Size of the window.</param>
            <param name="localPacketSize">Size of the packet.</param>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Channels.ChannelDirectTcpip.ChannelType">
            <summary>
            Gets the type of the channel.
            </summary>
            <value>
            The type of the channel.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.ChannelDirectTcpip.ForwardedPort_Closing(System.Object,System.EventArgs)">
            <summary>
            Occurs as the forwarded port is being stopped.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.ChannelDirectTcpip.Bind">
            <summary>
            Binds channel to remote host.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.ChannelDirectTcpip.CloseSocket">
            <summary>
            Closes the socket, hereby interrupting the blocking receive in <see cref="M:KellermanSoftware.Renci.SshNet.Channels.ChannelDirectTcpip.Bind"/>.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.ChannelDirectTcpip.ShutdownSocket(System.Net.Sockets.SocketShutdown)">
            <summary>
            Shuts down the socket.
            </summary>
            <param name="how">One of the <see cref="T:System.Net.Sockets.SocketShutdown"/> values that specifies the operation that will no longer be allowed.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.ChannelDirectTcpip.Close">
            <summary>
            Closes the channel, waiting for the SSH_MSG_CHANNEL_CLOSE message to be received from the server.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.ChannelDirectTcpip.OnData(System.Byte[])">
            <summary>
            Called when channel data is received.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.ChannelDirectTcpip.OnOpenConfirmation(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Called when channel is opened by the server.
            </summary>
            <param name="remoteChannelNumber">The remote channel number.</param>
            <param name="initialWindowSize">Initial size of the window.</param>
            <param name="maximumPacketSize">Maximum size of the packet.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.ChannelDirectTcpip.OnEof">
            <summary>
            Called when channel has no more data to receive.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.ChannelDirectTcpip.OnErrorOccured(System.Exception)">
            <summary>
            Called whenever an unhandled <see cref="T:System.Exception"/> occurs in <see cref="T:KellermanSoftware.Renci.SshNet.Session"/> causing
            the message loop to be interrupted, or when an exception occurred processing a channel message.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.ChannelDirectTcpip.OnDisconnected">
            <summary>
            Called when the server wants to terminate the connection immmediately.
            </summary>
            <remarks>
            The sender MUST NOT send or receive any data after this message, and
            the recipient MUST NOT accept any data after receiving this message.
            </remarks>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Channels.ChannelForwardedTcpip">
            <summary>
            Implements "forwarded-tcpip" SSH channel.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.ChannelForwardedTcpip.#ctor(KellermanSoftware.Renci.SshNet.ISession,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new <see cref="T:KellermanSoftware.Renci.SshNet.Channels.ChannelForwardedTcpip"/> instance.
            </summary>
            <param name="session">The session.</param>
            <param name="localChannelNumber">The local channel number.</param>
            <param name="localWindowSize">Size of the window.</param>
            <param name="localPacketSize">Size of the packet.</param>
            <param name="remoteChannelNumber">The remote channel number.</param>
            <param name="remoteWindowSize">The window size of the remote party.</param>
            <param name="remotePacketSize">The maximum size of a data packet that we can send to the remote party.</param>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Channels.ChannelForwardedTcpip.ChannelType">
            <summary>
            Gets the type of the channel.
            </summary>
            <value>
            The type of the channel.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.ChannelForwardedTcpip.Bind(System.Net.IPEndPoint,KellermanSoftware.Renci.SshNet.IForwardedPort)">
            <summary>
            Binds the channel to the specified endpoint.
            </summary>
            <param name="remoteEndpoint">The endpoint to connect to.</param>
            <param name="forwardedPort">The forwarded port for which the channel is opened.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.ChannelForwardedTcpip.ForwardedPort_Closing(System.Object,System.EventArgs)">
            <summary>
            Occurs as the forwarded port is being stopped.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.ChannelForwardedTcpip.ShutdownSocket(System.Net.Sockets.SocketShutdown)">
            <summary>
            Shuts down the socket.
            </summary>
            <param name="how">One of the <see cref="T:System.Net.Sockets.SocketShutdown"/> values that specifies the operation that will no longer be allowed.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.ChannelForwardedTcpip.CloseSocket">
            <summary>
            Closes the socket, hereby interrupting the blocking receive in <see cref="M:KellermanSoftware.Renci.SshNet.Channels.ChannelForwardedTcpip.Bind(System.Net.IPEndPoint,KellermanSoftware.Renci.SshNet.IForwardedPort)"/>.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.ChannelForwardedTcpip.Close">
            <summary>
            Closes the channel waiting for the SSH_MSG_CHANNEL_CLOSE message to be received from the server.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.ChannelForwardedTcpip.OnData(System.Byte[])">
            <summary>
            Called when channel data is received.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Channels.ChannelSession">
            <summary>
            Implements Session SSH channel.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Channels.ChannelSession._failedOpenAttempts">
            <summary>
            Counts failed channel open attempts
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Channels.ChannelSession._sessionSemaphoreObtained">
            <summary>
            Holds a value indicating whether the session semaphore has been obtained by the current
            channel.
            </summary>
            <value>
            <c>0</c> when the session semaphore has not been obtained or has already been released,
            and <c>1</c> when the session has been obtained and still needs to be released.
            </value>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Channels.ChannelSession._channelOpenResponseWaitHandle">
            <summary>
            Wait handle to signal when response was received to open the channel
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.ChannelSession.#ctor(KellermanSoftware.Renci.SshNet.ISession,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new <see cref="T:KellermanSoftware.Renci.SshNet.Channels.ChannelSession"/> instance.
            </summary>
            <param name="session">The session.</param>
            <param name="localChannelNumber">The local channel number.</param>
            <param name="localWindowSize">Size of the window.</param>
            <param name="localPacketSize">Size of the packet.</param>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Channels.ChannelSession.ChannelType">
            <summary>
            Gets the type of the channel.
            </summary>
            <value>
            The type of the channel.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.ChannelSession.Open">
            <summary>
            Opens the channel.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.ChannelSession.OnOpenConfirmation(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Called when channel is opened by the server.
            </summary>
            <param name="remoteChannelNumber">The remote channel number.</param>
            <param name="initialWindowSize">Initial size of the window.</param>
            <param name="maximumPacketSize">Maximum size of the packet.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.ChannelSession.OnOpenFailure(System.UInt32,System.String,System.String)">
            <summary>
            Called when channel failed to open.
            </summary>
            <param name="reasonCode">The reason code.</param>
            <param name="description">The description.</param>
            <param name="language">The language.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.ChannelSession.SendPseudoTerminalRequest(System.String,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Collections.Generic.IDictionary{KellermanSoftware.Renci.SshNet.Common.TerminalModes,System.UInt32})">
            <summary>
            Sends the pseudo terminal request.
            </summary>
            <param name="environmentVariable">The environment variable.</param>
            <param name="columns">The columns.</param>
            <param name="rows">The rows.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="terminalModeValues">The terminal mode values.</param>
            <returns>
            <c>true</c> if request was successful; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.ChannelSession.SendX11ForwardingRequest(System.Boolean,System.String,System.Byte[],System.UInt32)">
            <summary>
            Sends the X11 forwarding request.
            </summary>
            <param name="isSingleConnection">if set to <c>true</c> the it is single connection.</param>
            <param name="protocol">The protocol.</param>
            <param name="cookie">The cookie.</param>
            <param name="screenNumber">The screen number.</param>
            <returns>
            <c>true</c> if request was successful; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.ChannelSession.SendEnvironmentVariableRequest(System.String,System.String)">
            <summary>
            Sends the environment variable request.
            </summary>
            <param name="variableName">Name of the variable.</param>
            <param name="variableValue">The variable value.</param>
            <returns>
            <c>true</c> if request was successful; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.ChannelSession.SendShellRequest">
            <summary>
            Sends the shell request.
            </summary>
            <returns>
            <c>true</c> if request was successful; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.ChannelSession.SendExecRequest(System.String)">
            <summary>
            Sends the exec request.
            </summary>
            <param name="command">The command.</param>
            <returns>
            <c>true</c> if request was successful; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.ChannelSession.SendBreakRequest(System.UInt32)">
            <summary>
            Sends the exec request.
            </summary>
            <param name="breakLength">Length of the break.</param>
            <returns>
            <c>true</c> if request was successful; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.ChannelSession.SendSubsystemRequest(System.String)">
            <summary>
            Sends the subsystem request.
            </summary>
            <param name="subsystem">The subsystem.</param>
            <returns>
            <c>true</c> if request was successful; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.ChannelSession.SendWindowChangeRequest(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Sends the window change request.
            </summary>
            <param name="columns">The columns.</param>
            <param name="rows">The rows.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <returns>
            <c>true</c> if request was successful; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.ChannelSession.SendLocalFlowRequest(System.Boolean)">
            <summary>
            Sends the local flow request.
            </summary>
            <param name="clientCanDo">if set to <c>true</c> [client can do].</param>
            <returns>
            <c>true</c> if request was successful; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.ChannelSession.SendSignalRequest(System.String)">
            <summary>
            Sends the signal request.
            </summary>
            <param name="signalName">Name of the signal.</param>
            <returns>
            <c>true</c> if request was successful; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.ChannelSession.SendExitStatusRequest(System.UInt32)">
            <summary>
            Sends the exit status request.
            </summary>
            <param name="exitStatus">The exit status.</param>
            <returns>
            <c>true</c> if request was successful; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.ChannelSession.SendExitSignalRequest(System.String,System.Boolean,System.String,System.String)">
            <summary>
            Sends the exit signal request.
            </summary>
            <param name="signalName">Name of the signal.</param>
            <param name="coreDumped">if set to <c>true</c> [core dumped].</param>
            <param name="errorMessage">The error message.</param>
            <param name="language">The language.</param>
            <returns>
            <c>true</c> if request was successful; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.ChannelSession.SendEndOfWriteRequest">
            <summary>
            Sends eow@openssh.com request.
            </summary>
            <returns>
            <c>true</c> if request was successful; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.ChannelSession.SendKeepAliveRequest">
            <summary>
            Sends keepalive@openssh.com request.
            </summary>
            <returns>
            <c>true</c> if request was successful; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.ChannelSession.OnSuccess">
            <summary>
            Called when channel request was successful
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.ChannelSession.OnFailure">
            <summary>
            Called when channel request failed.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.ChannelSession.SendChannelOpenMessage">
            <summary>
            Sends the channel open message.
            </summary>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">The client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshOperationTimeoutException">The operation timed out.</exception>
            <exception cref="T:System.InvalidOperationException">The size of the packet exceeds the maximum size defined by the protocol.</exception>
            <remarks>
            <para>
            When a session semaphore for this instance has not yet been obtained by this or any other thread,
            the thread will block until such a semaphore is available and send a <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelOpenMessage"/>
            to the remote host.
            </para>
            <para>
            Note that the session semaphore is released in any of the following cases:
            <list type="bullet">
              <item>
                <description>A <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelOpenFailureMessage"/> is received for the channel being opened.</description>
              </item>
              <item>
                <description>The remote host does not respond to the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelOpenMessage"/> within the configured <see cref="P:KellermanSoftware.Renci.SshNet.ConnectionInfo.Timeout"/>.</description>
              </item>
              <item>
                <description>The remote host closes the channel.</description>
              </item>
              <item>
                <description>The <see cref="T:KellermanSoftware.Renci.SshNet.Channels.ChannelSession"/> is disposed.</description>
              </item>
              <item>
                <description>A socket error occurs sending a message to the remote host.</description>
              </item>
            </list>
            </para>
            <para>
            If the session semaphore was already obtained for this instance (and not released), then this method
            immediately returns control to the caller. This should only happen when another thread has obtain the
            session semaphore and already sent the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelOpenMessage"/>, but the remote host did not
            confirmed or rejected attempt to open the channel.
            </para>
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.ChannelSession.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.ChannelSession.ReleaseSemaphore">
            <summary>
            Releases the session semaphore.
            </summary>
            <remarks>
            When the session semaphore has already been released, or was never obtained by
            this instance, then this method does nothing.
            </remarks>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Channels.ChannelTypes">
            <summary>
            Lists channel types as defined by the protocol.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Channels.ChannelTypes.Session">
            <summary>
            session
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Channels.ChannelTypes.X11">
            <summary>
            x11
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Channels.ChannelTypes.ForwardedTcpip">
            <summary>
            forwarded-tcpip
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Channels.ChannelTypes.DirectTcpip">
            <summary>
            direct-tcpip
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.ClientChannel.#ctor(KellermanSoftware.Renci.SshNet.ISession,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new <see cref="T:KellermanSoftware.Renci.SshNet.Channels.ClientChannel"/> instance.
            </summary>
            <param name="session">The session.</param>
            <param name="localChannelNumber">The local channel number.</param>
            <param name="localWindowSize">Size of the window.</param>
            <param name="localPacketSize">Size of the packet.</param>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.Channels.ClientChannel.OpenConfirmed">
            <summary>
            Occurs when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelOpenConfirmationMessage"/> is received.
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.Channels.ClientChannel.OpenFailed">
            <summary>
            Occurs when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelOpenFailureMessage"/> is received.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.ClientChannel.OnOpenConfirmation(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Called when channel is opened by the server.
            </summary>
            <param name="remoteChannelNumber">The remote channel number.</param>
            <param name="initialWindowSize">Initial size of the window.</param>
            <param name="maximumPacketSize">Maximum size of the packet.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.ClientChannel.SendMessage(KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelOpenMessage)">
            <summary>
            Send message to open a channel.
            </summary>
            <param name="message">Message to send</param>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">The client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshOperationTimeoutException">The operation timed out.</exception>
            <exception cref="T:System.InvalidOperationException">The size of the packet exceeds the maximum size defined by the protocol.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.ClientChannel.OnOpenFailure(System.UInt32,System.String,System.String)">
            <summary>
            Called when channel failed to open.
            </summary>
            <param name="reasonCode">The reason code.</param>
            <param name="description">The description.</param>
            <param name="language">The language.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.ClientChannel.UnsubscribeFromSessionEvents(KellermanSoftware.Renci.SshNet.ISession)">
            <summary>
            Unsubscribes the current <see cref="T:KellermanSoftware.Renci.SshNet.Channels.ClientChannel"/> from session events.
            </summary>
            <param name="session">The session.</param>
            <remarks>
            Does nothing when <paramref name="session"/> is <c>null</c>.
            </remarks>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Channels.IChannel">
            <summary>
            Represents SSH channel.
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.Channels.IChannel.DataReceived">
            <summary>
            Occurs when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelDataMessage"/> is received.
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.Channels.IChannel.Exception">
            <summary>
            Occurs when an exception is thrown when processing channel messages.
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.Channels.IChannel.ExtendedDataReceived">
            <summary>
            Occurs when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelExtendedDataMessage"/> is received.
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.Channels.IChannel.RequestReceived">
            <summary>
            Occurs when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelRequestMessage"/> is received.
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.Channels.IChannel.Closed">
            <summary>
            Occurs when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelCloseMessage"/> is received.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Channels.IChannel.LocalChannelNumber">
            <summary>
            Gets the local channel number.
            </summary>
            <value>
            The local channel number.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Channels.IChannel.LocalPacketSize">
            <summary>
            Gets the maximum size of a data packet that we can receive using the channel.
            </summary>
            <value>
            The maximum size of a packet.
            </value>
            <remarks>
            <para>
            This is the maximum size (in bytes) we support for the data (payload) of a
            <c>SSH_MSG_CHANNEL_DATA</c> message we receive.
            </para>
            <para>
            We currently do not enforce this limit.
            </para>
            </remarks>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Channels.IChannel.RemotePacketSize">
            <summary>
            Gets the maximum size of a data packet that can be sent using the channel.
            </summary>
            <value>
            The maximum size of data that can be sent using a <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelDataMessage"/>
            on the current channel.
            </value>
            <exception cref="T:System.InvalidOperationException">The channel has not been opened, or the open has not yet been confirmed.</exception>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Channels.IChannel.IsOpen">
            <summary>
            Gets a value indicating whether this channel is open.
            </summary>
            <value>
            <c>true</c> if this channel is open; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.IChannel.SendData(System.Byte[])">
            <summary>
            Sends a SSH_MSG_CHANNEL_DATA message with the specified payload.
            </summary>
            <param name="data">The payload to send.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.IChannel.SendData(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sends a SSH_MSG_CHANNEL_DATA message with the specified payload.
            </summary>
            <param name="data">An array of <see cref="T:System.Byte"/> containing the payload to send.</param>
            <param name="offset">The zero-based offset in <paramref name="data"/> at which to begin taking data from.</param>
            <param name="size">The number of bytes of <paramref name="data"/> to send.</param>
            <remarks>
            <para>
            When the size of the data to send exceeds the maximum packet size or the remote window
            size does not allow the full data to be sent, then this method will send the data in
            multiple chunks and will wait for the remote window size to be adjusted when it's zero.
            </para>
            <para>
            This is done to support SSH servers will a small window size that do not agressively
            increase their window size. We need to take into account that there may be SSH servers
            that only increase their window size when it has reached zero.
            </para>
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.IChannel.SendEof">
            <summary>
            Sends a SSH_MSG_CHANNEL_EOF message to the remote server.
            </summary>
            <exception cref="T:System.InvalidOperationException">The channel is closed.</exception>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Channels.IChannelDirectTcpip">
            <summary>
            A "direct-tcpip" SSH channel.
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.Channels.IChannelDirectTcpip.Exception">
            <summary>
            Occurs when an exception is thrown while processing channel messages.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Channels.IChannelDirectTcpip.IsOpen">
            <summary>
            Gets a value indicating whether this channel is open.
            </summary>
            <value>
            <c>true</c> if this channel is open; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Channels.IChannelDirectTcpip.LocalChannelNumber">
            <summary>
            Gets the local channel number.
            </summary>
            <value>
            The local channel number.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.IChannelDirectTcpip.Open(System.String,System.UInt32,KellermanSoftware.Renci.SshNet.IForwardedPort,System.Net.Sockets.Socket)">
            <summary>
            Opens a channel for a locally forwarded TCP/IP port.
            </summary>
            <param name="remoteHost">The name of the remote host to forward to.</param>
            <param name="port">The port of the remote hosts to forward to.</param>
            <param name="forwardedPort">The forwarded port for which the channel is opened.</param>
            <param name="socket">The socket to receive requests from, and send responses from the remote host to.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.IChannelDirectTcpip.Bind">
            <summary>
            Binds the channel to the remote host.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Channels.IChannelForwardedTcpip">
            <summary>
            A "forwarded-tcpip" SSH channel.
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.Channels.IChannelForwardedTcpip.Exception">
            <summary>
            Occurs when an exception is thrown while processing channel messages.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.IChannelForwardedTcpip.Bind(System.Net.IPEndPoint,KellermanSoftware.Renci.SshNet.IForwardedPort)">
            <summary>
            Binds the channel to the specified endpoint.
            </summary>
            <param name="remoteEndpoint">The endpoint to connect to.</param>
            <param name="forwardedPort">The forwarded port for which the channel is opened.</param>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Channels.IChannelSession">
            <summary>
            Session SSH channel.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.IChannelSession.Open">
            <summary>
            Opens the channel.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.IChannelSession.SendPseudoTerminalRequest(System.String,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Collections.Generic.IDictionary{KellermanSoftware.Renci.SshNet.Common.TerminalModes,System.UInt32})">
            <summary>
            Sends the pseudo terminal request.
            </summary>
            <param name="environmentVariable">The environment variable.</param>
            <param name="columns">The columns.</param>
            <param name="rows">The rows.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="terminalModeValues">The terminal mode values.</param>
            <returns>
            <c>true</c> if request was successful; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.IChannelSession.SendX11ForwardingRequest(System.Boolean,System.String,System.Byte[],System.UInt32)">
            <summary>
            Sends the X11 forwarding request.
            </summary>
            <param name="isSingleConnection">if set to <c>true</c> the it is single connection.</param>
            <param name="protocol">The protocol.</param>
            <param name="cookie">The cookie.</param>
            <param name="screenNumber">The screen number.</param>
            <returns>
            <c>true</c> if request was successful; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.IChannelSession.SendEnvironmentVariableRequest(System.String,System.String)">
            <summary>
            Sends the environment variable request.
            </summary>
            <param name="variableName">Name of the variable.</param>
            <param name="variableValue">The variable value.</param>
            <returns>
            <c>true</c> if request was successful; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.IChannelSession.SendShellRequest">
            <summary>
            Sends the shell request.
            </summary>
            <returns>
            <c>true</c> if request was successful; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.IChannelSession.SendExecRequest(System.String)">
            <summary>
            Sends the exec request.
            </summary>
            <param name="command">The command.</param>
            <returns>
            <c>true</c> if request was successful; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.IChannelSession.SendBreakRequest(System.UInt32)">
            <summary>
            Sends the exec request.
            </summary>
            <param name="breakLength">Length of the break.</param>
            <returns>
            <c>true</c> if request was successful; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.IChannelSession.SendSubsystemRequest(System.String)">
            <summary>
            Sends the subsystem request.
            </summary>
            <param name="subsystem">The subsystem.</param>
            <returns>
            <c>true</c> if request was successful; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.IChannelSession.SendWindowChangeRequest(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Sends the window change request.
            </summary>
            <param name="columns">The columns.</param>
            <param name="rows">The rows.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <returns>
            <c>true</c> if request was successful; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.IChannelSession.SendLocalFlowRequest(System.Boolean)">
            <summary>
            Sends the local flow request.
            </summary>
            <param name="clientCanDo">if set to <c>true</c> [client can do].</param>
            <returns>
            <c>true</c> if request was successful; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.IChannelSession.SendSignalRequest(System.String)">
            <summary>
            Sends the signal request.
            </summary>
            <param name="signalName">Name of the signal.</param>
            <returns>
            <c>true</c> if request was successful; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.IChannelSession.SendExitStatusRequest(System.UInt32)">
            <summary>
            Sends the exit status request.
            </summary>
            <param name="exitStatus">The exit status.</param>
            <returns>
            <c>true</c> if request was successful; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.IChannelSession.SendExitSignalRequest(System.String,System.Boolean,System.String,System.String)">
            <summary>
            Sends the exit signal request.
            </summary>
            <param name="signalName">Name of the signal.</param>
            <param name="coreDumped">if set to <c>true</c> [core dumped].</param>
            <param name="errorMessage">The error message.</param>
            <param name="language">The language.</param>
            <returns>
            <c>true</c> if request was successful; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.IChannelSession.SendEndOfWriteRequest">
            <summary>
            Sends eow@openssh.com request.
            </summary>
            <returns>
            <c>true</c> if request was successful; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.IChannelSession.SendKeepAliveRequest">
            <summary>
            Sends keepalive@openssh.com request.
            </summary>
            <returns>
            <c>true</c> if request was successful; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Channels.ServerChannel.#ctor(KellermanSoftware.Renci.SshNet.ISession,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new <see cref="T:KellermanSoftware.Renci.SshNet.Channels.ServerChannel"/> instance.
            </summary>
            <param name="session">The session.</param>
            <param name="localChannelNumber">The local channel number.</param>
            <param name="localWindowSize">Size of the window.</param>
            <param name="localPacketSize">Size of the packet.</param>
            <param name="remoteChannelNumber">The remote channel number.</param>
            <param name="remoteWindowSize">The window size of the remote party.</param>
            <param name="remotePacketSize">The maximum size of a data packet that we can send to the remote party.</param>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.CipherInfo">
            <summary>
            Holds information about key size and cipher to use
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.CipherInfo.KeySize">
            <summary>
            Gets the size of the key.
            </summary>
            <value>
            The size of the key.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.CipherInfo.Cipher">
            <summary>
            Gets the cipher.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.CipherInfo.#ctor(System.Int32,System.Func{System.Byte[],System.Byte[],KellermanSoftware.Renci.SshNet.Security.Cryptography.Cipher})">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.CipherInfo"/> class.
            </summary>
            <param name="keySize">Size of the key.</param>
            <param name="cipher">The cipher.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ClientAuthentication.#ctor(System.Int32)">
            <summary>
            Initializes a new <see cref="T:KellermanSoftware.Renci.SshNet.ClientAuthentication"/> instance.
            </summary>
            <param name="partialSuccessLimit">The number of times an authentication attempt with any given <see cref="T:KellermanSoftware.Renci.SshNet.IAuthenticationMethod"/> can result in <see cref="F:KellermanSoftware.Renci.SshNet.AuthenticationResult.PartialSuccess"/> before it is disregarded.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="partialSuccessLimit"/> is less than one.</exception>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.ClientAuthentication.PartialSuccessLimit">
            <summary>
            Gets the number of times an authentication attempt with any given <see cref="T:KellermanSoftware.Renci.SshNet.IAuthenticationMethod"/> can
            result in <see cref="F:KellermanSoftware.Renci.SshNet.AuthenticationResult.PartialSuccess"/> before it is disregarded.
            </summary>
            <value>
            The number of times an authentication attempt with any given <see cref="T:KellermanSoftware.Renci.SshNet.IAuthenticationMethod"/> can result
            in <see cref="F:KellermanSoftware.Renci.SshNet.AuthenticationResult.PartialSuccess"/> before it is disregarded.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ClientAuthentication.Authenticate(KellermanSoftware.Renci.SshNet.IConnectionInfoInternal,KellermanSoftware.Renci.SshNet.ISession)">
            <summary>
            Attempts to authentication for a given <see cref="T:KellermanSoftware.Renci.SshNet.ISession"/> using the <see cref="P:KellermanSoftware.Renci.SshNet.IConnectionInfoInternal.AuthenticationMethods"/>
            of the specified <see cref="T:KellermanSoftware.Renci.SshNet.IConnectionInfoInternal"/>.
            </summary>
            <param name="connectionInfo">A <see cref="T:KellermanSoftware.Renci.SshNet.IConnectionInfoInternal"/> to use for authenticating.</param>
            <param name="session">The <see cref="T:KellermanSoftware.Renci.SshNet.ISession"/> for which to perform authentication.</param>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.ClientAuthentication.AuthenticationState._authenticationMethodPartialSuccessRegister">
            <summary>
            Records if a given <see cref="T:KellermanSoftware.Renci.SshNet.IAuthenticationMethod"/> has been tried, and how many times this resulted
            in <see cref="F:KellermanSoftware.Renci.SshNet.AuthenticationResult.PartialSuccess"/>.
            </summary>
            <remarks>
            When there's no entry for a given <see cref="T:KellermanSoftware.Renci.SshNet.IAuthenticationMethod"/>, then it was never tried.
            </remarks>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.ClientAuthentication.AuthenticationState._failedAuthenticationMethods">
            <summary>
            Holds the list of authentications methods that failed.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ClientAuthentication.AuthenticationState.RecordFailure(KellermanSoftware.Renci.SshNet.IAuthenticationMethod)">
            <summary>
            Records a <see cref="F:KellermanSoftware.Renci.SshNet.AuthenticationResult.Failure"/> authentication attempt for the specified
            <see cref="T:KellermanSoftware.Renci.SshNet.IAuthenticationMethod"/> .
            </summary>
            <param name="authenticationMethod">An <see cref="T:KellermanSoftware.Renci.SshNet.IAuthenticationMethod"/> for which to record the result of an authentication attempt.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ClientAuthentication.AuthenticationState.RecordPartialSuccess(KellermanSoftware.Renci.SshNet.IAuthenticationMethod)">
            <summary>
            Records a <see cref="F:KellermanSoftware.Renci.SshNet.AuthenticationResult.PartialSuccess"/> authentication attempt for the specified
            <see cref="T:KellermanSoftware.Renci.SshNet.IAuthenticationMethod"/> .
            </summary>
            <param name="authenticationMethod">An <see cref="T:KellermanSoftware.Renci.SshNet.IAuthenticationMethod"/> for which to record the result of an authentication attempt.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ClientAuthentication.AuthenticationState.GetPartialSuccessCount(KellermanSoftware.Renci.SshNet.IAuthenticationMethod)">
            <summary>
            Returns the number of times an authentication attempt with the specified <see cref="T:KellermanSoftware.Renci.SshNet.IAuthenticationMethod"/>
            has resulted in <see cref="F:KellermanSoftware.Renci.SshNet.AuthenticationResult.PartialSuccess"/>.
            </summary>
            <param name="authenticationMethod">An <see cref="T:KellermanSoftware.Renci.SshNet.IAuthenticationMethod"/>.</param>
            <returns>
            The number of times an authentication attempt with the specified <see cref="T:KellermanSoftware.Renci.SshNet.IAuthenticationMethod"/>
            has resulted in <see cref="F:KellermanSoftware.Renci.SshNet.AuthenticationResult.PartialSuccess"/>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ClientAuthentication.AuthenticationState.GetSupportedAuthenticationMethods(System.String[])">
            <summary>
            Returns a list of supported authentication methods that match one of the specified allowed authentication
            methods.
            </summary>
            <param name="allowedAuthenticationMethods">A list of allowed authentication methods.</param>
            <returns>
            A list of supported authentication methods that match one of the specified allowed authentication methods.
            </returns>
            <remarks>
            The authentication methods are returned in the order in which they were specified in the list that was
            used to initialize the current <see cref="T:KellermanSoftware.Renci.SshNet.ClientAuthentication.AuthenticationState"/> instance.
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ClientAuthentication.AuthenticationState.GetActiveAuthenticationMethods(System.Collections.Generic.List{KellermanSoftware.Renci.SshNet.IAuthenticationMethod})">
            <summary>
            Returns the authentication methods from the specified list that have not yet failed.
            </summary>
            <param name="matchingAuthenticationMethods">A list of authentication methods.</param>
            <returns>
            The authentication methods from <paramref name="matchingAuthenticationMethods"/> that have not yet failed.
            </returns>
            <remarks>
            <para>
            This method first returns the authentication methods that have not yet been executed, and only then
            returns those for which an authentication attempt resulted in a <see cref="F:KellermanSoftware.Renci.SshNet.AuthenticationResult.PartialSuccess"/>.
            </para>
            <para>
            Any <see cref="T:KellermanSoftware.Renci.SshNet.IAuthenticationMethod"/> that has failed is skipped.
            </para>
            </remarks>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.CommandAsyncResult">
            <summary>
            Provides additional information for asynchronous command execution
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.CommandAsyncResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.CommandAsyncResult"/> class.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.CommandAsyncResult.BytesReceived">
            <summary>
            Gets or sets the bytes received. If SFTP only file bytes are counted.
            </summary>
            <value>Total bytes received.</value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.CommandAsyncResult.BytesSent">
            <summary>
            Gets or sets the bytes sent by SFTP.
            </summary>
            <value>Total bytes sent.</value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.CommandAsyncResult.AsyncState">
            <summary>
            Gets a user-defined object that qualifies or contains information about an asynchronous operation.
            </summary>
            <returns>A user-defined object that qualifies or contains information about an asynchronous operation.</returns>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.CommandAsyncResult.AsyncWaitHandle">
            <summary>
            Gets a <see cref="T:System.Threading.WaitHandle"/> that is used to wait for an asynchronous operation to complete.
            </summary>
            <returns>A <see cref="T:System.Threading.WaitHandle"/> that is used to wait for an asynchronous operation to complete.</returns>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.CommandAsyncResult.CompletedSynchronously">
            <summary>
            Gets a value that indicates whether the asynchronous operation completed synchronously.
            </summary>
            <returns>true if the asynchronous operation completed synchronously; otherwise, false.</returns>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.CommandAsyncResult.IsCompleted">
            <summary>
            Gets a value that indicates whether the asynchronous operation has completed.
            </summary>
            <returns>true if the operation is complete; otherwise, false.</returns>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.CommandAsyncResult.EndCalled">
            <summary>
            Gets a value indicating whether <see cref="M:KellermanSoftware.Renci.SshNet.SshCommand.EndExecute(System.IAsyncResult)"/> was already called for this
            <see cref="T:KellermanSoftware.Renci.SshNet.CommandAsyncResult"/>.
            </summary>
            <returns>
            <c>true</c> if <see cref="M:KellermanSoftware.Renci.SshNet.SshCommand.EndExecute(System.IAsyncResult)"/> was already called for this <see cref="T:KellermanSoftware.Renci.SshNet.CommandAsyncResult"/>;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Common.AsyncResult">
            <summary>
            Base class to encapsulates the results of an asynchronous operation.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Common.AsyncResult.EndInvokeCalled">
            <summary>
            Gets or sets a value indicating whether <see cref="M:KellermanSoftware.Renci.SshNet.Common.AsyncResult.EndInvoke"/> has been called on the current
            <see cref="T:KellermanSoftware.Renci.SshNet.Common.AsyncResult"/>.
            </summary>
            <value>
            <c>true</c> if <see cref="M:KellermanSoftware.Renci.SshNet.Common.AsyncResult.EndInvoke"/> has been called on the current <see cref="T:KellermanSoftware.Renci.SshNet.Common.AsyncResult"/>;
            otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.AsyncResult.#ctor(System.AsyncCallback,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.AsyncResult"/> class.
            </summary>
            <param name="asyncCallback">The async callback.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.AsyncResult.SetAsCompleted(System.Exception,System.Boolean)">
            <summary>
            Marks asynchronous operation as completed.
            </summary>
            <param name="exception">The exception.</param>
            <param name="completedSynchronously">if set to <c>true</c> [completed synchronously].</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.AsyncResult.EndInvoke">
            <summary>
            Waits until the asynchronous operation completes, and then returns. 
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Common.AsyncResult.AsyncState">
            <summary>
            Gets a user-defined object that qualifies or contains information about an asynchronous operation.
            </summary>
            <returns>A user-defined object that qualifies or contains information about an asynchronous operation.</returns>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Common.AsyncResult.CompletedSynchronously">
            <summary>
            Gets a value that indicates whether the asynchronous operation completed synchronously.
            </summary>
            <returns>true if the asynchronous operation completed synchronously; otherwise, false.</returns>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Common.AsyncResult.AsyncWaitHandle">
            <summary>
            Gets a <see cref="T:System.Threading.WaitHandle"/> that is used to wait for an asynchronous operation to complete.
            </summary>
            <returns>A <see cref="T:System.Threading.WaitHandle"/> that is used to wait for an asynchronous operation to complete.</returns>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Common.AsyncResult.IsCompleted">
            <summary>
            Gets a value that indicates whether the asynchronous operation has completed.
            </summary>
            <returns>
            <c>true</c> if the operation is complete; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Common.AsyncResult`1">
            <summary>
            Base class to encapsulates the results of an asynchronous operation that returns result.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.AsyncResult`1.#ctor(System.AsyncCallback,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.AsyncResult`1"/> class.
            </summary>
            <param name="asyncCallback">The async callback.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.AsyncResult`1.SetAsCompleted(`0,System.Boolean)">
            <summary>
            Marks asynchronous operation as completed.
            </summary>
            <param name="result">The result.</param>
            <param name="completedSynchronously">if set to <c>true</c> [completed synchronously].</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.AsyncResult`1.EndInvoke">
            <summary>
            Waits until the asynchronous operation completes, and then returns the value generated by the asynchronous operation. 
            </summary>
            <returns>
            The invocation result.
            </returns>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Common.AuthenticationBannerEventArgs">
            <summary>
            Provides data for <see cref="E:KellermanSoftware.Renci.SshNet.ConnectionInfo.AuthenticationBanner"/> event.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Common.AuthenticationBannerEventArgs.BannerMessage">
            <summary>
            Gets banner message.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Common.AuthenticationBannerEventArgs.Language">
            <summary>
            Gets banner language.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.AuthenticationBannerEventArgs.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.AuthenticationBannerEventArgs"/> class.
            </summary>
            <param name="username">The username.</param>
            <param name="message">Banner message.</param>
            <param name="language">Banner language.</param>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Common.AuthenticationEventArgs">
            <summary>
            Base class for authentication events.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Common.AuthenticationEventArgs.Username">
            <summary>
            Gets the username.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.AuthenticationEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.AuthenticationEventArgs"/> class.
            </summary>
            <param name="username">The username.</param>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Common.AuthenticationPasswordChangeEventArgs">
            <summary>
            Provides data for <see cref="E:KellermanSoftware.Renci.SshNet.PasswordConnectionInfo.PasswordExpired"/> event.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Common.AuthenticationPasswordChangeEventArgs.NewPassword">
            <summary>
            Gets or sets the new password.
            </summary>
            <value>
            The new password.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.AuthenticationPasswordChangeEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.AuthenticationPasswordChangeEventArgs"/> class.
            </summary>
            <param name="username">The username.</param>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Common.AuthenticationPrompt">
            <summary>
            Provides prompt information when <see cref="E:KellermanSoftware.Renci.SshNet.KeyboardInteractiveConnectionInfo.AuthenticationPrompt"/> is raised
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Common.AuthenticationPrompt.Id">
            <summary>
            Gets the prompt sequence id.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Common.AuthenticationPrompt.IsEchoed">
            <summary>
            Gets or sets a value indicating whether the user input should be echoed as characters are typed.
            </summary>
            <value>
              <c>true</c> if the user input should be echoed as characters are typed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Common.AuthenticationPrompt.Request">
            <summary>
            Gets server information request.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Common.AuthenticationPrompt.Response">
            <summary>
            Gets or sets server information response.
            </summary>
            <value>
            The response.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.AuthenticationPrompt.#ctor(System.Int32,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.AuthenticationPrompt"/> class.
            </summary>
            <param name="id">The sequence id.</param>
            <param name="isEchoed">if set to <c>true</c> the user input should be echoed.</param>
            <param name="request">The request.</param>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Common.AuthenticationPromptEventArgs">
            <summary>
            Provides data for <see cref="E:KellermanSoftware.Renci.SshNet.KeyboardInteractiveConnectionInfo.AuthenticationPrompt"/> event.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Common.AuthenticationPromptEventArgs.Language">
            <summary>
            Gets prompt language.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Common.AuthenticationPromptEventArgs.Instruction">
            <summary>
            Gets prompt instruction.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Common.AuthenticationPromptEventArgs.Prompts">
            <summary>
            Gets server information request prompts.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.AuthenticationPromptEventArgs.#ctor(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{KellermanSoftware.Renci.SshNet.Common.AuthenticationPrompt})">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.AuthenticationPromptEventArgs"/> class.
            </summary>
            <param name="username">The username.</param>
            <param name="instruction">The instruction.</param>
            <param name="language">The language.</param>
            <param name="prompts">The information request prompts.</param>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Common.BigInteger">
            <summary>
            Represents an arbitrarily large signed integer.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Common.BigInteger.BitLength">
            <summary>
            Gets number of bits used by the number.
            </summary>
            <value>
            The number of the bit used.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.ModInverse(KellermanSoftware.Renci.SshNet.Common.BigInteger,KellermanSoftware.Renci.SshNet.Common.BigInteger)">
            <summary>
            Mods the inverse.
            </summary>
            <param name="bi">The bi.</param>
            <param name="modulus">The modulus.</param>
            <returns>
            Modulus inverted number.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.PositiveMod(KellermanSoftware.Renci.SshNet.Common.BigInteger,KellermanSoftware.Renci.SshNet.Common.BigInteger)">
            <summary>
            Returns positive remainder that results from division with two specified <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> values.
            </summary>
            <param name="dividend">The value to be divided.</param>
            <param name="divisor">The value to divide by.</param>
            <returns>
            Positive remainder that results from the division.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.Random(System.Int32)">
            <summary>
            Generates a new, random <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> of the specified length.
            </summary>
            <param name="bitLength">The number of bits for the new number.</param>
            <returns>A random number of the specified length.</returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> structure using a 32-bit signed integer value.
            </summary>
            <param name="value">A 32-bit signed integer.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> structure using an unsigned 32-bit integer value.
            </summary>
            <param name="value">An unsigned 32-bit integer value.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> structure using a 64-bit signed integer value.
            </summary>
            <param name="value">A 64-bit signed integer.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> structure with an unsigned 64-bit integer value.
            </summary>
            <param name="value">An unsigned 64-bit integer.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> structure using a double-precision floating-point value.
            </summary>
            <param name="value">A double-precision floating-point value.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> structure using a single-precision floating-point value.
            </summary>
            <param name="value">A single-precision floating-point value.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.#ctor(System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> structure using a <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">A decimal number.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> structure using the values in a byte array.
            </summary>
            <param name="value">An array of <see cref="T:System.Byte"/> values in little-endian order.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is <c>null</c>.</exception>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Common.BigInteger.IsEven">
            <summary>
            Indicates whether the value of the current <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> object is an even number.
            </summary>
            <value>
            <c>true</c> if the value of the BigInteger object is an even number; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Common.BigInteger.IsOne">
            <summary>
            Indicates whether the value of the current <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> object is <see cref="P:KellermanSoftware.Renci.SshNet.Common.BigInteger.One"/>.
            </summary>
            <value>
            <c>true</c> if the value of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> object is <see cref="P:KellermanSoftware.Renci.SshNet.Common.BigInteger.One"/>;
            otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Common.BigInteger.IsPowerOfTwo">
            <summary>
            Indicates whether the value of the current <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> object is a power of two.
            </summary>
            <value>
            <c>true</c> if the value of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> object is a power of two;
            otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Common.BigInteger.IsZero">
            <summary>
            Indicates whether the value of the current <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> object is <see cref="P:KellermanSoftware.Renci.SshNet.Common.BigInteger.Zero"/>.
            </summary>
            <value>
            <c>true</c> if the value of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> object is <see cref="P:KellermanSoftware.Renci.SshNet.Common.BigInteger.Zero"/>;
            otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Common.BigInteger.Sign">
            <summary>
            Gets a number that indicates the sign (negative, positive, or zero) of the current <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> object.
            </summary>
            <value>
            A number that indicates the sign of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> object.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Common.BigInteger.MinusOne">
            <summary>
            Gets a value that represents the number negative one (-1).
            </summary>
            <value>
            An integer whose value is negative one (-1).
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Common.BigInteger.One">
            <summary>
            Gets a value that represents the number one (1).
            </summary>
            <value>
            An object whose value is one (1).
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Common.BigInteger.Zero">
            <summary>
            Gets a value that represents the number 0 (zero).
            </summary>
            <value>
            An integer whose value is 0 (zero).
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.op_Explicit(KellermanSoftware.Renci.SshNet.Common.BigInteger)~System.Int32">
            <summary>
            Defines an explicit conversion of a <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> object to a 32-bit signed integer value.
            </summary>
            <param name="value">The value to convert to a 32-bit signed integer.</param>
            <returns>
            An object that contains the value of the <paramref name="value"/> parameter.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.op_Explicit(KellermanSoftware.Renci.SshNet.Common.BigInteger)~System.UInt32">
            <summary>
            Defines an explicit conversion of a <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> object to an unsigned 32-bit integer value.
            </summary>
            <param name="value">The value to convert to an unsigned 32-bit integer.</param>
            <returns>
            An object that contains the value of the <paramref name="value"/> parameter.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.op_Explicit(KellermanSoftware.Renci.SshNet.Common.BigInteger)~System.Int16">
            <summary>
            Defines an explicit conversion of a <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> object to a 16-bit signed integer value.
            </summary>
            <param name="value">The value to convert to a 16-bit signed integer.</param>
            <returns>
            An object that contains the value of the <paramref name="value"/> parameter.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.op_Explicit(KellermanSoftware.Renci.SshNet.Common.BigInteger)~System.UInt16">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns>
            An object that contains the value of the <paramref name="value"/> parameter.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.op_Explicit(KellermanSoftware.Renci.SshNet.Common.BigInteger)~System.Byte">
            <summary>
            Defines an explicit conversion of a <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> object to an unsigned byte value.
            </summary>
            <param name="value">The value to convert to a <see cref="T:System.Byte"/>.</param>
            <returns>
            An object that contains the value of the <paramref name="value"/> parameter.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.op_Explicit(KellermanSoftware.Renci.SshNet.Common.BigInteger)~System.SByte">
            <summary>
            Defines an explicit conversion of a <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> object to a signed 8-bit value.
            </summary>
            <param name="value">The value to convert to a signed 8-bit value.</param>
            <returns>
            An object that contains the value of the <paramref name="value"/> parameter.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.op_Explicit(KellermanSoftware.Renci.SshNet.Common.BigInteger)~System.Int64">
            <summary>
            Defines an explicit conversion of a <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> object to a 64-bit signed integer value.
            </summary>
            <param name="value">The value to convert to a 64-bit signed integer.</param>
            <returns>
            An object that contains the value of the <paramref name="value"/> parameter.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.op_Explicit(KellermanSoftware.Renci.SshNet.Common.BigInteger)~System.UInt64">
            <summary>
            Defines an explicit conversion of a <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> object to an unsigned 64-bit integer value.
            </summary>
            <param name="value">The value to convert to an unsigned 64-bit integer.</param>
            <returns>
            An object that contains the value of the <paramref name="value"/> parameter.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.op_Explicit(KellermanSoftware.Renci.SshNet.Common.BigInteger)~System.Double">
            <summary>
            Defines an explicit conversion of a <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> object to a <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The value to convert to a <see cref="T:System.Double"/>.</param>
            <returns>
            An object that contains the value of the <paramref name="value"/> parameter.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.op_Explicit(KellermanSoftware.Renci.SshNet.Common.BigInteger)~System.Single">
            <summary>
            Defines an explicit conversion of a <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> object to a single-precision floating-point value.
            </summary>
            <param name="value">The value to convert to a single-precision floating-point value.</param>
            <returns>
            An object that contains the value of the <paramref name="value"/> parameter.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.op_Explicit(KellermanSoftware.Renci.SshNet.Common.BigInteger)~System.Decimal">
            <summary>
            Defines an explicit conversion of a <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> object to a <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">The value to convert to a <see cref="T:System.Decimal"/>.</param>
            <returns>
            An object that contains the value of the <paramref name="value"/> parameter.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.op_Implicit(System.Int32)~KellermanSoftware.Renci.SshNet.Common.BigInteger">
            <summary>
            Defines an implicit conversion of a signed 32-bit integer to a <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> value.
            </summary>
            <param name="value">The value to convert to a <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/>.</param>
            <returns>
            An object that contains the value of the <paramref name="value"/> parameter.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.op_Implicit(System.UInt32)~KellermanSoftware.Renci.SshNet.Common.BigInteger">
            <summary>
            Defines an implicit conversion of a 32-bit unsigned integer to a <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> value.
            </summary>
            <param name="value">The value to convert to a <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/>.</param>
            <returns>
            An object that contains the value of the <paramref name="value"/> parameter.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.op_Implicit(System.Int16)~KellermanSoftware.Renci.SshNet.Common.BigInteger">
            <summary>
            Defines an implicit conversion of a signed 16-bit integer to a BigInteger value.
            </summary>
            <param name="value">The value to convert to a <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/>.</param>
            <returns>
            An object that contains the value of the <paramref name="value"/> parameter.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.op_Implicit(System.UInt16)~KellermanSoftware.Renci.SshNet.Common.BigInteger">
            <summary>
            Defines an implicit conversion of a 16-bit unsigned integer to a <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> value.
            </summary>
            <param name="value">The value to convert to a <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/>.</param>
            <returns>
            An object that contains the value of the <paramref name="value"/> parameter.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.op_Implicit(System.Byte)~KellermanSoftware.Renci.SshNet.Common.BigInteger">
            <summary>
            Defines an implicit conversion of an unsigned byte to a <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> value.
            </summary>
            <param name="value">The value to convert to a <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/>.</param>
            <returns>
            An object that contains the value of the <paramref name="value"/> parameter.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.op_Implicit(System.SByte)~KellermanSoftware.Renci.SshNet.Common.BigInteger">
            <summary>
            
            </summary>
            <param name="value">The value to convert to a <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/>.</param>
            <returns>
            An object that contains the value of the <paramref name="value"/> parameter.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.op_Implicit(System.Int64)~KellermanSoftware.Renci.SshNet.Common.BigInteger">
            <summary>
            Defines an implicit conversion of a signed 64-bit integer to a <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> value.
            </summary>
            <param name="value">The value to convert to a <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/>.</param>
            <returns>
            An object that contains the value of the <paramref name="value"/> parameter.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.op_Implicit(System.UInt64)~KellermanSoftware.Renci.SshNet.Common.BigInteger">
            <summary>
            Defines an implicit conversion of a 64-bit unsigned integer to a <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> value.
            </summary>
            <param name="value">The value to convert to a <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/>.</param>
            <returns>
            An object that contains the value of the <paramref name="value"/> parameter.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.op_Explicit(System.Double)~KellermanSoftware.Renci.SshNet.Common.BigInteger">
            <summary>
            Defines an explicit conversion of a <see cref="T:System.Double"/> value to a <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> value.
            </summary>
            <param name="value">The value to convert to a <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/>.</param>
            <returns>
            An object that contains the value of the <paramref name="value"/> parameter.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.op_Explicit(System.Single)~KellermanSoftware.Renci.SshNet.Common.BigInteger">
            <summary>
            Defines an explicit conversion of a <see cref="T:System.Single"/> object to a <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> value.
            </summary>
            <param name="value">The value to convert to a <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/>.</param>
            <returns>
            An object that contains the value of the <paramref name="value"/> parameter.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.op_Explicit(System.Decimal)~KellermanSoftware.Renci.SshNet.Common.BigInteger">
            <summary>
            Defines an explicit conversion of a <see cref="T:System.Decimal"/> object to a <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> value.
            </summary>
            <param name="value">The value to convert to a <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/>.</param>
            <returns>
            An object that contains the value of the <paramref name="value"/> parameter.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.op_Addition(KellermanSoftware.Renci.SshNet.Common.BigInteger,KellermanSoftware.Renci.SshNet.Common.BigInteger)">
            <summary>
            Adds the values of two specified <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> objects.
            </summary>
            <param name="left">The first value to add.</param>
            <param name="right">The second value to add.</param>
            <returns>
            The sum of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.op_Subtraction(KellermanSoftware.Renci.SshNet.Common.BigInteger,KellermanSoftware.Renci.SshNet.Common.BigInteger)">
            <summary>
            Subtracts a <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> value from another <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> value.
            </summary>
            <param name="left">The value to subtract from (the minuend).</param>
            <param name="right">The value to subtract (the subtrahend).</param>
            <returns>
            The result of subtracting <paramref name="right"/> from <paramref name="left"/>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.op_Multiply(KellermanSoftware.Renci.SshNet.Common.BigInteger,KellermanSoftware.Renci.SshNet.Common.BigInteger)">
            <summary>
            Multiplies two specified <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> values.
            </summary>
            <param name="left">The first value to multiply.</param>
            <param name="right">The second value to multiply.</param>
            <returns>
            The product of left and right.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.op_Division(KellermanSoftware.Renci.SshNet.Common.BigInteger,KellermanSoftware.Renci.SshNet.Common.BigInteger)">
            <summary>
            Divides a specified <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> value by another specified <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> value by using
            integer division.
            </summary>
            <param name="dividend">The value to be divided.</param>
            <param name="divisor">The value to divide by.</param>
            <returns>
            The integral result of the division.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.op_Modulus(KellermanSoftware.Renci.SshNet.Common.BigInteger,KellermanSoftware.Renci.SshNet.Common.BigInteger)">
            <summary>
            Returns the remainder that results from division with two specified <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> values.
            </summary>
            <param name="dividend">The value to be divided.</param>
            <param name="divisor">The value to divide by.</param>
            <returns>
            The remainder that results from the division.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.op_UnaryNegation(KellermanSoftware.Renci.SshNet.Common.BigInteger)">
            <summary>
            Negates a specified <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> value.
            </summary>
            <param name="value">The value to negate.</param>
             <returns>
            The result of the <paramref name="value"/> parameter multiplied by negative one (-1).
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.op_UnaryPlus(KellermanSoftware.Renci.SshNet.Common.BigInteger)">
            <summary>
            Returns the value of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> operand.
            </summary>
            <param name="value">An integer value.</param>
            <returns>
            The value of the <paramref name="value"/> operand.
            </returns>
            <remarks>
            The sign of the operand is unchanged.
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.op_Increment(KellermanSoftware.Renci.SshNet.Common.BigInteger)">
            <summary>
            Increments a <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> value by 1.
            </summary>
            <param name="value">The value to increment.</param>
            <returns>
            The value of the <paramref name="value"/> parameter incremented by 1.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.op_Decrement(KellermanSoftware.Renci.SshNet.Common.BigInteger)">
            <summary>
            Decrements a <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> value by 1.
            </summary>
            <param name="value">The value to decrement.</param>
            <returns>
            The value of the <paramref name="value"/> parameter decremented by 1.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.op_BitwiseAnd(KellermanSoftware.Renci.SshNet.Common.BigInteger,KellermanSoftware.Renci.SshNet.Common.BigInteger)">
            <summary>
            Performs a bitwise <c>And</c> operation on two <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> values.
            </summary>
            <param name="left">The first value.</param>
            <param name="right">The second value.</param>
            <returns>
            The result of the bitwise <c>And</c> operation.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.op_BitwiseOr(KellermanSoftware.Renci.SshNet.Common.BigInteger,KellermanSoftware.Renci.SshNet.Common.BigInteger)">
            <summary>
            Performs a bitwise <c>Or</c> operation on two <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> values.
            </summary>
            <param name="left">The first value.</param>
            <param name="right">The second value.</param>
            <returns>
            The result of the bitwise <c>Or</c> operation.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.op_ExclusiveOr(KellermanSoftware.Renci.SshNet.Common.BigInteger,KellermanSoftware.Renci.SshNet.Common.BigInteger)">
            <summary>
            Performs a bitwise exclusive <c>Or</c> (<c>XOr</c>) operation on two <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> values.
            </summary>
            <param name="left">The first value.</param>
            <param name="right">The second value.</param>
            <returns>
            The result of the bitwise <c>Or</c> operation.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.op_OnesComplement(KellermanSoftware.Renci.SshNet.Common.BigInteger)">
            <summary>
            Returns the bitwise one's complement of a <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> value.
            </summary>
            <param name="value">An integer value.</param>
            <returns>
            The bitwise one's complement of <paramref name="value"/>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.op_LeftShift(KellermanSoftware.Renci.SshNet.Common.BigInteger,System.Int32)">
            <summary>
            Shifts a <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> value a specified number of bits to the left.
            </summary>
            <param name="value">The value whose bits are to be shifted.</param>
            <param name="shift">The number of bits to shift value to the left.</param>
            <returns>
            A value that has been shifted to the left by the specified number of bits.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.op_RightShift(KellermanSoftware.Renci.SshNet.Common.BigInteger,System.Int32)">
            <summary>
            Shifts a <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> value a specified number of bits to the right.
            </summary>
            <param name="value">The value whose bits are to be shifted.</param>
            <param name="shift">The number of bits to shift value to the right.</param>
            <returns>
            A value that has been shifted to the right by the specified number of bits.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.op_LessThan(KellermanSoftware.Renci.SshNet.Common.BigInteger,KellermanSoftware.Renci.SshNet.Common.BigInteger)">
            <summary>
            Returns a value that indicates whether a <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> value is less than another
            <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> value.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> is less than <paramref name="right"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.op_LessThan(KellermanSoftware.Renci.SshNet.Common.BigInteger,System.Int64)">
            <summary>
            Returns a value that indicates whether a <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> value is less than a 64-bit signed integer.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if left is <paramref name="left"/> than <paramref name="right"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.op_LessThan(System.Int64,KellermanSoftware.Renci.SshNet.Common.BigInteger)">
            <summary>
            Returns a value that indicates whether a 64-bit signed integer is less than a <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> value.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> is less than <paramref name="right"/>;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.op_LessThan(KellermanSoftware.Renci.SshNet.Common.BigInteger,System.UInt64)">
            <summary>
            Returns a value that indicates whether a 64-bit signed integer is less than a <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> value.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> is less than <paramref name="right"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.op_LessThan(System.UInt64,KellermanSoftware.Renci.SshNet.Common.BigInteger)">
            <summary>
            Returns a value that indicates whether a 64-bit unsigned integer is less than a <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> value.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> is less than <paramref name="right"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.op_LessThanOrEqual(KellermanSoftware.Renci.SshNet.Common.BigInteger,KellermanSoftware.Renci.SshNet.Common.BigInteger)">
            <summary>
            Returns a value that indicates whether a <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> value is less than or equal
            to another <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> value.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> is less than or equal to <paramref name="right"/>;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.op_LessThanOrEqual(KellermanSoftware.Renci.SshNet.Common.BigInteger,System.Int64)">
            <summary>
            Returns a value that indicates whether a <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> value is less than or equal
            to a 64-bit signed integer.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> is less than or equal to <paramref name="right"/>;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.op_LessThanOrEqual(System.Int64,KellermanSoftware.Renci.SshNet.Common.BigInteger)">
            <summary>
            Returns a value that indicates whether a 64-bit signed integer is less than or equal to a <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> value.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> is less than or equal to <paramref name="right"/>;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.op_LessThanOrEqual(KellermanSoftware.Renci.SshNet.Common.BigInteger,System.UInt64)">
            <summary>
            Returns a value that indicates whether a <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> value is less than or equal to
            a 64-bit unsigned integer.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> is less than or equal to <paramref name="right"/>;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.op_LessThanOrEqual(System.UInt64,KellermanSoftware.Renci.SshNet.Common.BigInteger)">
            <summary>
            Returns a value that indicates whether a 64-bit unsigned integer is less than or equal to a
            <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> value.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> is less than or equal to <paramref name="right"/>;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.op_GreaterThan(KellermanSoftware.Renci.SshNet.Common.BigInteger,KellermanSoftware.Renci.SshNet.Common.BigInteger)">
            <summary>
            Returns a value that indicates whether a <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> value is greater than another
            <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> value.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> is greater than <paramref name="right"/>;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.op_GreaterThan(KellermanSoftware.Renci.SshNet.Common.BigInteger,System.Int64)">
            <summary>
            Returns a value that indicates whether a <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> is greater than a 64-bit signed integer value.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> is greater than <paramref name="right"/>;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.op_GreaterThan(System.Int64,KellermanSoftware.Renci.SshNet.Common.BigInteger)">
            <summary>
            Returns a value that indicates whether a 64-bit signed integer is greater than a <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> value.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> is greater than <paramref name="right"/>;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.op_GreaterThan(KellermanSoftware.Renci.SshNet.Common.BigInteger,System.UInt64)">
            <summary>
            Returns a value that indicates whether a <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> value is greater than a 64-bit unsigned integer.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> is greater than <paramref name="right"/>;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.op_GreaterThan(System.UInt64,KellermanSoftware.Renci.SshNet.Common.BigInteger)">
            <summary>
            Returns a value that indicates whether a 64-bit unsigned integer is greater than a <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> value.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> is greater than <paramref name="right"/>;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.op_GreaterThanOrEqual(KellermanSoftware.Renci.SshNet.Common.BigInteger,KellermanSoftware.Renci.SshNet.Common.BigInteger)">
            <summary>
            Returns a value that indicates whether a <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> value is greater than or equal
            to another <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> value.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> is greater than <paramref name="right"/>;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.op_GreaterThanOrEqual(KellermanSoftware.Renci.SshNet.Common.BigInteger,System.Int64)">
            <summary>
            Returns a value that indicates whether a <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> value is greater than or equal
            to a 64-bit signed integer value.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> is greater than <paramref name="right"/>;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.op_GreaterThanOrEqual(System.Int64,KellermanSoftware.Renci.SshNet.Common.BigInteger)">
            <summary>
            Returns a value that indicates whether a 64-bit signed integer is greater than or equal to a
            <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> value.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> is greater than <paramref name="right"/>;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.op_GreaterThanOrEqual(KellermanSoftware.Renci.SshNet.Common.BigInteger,System.UInt64)">
            <summary>
            Returns a value that indicates whether a <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> value is greater than or equal to a
            64-bit unsigned integer value.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> is greater than <paramref name="right"/>;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.op_GreaterThanOrEqual(System.UInt64,KellermanSoftware.Renci.SshNet.Common.BigInteger)">
            <summary>
            Returns a value that indicates whether a 64-bit unsigned integer is greater than or equal to a
            <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> value.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> is greater than <paramref name="right"/>;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.op_Equality(KellermanSoftware.Renci.SshNet.Common.BigInteger,KellermanSoftware.Renci.SshNet.Common.BigInteger)">
            <summary>
            Returns a value that indicates whether the values of two <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> objects are equal.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if the <paramref name="left"/> and <paramref name="right"/> parameters have the same value;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.op_Equality(KellermanSoftware.Renci.SshNet.Common.BigInteger,System.Int64)">
            <summary>
            Returns a value that indicates whether a <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> value and a signed long integer value are equal.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if the <paramref name="left"/> and <paramref name="right"/> parameters have the same value;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.op_Equality(System.Int64,KellermanSoftware.Renci.SshNet.Common.BigInteger)">
            <summary>
            Returns a value that indicates whether a signed long integer value and a <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> value are equal.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if the <paramref name="left"/> and <paramref name="right"/> parameters have the same value;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.op_Equality(KellermanSoftware.Renci.SshNet.Common.BigInteger,System.UInt64)">
            <summary>
            Returns a value that indicates whether a <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> value and an unsigned long integer value are equal.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if the <paramref name="left"/> and <paramref name="right"/> parameters have the same value;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.op_Equality(System.UInt64,KellermanSoftware.Renci.SshNet.Common.BigInteger)">
            <summary>
            Returns a value that indicates whether an unsigned long integer value and a <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> value are equal.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if the <paramref name="left"/> and <paramref name="right"/> parameters have the same value;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.op_Inequality(KellermanSoftware.Renci.SshNet.Common.BigInteger,KellermanSoftware.Renci.SshNet.Common.BigInteger)">
            <summary>
            Returns a value that indicates whether two <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> objects have different values.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> and <paramref name="right"/> are not equal;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.op_Inequality(KellermanSoftware.Renci.SshNet.Common.BigInteger,System.Int64)">
            <summary>
            Returns a value that indicates whether a <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> value and a 64-bit signed integer are not equal.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> and <paramref name="right"/> are not equal;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.op_Inequality(System.Int64,KellermanSoftware.Renci.SshNet.Common.BigInteger)">
            <summary>
            Returns a value that indicates whether a 64-bit signed integer and a <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> value are not equal.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> and <paramref name="right"/> are not equal;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.op_Inequality(KellermanSoftware.Renci.SshNet.Common.BigInteger,System.UInt64)">
            <summary>
            Returns a value that indicates whether a <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> value and a 64-bit unsigned integer are not equal.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> and <paramref name="right"/> are not equal;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.op_Inequality(System.UInt64,KellermanSoftware.Renci.SshNet.Common.BigInteger)">
            <summary>
            Returns a value that indicates whether a 64-bit unsigned integer and a <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> value are not equal.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> and <paramref name="right"/> are not equal;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current instance and a specified object have the same value.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns>
            <c>true</c> if the <paramref name="obj"/> parameter is a <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> object or a type capable
            of implicit conversion to a <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> value, and its value is equal to the value of the
            current <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> object; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.Equals(KellermanSoftware.Renci.SshNet.Common.BigInteger)">
            <summary>
            Returns a value that indicates whether the current instance and a specified <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> object
            have the same value.
            </summary>
            <param name="other">The object to compare.</param>
            <returns>
            <c>true</c> if this <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> object and <paramref name="other"/> have the same value;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.Equals(System.Int64)">
            <summary>
            Returns a value that indicates whether the current instance and a signed 64-bit integer have the same value.
            </summary>
            <param name="other">The signed 64-bit integer value to compare.</param>
            <returns>
            <c>true</c> if the signed 64-bit integer and the current instance have the same value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.ToString">
            <summary>
            Converts the numeric value of the current <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> object to its equivalent string representation.
            </summary>
            <returns>
            The string representation of the current <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> value.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.ToString(System.String)">
            <summary>
            Converts the numeric value of the current <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> object to its equivalent string representation
            by using the specified format.
            </summary>
            <param name="format">A standard or custom numeric format string.</param>
            <returns>
            The string representation of the current <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> value in the format specified by the
            <paramref name="format"/> parameter.
            </returns>
            <exception cref="T:System.FormatException"><paramref name="format"/> is not a valid format string.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.ToString(System.IFormatProvider)">
            <summary>
            Converts the numeric value of the current <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> object to its equivalent string representation
            by using the specified culture-specific formatting information. 
            </summary>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <returns>
            The string representation of the current <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> value in the format specified by the
            <paramref name="provider"/> parameter.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.ToString(System.String,System.IFormatProvider)">
            <summary>
            Converts the numeric value of the current <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> object to its equivalent string representation
            by using the specified format and culture-specific format information.
            </summary>
            <param name="format">A standard or custom numeric format string.</param>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <returns>
            The string representation of the current <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> value as specified by the <paramref name="format"/>
            and <paramref name="provider"/> parameters.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.Parse(System.String)">
            <summary>
            Converts the string representation of a number to its <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> equivalent.
            </summary>
            <param name="value">A string that contains the number to convert.</param>
            <returns>
            A value that is equivalent to the number specified in the <paramref name="value"/> parameter.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is <c>null</c>.</exception>
            <exception cref="T:System.FormatException"><paramref name="value"/> is not in the correct format.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Converts the string representation of a number in a specified style to its <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> equivalent.
            </summary>
            <param name="value">A string that contains a number to convert.</param>
            <param name="style">A bitwise combination of the enumeration values that specify the permitted format of <paramref name="value"/>.</param>
            <returns>
            A value that is equivalent to the number specified in the <paramref name="value"/> parameter.
            </returns>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="style"/> is not a <see cref="T:System.Globalization.NumberStyles"/> value.</para>
            <para>-or-</para>
            <para><paramref name="style"/> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> or <see cref="F:System.Globalization.NumberStyles.HexNumber"/> flag along with another value.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is <c>null</c>.</exception>
            <exception cref="T:System.FormatException"><paramref name="value"/> does not comply with the input pattern specified by <see cref="T:System.Globalization.NumberStyles"/>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.Parse(System.String,System.IFormatProvider)">
            <summary>
            Converts the string representation of a number in a specified style to its <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> equivalent.
            </summary>
            <param name="value">A string that contains a number to convert.</param>
            <param name="provider">An object that provides culture-specific formatting information about <paramref name="value"/>.</param>
            <returns>
            A value that is equivalent to the number specified in the <paramref name="value"/> parameter.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is <c>null</c>.</exception>
            <exception cref="T:System.FormatException"><paramref name="value"/> is not in the correct format.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> equivalent.
            </summary>
            <param name="value">A string that contains a number to convert.</param>
            <param name="style">A bitwise combination of the enumeration values that specify the permitted format of <paramref name="value"/>.</param>
            <param name="provider">An object that provides culture-specific formatting information about <paramref name="value"/>.</param>
            <returns>
            A value that is equivalent to the number specified in the <paramref name="value"/> parameter.
            </returns>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="style"/> is not a <see cref="T:System.Globalization.NumberStyles"/> value.</para>
            <para>-or-</para>
            <para><paramref name="style"/> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> or <see cref="F:System.Globalization.NumberStyles.HexNumber"/> flag along with another value.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is <c>null</c>.</exception>
            <exception cref="T:System.FormatException"><paramref name="value"/> does not comply with the input pattern specified by <see cref="T:System.Globalization.NumberStyles"/>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.TryParse(System.String,KellermanSoftware.Renci.SshNet.Common.BigInteger@)">
            <summary>
            Tries to convert the string representation of a number to its <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> equivalent, and
            returns a value that indicates whether the conversion succeeded.
            </summary>
            <param name="value">The string representation of a number.</param>
            <param name="result">When this method returns, contains the <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> equivalent to the number that is contained in value, or zero (0) if the conversion fails. The conversion fails if the <paramref name="value"/> parameter is <c>null</c> or is not of the correct format. This parameter is passed uninitialized.</param>
            <returns>
            <c>true</c> if <paramref name="value"/> was converted successfully; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is <c>null</c>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,KellermanSoftware.Renci.SshNet.Common.BigInteger@)">
            <summary>
            Tries to convert the string representation of a number in a specified style and culture-specific format to its
            <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> equivalent, and returns a value that indicates whether the conversion succeeded.
            </summary>
            <param name="value">The string representation of a number.</param>
            <param name="style">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="value"/>.</param>
            <param name="provider">An object that supplies culture-specific formatting information about <paramref name="value"/>.</param>
            <param name="result">When this method returns, contains the <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> equivalent to the number that is contained in value, or <see cref="P:KellermanSoftware.Renci.SshNet.Common.BigInteger.Zero"/> if the conversion fails. The conversion fails if the <paramref name="value"/> parameter is <c>null</c> or is not of the correct format. This parameter is passed uninitialized.</param>
            <returns>
            <c>true</c> if <paramref name="value"/> was converted successfully; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="style"/> is not a <see cref="T:System.Globalization.NumberStyles"/> value.</para>
            <para>-or-</para>
            <para><paramref name="style"/> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> or <see cref="F:System.Globalization.NumberStyles.HexNumber"/> flag along with another value.</para>
            </exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.Min(KellermanSoftware.Renci.SshNet.Common.BigInteger,KellermanSoftware.Renci.SshNet.Common.BigInteger)">
            <summary>
            Returns the smaller of two <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> values.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            The <paramref name="left"/> or <paramref name="right"/> parameter, whichever is smaller.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.Max(KellermanSoftware.Renci.SshNet.Common.BigInteger,KellermanSoftware.Renci.SshNet.Common.BigInteger)">
            <summary>
            Returns the larger of two <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> values.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            The <paramref name="left"/> or <paramref name="right"/> parameter, whichever is larger.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.Abs(KellermanSoftware.Renci.SshNet.Common.BigInteger)">
            <summary>
            Gets the absolute value of a <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> object.
            </summary>
            <param name="value">A number.</param>
            <returns>
            The absolute value of <paramref name="value"/>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.DivRem(KellermanSoftware.Renci.SshNet.Common.BigInteger,KellermanSoftware.Renci.SshNet.Common.BigInteger,KellermanSoftware.Renci.SshNet.Common.BigInteger@)">
            <summary>
            Divides one <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> value by another, returns the result, and returns the remainder in
            an output parameter.
            </summary>
            <param name="dividend">The value to be divided.</param>
            <param name="divisor">The value to divide by.</param>
            <param name="remainder">When this method returns, contains a <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> value that represents the remainder from the division. This parameter is passed uninitialized.</param>
            <returns>
            The quotient of the division.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.Pow(KellermanSoftware.Renci.SshNet.Common.BigInteger,System.Int32)">
            <summary>
            Raises a <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> value to the power of a specified value.
            </summary>
            <param name="value">The number to raise to the <paramref name="exponent"/> power.</param>
            <param name="exponent">The exponent to raise <paramref name="value"/> by.</param>
            <returns>
            The result of raising <paramref name="value"/> to the <paramref name="exponent"/> power.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.ModPow(KellermanSoftware.Renci.SshNet.Common.BigInteger,KellermanSoftware.Renci.SshNet.Common.BigInteger,KellermanSoftware.Renci.SshNet.Common.BigInteger)">
            <summary>
            Performs modulus division on a number raised to the power of another number.
            </summary>
            <param name="value">The number to raise to the <paramref name="exponent"/> power.</param>
            <param name="exponent">The exponent to raise <paramref name="value"/> by.</param>
            <param name="modulus">The number by which to divide <paramref name="value"/> raised to the <paramref name="exponent"/> power.</param>
            <returns>
            The remainder after dividing <paramref name="value"/> raised by <paramref name="exponent"/> by
            <paramref name="modulus"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="exponent"/> is negative.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.GreatestCommonDivisor(KellermanSoftware.Renci.SshNet.Common.BigInteger,KellermanSoftware.Renci.SshNet.Common.BigInteger)">
            <summary>
            Finds the greatest common divisor of two <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> values.
            </summary>
            <param name="left">The first value.</param>
            <param name="right">The second value.</param>
            <returns>
            The greatest common divisor of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.Log(KellermanSoftware.Renci.SshNet.Common.BigInteger,System.Double)">
            <summary>
            Returns the logarithm of a specified number in a specified base.
            </summary>
            <param name="value">A number whose logarithm is to be found.</param>
            <param name="baseValue">The base of the logarithm.</param>
            <returns>
            The base <paramref name="baseValue"/> logarithm of value, 
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The log of <paramref name="value"/> is out of range of the <see cref="T:System.Double"/> data type.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.Log(KellermanSoftware.Renci.SshNet.Common.BigInteger)">
            <summary>
            Returns the natural (base <c>e</c>) logarithm of a specified number.
            </summary>
            <param name="value">The number whose logarithm is to be found.</param>
            <returns>
            The natural (base <c>e</c>) logarithm of <paramref name="value"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The base 10 log of value is out of range of the <see cref="T:System.Double"/> data type.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.Log10(KellermanSoftware.Renci.SshNet.Common.BigInteger)">
            <summary>
            Returns the base 10 logarithm of a specified number.
            </summary>
            <param name="value">A number whose logarithm is to be found.</param>
            <returns>
            The base 10 logarithm of <paramref name="value"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The base 10 log of value is out of range of the <see cref="T:System.Double"/> data type.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.Equals(System.UInt64)">
            <summary>
            Returns a value that indicates whether the current instance and an unsigned 64-bit integer have the same value.
            </summary>
            <param name="other">The unsigned 64-bit integer to compare.</param>
            <returns>
            <c>true</c> if the current instance and the unsigned 64-bit integer have the same value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.GetHashCode">
            <summary>
            Returns the hash code for the current <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> object.
            </summary>
            <returns>
            A 32-bit signed integer hash code.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.Add(KellermanSoftware.Renci.SshNet.Common.BigInteger,KellermanSoftware.Renci.SshNet.Common.BigInteger)">
            <summary>
            Adds two <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> values and returns the result.
            </summary>
            <param name="left">The first value to add.</param>
            <param name="right">The second value to add.</param>
            <returns>
            The sum of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.Subtract(KellermanSoftware.Renci.SshNet.Common.BigInteger,KellermanSoftware.Renci.SshNet.Common.BigInteger)">
            <summary>
            Subtracts one <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> value from another and returns the result.
            </summary>
            <param name="left">The value to subtract from (the minuend).</param>
            <param name="right">The value to subtract (the subtrahend).</param>
            <returns>
            The result of subtracting <paramref name="right"/> from <paramref name="left"/>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.Multiply(KellermanSoftware.Renci.SshNet.Common.BigInteger,KellermanSoftware.Renci.SshNet.Common.BigInteger)">
            <summary>
            Returns the product of two <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> values.
            </summary>
            <param name="left">The first number to multiply.</param>
            <param name="right">The second number to multiply.</param>
            <returns>
            The product of the <paramref name="left"/> and <paramref name="right"/> parameters.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.Divide(KellermanSoftware.Renci.SshNet.Common.BigInteger,KellermanSoftware.Renci.SshNet.Common.BigInteger)">
            <summary>
            Divides one <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> value by another and returns the result.
            </summary>
            <param name="dividend">The value to be divided.</param>
            <param name="divisor">The value to divide by.</param>
            <returns>
            The quotient of the division.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.Remainder(KellermanSoftware.Renci.SshNet.Common.BigInteger,KellermanSoftware.Renci.SshNet.Common.BigInteger)">
            <summary>
            Performs integer division on two <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> values and returns the remainder.
            </summary>
            <param name="dividend">The value to be divided.</param>
            <param name="divisor">The value to divide by.</param>
            <returns>
            The remainder after dividing <paramref name="dividend"/> by <paramref name="divisor"/>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.Negate(KellermanSoftware.Renci.SshNet.Common.BigInteger)">
            <summary>
            Negates a specified <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> value.
            </summary>
            <param name="value">The value to negate.</param>
            <returns>
            The result of the <paramref name="value"/> parameter multiplied by negative one (-1).
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified object and returns an integer that indicates whether the value of
            this instance is less than, equal to, or greater than the value of the specified object.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns>
            A signed integer that indicates the relationship of the current instance to the <paramref name="obj"/> parameter,
            as shown in the following table.
            <list type="table">
                <listheader>
                    <term>Value</term>
                    <description>Condition</description>
                </listheader>
                <item>
                    <term>Less than zero</term>
                    <description>The current instance is less than <paramref name="obj"/>.</description>
                </item>
                <item>
                    <term>Zero</term>
                    <description>The current instance equals <paramref name="obj"/>.</description>
                </item>
                <item>
                    <term>Greater than zero</term>
                    <description>The current instance is greater than <paramref name="obj"/>.</description>
                </item>
            </list>
            </returns>
            <exception cref="T:System.ArgumentException"><paramref name="obj"/> is not a <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.CompareTo(KellermanSoftware.Renci.SshNet.Common.BigInteger)">
            <summary>
            Compares this instance to a second <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> and returns an integer that indicates whether the
            value of this instance is less than, equal to, or greater than the value of the specified object.
            </summary>
            <param name="other">The object to compare.</param>
            <returns>
            A signed integer value that indicates the relationship of this instance to <paramref name="other"/>, as
            shown in the following table.
            <list type="table">
                <listheader>
                    <term>Value</term>
                    <description>Condition</description>
                </listheader>
                <item>
                    <term>Less than zero</term>
                    <description>The current instance is less than <paramref name="other"/>.</description>
                </item>
                <item>
                    <term>Zero</term>
                    <description>The current instance equals <paramref name="other"/>.</description>
                </item>
                <item>
                    <term>Greater than zero</term>
                    <description>The current instance is greater than <paramref name="other"/>.</description>
                </item>
            </list>
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.CompareTo(System.UInt64)">
            <summary>
            Compares this instance to an unsigned 64-bit integer and returns an integer that indicates whether the value of this
            instance is less than, equal to, or greater than the value of the unsigned 64-bit integer.
            </summary>
            <param name="other">The unsigned 64-bit integer to compare.</param>
            <returns>
            A signed integer that indicates the relative value of this instance and <paramref name="other"/>, as shown
            in the following table.
            <list type="table">
                <listheader>
                    <term>Value</term>
                    <description>Condition</description>
                </listheader>
                <item>
                    <term>Less than zero</term>
                    <description>The current instance is less than <paramref name="other"/>.</description>
                </item>
                <item>
                    <term>Zero</term>
                    <description>The current instance equals <paramref name="other"/>.</description>
                </item>
                <item>
                    <term>Greater than zero</term>
                    <description>The current instance is greater than <paramref name="other"/>.</description>
                </item>
            </list>
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.CompareTo(System.Int64)">
            <summary>
            Compares this instance to a signed 64-bit integer and returns an integer that indicates whether the value of this
            instance is less than, equal to, or greater than the value of the signed 64-bit integer.
            </summary>
            <param name="other">The signed 64-bit integer to compare.</param>
            <returns>
            A signed integer that indicates the relative value of this instance and <paramref name="other"/>, as shown
            in the following table.
            <list type="table">
                <listheader>
                    <term>Value</term>
                    <description>Condition</description>
                </listheader>
                <item>
                    <term>Less than zero</term>
                    <description>The current instance is less than <paramref name="other"/>.</description>
                </item>
                <item>
                    <term>Zero</term>
                    <description>The current instance equals <paramref name="other"/>.</description>
                </item>
                <item>
                    <term>Greater than zero</term>
                    <description>The current instance is greater than <paramref name="other"/>.</description>
                </item>
            </list>
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.Compare(KellermanSoftware.Renci.SshNet.Common.BigInteger,KellermanSoftware.Renci.SshNet.Common.BigInteger)">
            <summary>
            Compares two <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> values and returns an integer that indicates whether the first value is less than, equal to, or greater than the second value.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            A signed integer that indicates the relative values of left and right, as shown in the following table.
            <list type="table">
                <listheader>
                    <term>Value</term>
                    <description>Condition</description>
                </listheader>
                <item>
                    <term>Less than zero</term>
                    <description><paramref name="left"/> is less than <paramref name="right"/>.</description>
                </item>
                <item>
                    <term>Zero</term>
                    <description><paramref name="left"/> equals <paramref name="right"/>.</description>
                </item>
                <item>
                    <term>Greater than zero</term>
                    <description><paramref name="left"/> is greater than <paramref name="right"/>.</description>
                </item>
            </list>
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.BigInteger.ToByteArray">
            <summary>
            Converts a <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> value to a byte array.
            </summary>
            <returns>
            The value of the current <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> object converted to an array of bytes.
            </returns>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Common.ChannelDataEventArgs">
            <summary>
            Provides data for <see cref="E:KellermanSoftware.Renci.SshNet.Channels.Channel.DataReceived"/> event.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Common.ChannelDataEventArgs.Data">
            <summary>
            Gets channel data.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.ChannelDataEventArgs.#ctor(System.UInt32,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.ChannelDataEventArgs"/> class.
            </summary>
            <param name="channelNumber">Channel number.</param>
            <param name="data">Channel data.</param>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Common.ChannelEventArgs">
            <summary>
            Base class for all channel related events.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Common.ChannelEventArgs.ChannelNumber">
            <summary>
            Gets the channel number.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.ChannelEventArgs.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.ChannelEventArgs"/> class.
            </summary>
            <param name="channelNumber">The channel number.</param>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Common.ChannelExtendedDataEventArgs">
            <summary>
            Provides data for <see cref="E:KellermanSoftware.Renci.SshNet.Channels.Channel.ExtendedDataReceived"/> events.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.ChannelExtendedDataEventArgs.#ctor(System.UInt32,System.Byte[],System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.ChannelExtendedDataEventArgs"/> class.
            </summary>
            <param name="channelNumber">Channel number.</param>
            <param name="data">Channel data.</param>
            <param name="dataTypeCode">Channel data type code.</param>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Common.ChannelExtendedDataEventArgs.DataTypeCode">
            <summary>
            Gets the data type code.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Common.ChannelOpenConfirmedEventArgs">
            <summary>
            Provides data for <see cref="E:KellermanSoftware.Renci.SshNet.Channels.ClientChannel.OpenConfirmed"/> event.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.ChannelOpenConfirmedEventArgs.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.ChannelOpenConfirmedEventArgs"/> class.
            </summary>
            <param name="remoteChannelNumber">The remote channel number.</param>
            <param name="initialWindowSize">The initial window size.</param>
            <param name="maximumPacketSize">The maximum packet size.</param>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Common.ChannelOpenConfirmedEventArgs.InitialWindowSize">
            <summary>
            Gets the initial size of the window.
            </summary>
            <value>
            The initial size of the window.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Common.ChannelOpenConfirmedEventArgs.MaximumPacketSize">
            <summary>
            Gets the maximum size of the packet.
            </summary>
            <value>
            The maximum size of the packet.
            </value>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Common.ChannelOpenFailedEventArgs">
            <summary>
            Provides data for <see cref="E:KellermanSoftware.Renci.SshNet.Channels.ClientChannel.OpenFailed"/> event.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Common.ChannelOpenFailedEventArgs.ReasonCode">
            <summary>
            Gets failure reason code.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Common.ChannelOpenFailedEventArgs.Description">
            <summary>
            Gets failure description.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Common.ChannelOpenFailedEventArgs.Language">
            <summary>
            Gets failure language.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.ChannelOpenFailedEventArgs.#ctor(System.UInt32,System.UInt32,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.ChannelOpenFailedEventArgs"/> class.
            </summary>
            <param name="channelNumber">Channel number.</param>
            <param name="reasonCode">Failure reason code.</param>
            <param name="description">Failure description.</param>
            <param name="language">Failure language.</param>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Common.ChannelRequestEventArgs">
            <summary>
            Provides data for <see cref="E:KellermanSoftware.Renci.SshNet.Channels.Channel.RequestReceived"/> event.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Common.ChannelRequestEventArgs.Info">
            <summary>
            Gets request information.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.ChannelRequestEventArgs.#ctor(KellermanSoftware.Renci.SshNet.Messages.Connection.RequestInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.ChannelRequestEventArgs"/> class.
            </summary>
            <param name="info">Request information.</param>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Common.CountdownEvent">
            <summary>
            Represents a synchronization primitive that is signaled when its count reaches zero.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.CountdownEvent.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:KellermanSoftware.Renci.SshNet.Common.CountdownEvent"/> class with the specified count.
            </summary>
            <param name="initialCount">The number of signals initially required to set the <see cref="T:KellermanSoftware.Renci.SshNet.Common.CountdownEvent"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="initialCount"/> is less than zero.</exception>
            <remarks>
            If <paramref name="initialCount"/> is <c>zero</c>, the event is created in a signaled state.
            </remarks>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Common.CountdownEvent.CurrentCount">
            <summary>
            Gets the number of remaining signals required to set the event.
            </summary>
            <value>
            The number of remaining signals required to set the event.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Common.CountdownEvent.IsSet">
            <summary>
            Indicates whether the <see cref="T:KellermanSoftware.Renci.SshNet.Common.CountdownEvent"/>'s current count has reached zero.
            </summary>
            <value>
            <c>true</c> if the current count is zero; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Common.CountdownEvent.WaitHandle">
            <summary>
            Gets a <see cref="P:KellermanSoftware.Renci.SshNet.Common.CountdownEvent.WaitHandle"/> that is used to wait for the event to be set.
            </summary>
            <value>
            A <see cref="P:KellermanSoftware.Renci.SshNet.Common.CountdownEvent.WaitHandle"/> that is used to wait for the event to be set.
            </value>
            <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.CountdownEvent.Signal">
            <summary>
            Registers a signal with the <see cref="T:KellermanSoftware.Renci.SshNet.Common.CountdownEvent"/>, decrementing the value of <see cref="P:KellermanSoftware.Renci.SshNet.Common.CountdownEvent.CurrentCount"/>.
            </summary>
            <returns>
            <c>true</c> if the signal caused the count to reach zero and the event was set; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The current instance is already set.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.CountdownEvent.AddCount">
            <summary>
            Increments the <see cref="T:KellermanSoftware.Renci.SshNet.Common.CountdownEvent"/>'s current count by one.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The current instance is already set.</exception>
            <exception cref="T:System.InvalidOperationException"><see cref="P:KellermanSoftware.Renci.SshNet.Common.CountdownEvent.CurrentCount"/> is equal to or greather than <see cref="F:System.Int32.MaxValue"/>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.CountdownEvent.Wait(System.TimeSpan)">
            <summary>
            Blocks the current thread until the <see cref="T:KellermanSoftware.Renci.SshNet.Common.CountdownEvent"/> is set, using a <see cref="T:System.TimeSpan"/>
            to measure the timeout.
            </summary>
            <param name="timeout">A <see cref="T:System.TimeSpan"/> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan"/> that represents -1 milliseconds to wait indefinitely.</param>
            <returns>
            <c>true</c> if the <see cref="T:KellermanSoftware.Renci.SshNet.Common.CountdownEvent"/> was set; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.CountdownEvent.Dispose">
            <summary>
            Releases all resources used by the current instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.CountdownEvent"/> class.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.CountdownEvent.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:KellermanSoftware.Renci.SshNet.Common.CountdownEvent"/>, and optionally releases the managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Common.DerData">
            <summary>
            Base class for DER encoded data.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Common.DerData.IsEndOfData">
            <summary>
            Gets a value indicating whether end of data is reached.
            </summary>
            <value>
            	<c>true</c> if end of data is reached; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.DerData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.DerData"/> class.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.DerData.#ctor(System.Byte[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.DerData"/> class.
            </summary>
            <param name="data">DER encoded data.</param>
            <param name="construct">its a construct</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.DerData.Encode">
            <summary>
            Encodes written data as DER byte array.
            </summary>
            <returns>DER Encoded array.</returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.DerData.ReadBigInteger">
            <summary>
            Reads next mpint data type from internal buffer.
            </summary>
            <returns>mpint read.</returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.DerData.ReadInteger">
            <summary>
            Reads next int data type from internal buffer.
            </summary>
            <returns>int read.</returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.DerData.ReadOctetString">
            <summary>
            Reads next octetstring data type from internal buffer.
            </summary>
            <returns>data read.</returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.DerData.ReadBitString">
            <summary>
            Reads next bitstring data type from internal buffer.
            </summary>
            <returns>data read.</returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.DerData.ReadObject">
            <summary>
            Reads next object data type from internal buffer.
            </summary>
            <returns>data read.</returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.DerData.Write(System.Boolean)">
            <summary>
            Writes BOOLEAN data into internal buffer.
            </summary>
            <param name="data">UInt32 data to write.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.DerData.Write(System.UInt32)">
            <summary>
            Writes UInt32 data into internal buffer.
            </summary>
            <param name="data">UInt32 data to write.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.DerData.Write(KellermanSoftware.Renci.SshNet.Common.BigInteger)">
            <summary>
            Writes INTEGER data into internal buffer.
            </summary>
            <param name="data">BigInteger data to write.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.DerData.Write(System.Byte[])">
            <summary>
            Writes OCTETSTRING data into internal buffer.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.DerData.WriteBitstring(System.Byte[])">
            <summary>
            Writes BITSTRING data into internal buffer.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.DerData.Write(KellermanSoftware.Renci.SshNet.Common.ObjectIdentifier)">
            <summary>
            Writes OBJECTIDENTIFIER data into internal buffer.
            </summary>
            <param name="identifier">The identifier.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.DerData.WriteObjectIdentifier(System.Byte[])">
            <summary>
            Writes OBJECTIDENTIFIER data into internal buffer.
            </summary>
            <param name="bytes">The bytes.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.DerData.WriteNull">
            <summary>
            Writes NULL data into internal buffer.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.DerData.Write(KellermanSoftware.Renci.SshNet.Common.DerData)">
            <summary>
            Writes DerData data into internal buffer.
            </summary>
            <param name="data">DerData data to write.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.DerData.ReadLength">
            <summary>
            Gets Data Length
            </summary>
            <returns>length</returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.DerData.WriteBytes(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Write Byte data into internal buffer.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.DerData.ReadByte">
            <summary>
            Reads Byte data into internal buffer.
            </summary>
            <returns>data read</returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.DerData.ReadBytes(System.Int32)">
            <summary>
            Reads lengths Bytes data into internal buffer.
            </summary>
            <returns>data read</returns>
             <param name="length">amount of data to read.</param>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Common.ExceptionEventArgs">
            <summary>
            Provides data for the ErrorOccured events.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Common.ExceptionEventArgs.Exception">
            <summary>
            Gets the System.Exception that represents the error that occurred.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.ExceptionEventArgs.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.ExceptionEventArgs"/> class.
            </summary>
            <param name="exception">An System.Exception that represents the error that occurred.</param>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Common.Extensions">
            <summary>
            Collection of different extension method
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.Extensions.IsNullOrWhiteSpace(System.String)">
            <summary>
            Determines whether the specified value is null or white space.
            </summary>
            <param name="value">The value.</param>
            <returns>
            <c>true</c> if <paramref name="value"/> is null or white space; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.Extensions.ToBigInteger2(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> structure using the SSH BigNum2 Format
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.Extensions.Reverse``1(``0[])">
            <summary>
            Reverses the sequence of the elements in the entire one-dimensional <see cref="T:System.Array"/>.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> to reverse.</param>
            <returns>
            The <see cref="T:System.Array"/> with its elements reversed.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.Extensions.DebugPrint(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Prints out 
            </summary>
            <param name="bytes">The bytes.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.Extensions.CreateInstance``1(System.Type)">
            <summary>
            Creates an instance of the specified type using that type's default constructor.
            </summary>
            <typeparam name="T">The type to create.</typeparam>
            <param name="type">Type of the instance to create.</param>
            <returns>A reference to the newly created object.</returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.Extensions.Take(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns a specified number of contiguous bytes from a given offset.
            </summary>
            <param name="value">The array to return a number of bytes from.</param>
            <param name="offset">The zero-based offset in <paramref name="value"/> at which to begin taking bytes.</param>
            <param name="count">The number of bytes to take from <paramref name="value"/>.</param>
            <returns>
            A <see cref="T:System.Byte"/> array that contains the specified number of bytes at the specified offset
            of the input array.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is <c>null</c>.</exception>
            <remarks>
            When <paramref name="offset"/> is zero and <paramref name="count"/> equals the length of <paramref name="value"/>,
            then <paramref name="value"/> is returned.
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.Extensions.Take(System.Byte[],System.Int32)">
            <summary>
            Returns a specified number of contiguous bytes from the start of the specified byte array.
            </summary>
            <param name="value">The array to return a number of bytes from.</param>
            <param name="count">The number of bytes to take from <paramref name="value"/>.</param>
            <returns>
            A <see cref="T:System.Byte"/> array that contains the specified number of bytes at the start of the input array.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is <c>null</c>.</exception>
            <remarks>
            When <paramref name="count"/> equals the length of <paramref name="value"/>, then <paramref name="value"/>
            is returned.
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.Extensions.TrimLeadingZeros(System.Byte[])">
            <summary>
            Trims the leading zero from a byte array.
            </summary>
            <param name="value">The value.</param>
            <returns>
            <paramref name="value"/> without leading zeros.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.Extensions.Pad(System.Byte[],System.Int32)">
            <summary>
            Pads with leading zeros if needed.
            </summary>
            <param name="data">The data.</param>
            <param name="length">The length to pad to.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.Extensions.Dispose(System.Net.Sockets.Socket)">
            <summary>
            Disposes the specified socket.
            </summary>
            <param name="socket">The socket.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.Extensions.Dispose(System.Threading.WaitHandle)">
            <summary>
            Disposes the specified handle.
            </summary>
            <param name="handle">The handle.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.Extensions.Dispose(System.Security.Cryptography.HashAlgorithm)">
            <summary>
            Disposes the specified algorithm.
            </summary>
            <param name="algorithm">The algorithm.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.Extensions.Clear(System.Text.StringBuilder)">
            <summary>
            Clears the contents of the string builder.
            </summary>
            <param name="value">The <see cref="T:System.Text.StringBuilder"/> to clear.</param>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Common.HostKeyEventArgs">
            <summary>
            Provides data for the HostKeyReceived event.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Common.HostKeyEventArgs.CanTrust">
            <summary>
            Gets or sets a value indicating whether host key can be trusted.
            </summary>
            <value>
              <c>true</c> if host key can be trusted; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Common.HostKeyEventArgs.HostKey">
            <summary>
            Gets the host key.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Common.HostKeyEventArgs.HostKeyName">
            <summary>
            Gets the host key name.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Common.HostKeyEventArgs.FingerPrint">
            <summary>
            Gets the finger print.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Common.HostKeyEventArgs.KeyLength">
            <summary>
            Gets the length of the key in bits.
            </summary>
            <value>
            The length of the key in bits.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.HostKeyEventArgs.#ctor(KellermanSoftware.Renci.SshNet.Security.KeyHostAlgorithm)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.HostKeyEventArgs"/> class.
            </summary>
            <param name="host">The host.</param>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Common.NetConfServerException">
            <summary>
            The exception that is thrown when there is something wrong with the server capabilities.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.NetConfServerException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.NetConfServerException"/> class.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.NetConfServerException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.NetConfServerException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.NetConfServerException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.NetConfServerException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.NetConfServerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.SshAuthenticationException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is <c>null</c>.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is <c>null</c> or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Common.ObjectIdentifier">
            <summary>
            Describes object identifier for DER encoding
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Common.ObjectIdentifier.Identifiers">
            <summary>
            Gets the object identifier.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.ObjectIdentifier.#ctor(System.UInt64[])">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.ObjectIdentifier"/> class.
            </summary>
            <param name="identifiers">The identifiers.</param>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Common.Pack">
            <summary>
            Provides convenience methods for conversion to and from both Big Endian and Little Endian.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.Pack.LittleEndianToUInt16(System.Byte[])">
            <summary>
            Converts little endian bytes into number.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>Converted <see cref="T:System.UInt16" />.</returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.Pack.LittleEndianToUInt32(System.Byte[],System.Int32)">
            <summary>
            Converts little endian bytes into number.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The buffer offset.</param>
            <returns>Converted <see cref="T:System.UInt32" />.</returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.Pack.LittleEndianToUInt32(System.Byte[])">
            <summary>
            Converts little endian bytes into number.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>Converted <see cref="T:System.UInt32" />.</returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.Pack.LittleEndianToUInt64(System.Byte[])">
            <summary>
            Converts little endian bytes into number.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>Converted <see cref="T:System.UInt64" />.</returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.Pack.UInt16ToLittleEndian(System.UInt16)">
            <summary>
            Populates buffer with little endian number representation.
            </summary>
            <param name="value">The number to convert.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.Pack.UInt16ToLittleEndian(System.UInt16,System.Byte[])">
            <summary>
            Populates buffer with little endian number representation.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.Pack.UInt32ToLittleEndian(System.UInt32)">
            <summary>
            Populates buffer with little endian number representation.
            </summary>
            <param name="value">The number to convert.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.Pack.UInt32ToLittleEndian(System.UInt32,System.Byte[])">
            <summary>
            Populates buffer with little endian number representation.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.Pack.UInt32ToLittleEndian(System.UInt32,System.Byte[],System.Int32)">
            <summary>
            Populates buffer with little endian number representation.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The buffer offset.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.Pack.UInt64ToLittleEndian(System.UInt64)">
            <summary>
            Populates buffer with little endian number representation.
            </summary>
            <param name="value">The number to convert.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.Pack.UInt64ToLittleEndian(System.UInt64,System.Byte[])">
            <summary>
            Populates buffer with little endian number representation.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.Pack.UInt64ToBigEndian(System.UInt64)">
            <summary>
            Returns the specified 64-bit unsigned integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 8.</returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.Pack.BigEndianToUInt16(System.Byte[])">
            <summary>
            Converts big endian bytes into number.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>Converted <see cref="T:System.UInt16" />.</returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.Pack.BigEndianToUInt32(System.Byte[],System.Int32)">
            <summary>
            Converts big endian bytes into number.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The buffer offset.</param>
            <returns>Converted <see cref="T:System.UInt32" />.</returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.Pack.BigEndianToUInt32(System.Byte[])">
            <summary>
            Converts big endian bytes into number.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>Converted <see cref="T:System.UInt32" />.</returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.Pack.BigEndianToUInt64(System.Byte[])">
            <summary>
            Converts big endian bytes into number.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>Converted <see cref="T:System.UInt64" />.</returns>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Common.PipeStream">
            <summary>
            PipeStream is a thread-safe read/write data stream for use between two threads in a 
            single-producer/single-consumer type problem.
            </summary>
            <version>2006/10/13 1.0</version>
            <remarks>Update on 2008/10/9 1.1 - uses Monitor instead of Manual Reset events for more elegant synchronicity.</remarks>
            <license>
            Copyright (c) 2006 James Kolpack (james dot kolpack at google mail)
            
            Permission is hereby granted, free of charge, to any person obtaining a copy of this software and 
            associated documentation files (the "Software"), to deal in the Software without restriction, 
            including without limitation the rights to use, copy, modify, merge, publish, distribute, 
            sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is 
            furnished to do so, subject to the following conditions:
            
            The above copyright notice and this permission notice shall be included in all copies or 
            substantial portions of the Software.
            
            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
            INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
            PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE 
            LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT 
            OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR 
            OTHER DEALINGS IN THE SOFTWARE.
            </license>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Common.PipeStream._buffer">
            <summary>
            Queue of bytes provides the datastructure for transmitting from an
            input stream to an output stream.
            </summary>
            <remarks>Possible more effecient ways to accomplish this.</remarks>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Common.PipeStream._isFlushed">
            <summary>
            Indicates that the input stream has been flushed and that
            all remaining data should be written to the output stream.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Common.PipeStream._maxBufferLength">
            <summary>
            Maximum number of bytes to store in the buffer.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Common.PipeStream._canBlockLastRead">
            <summary>
            Setting this to true will cause Read() to block if it appears
            that it will run out of data.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Common.PipeStream._isDisposed">
            <summary>
            Indicates whether the current <see cref="T:KellermanSoftware.Renci.SshNet.Common.PipeStream"/> is disposed.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Common.PipeStream.MaxBufferLength">
            <summary>
            Gets or sets the maximum number of bytes to store in the buffer.
            </summary>
            <value>The length of the max buffer.</value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Common.PipeStream.BlockLastReadBuffer">
            <summary>
            Gets or sets a value indicating whether to block last read method before the buffer is empty.
            When true, Read() will block until it can fill the passed in buffer and count.
            When false, Read() will not block, returning all the available buffer data.
            </summary>
            <remarks>
            Setting to true will remove the possibility of ending a stream reader prematurely.
            </remarks>
            <value>
            	<c>true</c> if block last read method before the buffer is empty; otherwise, <c>false</c>.
            </value>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.PipeStream.Flush">
            <summary>
            When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
            <remarks>
            Once flushed, any subsequent read operations no longer block until requested bytes are available. Any write operation reactivates blocking
            reads.
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.PipeStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            When overridden in a derived class, sets the position within the current stream.
            </summary>
            <returns>
            The new position within the current stream.
            </returns>
            <param name="offset">A byte offset relative to the origin parameter.</param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used to obtain the new position.</param>
            <exception cref="T:System.NotSupportedException">The stream does not support seeking, such as if the stream is constructed from a pipe or console output.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.PipeStream.SetLength(System.Int64)">
            <summary>
            When overridden in a derived class, sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.NotSupportedException">The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.PipeStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero if the stream is closed or end of the stream has been reached.
            </returns>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <exception cref="T:System.ArgumentException">The sum of offset and count is larger than the buffer length.</exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
            <exception cref="T:System.NotSupportedException">The stream does not support reading.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <c>null</c>.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset or count is negative.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.PipeStream.ReadAvailable(System.Int32)">
            <summary>
            Returns true if there are
            </summary>
            <param name="count">The count.</param>
            <returns><c>True</c> if data available; otherwise<c>false</c>.</returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.PipeStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
            <exception cref="T:System.NotSupportedException">The stream does not support writing.</exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The sum of offset and count is greater than the buffer length.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset or count is negative.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.PipeStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the Stream and optionally releases the managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
            <remarks>
            Disposing a <see cref="T:KellermanSoftware.Renci.SshNet.Common.PipeStream"/> will interrupt blocking read and write operations.
            </remarks>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Common.PipeStream.CanRead">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports reading.
            </summary>
            <returns>
            true if the stream supports reading; otherwise, false.
            </returns>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Common.PipeStream.CanSeek">
             <summary>
             When overridden in a derived class, gets a value indicating whether the current stream supports seeking.
             </summary>
             <returns>
             <c>true</c> if the stream supports seeking; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Common.PipeStream.CanWrite">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports writing.
            </summary>
            <returns>
            <c>true</c> if the stream supports writing; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Common.PipeStream.Length">
            <summary>
            When overridden in a derived class, gets the length in bytes of the stream.
            </summary>
            <returns>
            A long value representing the length of the stream in bytes.
            </returns>
            <exception cref="T:System.NotSupportedException">A class derived from Stream does not support seeking.</exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Common.PipeStream.Position">
            <summary>
            When overridden in a derived class, gets or sets the position within the current stream.
            </summary>
            <returns>
            The current position within the stream.
            </returns>
            <exception cref="T:System.NotSupportedException">The stream does not support seeking.</exception>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Common.PortForwardEventArgs">
            <summary>
            Provides data for <see cref="E:KellermanSoftware.Renci.SshNet.ForwardedPort.RequestReceived"/> event.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Common.PortForwardEventArgs.OriginatorHost">
            <summary>
            Gets request originator host.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Common.PortForwardEventArgs.OriginatorPort">
            <summary>
            Gets request originator port.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.PortForwardEventArgs.#ctor(System.String,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.PortForwardEventArgs"/> class.
            </summary>
            <param name="host">The host.</param>
            <param name="port">The port.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="host"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="port" /> is not within <see cref="F:System.Net.IPEndPoint.MinPort" /> and <see cref="F:System.Net.IPEndPoint.MaxPort" />.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.PosixPath.GetFileName(System.String)">
            <summary>
            Gets the file name part of a given POSIX path.
            </summary>
            <param name="path">The POSIX path to get the file name for.</param>
            <returns>
            The file name part of <paramref name="path"/>.
            </returns>
            <exception cref="T:System.NullReferenceException"><paramref name="path"/> is <c>null</c>.</exception>
            <remarks>
            <para>
            If <paramref name="path"/> contains no forward slash, then <paramref name="path"/>
            is returned.
            </para>
            <para>
            If path has a trailing slash, <see cref="M:KellermanSoftware.Renci.SshNet.Common.PosixPath.GetFileName(System.String)"/> return a zero-length string.
            </para>
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.PosixPath.GetDirectoryName(System.String)">
            <summary>
            Gets the directory name part of a given POSIX path.
            </summary>
            <param name="path">The POSIX path to get the directory name for.</param>
            <returns>
            The directory part of the specified <paramref name="path"/>, or <c>.</c> if <paramref name="path"/>
            does not contain any directory information.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <c>null</c>.</exception>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Common.ProxyException">
            <summary>
            The exception that is thrown when a proxy connection cannot be established.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.ProxyException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.ScpException"/> class.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.ProxyException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.ScpException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.ProxyException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.ScpException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.ProxyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.ProxyException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is <c>null</c>.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is <c>null</c> or <see cref="P:System.Exception.HResult"/> is zero (0).</exception>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Common.ScpDownloadEventArgs">
            <summary>
            Provides data for the Downloading event.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Common.ScpDownloadEventArgs.Filename">
            <summary>
            Gets the downloaded filename.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Common.ScpDownloadEventArgs.Size">
            <summary>
            Gets the downloaded file size.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Common.ScpDownloadEventArgs.Downloaded">
            <summary>
            Gets number of downloaded bytes so far.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.ScpDownloadEventArgs.#ctor(System.String,System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.ScpDownloadEventArgs"/> class.
            </summary>
            <param name="filename">The downloaded filename.</param>
            <param name="size">The downloaded file size.</param>
            <param name="downloaded">The number of downloaded bytes so far.</param>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Common.ScpException">
            <summary>
            The exception that is thrown when SCP error occurred.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.ScpException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.ScpException"/> class.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.ScpException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.ScpException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.ScpException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.ScpException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.ScpException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.ScpException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is <c>null</c>.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is <c>null</c> or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Common.ScpUploadEventArgs">
            <summary>
            Provides data for the Uploading event.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Common.ScpUploadEventArgs.Filename">
            <summary>
            Gets the uploaded filename.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Common.ScpUploadEventArgs.Size">
            <summary>
            Gets the uploaded file size.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Common.ScpUploadEventArgs.Uploaded">
            <summary>
            Gets number of uploaded bytes so far.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.ScpUploadEventArgs.#ctor(System.String,System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.ScpUploadEventArgs"/> class.
            </summary>
            <param name="filename">The uploaded filename.</param>
            <param name="size">The uploaded file size.</param>
            <param name="uploaded">The number of uploaded bytes so far.</param>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Common.SemaphoreLight">
            <summary>
            Light implementation of SemaphoreSlim.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SemaphoreLight.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.SemaphoreLight"/> class, specifying 
            the initial number of requests that can be granted concurrently.
            </summary>
            <param name="initialCount">The initial number of requests for the semaphore that can be granted concurrently.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="initialCount"/> is a negative number.</exception>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Common.SemaphoreLight.CurrentCount">
            <summary>
            Gets the current count of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.SemaphoreLight"/>.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Common.SemaphoreLight.AvailableWaitHandle">
            <summary>
            Returns a <see cref="T:System.Threading.WaitHandle"/> that can be used to wait on the semaphore.
            </summary>
            <value>
            A <see cref="T:System.Threading.WaitHandle"/> that can be used to wait on the semaphore.
            </value>
            <remarks>
            A successful wait on the <see cref="P:KellermanSoftware.Renci.SshNet.Common.SemaphoreLight.AvailableWaitHandle"/> does not imply a successful
            wait on the <see cref="T:KellermanSoftware.Renci.SshNet.Common.SemaphoreLight"/> itself. It should be followed by a true wait
            on the semaphore.
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SemaphoreLight.Release">
            <summary>
            Exits the <see cref="T:KellermanSoftware.Renci.SshNet.Common.SemaphoreLight"/> once.
            </summary>
            <returns>The previous count of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.SemaphoreLight"/>.</returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SemaphoreLight.Release(System.Int32)">
            <summary>
            Exits the <see cref="T:KellermanSoftware.Renci.SshNet.Common.SemaphoreLight"/> a specified number of times.
            </summary>
            <param name="releaseCount">The number of times to exit the semaphore.</param>
            <returns>
            The previous count of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.SemaphoreLight"/>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SemaphoreLight.Wait">
            <summary>
            Blocks the current thread until it can enter the <see cref="T:KellermanSoftware.Renci.SshNet.Common.SemaphoreLight"/>.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SemaphoreLight.Wait(System.Int32)">
            <summary>
            Blocks the current thread until it can enter the <see cref="T:KellermanSoftware.Renci.SshNet.Common.SemaphoreLight"/>, using a 32-bit signed
            integer that specifies the timeout.
            </summary>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or Infinite(-1) to wait indefinitely.</param>
            <returns>
            <c>true</c> if the current thread successfully entered the <see cref="T:KellermanSoftware.Renci.SshNet.Common.SemaphoreLight"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SemaphoreLight.Wait(System.TimeSpan)">
            <summary>
            Blocks the current thread until it can enter the <see cref="T:KellermanSoftware.Renci.SshNet.Common.SemaphoreLight"/>, using a <see cref="T:System.TimeSpan"/>
            to specify the timeout.
            </summary>
            <param name="timeout">A <see cref="T:System.TimeSpan"/> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan"/> that represents -1 milliseconds to wait indefinitely.</param>
            <returns>
            <c>true</c> if the current thread successfully entered the <see cref="T:KellermanSoftware.Renci.SshNet.Common.SemaphoreLight"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SemaphoreLight.Finalize">
            <summary>
            Finalizes the current <see cref="T:KellermanSoftware.Renci.SshNet.Common.SemaphoreLight"/>.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SemaphoreLight.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SemaphoreLight.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Common.SftpPathNotFoundException">
            <summary>
            The exception that is thrown when file or directory is not found.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SftpPathNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPathNotFoundException"/> class.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SftpPathNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPathNotFoundException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SftpPathNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPathNotFoundException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SftpPathNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPathNotFoundException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is <c>null</c>.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is <c>null</c> or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Common.SftpPermissionDeniedException">
            <summary>
            The exception that is thrown when operation permission is denied.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SftpPermissionDeniedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPermissionDeniedException"/> class.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SftpPermissionDeniedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPermissionDeniedException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SftpPermissionDeniedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPermissionDeniedException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SftpPermissionDeniedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPermissionDeniedException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is <c>null</c>.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is <c>null</c> or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Common.ShellDataEventArgs">
            <summary>
            Provides data for Shell DataReceived event
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Common.ShellDataEventArgs.Data">
            <summary>
            Gets the data.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Common.ShellDataEventArgs.Line">
            <summary>
            Gets the line data.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.ShellDataEventArgs.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.ShellDataEventArgs"/> class.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.ShellDataEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.ShellDataEventArgs"/> class.
            </summary>
            <param name="line">The line.</param>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Common.SshAuthenticationException">
            <summary>
            The exception that is thrown when authentication failed.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SshAuthenticationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.SshAuthenticationException"/> class.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SshAuthenticationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.SshAuthenticationException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SshAuthenticationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.SshAuthenticationException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SshAuthenticationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.SshAuthenticationException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is <c>null</c>.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is <c>null</c> or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">
            <summary>
            The exception that is thrown when connection was terminated.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Common.SshConnectionException.DisconnectReason">
            <summary>
            Gets the disconnect reason if provided by the server or client. Otherwise None.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SshConnectionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException"/> class.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SshConnectionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SshConnectionException.#ctor(System.String,KellermanSoftware.Renci.SshNet.Messages.Transport.DisconnectReason)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="disconnectReasonCode">The disconnect reason code.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SshConnectionException.#ctor(System.String,KellermanSoftware.Renci.SshNet.Messages.Transport.DisconnectReason,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="disconnectReasonCode">The disconnect reason code.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SshConnectionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is <c>null</c>.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is <c>null</c> or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Common.SshData">
            <summary>
            Base ssh data serialization type
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Common.SshData.DataStream">
            <summary>
            Gets the underlying <see cref="T:KellermanSoftware.Renci.SshNet.Common.SshDataStream"/> that is used for reading and writing SSH data.
            </summary>
            <value>
            The underlying <see cref="T:KellermanSoftware.Renci.SshNet.Common.SshDataStream"/> that is used for reading and writing SSH data.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Common.SshData.IsEndOfData">
            <summary>
            Gets a value indicating whether all data from the buffer has been read.
            </summary>
            <value>
            <c>true</c> if this instance is end of data; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Common.SshData.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SshData.GetBytes">
            <summary>
            Gets data bytes array.
            </summary>
            <returns>
            A <see cref="T:System.Byte"/> array representation of data structure.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SshData.WriteBytes(KellermanSoftware.Renci.SshNet.Common.SshDataStream)">
            <summary>
            Writes the current message to the specified <see cref="T:KellermanSoftware.Renci.SshNet.Common.SshDataStream"/>.
            </summary>
            <param name="stream">The <see cref="T:KellermanSoftware.Renci.SshNet.Common.SshDataStream"/> to write the message to.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SshData.Load(System.Byte[])">
            <summary>
            Loads data from specified bytes.
            </summary>
            <param name="data">Bytes array.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="data"/> is <c>null</c>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SshData.Load(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Loads data from the specified buffer.
            </summary>
            <param name="data">Bytes array.</param>
            <param name="offset">The zero-based offset in <paramref name="data"/> at which to begin reading SSH data.</param>
            <param name="count">The number of bytes to load.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="data"/> is <c>null</c>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SshData.LoadData">
            <summary>
            Called when type specific data need to be loaded.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SshData.SaveData">
            <summary>
            Called when type specific data need to be saved.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SshData.ReadBytes">
            <summary>
            Reads all data left in internal buffer at current position.
            </summary>
            <returns>An array of bytes containing the remaining data in the internal buffer.</returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SshData.ReadBytes(System.Int32)">
            <summary>
            Reads next specified number of bytes data type from internal buffer.
            </summary>
            <param name="length">Number of bytes to read.</param>
            <returns>An array of bytes that was read from the internal buffer.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="length"/> is greater than the internal buffer size.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SshData.ReadByte">
            <summary>
            Reads next byte data type from internal buffer.
            </summary>
            <returns>Byte read.</returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SshData.ReadBoolean">
            <summary>
            Reads next boolean data type from internal buffer.
            </summary>
            <returns>Boolean read.</returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SshData.ReadUInt16">
            <summary>
            Reads next uint16 data type from internal buffer.
            </summary>
            <returns>uint16 read</returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SshData.ReadUInt32">
            <summary>
            Reads next uint32 data type from internal buffer.
            </summary>
            <returns>uint32 read</returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SshData.ReadUInt64">
            <summary>
            Reads next uint64 data type from internal buffer.
            </summary>
            <returns>uint64 read</returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SshData.ReadString(System.Text.Encoding)">
            <summary>
            Reads next string data type from internal buffer using the specific encoding.
            </summary>
            <returns>
            The <see cref="T:System.String"/> read.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SshData.ReadBinary">
            <summary>
            Reads next data type as byte array from internal buffer.
            </summary>
            <returns>
            The bytes read.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SshData.ReadNamesList">
            <summary>
            Reads next name-list data type from internal buffer.
            </summary>
            <returns>
            String array or read data.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SshData.ReadExtensionPair">
            <summary>
            Reads next extension-pair data type from internal buffer.
            </summary>
            <returns>Extensions pair dictionary.</returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SshData.Write(System.Byte[])">
            <summary>
            Writes bytes array data into internal buffer.
            </summary>
            <param name="data">Byte array data to write.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="data"/> is <c>null</c>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SshData.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current SSH data stream and advances the current position
            within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method write <paramref name="count"/> bytes from buffer to the current SSH data stream.</param>
            <param name="offset">The zero-based offset in <paramref name="buffer"/> at which to begin writing bytes to the SSH data stream.</param>
            <param name="count">The number of bytes to be written to the current SSH data stream.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> is greater than the buffer length.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> or <paramref name="count"/> is negative.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SshData.Write(System.Byte)">
            <summary>
            Writes <see cref="T:System.Byte"/> data into internal buffer.
            </summary>
            <param name="data"><see cref="T:System.Byte"/> data to write.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SshData.Write(System.Boolean)">
            <summary>
            Writes <see cref="T:System.Boolean"/> into internal buffer.
            </summary>
            <param name="data"><see cref="T:System.Boolean" /> data to write.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SshData.Write(System.UInt32)">
            <summary>
            Writes <see cref="T:System.UInt32"/> data into internal buffer.
            </summary>
            <param name="data"><see cref="T:System.UInt32"/> data to write.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SshData.Write(System.UInt64)">
            <summary>
            Writes <see cref="T:System.UInt64" /> data into internal buffer.
            </summary>
            <param name="data"><see cref="T:System.UInt64"/> data to write.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SshData.Write(System.String)">
            <summary>
            Writes <see cref="T:System.String"/> data into internal buffer using default encoding.
            </summary>
            <param name="data"><see cref="T:System.String"/> data to write.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="data"/> is <c>null</c>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SshData.Write(System.String,System.Text.Encoding)">
            <summary>
            Writes <see cref="T:System.String"/> data into internal buffer using the specified encoding.
            </summary>
            <param name="data"><see cref="T:System.String"/> data to write.</param>
            <param name="encoding">The character encoding to use.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="data"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="encoding"/> is <c>null</c>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SshData.WriteBinaryString(System.Byte[])">
            <summary>
            Writes data into internal buffer.
            </summary>
            <param name="buffer">The data to write.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <c>null</c>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SshData.WriteBinary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes data into internal buffer.
            </summary>
            <param name="buffer">An array of bytes. This method write <paramref name="count"/> bytes from buffer to the current SSH data stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin writing bytes to the SSH data stream.</param>
            <param name="count">The number of bytes to be written to the current SSH data stream.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> is greater than the buffer length.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> or <paramref name="count"/> is negative.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SshData.Write(KellermanSoftware.Renci.SshNet.Common.BigInteger)">
            <summary>
            Writes mpint data into internal buffer.
            </summary>
            <param name="data">mpint data to write.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SshData.Write(System.String[])">
            <summary>
            Writes name-list data into internal buffer.
            </summary>
            <param name="data">name-list data to write.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SshData.Write(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Writes extension-pair data into internal buffer.
            </summary>
            <param name="data">extension-pair data to write.</param>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Common.SshDataStream">
            <summary>
            Specialized <see cref="T:System.IO.MemoryStream"/> for reading and writing data SSH data.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SshDataStream.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.SshDataStream"/> class with an expandable capacity initialized
            as specified.
            </summary>
            <param name="capacity">The initial size of the internal array in bytes.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SshDataStream.#ctor(System.Byte[])">
            <summary>
            Initializes a new non-resizable instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.SshDataStream"/> class based on the specified byte array.
            </summary>
            <param name="buffer">The array of unsigned bytes from which to create the current stream.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <c>null</c>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SshDataStream.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Initializes a new non-resizable instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.SshDataStream"/> class based on the specified byte array.
            </summary>
            <param name="buffer">The array of unsigned bytes from which to create the current stream.</param>
            <param name="offset">The zero-based offset in <paramref name="buffer"/> at which to begin reading SSH data.</param>
            <param name="count">The number of bytes to load.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <c>null</c>.</exception>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Common.SshDataStream.IsEndOfData">
            <summary>
            Gets a value indicating whether all data from the SSH data stream has been read.
            </summary>
            <value>
            <c>true</c> if this instance is end of data; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SshDataStream.Write(System.UInt32)">
            <summary>
            Writes an <see cref="T:System.UInt32"/> to the SSH data stream.
            </summary>
            <param name="value"><see cref="T:System.UInt32"/> data to write.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SshDataStream.Write(System.UInt64)">
            <summary>
            Writes an <see cref="T:System.UInt64"/> to the SSH data stream.
            </summary>
            <param name="value"><see cref="T:System.UInt64"/> data to write.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SshDataStream.Write(KellermanSoftware.Renci.SshNet.Common.BigInteger)">
            <summary>
            Writes a <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> into the SSH data stream.
            </summary>
            <param name="data">The <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger" /> to write.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SshDataStream.Write(System.Byte[])">
            <summary>
            Writes bytes array data into the SSH data stream.
            </summary>
            <param name="data">Byte array data to write.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="data"/> is <c>null</c>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SshDataStream.ReadBinary">
            <summary>
            Reads a byte array from the SSH data stream.
            </summary>
            <returns>
            The byte array read from the SSH data stream.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SshDataStream.WriteBinary(System.Byte[])">
            <summary>
            Writes a buffer preceded by its length into the SSH data stream.
            </summary>
            <param name="buffer">The data to write.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <c>null</c>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SshDataStream.WriteBinary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a buffer preceded by its length into the SSH data stream.
            </summary>
            <param name="buffer">An array of bytes. This method write <paramref name="count"/> bytes from buffer to the current SSH data stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin writing bytes to the SSH data stream.</param>
            <param name="count">The number of bytes to be written to the current SSH data stream.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> is greater than the buffer length.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> or <paramref name="count"/> is negative.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SshDataStream.Write(System.String,System.Text.Encoding)">
            <summary>
            Writes string data to the SSH data stream using the specified encoding.
            </summary>
            <param name="s">The string data to write.</param>
            <param name="encoding">The character encoding to use.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="s"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="encoding"/> is <c>null</c>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SshDataStream.ReadBigInt">
            <summary>
            Reads a <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> from the SSH datastream.
            </summary>
            <returns>
            The <see cref="T:KellermanSoftware.Renci.SshNet.Common.BigInteger"/> read from the SSH data stream.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SshDataStream.ReadUInt32">
            <summary>
            Reads the next <see cref="T:System.UInt32"/> data type from the SSH data stream.
            </summary>
            <returns>
            The <see cref="T:System.UInt32"/> read from the SSH data stream.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SshDataStream.ReadUInt64">
            <summary>
            Reads the next <see cref="T:System.UInt64"/> data type from the SSH data stream.
            </summary>
            <returns>
            The <see cref="T:System.UInt64"/> read from the SSH data stream.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SshDataStream.ReadString(System.Text.Encoding)">
            <summary>
            Reads the next <see cref="T:System.String"/> data type from the SSH data stream.
            </summary>
            <returns>
            The <see cref="T:System.String"/> read from the SSH data stream.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SshDataStream.ReadBytes(System.Int32)">
            <summary>
            Reads next specified number of bytes data type from internal buffer.
            </summary>
            <param name="length">Number of bytes to read.</param>
            <returns>
            An array of bytes that was read from the internal buffer.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="length"/> is greater than the internal buffer size.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SshDataStream.ToArray">
            <summary>
            Writes the stream contents to a byte array, regardless of the <see cref="P:System.IO.MemoryStream.Position"/>.
            </summary>
            <returns>
            This method returns the contents of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.SshDataStream"/> as a byte array.
            </returns>
            <remarks>
            If the current instance was constructed on a provided byte array, a copy of the section of the array
            to which this instance has access is returned.
            </remarks>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Common.SshException">
            <summary>
            The exception that is thrown when SSH exception occurs.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SshException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.SshException"/> class.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SshException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.SshException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SshException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.SshException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SshException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.SshException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is <c>null</c>.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is <c>null</c> or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Common.SshOperationTimeoutException">
            <summary>
            The exception that is thrown when operation is timed out.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SshOperationTimeoutException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.SshOperationTimeoutException"/> class.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SshOperationTimeoutException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.SshOperationTimeoutException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SshOperationTimeoutException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.SshOperationTimeoutException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SshOperationTimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.SshOperationTimeoutException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is <c>null</c>.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is <c>null</c> or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Common.SshPassPhraseNullOrEmptyException">
            <summary>
            The exception that is thrown when pass phrase for key file is empty or null
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SshPassPhraseNullOrEmptyException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.SshPassPhraseNullOrEmptyException"/> class.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SshPassPhraseNullOrEmptyException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.SshPassPhraseNullOrEmptyException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SshPassPhraseNullOrEmptyException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.SshPassPhraseNullOrEmptyException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Common.SshPassPhraseNullOrEmptyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Common.SshPassPhraseNullOrEmptyException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is <c>null</c>.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is <c>null</c> or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Common.TerminalModes">
            <summary>
            Specifies the initial assignments of the opcode values that are used in the 'encoded terminal modes' valu
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Common.TerminalModes.TTY_OP_END">
            <summary>
            Indicates end of options.
            </summary> 
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Common.TerminalModes.VINTR">
            <summary>
            Interrupt character; 255 if none.  Similarly for the other characters.  Not all of these characters are supported on all systems.
            </summary> 
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Common.TerminalModes.VQUIT">
            <summary>
            The quit character (sends SIGQUIT signal on POSIX systems).
            </summary> 
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Common.TerminalModes.VERASE">
            <summary>
            Erase the character to left of the cursor. 
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Common.TerminalModes.VKILL">
            <summary>
            Kill the current input line.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Common.TerminalModes.VEOF">
            <summary>
            End-of-file character (sends EOF from the terminal).
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Common.TerminalModes.VEOL">
            <summary>
            End-of-line character in addition to carriage return and/or linefeed.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Common.TerminalModes.VEOL2">
            <summary>
            Additional end-of-line character.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Common.TerminalModes.VSTART">
            <summary>
            Continues paused output (normally control-Q).
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Common.TerminalModes.VSTOP">
            <summary>
            Pauses output (normally control-S).
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Common.TerminalModes.VSUSP">
            <summary>
            Suspends the current program.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Common.TerminalModes.VDSUSP">
            <summary>
            Another suspend character.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Common.TerminalModes.VREPRINT">
            <summary>
            Reprints the current input line.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Common.TerminalModes.VWERASE">
            <summary>
            Erases a word left of cursor.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Common.TerminalModes.VLNEXT">
            <summary>
            Enter the next character typed literally, even if it is a special character
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Common.TerminalModes.VFLUSH">
            <summary>
            Character to flush output.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Common.TerminalModes.VSWTCH">
            <summary>
            Switch to a different shell layer.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Common.TerminalModes.VSTATUS">
            <summary>
            Prints system status line (load, command, pid, etc).
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Common.TerminalModes.VDISCARD">
            <summary>
            Toggles the flushing of terminal output.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Common.TerminalModes.IGNPAR">
            <summary>
            The ignore parity flag.  The parameter SHOULD be 0 if this flag is FALSE, and 1 if it is TRUE.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Common.TerminalModes.PARMRK">
            <summary>
            Mark parity and framing errors.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Common.TerminalModes.INPCK">
            <summary>
            Enable checking of parity errors.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Common.TerminalModes.ISTRIP">
            <summary>
            Strip 8th bit off characters.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Common.TerminalModes.INLCR">
            <summary>
            Map NL into CR on input.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Common.TerminalModes.IGNCR">
            <summary>
            Ignore CR on input.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Common.TerminalModes.ICRNL">
            <summary>
            Map CR to NL on input.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Common.TerminalModes.IUCLC">
            <summary>
            Translate uppercase characters to lowercase.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Common.TerminalModes.IXON">
            <summary>
            Enable output flow control.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Common.TerminalModes.IXANY">
            <summary>
            Any char will restart after stop.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Common.TerminalModes.IXOFF">
            <summary>
            Enable input flow control.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Common.TerminalModes.IMAXBEL">
            <summary>
            Ring bell on input queue full.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Common.TerminalModes.IUTF8">
            <summary>
            Terminal input and output is assumed to be encoded in UTF-8.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Common.TerminalModes.ISIG">
            <summary>
            Enable signals INTR, QUIT, [D]SUSP.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Common.TerminalModes.ICANON">
            <summary>
            Canonicalize input lines.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Common.TerminalModes.XCASE">
            <summary>
            Enable input and output of uppercase characters by preceding their lowercase equivalents with "\".
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Common.TerminalModes.ECHO">
            <summary>
            Enable echoing.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Common.TerminalModes.ECHOE">
            <summary>
            Visually erase chars.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Common.TerminalModes.ECHOK">
            <summary>
            Kill character discards current line.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Common.TerminalModes.ECHONL">
            <summary>
            Echo NL even if ECHO is off.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Common.TerminalModes.NOFLSH">
            <summary>
            Don't flush after interrupt.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Common.TerminalModes.TOSTOP">
            <summary>
            Stop background jobs from output.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Common.TerminalModes.IEXTEN">
            <summary>
            Enable extensions.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Common.TerminalModes.ECHOCTL">
            <summary>
            Echo control characters as ^(Char).
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Common.TerminalModes.ECHOKE">
            <summary>
            Visual erase for line kill.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Common.TerminalModes.PENDIN">
            <summary>
            Retype pending input.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Common.TerminalModes.OPOST">
            <summary>
            Enable output processing.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Common.TerminalModes.OLCUC">
            <summary>
            Convert lowercase to uppercase.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Common.TerminalModes.ONLCR">
            <summary>
            Map NL to CR-NL.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Common.TerminalModes.OCRNL">
            <summary>
            Translate carriage return to newline (output).
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Common.TerminalModes.ONOCR">
            <summary>
            Translate newline to carriage return-newline (output).
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Common.TerminalModes.ONLRET">
            <summary>
            Newline performs a carriage return (output).
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Common.TerminalModes.CS7">
            <summary>
            7 bit mode.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Common.TerminalModes.CS8">
            <summary>
            8 bit mode.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Common.TerminalModes.PARENB">
            <summary>
            Parity enable.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Common.TerminalModes.PARODD">
            <summary>
            Odd parity, else even.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Common.TerminalModes.TTY_OP_ISPEED">
            <summary>
            Specifies the input baud rate in bits per second.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Common.TerminalModes.TTY_OP_OSPEED">
            <summary>
            Specifies the output baud rate in bits per second.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Compression.CompressionMode">
            <summary>
            Specifies compression modes
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Compression.CompressionMode.Compress">
            <summary>
            Specifies that content should be compressed.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Compression.CompressionMode.Decompress">
            <summary>
            Specifies that content should be decompressed.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Compression.Compressor">
            <summary>
            Represents base class for compression algorithm implementation
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Compression.Compressor.IsActive">
            <summary>
            Gets or sets a value indicating whether compression is active.
            </summary>
            <value>
              <c>true</c> if compression is active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Compression.Compressor.Session">
            <summary>
            Gets the session.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Compression.Compressor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Compression.Compressor"/> class.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Compression.Compressor.Init(KellermanSoftware.Renci.SshNet.Session)">
            <summary>
            Initializes the algorithm
            </summary>
            <param name="session">The session.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Compression.Compressor.Compress(System.Byte[])">
            <summary>
            Compresses the specified data.
            </summary>
            <param name="data">Data to compress.</param>
            <returns>Compressed data</returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Compression.Compressor.Compress(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Compresses the specified data.
            </summary>
            <param name="data">Data to compress.</param>
            <param name="offset">The zero-based byte offset in <paramref name="data"/> at which to begin reading the data to compress. </param>
            <param name="length">The number of bytes to be compressed. </param>
            <returns>
            The compressed data.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Compression.Compressor.Decompress(System.Byte[])">
            <summary>
            Decompresses the specified data.
            </summary>
            <param name="data">Compressed data.</param>
            <returns>
            The decompressed data.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Compression.Compressor.Decompress(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decompresses the specified data.
            </summary>
            <param name="data">Compressed data.</param>
            <param name="offset">The zero-based byte offset in <paramref name="data"/> at which to begin reading the data to decompress. </param>
            <param name="length">The number of bytes to be read from the compressed data. </param>
            <returns>
            The decompressed data.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Compression.Compressor.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Compression.Compressor.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Compression.Compressor.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the <see cref="T:KellermanSoftware.Renci.SshNet.Compression.Compressor"/> is reclaimed
            by garbage collection.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Compression.Zlib">
            <summary>
            Represents "zlib" compression implementation
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Compression.Zlib.Name">
            <summary>
            Gets algorithm name.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Compression.Zlib.Init(KellermanSoftware.Renci.SshNet.Session)">
            <summary>
            Initializes the algorithm
            </summary>
            <param name="session">The session.</param>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Compression.ZlibOpenSsh">
            <summary>
            Represents "zlib@openssh.org" compression implementation
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Compression.ZlibOpenSsh.Name">
            <summary>
            Gets algorithm name.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Compression.ZlibOpenSsh.Init(KellermanSoftware.Renci.SshNet.Session)">
            <summary>
            Initializes the algorithm
            </summary>
            <param name="session">The session.</param>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Compression.ZlibStream">
            <summary>
            Implements Zlib compression algorithm.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Compression.ZlibStream.#ctor(System.IO.Stream,KellermanSoftware.Renci.SshNet.Compression.CompressionMode)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Compression.ZlibStream" /> class.
            </summary>
            <param name="stream">The stream.</param>
            <param name="mode">The mode.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Compression.ZlibStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="count">The count.</param>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.ConnectionInfo">
            <summary>
            Represents remote connection information class.
            </summary>
            <remarks>
            This class is NOT thread-safe. Do not use the same <see cref="T:KellermanSoftware.Renci.SshNet.ConnectionInfo"/> with multiple
            client instances.
            </remarks>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.ConnectionInfo.DefaultTimeout">
            <summary>
            The default connection timeout.
            </summary>
            <value>
            30 seconds.
            </value>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.ConnectionInfo.DefaultChannelCloseTimeout">
            <summary>
            The default channel close timeout.
            </summary>
            <value>
            1 second.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.ConnectionInfo.KeyExchangeAlgorithms">
            <summary>
            Gets supported key exchange algorithms for this connection.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.ConnectionInfo.Encryptions">
            <summary>
            Gets supported encryptions for this connection.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.ConnectionInfo.HmacAlgorithms">
            <summary>
            Gets supported hash algorithms for this connection.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.ConnectionInfo.HostKeyAlgorithms">
            <summary>
            Gets supported host key algorithms for this connection.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.ConnectionInfo.AuthenticationMethods">
            <summary>
            Gets supported authentication methods for this connection.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.ConnectionInfo.CompressionAlgorithms">
            <summary>
            Gets supported compression algorithms for this connection.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.ConnectionInfo.ChannelRequests">
            <summary>
            Gets the supported channel requests for this connection.
            </summary>
            <value>
            The supported channel requests for this connection.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.ConnectionInfo.IsAuthenticated">
            <summary>
            Gets a value indicating whether connection is authenticated.
            </summary>
            <value>
            <c>true</c> if connection is authenticated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.ConnectionInfo.Host">
            <summary>
            Gets connection host.
            </summary>
            <value>
            The connection host.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.ConnectionInfo.Port">
            <summary>
            Gets connection port.
            </summary>
            <value>
            The connection port. The default value is 22.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.ConnectionInfo.Username">
            <summary>
            Gets connection username.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.ConnectionInfo.ProxyType">
            <summary>
            Gets proxy type.
            </summary>
            <value>
            The type of the proxy.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.ConnectionInfo.ProxyHost">
            <summary>
            Gets proxy connection host.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.ConnectionInfo.ProxyPort">
            <summary>
            Gets proxy connection port.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.ConnectionInfo.ProxyUsername">
            <summary>
            Gets proxy connection username.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.ConnectionInfo.ProxyPassword">
            <summary>
            Gets proxy connection password.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.ConnectionInfo.Timeout">
            <summary>
            Gets or sets connection timeout.
            </summary>
            <value>
            The connection timeout. The default value is 30 seconds.
            </value>
            <example>
              <code source="..\..\src\Renci.SshNet.Tests\Classes\SshClientTest.cs" region="Example SshClient Connect Timeout" language="C#" title="Specify connection timeout" />
            </example>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.ConnectionInfo.ChannelCloseTimeout">
            <summary>
            Gets or sets the timeout to use when waiting for a server to acknowledge closing a channel.
            </summary>
            <value>
            The channel close timeout. The default value is 1 second.
            </value>
            <remarks>
            If a server does not send a <c>SSH_MSG_CHANNEL_CLOSE</c> message before the specified timeout
            elapses, the channel will be closed immediately.
            </remarks>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.ConnectionInfo.Encoding">
            <summary>
            Gets or sets the character encoding.
            </summary>
            <value>
            The character encoding. The default is <see cref="P:System.Text.Encoding.UTF8"/>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.ConnectionInfo.RetryAttempts">
            <summary>
            Gets or sets number of retry attempts when session channel creation failed.
            </summary>
            <value>
            The number of retry attempts when session channel creation failed. The default
            value is 10.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.ConnectionInfo.MaxSessions">
            <summary>
            Gets or sets maximum number of session channels to be open simultaneously.
            </summary>
            <value>
            The maximum number of session channels to be open simultaneously. The default
            value is 10.
            </value>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.ConnectionInfo.AuthenticationBanner">
            <summary>
            Occurs when authentication banner is sent by the server.
            </summary>
            <example>
                <code source="..\..\src\Renci.SshNet.Tests\Classes\PasswordConnectionInfoTest.cs" region="Example PasswordConnectionInfo AuthenticationBanner" language="C#" title="Display authentication banner" />
            </example>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.ConnectionInfo.CurrentKeyExchangeAlgorithm">
            <summary>
            Gets the current key exchange algorithm.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.ConnectionInfo.CurrentServerEncryption">
            <summary>
            Gets the current server encryption.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.ConnectionInfo.CurrentClientEncryption">
            <summary>
            Gets the current client encryption.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.ConnectionInfo.CurrentServerHmacAlgorithm">
            <summary>
            Gets the current server hash algorithm.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.ConnectionInfo.CurrentClientHmacAlgorithm">
            <summary>
            Gets the current client hash algorithm.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.ConnectionInfo.CurrentHostKeyAlgorithm">
            <summary>
            Gets the current host key algorithm.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.ConnectionInfo.CurrentServerCompressionAlgorithm">
            <summary>
            Gets the current server compression algorithm.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.ConnectionInfo.ServerVersion">
            <summary>
            Gets the server version.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.ConnectionInfo.ClientVersion">
            <summary>
            Get the client version.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.ConnectionInfo.CurrentClientCompressionAlgorithm">
            <summary>
            Gets the current client compression algorithm.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ConnectionInfo.#ctor(System.String,System.String,KellermanSoftware.Renci.SshNet.AuthenticationMethod[])">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.ConnectionInfo"/> class.
            </summary>
            <param name="host">The host.</param>
            <param name="username">The username.</param>
            <param name="authenticationMethods">The authentication methods.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="host"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="host"/> is a zero-length string.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="username" /> is <c>null</c>, a zero-length string or contains only whitespace characters.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="authenticationMethods"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">No <paramref name="authenticationMethods"/> specified.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ConnectionInfo.#ctor(System.String,System.Int32,System.String,KellermanSoftware.Renci.SshNet.AuthenticationMethod[])">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.ConnectionInfo"/> class.
            </summary>
            <param name="host">The host.</param>
            <param name="port">The port.</param>
            <param name="username">The username.</param>
            <param name="authenticationMethods">The authentication methods.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="host"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="username" /> is <c>null</c>, a zero-length string or contains only whitespace characters.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="port" /> is not within <see cref="F:System.Net.IPEndPoint.MinPort" /> and <see cref="F:System.Net.IPEndPoint.MaxPort" />.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="authenticationMethods"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">No <paramref name="authenticationMethods"/> specified.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ConnectionInfo.#ctor(System.String,System.Int32,System.String,KellermanSoftware.Renci.SshNet.ProxyTypes,System.String,System.Int32,System.String,System.String,KellermanSoftware.Renci.SshNet.AuthenticationMethod[])">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.ConnectionInfo" /> class.
            </summary>
            <param name="host">Connection host.</param>
            <param name="port">Connection port.</param>
            <param name="username">Connection username.</param>
            <param name="proxyType">Type of the proxy.</param>
            <param name="proxyHost">The proxy host.</param>
            <param name="proxyPort">The proxy port.</param>
            <param name="proxyUsername">The proxy username.</param>
            <param name="proxyPassword">The proxy password.</param>
            <param name="authenticationMethods">The authentication methods.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="host"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="username" /> is <c>null</c>, a zero-length string or contains only whitespace characters.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="port" /> is not within <see cref="F:System.Net.IPEndPoint.MinPort" /> and <see cref="F:System.Net.IPEndPoint.MaxPort" />.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="proxyType"/> is not <see cref="F:KellermanSoftware.Renci.SshNet.ProxyTypes.None"/> and <paramref name="proxyHost" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="proxyType"/> is not <see cref="F:KellermanSoftware.Renci.SshNet.ProxyTypes.None"/> and <paramref name="proxyPort" /> is not within <see cref="F:System.Net.IPEndPoint.MinPort" /> and <see cref="F:System.Net.IPEndPoint.MaxPort" />.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="authenticationMethods"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">No <paramref name="authenticationMethods"/> specified.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ConnectionInfo.Authenticate(KellermanSoftware.Renci.SshNet.ISession,KellermanSoftware.Renci.SshNet.IServiceFactory)">
            <summary>
            Authenticates the specified session.
            </summary>
            <param name="session">The session to be authenticated.</param>
            <param name="serviceFactory">The factory to use for creating new services.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="session"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="serviceFactory"/> is <c>null</c>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshAuthenticationException">No suitable authentication method found to complete authentication, or permission denied.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ConnectionInfo.KellermanSoftware#Renci#SshNet#IConnectionInfoInternal#UserAuthenticationBannerReceived(System.Object,KellermanSoftware.Renci.SshNet.MessageEventArgs{KellermanSoftware.Renci.SshNet.Messages.Authentication.BannerMessage})">
            <summary>
            Signals that an authentication banner message was received from the server.
            </summary>
            <param name="sender">The session in which the banner message was received.</param>
            <param name="e">The banner message.{</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Connection.ConnectorBase.SocketConnect(System.String,System.Int32,System.TimeSpan)">
            <summary>
            Establishes a socket connection to the specified host and port.
            </summary>
            <param name="host">The host name of the server to connect to.</param>
            <param name="port">The port to connect to.</param>
            <param name="timeout">The maximum time to wait for the connection to be established.</param>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshOperationTimeoutException">The connection failed to establish within the configured <see cref="P:KellermanSoftware.Renci.SshNet.ConnectionInfo.Timeout"/>.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurred trying to establish the connection.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Connection.ConnectorBase.SocketRead(System.Net.Sockets.Socket,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Performs a blocking read on the socket until <paramref name="length"/> bytes are received.
            </summary>
            <param name="socket">The <see cref="T:System.Net.Sockets.Socket"/> to read from.</param>
            <param name="buffer">An array of type <see cref="T:System.Byte"/> that is the storage location for the received data.</param>
            <param name="offset">The position in <paramref name="buffer"/> parameter to store the received data.</param>
            <param name="length">The number of bytes to read.</param>
            <returns>
            The number of bytes read.
            </returns>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">The socket is closed.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">The read failed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Connection.ConnectorBase.SocketRead(System.Net.Sockets.Socket,System.Byte[],System.Int32,System.Int32,System.TimeSpan)">
            <summary>
            Performs a blocking read on the socket until <paramref name="length"/> bytes are received.
            </summary>
            <param name="socket">The <see cref="T:System.Net.Sockets.Socket"/> to read from.</param>
            <param name="buffer">An array of type <see cref="T:System.Byte"/> that is the storage location for the received data.</param>
            <param name="offset">The position in <paramref name="buffer"/> parameter to store the received data.</param>
            <param name="length">The number of bytes to read.</param>
            <param name="readTimeout">The maximum time to wait until <paramref name="length"/> bytes have been received.</param>
            <returns>
            The number of bytes read.
            </returns>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">The socket is closed.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshOperationTimeoutException">The read has timed-out.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">The read failed.</exception>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Connection.HttpConnector">
            <summary>
            Establishes a tunnel via an HTTP proxy server.
            </summary>
            <remarks>
            <list type="table">
              <listheader>
                <term>Specification</term>
                <description>URL</description>
              </listheader>
              <item>
                <term>HTTP CONNECT method</term>
                <description>https://tools.ietf.org/html/rfc7231#section-4.3.6</description>
              </item>
              <item>
                <term>HTTP Authentication: Basic and Digest Access Authentication</term>
                <description>https://tools.ietf.org/html/rfc2617</description>
              </item>
            </list>
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Connection.HttpConnector.SocketReadLine(System.Net.Sockets.Socket,System.TimeSpan)">
            <summary>
            Performs a blocking read on the socket until a line is read.
            </summary>
            <param name="socket">The <see cref="T:System.Net.Sockets.Socket"/> to read from.</param>
            <param name="readTimeout">A <see cref="T:System.TimeSpan"/> that represents the time to wait until a line is read.</param>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshOperationTimeoutException">The read has timed-out.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurred when trying to access the socket.</exception>
            <returns>
            The line read from the socket, or <c>null</c> when the remote server has shutdown and all data has been received.
            </returns>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Connection.IProtocolVersionExchange">
            <summary>
            Handles the SSH protocol version exchange.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Connection.IProtocolVersionExchange.Start(System.String,System.Net.Sockets.Socket,System.TimeSpan)">
            <summary>
            Performs the SSH protocol version exchange.
            </summary>
            <param name="clientVersion">The identification string of the SSH client.</param>
            <param name="socket">A <see cref="T:System.Net.Sockets.Socket"/> connected to the server.</param>
            <param name="timeout">The maximum time to wait for the server to respond.</param>
            <returns>
            The SSH identification of the server.
            </returns>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Connection.ProtocolVersionExchange">
            <summary>
            Handles the SSH protocol version exchange.
            </summary>
            <remarks>
            https://tools.ietf.org/html/rfc4253#section-4.2
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Connection.ProtocolVersionExchange.Start(System.String,System.Net.Sockets.Socket,System.TimeSpan)">
            <summary>
            Performs the SSH protocol version exchange.
            </summary>
            <param name="clientVersion">The identification string of the SSH client.</param>
            <param name="socket">A <see cref="T:System.Net.Sockets.Socket"/> connected to the server.</param>
            <param name="timeout">The maximum time to wait for the server to respond.</param>
            <returns>
            The SSH identification of the server.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Connection.ProtocolVersionExchange.SocketReadLine(System.Net.Sockets.Socket,System.TimeSpan,System.Collections.Generic.List{System.Byte})">
            <summary>
            Performs a blocking read on the socket until a line is read.
            </summary>
            <param name="socket">The <see cref="T:System.Net.Sockets.Socket"/> to read from.</param>
            <param name="timeout">A <see cref="T:System.TimeSpan"/> that represents the time to wait until a line is read.</param>
            <param name="buffer">A <see cref="T:System.Collections.Generic.List`1"/> to which read bytes will be added.</param>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshOperationTimeoutException">The read has timed-out.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurred when trying to access the socket.</exception>
            <returns>
            The line read from the socket, or <c>null</c> when the remote server has shutdown and all data has been received.
            </returns>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Connection.Socks4Connector">
            <summary>
            Establishes a tunnel via a SOCKS4 proxy server.
            </summary>
            <remarks>
            https://www.openssh.com/txt/socks4.protocol
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Connection.Socks4Connector.HandleProxyConnect(KellermanSoftware.Renci.SshNet.IConnectionInfo,System.Net.Sockets.Socket)">
            <summary>
            Establishes a connection to the server via a SOCKS5 proxy.
            </summary>
            <param name="connectionInfo">The connection information.</param>
            <param name="socket">The <see cref="T:System.Net.Sockets.Socket"/>.</param>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Connection.Socks5Connector">
            <summary>
            Establishes a tunnel via a SOCKS5 proxy server.
            </summary>
            <remarks>
            https://en.wikipedia.org/wiki/SOCKS#SOCKS5
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Connection.Socks5Connector.HandleProxyConnect(KellermanSoftware.Renci.SshNet.IConnectionInfo,System.Net.Sockets.Socket)">
            <summary>
            Establishes a connection to the server via a SOCKS5 proxy.
            </summary>
            <param name="connectionInfo">The connection information.</param>
            <param name="socket">The <see cref="T:System.Net.Sockets.Socket"/>.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Connection.Socks5Connector.CreateSocks5UserNameAndPasswordAuthenticationRequest(System.String,System.String)">
            <summary>
            https://tools.ietf.org/html/rfc1929
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Connection.SshIdentification">
            <summary>
            Represents an SSH identification.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Connection.SshIdentification.#ctor(System.String,System.String)">
            <summary>
            Initializes a new <see cref="T:KellermanSoftware.Renci.SshNet.Connection.SshIdentification"/> instance with the specified protocol version
            and software version.
            </summary>
            <param name="protocolVersion">The SSH protocol version.</param>
            <param name="softwareVersion">The software version of the implementation</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="protocolVersion"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="softwareVersion"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Connection.SshIdentification.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new <see cref="T:KellermanSoftware.Renci.SshNet.Connection.SshIdentification"/> instance with the specified protocol version,
            software version and comments.
            </summary>
            <param name="protocolVersion">The SSH protocol version.</param>
            <param name="softwareVersion">The software version of the implementation</param>
            <param name="comments">The comments.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="protocolVersion"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="softwareVersion"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Connection.SshIdentification.SoftwareVersion">
            <summary>
            Gets or sets the software version of the implementation.
            </summary>
            <value>
            The software version of the implementation.
            </value>
            <remarks>
            This is primarily used to trigger compatibility extensions and to indicate
            the capabilities of an implementation.
            </remarks>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Connection.SshIdentification.ProtocolVersion">
            <summary>
            Gets or sets the SSH protocol version.
            </summary>
            <value>
            The SSH protocol version.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Connection.SshIdentification.Comments">
            <summary>
            Gets or sets the comments.
            </summary>
            <value>
            The comments, or <see langword="null"/> if there are no comments.
            </value>
            <remarks>
            <see cref="P:KellermanSoftware.Renci.SshNet.Connection.SshIdentification.Comments"/> should contain additional information that might be useful
            in solving user problems.
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Connection.SshIdentification.ToString">
            <summary>
            Returns the SSH identification string.
            </summary>
            <returns>
            The SSH identification string.
            </returns>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.ExpectAction">
            <summary>
            Specifies behavior for expected expression
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.ExpectAction.Expect">
            <summary>
            Gets the expected regular expression.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.ExpectAction.Action">
            <summary>
            Gets the action to perform when expected expression is found.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ExpectAction.#ctor(System.Text.RegularExpressions.Regex,System.Action{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.ExpectAction"/> class.
            </summary>
            <param name="expect">The expect regular expression.</param>
            <param name="action">The action to perform.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="expect"/> or <paramref name="action"/> is <c>null</c>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ExpectAction.#ctor(System.String,System.Action{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.ExpectAction"/> class.
            </summary>
            <param name="expect">The expect expression.</param>
            <param name="action">The action to perform.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="expect"/> or <paramref name="action"/> is <c>null</c>.</exception>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.ExpectAsyncResult">
            <summary>
            Provides additional information for asynchronous command execution
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ExpectAsyncResult.#ctor(System.AsyncCallback,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.ExpectAsyncResult" /> class.
            </summary>
            <param name="asyncCallback">The async callback.</param>
            <param name="state">The state.</param>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.ForwardedPort">
            <summary>
            Base class for port forwarding functionality.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.ForwardedPort.Session">
            <summary>
            Gets or sets the session.
            </summary>
            <value>
            The session.
            </value>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.ForwardedPort.Closing">
            <summary>
            The <see cref="E:KellermanSoftware.Renci.SshNet.ForwardedPort.Closing"/> event occurs as the forwarded port is being stopped.
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.ForwardedPort.KellermanSoftware#Renci#SshNet#IForwardedPort#Closing">
            <summary>
            The <see cref="E:KellermanSoftware.Renci.SshNet.IForwardedPort.Closing"/> event occurs as the forwarded port is being stopped.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.ForwardedPort.IsStarted">
            <summary>
            Gets a value indicating whether port forwarding is started.
            </summary>
            <value>
            <c>true</c> if port forwarding is started; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.ForwardedPort.Exception">
            <summary>
            Occurs when an exception is thrown.
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.ForwardedPort.RequestReceived">
            <summary>
            Occurs when a port forwarding request is received.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ForwardedPort.Start">
            <summary>
            Starts port forwarding.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ForwardedPort.Stop">
            <summary>
            Stops port forwarding.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ForwardedPort.StartPort">
            <summary>
            Starts port forwarding.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ForwardedPort.StopPort(System.TimeSpan)">
            <summary>
            Stops port forwarding, and waits for the specified timeout until all pending
            requests are processed.
            </summary>
            <param name="timeout">The maximum amount of time to wait for pending requests to finish processing.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ForwardedPort.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ForwardedPort.CheckDisposed">
            <summary>
            Ensures the current instance is not disposed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The current instance is disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ForwardedPort.RaiseExceptionEvent(System.Exception)">
            <summary>
            Raises <see cref="E:KellermanSoftware.Renci.SshNet.ForwardedPort.Exception"/> event.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ForwardedPort.RaiseRequestReceived(System.String,System.UInt32)">
            <summary>
            Raises <see cref="E:KellermanSoftware.Renci.SshNet.ForwardedPort.RequestReceived"/> event.
            </summary>
            <param name="host">Request originator host.</param>
            <param name="port">Request originator port.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ForwardedPort.RaiseClosing">
            <summary>
            Raises the <see cref="E:KellermanSoftware.Renci.SshNet.IForwardedPort.Closing"/> event.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ForwardedPort.Session_ErrorOccured(System.Object,KellermanSoftware.Renci.SshNet.Common.ExceptionEventArgs)">
            <summary>
            Handles session ErrorOccured event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:KellermanSoftware.Renci.SshNet.Common.ExceptionEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.ForwardedPortDynamic">
            <summary>
            Provides functionality for forwarding connections from the client to destination servers via the SSH server,
            also known as dynamic port forwarding.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.ForwardedPortDynamic.BoundHost">
            <summary>
            Gets the bound host.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.ForwardedPortDynamic.BoundPort">
            <summary>
            Gets the bound port.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.ForwardedPortDynamic.IsStarted">
            <summary>
            Gets a value indicating whether port forwarding is started.
            </summary>
            <value>
            <c>true</c> if port forwarding is started; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ForwardedPortDynamic.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.ForwardedPortDynamic"/> class.
            </summary>
            <param name="port">The port.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ForwardedPortDynamic.#ctor(System.String,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.ForwardedPortDynamic"/> class.
            </summary>
            <param name="host">The host.</param>
            <param name="port">The port.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ForwardedPortDynamic.StartPort">
            <summary>
            Starts local port forwarding.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ForwardedPortDynamic.StopPort(System.TimeSpan)">
            <summary>
            Stops local port forwarding, and waits for the specified timeout until all pending
            requests are processed.
            </summary>
            <param name="timeout">The maximum amount of time to wait for pending requests to finish processing.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ForwardedPortDynamic.CheckDisposed">
            <summary>
            Ensures the current instance is not disposed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The current instance is disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ForwardedPortDynamic.StopListener">
            <summary>
            Interrupts the listener, and unsubscribes from <see cref="T:KellermanSoftware.Renci.SshNet.Session"/> events.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ForwardedPortDynamic.InternalStop(System.TimeSpan)">
            <summary>
            Waits for pending channels to close.
            </summary>
            <param name="timeout">The maximum time to wait for the pending channels to close.</param>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.ForwardedPortDynamic._isDisposed">
            <summary>
            Holds a value indicating whether the current instance is disposed.
            </summary>
            <value>
            <c>true</c> if the current instance is disposed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ForwardedPortDynamic.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ForwardedPortDynamic.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ForwardedPortDynamic.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:KellermanSoftware.Renci.SshNet.ForwardedPortDynamic"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ForwardedPortDynamic.InitializePendingChannelCountdown">
            <summary>
            Initializes the <see cref="T:KellermanSoftware.Renci.SshNet.Common.CountdownEvent"/>.
            </summary>
            <remarks>
            <para>
            When the port is started for the first time, a <see cref="T:KellermanSoftware.Renci.SshNet.Common.CountdownEvent"/> is created with an initial count
            of <c>1</c>.
            </para>
            <para>
            On subsequent (re)starts, we'll dispose the current <see cref="T:KellermanSoftware.Renci.SshNet.Common.CountdownEvent"/> and create a new one with
            initial count of <c>1</c>.
            </para>
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ForwardedPortDynamic.ReadString(System.Net.Sockets.Socket,System.TimeSpan)">
            <summary>
            Reads a null terminated string from a socket.
            </summary>
            <param name="socket">The <see cref="T:System.Net.Sockets.Socket"/> to read from.</param>
            <param name="timeout">The timeout to apply to individual reads.</param>
            <returns>
            The <see cref="T:System.String"/> read, or <c>null</c> when the socket was closed.
            </returns>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.ForwardedPortLocal">
            <summary>
            Provides functionality for local port forwarding
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.ForwardedPortLocal.BoundHost">
            <summary>
            Gets the bound host.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.ForwardedPortLocal.BoundPort">
            <summary>
            Gets the bound port.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.ForwardedPortLocal.Host">
            <summary>
            Gets the forwarded host.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.ForwardedPortLocal.Port">
            <summary>
            Gets the forwarded port.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.ForwardedPortLocal.IsStarted">
            <summary>
            Gets a value indicating whether port forwarding is started.
            </summary>
            <value>
            <c>true</c> if port forwarding is started; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ForwardedPortLocal.#ctor(System.UInt32,System.String,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.ForwardedPortLocal"/> class.
            </summary>
            <param name="boundPort">The bound port.</param>
            <param name="host">The host.</param>
            <param name="port">The port.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="boundPort" /> is greater than <see cref="F:System.Net.IPEndPoint.MaxPort" />.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="host"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="port" /> is greater than <see cref="F:System.Net.IPEndPoint.MaxPort" />.</exception>
            <example>
                <code source="..\..\src\Renci.SshNet.Tests\Classes\ForwardedPortLocalTest.cs" region="Example SshClient AddForwardedPort Start Stop ForwardedPortLocal" language="C#" title="Local port forwarding" />
            </example>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ForwardedPortLocal.#ctor(System.String,System.String,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.ForwardedPortLocal"/> class.
            </summary>
            <param name="boundHost">The bound host.</param>
            <param name="host">The host.</param>
            <param name="port">The port.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="boundHost"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="host"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="port" /> is greater than <see cref="F:System.Net.IPEndPoint.MaxPort" />.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ForwardedPortLocal.#ctor(System.String,System.UInt32,System.String,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.ForwardedPortLocal"/> class.
            </summary>
            <param name="boundHost">The bound host.</param>
            <param name="boundPort">The bound port.</param>
            <param name="host">The host.</param>
            <param name="port">The port.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="boundHost"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="host"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="boundPort" /> is greater than <see cref="F:System.Net.IPEndPoint.MaxPort" />.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="port" /> is greater than <see cref="F:System.Net.IPEndPoint.MaxPort" />.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ForwardedPortLocal.StartPort">
            <summary>
            Starts local port forwarding.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ForwardedPortLocal.StopPort(System.TimeSpan)">
            <summary>
            Stops local port forwarding, and waits for the specified timeout until all pending
            requests are processed.
            </summary>
            <param name="timeout">The maximum amount of time to wait for pending requests to finish processing.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ForwardedPortLocal.CheckDisposed">
            <summary>
            Ensures the current instance is not disposed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The current instance is disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ForwardedPortLocal.StopListener">
            <summary>
            Interrupts the listener, and unsubscribes from <see cref="T:KellermanSoftware.Renci.SshNet.Session"/> events.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ForwardedPortLocal.InternalStop(System.TimeSpan)">
            <summary>
            Waits for pending channels to close.
            </summary>
            <param name="timeout">The maximum time to wait for the pending channels to close.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ForwardedPortLocal.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ForwardedPortLocal.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ForwardedPortLocal.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:KellermanSoftware.Renci.SshNet.ForwardedPortLocal"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ForwardedPortLocal.InitializePendingChannelCountdown">
            <summary>
            Initializes the <see cref="T:KellermanSoftware.Renci.SshNet.Common.CountdownEvent"/>.
            </summary>
            <remarks>
            <para>
            When the port is started for the first time, a <see cref="T:KellermanSoftware.Renci.SshNet.Common.CountdownEvent"/> is created with an initial count
            of <c>1</c>.
            </para>
            <para>
            On subsequent (re)starts, we'll dispose the current <see cref="T:KellermanSoftware.Renci.SshNet.Common.CountdownEvent"/> and create a new one with
            initial count of <c>1</c>.
            </para>
            </remarks>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.ForwardedPortRemote">
            <summary>
            Provides functionality for remote port forwarding
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.ForwardedPortRemote.IsStarted">
            <summary>
            Gets a value indicating whether port forwarding is started.
            </summary>
            <value>
            <c>true</c> if port forwarding is started; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.ForwardedPortRemote.BoundHostAddress">
            <summary>
            Gets the bound host.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.ForwardedPortRemote.BoundHost">
            <summary>
            Gets the bound host.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.ForwardedPortRemote.BoundPort">
            <summary>
            Gets the bound port.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.ForwardedPortRemote.HostAddress">
            <summary>
            Gets the forwarded host.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.ForwardedPortRemote.Host">
            <summary>
            Gets the forwarded host.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.ForwardedPortRemote.Port">
            <summary>
            Gets the forwarded port.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ForwardedPortRemote.#ctor(System.Net.IPAddress,System.UInt32,System.Net.IPAddress,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.ForwardedPortRemote" /> class.
            </summary>
            <param name="boundHostAddress">The bound host address.</param>
            <param name="boundPort">The bound port.</param>
            <param name="hostAddress">The host address.</param>
            <param name="port">The port.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="boundHostAddress"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="hostAddress"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="boundPort" /> is greater than <see cref="F:System.Net.IPEndPoint.MaxPort" />.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="port" /> is greater than <see cref="F:System.Net.IPEndPoint.MaxPort" />.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ForwardedPortRemote.#ctor(System.UInt32,System.String,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.ForwardedPortRemote"/> class.
            </summary>
            <param name="boundPort">The bound port.</param>
            <param name="host">The host.</param>
            <param name="port">The port.</param>
            <example>
                <code source="..\..\src\Renci.SshNet.Tests\Classes\ForwardedPortRemoteTest.cs" region="Example SshClient AddForwardedPort Start Stop ForwardedPortRemote" language="C#" title="Remote port forwarding" />
            </example>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ForwardedPortRemote.#ctor(System.String,System.UInt32,System.String,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.ForwardedPortRemote"/> class.
            </summary>
            <param name="boundHost">The bound host.</param>
            <param name="boundPort">The bound port.</param>
            <param name="host">The host.</param>
            <param name="port">The port.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ForwardedPortRemote.StartPort">
            <summary>
            Starts remote port forwarding.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ForwardedPortRemote.StopPort(System.TimeSpan)">
            <summary>
            Stops remote port forwarding.
            </summary>
            <param name="timeout">The maximum amount of time to wait for the port to stop.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ForwardedPortRemote.CheckDisposed">
            <summary>
            Ensures the current instance is not disposed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The current instance is disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ForwardedPortRemote.InitializePendingChannelCountdown">
            <summary>
            Initializes the <see cref="T:KellermanSoftware.Renci.SshNet.Common.CountdownEvent"/>.
            </summary>
            <remarks>
            <para>
            When the port is started for the first time, a <see cref="T:KellermanSoftware.Renci.SshNet.Common.CountdownEvent"/> is created with an initial count
            of <c>1</c>.
            </para>
            <para>
            On subsequent (re)starts, we'll dispose the current <see cref="T:KellermanSoftware.Renci.SshNet.Common.CountdownEvent"/> and create a new one with
            initial count of <c>1</c>.
            </para>
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ForwardedPortRemote.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ForwardedPortRemote.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ForwardedPortRemote.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:KellermanSoftware.Renci.SshNet.ForwardedPortRemote"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ForwardedPortStatus.ToStopping(KellermanSoftware.Renci.SshNet.ForwardedPortStatus@)">
            <summary>
            Returns a value indicating whether <paramref name="status"/> has been changed to <see cref="F:KellermanSoftware.Renci.SshNet.ForwardedPortStatus.Stopping"/>.
            </summary>
            <param name="status">The status to transition from.</param>
            <returns>
            <c>true</c> if <paramref name="status"/> has been changed to <see cref="F:KellermanSoftware.Renci.SshNet.ForwardedPortStatus.Stopping"/>; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.InvalidOperationException">Cannot transition <paramref name="status"/> to <see cref="F:KellermanSoftware.Renci.SshNet.ForwardedPortStatus.Stopping"/>.</exception>
            <remarks>
            While a transition from <see cref="F:KellermanSoftware.Renci.SshNet.ForwardedPortStatus.Stopped"/> to <see cref="F:KellermanSoftware.Renci.SshNet.ForwardedPortStatus.Stopping"/> is not possible, this method will
            return <c>false</c> for any such attempts.  This is related to concurrency.
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ForwardedPortStatus.ToStarting(KellermanSoftware.Renci.SshNet.ForwardedPortStatus@)">
            <summary>
            Returns a value indicating whether <paramref name="status"/> has been changed to <see cref="F:KellermanSoftware.Renci.SshNet.ForwardedPortStatus.Starting"/>.
            </summary>
            <param name="status">The status to transition from.</param>
            <returns>
            <c>true</c> if <paramref name="status"/> has been changed to <see cref="F:KellermanSoftware.Renci.SshNet.ForwardedPortStatus.Starting"/>; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.InvalidOperationException">Cannot transition <paramref name="status"/> to <see cref="F:KellermanSoftware.Renci.SshNet.ForwardedPortStatus.Starting"/>.</exception>
            <remarks>
            While a transition from <see cref="F:KellermanSoftware.Renci.SshNet.ForwardedPortStatus.Started"/> to <see cref="F:KellermanSoftware.Renci.SshNet.ForwardedPortStatus.Starting"/> is not possible, this method will
            return <c>false</c> for any such attempts.  This is related to concurrency.
            </remarks>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.HashInfo">
            <summary>
            Holds information about key size and cipher to use
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.HashInfo.KeySize">
            <summary>
            Gets the size of the key.
            </summary>
            <value>
            The size of the key.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.HashInfo.HashAlgorithm">
            <summary>
            Gets the cipher.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.HashInfo.#ctor(System.Int32,System.Func{System.Byte[],System.Security.Cryptography.HashAlgorithm})">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.CipherInfo"/> class.
            </summary>
            <param name="keySize">Size of the key.</param>
            <param name="hash">The hash algorithm to use for a given key.</param>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.IAuthenticationMethod">
            <summary>
            Base interface for authentication of a session using a given method.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.IAuthenticationMethod.Authenticate(KellermanSoftware.Renci.SshNet.ISession)">
            <summary>
            Authenticates the specified session.
            </summary>
            <param name="session">The session to authenticate.</param>
            <returns>
            The result of the authentication process.
            </returns>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.IAuthenticationMethod.AllowedAuthentications">
            <summary>
            Gets the list of allowed authentications.
            </summary>
            <value>
            The list of allowed authentications.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.IAuthenticationMethod.Name">
            <summary>
            Gets the name of the authentication method.
            </summary>
            <value>
            The name of the authentication method.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.IConnectionInfoInternal.UserAuthenticationBannerReceived(System.Object,KellermanSoftware.Renci.SshNet.MessageEventArgs{KellermanSoftware.Renci.SshNet.Messages.Authentication.BannerMessage})">
            <summary>
            Signals that an authentication banner message was received from the server.
            </summary>
            <param name="sender">The session in which the banner message was received.</param>
            <param name="e">The banner message.{</param>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.IConnectionInfoInternal.AuthenticationMethods">
            <summary>
            Gets the supported authentication methods for this connection.
            </summary>
            <value>
            The supported authentication methods for this connection.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.IConnectionInfoInternal.CreateNoneAuthenticationMethod">
            <summary>
            Creates a <see cref="T:KellermanSoftware.Renci.SshNet.NoneAuthenticationMethod"/> for the credentials represented
            by the current <see cref="T:KellermanSoftware.Renci.SshNet.IConnectionInfo"/>.
            </summary>
            <returns>
            A <see cref="T:KellermanSoftware.Renci.SshNet.NoneAuthenticationMethod"/> for the credentials represented by the
            current <see cref="T:KellermanSoftware.Renci.SshNet.IConnectionInfo"/>.
            </returns>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.IConnectionInfo">
            <summary>
            Represents remote connection information.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.IConnectionInfo.ChannelCloseTimeout">
            <summary>
            Gets or sets the timeout to used when waiting for a server to acknowledge closing a channel.
            </summary>
            <value>
            The channel close timeout. The default value is 1 second.
            </value>
            <remarks>
            If a server does not send a <c>SSH2_MSG_CHANNEL_CLOSE</c> message before the specified timeout
            elapses, the channel will be closed immediately.
            </remarks>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.IConnectionInfo.ChannelRequests">
            <summary>
            Gets the supported channel requests for this connection.
            </summary>
            <value>
            The supported channel requests for this connection.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.IConnectionInfo.Encoding">
            <summary>
            Gets the character encoding.
            </summary>
            <value>
            The character encoding.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.IConnectionInfo.Host">
            <summary>
            Gets connection host.
            </summary>
            <value>
            The connection host.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.IConnectionInfo.Port">
            <summary>
            Gets connection port.
            </summary>
            <value>
            The connection port. The default value is 22.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.IConnectionInfo.ProxyType">
            <summary>
            Gets proxy type.
            </summary>
            <value>
            The type of the proxy.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.IConnectionInfo.ProxyHost">
            <summary>
            Gets proxy connection host.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.IConnectionInfo.ProxyPort">
            <summary>
            Gets proxy connection port.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.IConnectionInfo.ProxyUsername">
            <summary>
            Gets proxy connection username.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.IConnectionInfo.ProxyPassword">
            <summary>
            Gets proxy connection password.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.IConnectionInfo.RetryAttempts">
            <summary>
            Gets the number of retry attempts when session channel creation failed.
            </summary>
            <value>
            The number of retry attempts when session channel creation failed.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.IConnectionInfo.Timeout">
            <summary>
            Gets or sets connection timeout.
            </summary>
            <value>
            The connection timeout. The default value is 30 seconds.
            </value>
            <example>
              <code source="..\..\src\Renci.SshNet.Tests\Classes\SshClientTest.cs" region="Example SshClient Connect Timeout" language="C#" title="Specify connection timeout" />
            </example>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.IConnectionInfo.AuthenticationBanner">
            <summary>
            Occurs when authentication banner is sent by the server.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.IForwardedPort">
            <summary>
            Supports port forwarding functionality.
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.IForwardedPort.Closing">
            <summary>
            The <see cref="E:KellermanSoftware.Renci.SshNet.IForwardedPort.Closing"/> event occurs as the forwarded port is being stopped.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.IRemotePathTransformation">
            <summary>
            Represents a transformation that can be applied to a remote path.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.IRemotePathTransformation.Transform(System.String)">
            <summary>
            Transforms the specified remote path.
            </summary>
            <param name="path">The path to transform.</param>
            <returns>
            The transformed path.
            </returns>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.IServiceFactory">
            <summary>
            Factory for creating new services.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.IServiceFactory.CreateSession(KellermanSoftware.Renci.SshNet.ConnectionInfo,KellermanSoftware.Renci.SshNet.Connection.ISocketFactory)">
            <summary>
            Creates a new <see cref="T:KellermanSoftware.Renci.SshNet.ISession"/> with the specified <see cref="T:KellermanSoftware.Renci.SshNet.ConnectionInfo"/> and
            <see cref="T:KellermanSoftware.Renci.SshNet.Connection.ISocketFactory"/>.
            </summary>
            <param name="connectionInfo">The <see cref="T:KellermanSoftware.Renci.SshNet.ConnectionInfo"/> to use for creating a new session.</param>
            <param name="socketFactory">A factory to create <see cref="T:System.Net.Sockets.Socket"/> instances.</param>
            <returns>
            An <see cref="T:KellermanSoftware.Renci.SshNet.ISession"/> for the specified <see cref="T:KellermanSoftware.Renci.SshNet.ConnectionInfo"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="connectionInfo"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="socketFactory"/> is <c>null</c>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.IServiceFactory.CreateSftpSession(KellermanSoftware.Renci.SshNet.ISession,System.Int32,System.Text.Encoding,KellermanSoftware.Renci.SshNet.Sftp.ISftpResponseFactory)">
            <summary>
            Creates a new <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.ISftpSession"/> in a given <see cref="T:KellermanSoftware.Renci.SshNet.ISession"/> and with
            the specified operation timeout and encoding.
            </summary>
            <param name="session">The <see cref="T:KellermanSoftware.Renci.SshNet.ISession"/> to create the <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.ISftpSession"/> in.</param>
            <param name="operationTimeout">The number of milliseconds to wait for an operation to complete, or -1 to wait indefinitely.</param>
            <param name="encoding">The encoding.</param>
            <param name="sftpMessageFactory">The factory to use for creating SFTP messages.</param>
            <returns>
            An <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.ISftpSession"/>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.IServiceFactory.CreatePipeStream">
            <summary>
            Create a new <see cref="T:KellermanSoftware.Renci.SshNet.Common.PipeStream"/>.
            </summary>
            <returns>
            A <see cref="T:KellermanSoftware.Renci.SshNet.Common.PipeStream"/>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.IServiceFactory.CreateKeyExchange(System.Collections.Generic.IDictionary{System.String,System.Type},System.String[])">
            <summary>
            Negotiates a key exchange algorithm, and creates a <see cref="T:KellermanSoftware.Renci.SshNet.Security.IKeyExchange" /> for the negotiated
            algorithm.
            </summary>
            <param name="clientAlgorithms">A <see cref="T:System.Collections.Generic.IDictionary`2"/> of the key exchange algorithms supported by the client where the key is the name of the algorithm, and the value is the type implementing this algorithm.</param>
            <param name="serverAlgorithms">The names of the key exchange algorithms supported by the SSH server.</param>
            <returns>
            A <see cref="T:KellermanSoftware.Renci.SshNet.Security.IKeyExchange"/> that was negotiated between client and server.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="clientAlgorithms"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="serverAlgorithms"/> is <c>null</c>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">No key exchange algorithm is supported by both client and server.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.IServiceFactory.CreateShellStream(KellermanSoftware.Renci.SshNet.ISession,System.String,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Collections.Generic.IDictionary{KellermanSoftware.Renci.SshNet.Common.TerminalModes,System.UInt32},System.Int32)">
            <summary>
            Creates a shell stream.
            </summary>
            <param name="session">The SSH session.</param>
            <param name="terminalName">The <c>TERM</c> environment variable.</param>
            <param name="columns">The terminal width in columns.</param>
            <param name="rows">The terminal width in rows.</param>
            <param name="width">The terminal height in pixels.</param>
            <param name="height">The terminal height in pixels.</param>
            <param name="bufferSize">Size of the buffer.</param>
            <param name="terminalModeValues">The terminal mode values.</param>
            <returns>
            The created <see cref="T:KellermanSoftware.Renci.SshNet.ShellStream"/> instance.
            </returns>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <remarks>
            <para>
            The <c>TERM</c> environment variable contains an identifier for the text window's capabilities.
            You can get a detailed list of these cababilities by using the ‘infocmp’ command.
            </para>
            <para>
            The column/row dimensions override the pixel dimensions(when non-zero). Pixel dimensions refer
            to the drawable area of the window.
            </para>
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.IServiceFactory.CreateRemotePathDoubleQuoteTransformation">
            <summary>
            Creates an <see cref="T:KellermanSoftware.Renci.SshNet.IRemotePathTransformation"/> that encloses a path in double quotes, and escapes
            any embedded double quote with a backslash.
            </summary>
            <returns>
            An <see cref="T:KellermanSoftware.Renci.SshNet.IRemotePathTransformation"/> that encloses a path in double quotes, and escapes any
            embedded double quote with a backslash.
            with a shell.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.IServiceFactory.CreateConnector(KellermanSoftware.Renci.SshNet.IConnectionInfo,KellermanSoftware.Renci.SshNet.Connection.ISocketFactory)">
            <summary>
            Creates an <see cref="T:KellermanSoftware.Renci.SshNet.Connection.IConnector"/> that can be used to establish a connection
            to the server identified by the specified <paramref name="connectionInfo"/>.
            </summary>
            <param name="connectionInfo">A <see cref="T:KellermanSoftware.Renci.SshNet.IConnectionInfo"/> detailing the server to establish a connection to.</param>
            <param name="socketFactory">A factory to create <see cref="T:System.Net.Sockets.Socket"/> instances.</param>
            <returns>
            An <see cref="T:KellermanSoftware.Renci.SshNet.Connection.IConnector"/> that can be used to establish a connection to the
            server identified by the specified <paramref name="connectionInfo"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="connectionInfo"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="socketFactory"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="P:KellermanSoftware.Renci.SshNet.IConnectionInfo.ProxyType"/> value of <paramref name="connectionInfo"/> is not supported.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.IServiceFactory.CreateProtocolVersionExchange">
            <summary>
            Creates an <see cref="T:KellermanSoftware.Renci.SshNet.Connection.IProtocolVersionExchange"/> that deals with the SSH protocol
            version exchange.
            </summary>
            <returns>
            An <see cref="T:KellermanSoftware.Renci.SshNet.Connection.IProtocolVersionExchange"/>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.IServiceFactory.CreateSocketFactory">
            <summary>
            Creates a factory to create <see cref="T:System.Net.Sockets.Socket"/> instances.
            </summary>
            <returns>
            An <see cref="T:KellermanSoftware.Renci.SshNet.Connection.ISocketFactory"/>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.IServiceFactory.CreateNetConfSession(KellermanSoftware.Renci.SshNet.ISession,System.Int32)">
            <summary>
            Creates a new <see cref="T:KellermanSoftware.Renci.SshNet.NetConf.INetConfSession"/> in a given <see cref="T:KellermanSoftware.Renci.SshNet.ISession"/>
            and with the specified operation timeout.
            </summary>
            <param name="session">The <see cref="T:KellermanSoftware.Renci.SshNet.ISession"/> to create the <see cref="T:KellermanSoftware.Renci.SshNet.NetConf.INetConfSession"/> in.</param>
            <param name="operationTimeout">The number of milliseconds to wait for an operation to complete, or -1 to wait indefinitely.</param>
            <returns>
            An <see cref="T:KellermanSoftware.Renci.SshNet.NetConf.INetConfSession"/>.
            </returns>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.ISession">
            <summary>
            Provides functionality to connect and interact with SSH server.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.ISession.ConnectionInfo">
            <summary>
            Gets or sets the connection info.
            </summary>
            <value>The connection info.</value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.ISession.IsConnected">
            <summary>
            Gets a value indicating whether the session is connected.
            </summary>
            <value>
            <c>true</c> if the session is connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.ISession.SessionSemaphore">
            <summary>
            Gets the session semaphore that controls session channels.
            </summary>
            <value>
            The session semaphore.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.ISession.MessageListenerCompleted">
            <summary>
            Gets a <see cref="T:System.Threading.WaitHandle"/> that can be used to wait for the message listener loop to complete.
            </summary>
            <value>
            A <see cref="T:System.Threading.WaitHandle"/> that can be used to wait for the message listener loop to complete, or
            <c>null</c> when the session has not been connected.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISession.Connect">
            <summary>
            Connects to the server.
            </summary>
            <exception cref="T:System.Net.Sockets.SocketException">Socket connection to the SSH server or proxy server could not be established, or an error occurred while resolving the hostname.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">SSH session could not be established.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshAuthenticationException">Authentication of SSH session failed.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.ProxyException">Failed to establish proxy connection.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISession.CreateChannelSession">
            <summary>
            Create a new SSH session channel.
            </summary>
            <returns>
            A new SSH session channel.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISession.CreateChannelDirectTcpip">
            <summary>
            Create a new channel for a locally forwarded TCP/IP port.
            </summary>
            <returns>
            A new channel for a locally forwarded TCP/IP port.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISession.CreateChannelForwardedTcpip(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Creates a "forwarded-tcpip" SSH channel.
            </summary>
            <returns>
            A new "forwarded-tcpip" SSH channel.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISession.Disconnect">
            <summary>
            Disconnects from the server.
            </summary>
            <remarks>
            This sends a <b>SSH_MSG_DISCONNECT</b> message to the server, waits for the
            server to close the socket on its end and subsequently closes the client socket.
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISession.OnDisconnecting">
            <summary>
            Called when client is disconnecting from the server.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISession.RegisterMessage(System.String)">
            <summary>
            Registers SSH message with the session.
            </summary>
            <param name="messageName">The name of the message to register with the session.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISession.SendMessage(KellermanSoftware.Renci.SshNet.Messages.Message)">
            <summary>
            Sends a message to the server.
            </summary>
            <param name="message">The message to send.</param>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">The client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshOperationTimeoutException">The operation timed out.</exception>
            <exception cref="T:System.InvalidOperationException">The size of the packet exceeds the maximum size defined by the protocol.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISession.TrySendMessage(KellermanSoftware.Renci.SshNet.Messages.Message)">
            <summary>
            Sends a message to the server.
            </summary>
            <param name="message">The message to send.</param>
            <returns>
            <c>true</c> if the message was sent to the server; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.InvalidOperationException">The size of the packet exceeds the maximum size defined by the protocol.</exception>
            <remarks>
            This methods returns <c>false</c> when the attempt to send the message results in a
            <see cref="T:System.Net.Sockets.SocketException"/> or a <see cref="T:KellermanSoftware.Renci.SshNet.Common.SshException"/>.
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISession.UnRegisterMessage(System.String)">
            <summary>
            Unregister SSH message from the session.
            </summary>
            <param name="messageName">The name of the message to unregister with the session.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISession.WaitOnHandle(System.Threading.WaitHandle)">
            <summary>
            Waits for the specified handle or the exception handle for the receive thread
            to signal within the connection timeout.
            </summary>
            <param name="waitHandle">The wait handle.</param>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">A received package was invalid or failed the message integrity check.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshOperationTimeoutException">None of the handles are signaled in time and the session is not disconnecting.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">A socket error was signaled while receiving messages from the server.</exception>
            <remarks>
            When neither handles are signaled in time and the session is not closing, then the
            session is disconnected.
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISession.WaitOnHandle(System.Threading.WaitHandle,System.TimeSpan)">
            <summary>
            Waits for the specified handle or the exception handle for the receive thread
            to signal within the specified timeout.
            </summary>
            <param name="waitHandle">The wait handle.</param>
            <param name="timeout">The time to wait for any of the handles to become signaled.</param>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">A received package was invalid or failed the message integrity check.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshOperationTimeoutException">None of the handles are signaled in time and the session is not disconnecting.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">A socket error was signaled while receiving messages from the server.</exception>
            <remarks>
            When neither handles are signaled in time and the session is not closing, then the
            session is disconnected.
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISession.TryWait(System.Threading.WaitHandle,System.TimeSpan,System.Exception@)">
            <summary>
            Waits for the specified <seec ref="WaitHandle"/> to receive a signal, using a <see cref="T:System.TimeSpan"/>
            to specify the time interval.
            </summary>
            <param name="waitHandle">The <see cref="T:System.Threading.WaitHandle"/> that should be signaled.</param>
            <param name="timeout">A <see cref="T:System.TimeSpan"/> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan"/> that represents <c>-1</c> milliseconds to wait indefinitely.</param>
            <param name="exception">When this method returns <see cref="F:KellermanSoftware.Renci.SshNet.WaitResult.Failed"/>, contains the <see cref="T:System.Exception"/>.</param>
            <returns>
            A <see cref="T:KellermanSoftware.Renci.SshNet.WaitResult"/>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISession.TryWait(System.Threading.WaitHandle,System.TimeSpan)">
            <summary>
            Waits for the specified <seec ref="WaitHandle"/> to receive a signal, using a <see cref="T:System.TimeSpan"/>
            to specify the time interval.
            </summary>
            <param name="waitHandle">The <see cref="T:System.Threading.WaitHandle"/> that should be signaled.</param>
            <param name="timeout">A <see cref="T:System.TimeSpan"/> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan"/> that represents <c>-1</c> milliseconds to wait indefinitely.</param>
            <returns>
            A <see cref="T:KellermanSoftware.Renci.SshNet.WaitResult"/>.
            </returns>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.ISession.ChannelCloseReceived">
            <summary>
            Occurs when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelCloseMessage"/> message received
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.ISession.ChannelDataReceived">
            <summary>
            Occurs when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelDataMessage"/> message received
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.ISession.ChannelEofReceived">
            <summary>
            Occurs when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelEofMessage"/> message received
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.ISession.ChannelExtendedDataReceived">
            <summary>
            Occurs when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelExtendedDataMessage"/> message received
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.ISession.ChannelFailureReceived">
            <summary>
            Occurs when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelFailureMessage"/> message received
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.ISession.ChannelOpenConfirmationReceived">
            <summary>
            Occurs when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelOpenConfirmationMessage"/> message received
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.ISession.ChannelOpenFailureReceived">
            <summary>
            Occurs when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelOpenFailureMessage"/> message received
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.ISession.ChannelOpenReceived">
            <summary>
            Occurs when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelOpenMessage"/> message received
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.ISession.ChannelRequestReceived">
            <summary>
            Occurs when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelRequestMessage"/> message received
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.ISession.ChannelSuccessReceived">
            <summary>
            Occurs when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelSuccessMessage"/> message received
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.ISession.ChannelWindowAdjustReceived">
            <summary>
            Occurs when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelWindowAdjustMessage"/> message received
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.ISession.Disconnected">
            <summary>
            Occurs when session has been disconnected from the server.
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.ISession.ErrorOccured">
            <summary>
            Occurs when an error occurred.
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.ISession.HostKeyReceived">
            <summary>
            Occurs when host key received.
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.ISession.RequestSuccessReceived">
            <summary>
            Occurs when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.RequestSuccessMessage"/> message received
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.ISession.RequestFailureReceived">
            <summary>
            Occurs when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.RequestFailureMessage"/> message received
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.ISession.UserAuthenticationBannerReceived">
            <summary>
            Occurs when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Authentication.BannerMessage"/> message is received from the server.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.ISftpClient">
            <summary>
            Implementation of the SSH File Transfer Protocol (SFTP) over SSH.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.ISftpClient.BufferSize">
            <summary>
            Gets or sets the maximum size of the buffer in bytes.
            </summary>
            <value>
            The size of the buffer. The default buffer size is 32768 bytes (32 KB).
            </value>
            <remarks>
            <para>
            For write operations, this limits the size of the payload for
            individual SSH_FXP_WRITE messages. The actual size is always
            capped at the maximum packet size supported by the peer
            (minus the size of protocol fields).
            </para>
            <para>
            For read operations, this controls the size of the payload which
            is requested from the peer in a SSH_FXP_READ message. The peer
            will send the requested number of bytes in a SSH_FXP_DATA message,
            possibly split over multiple SSH_MSG_CHANNEL_DATA messages.
            </para>
            <para>
            To optimize the size of the SSH packets sent by the peer,
            the actual requested size will take into account the size of the
            SSH_FXP_DATA protocol fields.
            </para>
            <para>
            The size of the each indivual SSH_FXP_DATA message is limited to the
            local maximum packet size of the channel, which is set to <c>64 KB</c>
            for SSH.NET. However, the peer can limit this even further.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.ISftpClient.OperationTimeout">
            <summary>
            Gets or sets the operation timeout.
            </summary>
            <value>
            The timeout to wait until an operation completes. The default value is negative
            one (-1) milliseconds, which indicates an infinite timeout period.
            </value>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value"/> represents a value that is less than -1 or greater than <see cref="F:System.Int32.MaxValue"/> milliseconds.</exception>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.ISftpClient.ProtocolVersion">
            <summary>
            Gets sftp protocol version.
            </summary>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.ISftpClient.WorkingDirectory">
            <summary>
            Gets remote working directory.
            </summary>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISftpClient.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Appends lines to a file, creating the file if it does not already exist.
            </summary>
            <param name="path">The file to append the lines to. The file is created if it does not already exist.</param>
            <param name="contents">The lines to append to the file.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is<b>null</b> <para>-or-</para> <paramref name="contents"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPathNotFoundException">The specified path is invalid, or its directory was not found on the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
            <remarks>
            The characters are written to the file using UTF-8 encoding without a Byte-Order Mark (BOM)
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISftpClient.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <summary>
            Appends lines to a file by using a specified encoding, creating the file if it does not already exist.
            </summary>
            <param name="path">The file to append the lines to. The file is created if it does not already exist.</param>
            <param name="contents">The lines to append to the file.</param>
            <param name="encoding">The character encoding to use.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>. <para>-or-</para> <paramref name="contents"/> is <b>null</b>. <para>-or-</para> <paramref name="encoding"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPathNotFoundException">The specified path is invalid, or its directory was not found on the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISftpClient.AppendAllText(System.String,System.String)">
            <summary>
            Appends the specified string to the file, creating the file if it does not already exist.
            </summary>
            <param name="path">The file to append the specified string to.</param>
            <param name="contents">The string to append to the file.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>. <para>-or-</para> <paramref name="contents"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPathNotFoundException">The specified path is invalid, or its directory was not found on the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
            <remarks>
            The characters are written to the file using UTF-8 encoding without a Byte-Order Mark (BOM).
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISftpClient.AppendAllText(System.String,System.String,System.Text.Encoding)">
            <summary>
            Appends the specified string to the file, creating the file if it does not already exist.
            </summary>
            <param name="path">The file to append the specified string to.</param>
            <param name="contents">The string to append to the file.</param>
            <param name="encoding">The character encoding to use.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>. <para>-or-</para> <paramref name="contents"/> is <b>null</b>. <para>-or-</para> <paramref name="encoding"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPathNotFoundException">The specified path is invalid, or its directory was not found on the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISftpClient.AppendText(System.String)">
            <summary>
            Creates a <see cref="T:System.IO.StreamWriter"/> that appends UTF-8 encoded text to the specified file,
            creating the file if it does not already exist.
            </summary>
            <param name="path">The path to the file to append to.</param>
            <returns>
            A <see cref="T:System.IO.StreamWriter"/> that appends text to a file using UTF-8 encoding without a
            Byte-Order Mark (BOM).
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPathNotFoundException">The specified path is invalid, or its directory was not found on the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISftpClient.AppendText(System.String,System.Text.Encoding)">
            <summary>
            Creates a <see cref="T:System.IO.StreamWriter"/> that appends text to a file using the specified
            encoding, creating the file if it does not already exist.
            </summary>
            <param name="path">The path to the file to append to.</param>
            <param name="encoding">The character encoding to use.</param>
            <returns>
            A <see cref="T:System.IO.StreamWriter"/> that appends text to a file using the specified encoding.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>. <para>-or-</para> <paramref name="encoding"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPathNotFoundException">The specified path is invalid, or its directory was not found on the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISftpClient.BeginDownloadFile(System.String,System.IO.Stream)">
            <summary>
            Begins an asynchronous file downloading into the stream.
            </summary>
            <param name="path">The path.</param>
            <param name="output">The output.</param>
            <returns>
            An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="output" /> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path" /> is <b>null</b> or contains only whitespace characters.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPermissionDeniedException">Permission to perform the operation was denied by the remote host. <para>-or-</para> A SSH command was denied by the server.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">A SSH error where <see cref="P:System.Exception.Message" /> is the message from the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
            <remarks>
            Method calls made by this method to <paramref name="output" />, may under certain conditions result in exceptions thrown by the stream.
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISftpClient.BeginDownloadFile(System.String,System.IO.Stream,System.AsyncCallback)">
            <summary>
            Begins an asynchronous file downloading into the stream.
            </summary>
            <param name="path">The path.</param>
            <param name="output">The output.</param>
            <param name="asyncCallback">The method to be called when the asynchronous write operation is completed.</param>
            <returns>
            An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="output" /> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path" /> is <b>null</b> or contains only whitespace characters.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPermissionDeniedException">Permission to perform the operation was denied by the remote host. <para>-or-</para> A SSH command was denied by the server.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">A SSH error where <see cref="P:System.Exception.Message" /> is the message from the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
            <remarks>
            Method calls made by this method to <paramref name="output" />, may under certain conditions result in exceptions thrown by the stream.
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISftpClient.BeginDownloadFile(System.String,System.IO.Stream,System.AsyncCallback,System.Object,System.Action{System.UInt64})">
            <summary>
            Begins an asynchronous file downloading into the stream.
            </summary>
            <param name="path">The path.</param>
            <param name="output">The output.</param>
            <param name="asyncCallback">The method to be called when the asynchronous write operation is completed.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous write request from other requests.</param>
            <param name="downloadCallback">The download callback.</param>
            <returns>
            An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="output" /> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path" /> is <b>null</b> or contains only whitespace characters.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
            <remarks>
            Method calls made by this method to <paramref name="output" />, may under certain conditions result in exceptions thrown by the stream.
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISftpClient.BeginListDirectory(System.String,System.AsyncCallback,System.Object,System.Action{System.Int32})">
            <summary>
            Begins an asynchronous operation of retrieving list of files in remote directory.
            </summary>
            <param name="path">The path.</param>
            <param name="asyncCallback">The method to be called when the asynchronous write operation is completed.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous write request from other requests.</param>
            <param name="listCallback">The list callback.</param>
            <returns>
            An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.
            </returns>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISftpClient.BeginSynchronizeDirectories(System.String,System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins the synchronize directories.
            </summary>
            <param name="sourcePath">The source path.</param>
            <param name="destinationPath">The destination path.</param>
            <param name="searchPattern">The search pattern.</param>
            <param name="asyncCallback">The async callback.</param>
            <param name="state">The state.</param>
            <returns>
            An <see cref="T:System.IAsyncResult" /> that represents the asynchronous directory synchronization.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sourcePath"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="destinationPath"/> is <c>null</c> or contains only whitespace.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISftpClient.BeginUploadFile(System.IO.Stream,System.String)">
            <summary>
            Begins an asynchronous uploading the stream into remote file.
            </summary>
            <param name="input">Data input stream.</param>
            <param name="path">Remote file path.</param>
            <returns>
            An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input" /> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path" /> is <b>null</b> or contains only whitespace characters.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPermissionDeniedException">Permission to list the contents of the directory was denied by the remote host. <para>-or-</para> A SSH command was denied by the server.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">A SSH error where <see cref="P:System.Exception.Message" /> is the message from the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
            <remarks>
            <para>
            Method calls made by this method to <paramref name="input" />, may under certain conditions result in exceptions thrown by the stream.
            </para>
            <para>
            If the remote file already exists, it is overwritten and truncated.
            </para>
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISftpClient.BeginUploadFile(System.IO.Stream,System.String,System.AsyncCallback)">
            <summary>
            Begins an asynchronous uploading the stream into remote file.
            </summary>
            <param name="input">Data input stream.</param>
            <param name="path">Remote file path.</param>
            <param name="asyncCallback">The method to be called when the asynchronous write operation is completed.</param>
            <returns>
            An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input" /> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path" /> is <b>null</b> or contains only whitespace characters.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPermissionDeniedException">Permission to list the contents of the directory was denied by the remote host. <para>-or-</para> A SSH command was denied by the server.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">A SSH error where <see cref="P:System.Exception.Message" /> is the message from the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
            <remarks>
            <para>
            Method calls made by this method to <paramref name="input" />, may under certain conditions result in exceptions thrown by the stream.
            </para>
            <para>
            If the remote file already exists, it is overwritten and truncated.
            </para>
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISftpClient.BeginUploadFile(System.IO.Stream,System.String,System.AsyncCallback,System.Object,System.Action{System.UInt64})">
            <summary>
            Begins an asynchronous uploading the stream into remote file.
            </summary>
            <param name="input">Data input stream.</param>
            <param name="path">Remote file path.</param>
            <param name="asyncCallback">The method to be called when the asynchronous write operation is completed.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous write request from other requests.</param>
            <param name="uploadCallback">The upload callback.</param>
            <returns>
            An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input" /> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path" /> is <b>null</b> or contains only whitespace characters.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPermissionDeniedException">Permission to list the contents of the directory was denied by the remote host. <para>-or-</para> A SSH command was denied by the server.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">A SSH error where <see cref="P:System.Exception.Message" /> is the message from the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
            <remarks>
            <para>
            Method calls made by this method to <paramref name="input" />, may under certain conditions result in exceptions thrown by the stream.
            </para>
            <para>
            If the remote file already exists, it is overwritten and truncated.
            </para>
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISftpClient.BeginUploadFile(System.IO.Stream,System.String,System.Boolean,System.AsyncCallback,System.Object,System.Action{System.UInt64})">
            <summary>
            Begins an asynchronous uploading the stream into remote file.
            </summary>
            <param name="input">Data input stream.</param>
            <param name="path">Remote file path.</param>
            <param name="canOverride">Specified whether an existing file can be overwritten.</param>
            <param name="asyncCallback">The method to be called when the asynchronous write operation is completed.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous write request from other requests.</param>
            <param name="uploadCallback">The upload callback.</param>
            <returns>
            An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input" /> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path" /> is <b>null</b> or contains only whitespace characters.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
            <remarks>
            <para>
            Method calls made by this method to <paramref name="input" />, may under certain conditions result in exceptions thrown by the stream.
            </para>
            <para>
            When <paramref name="path"/> refers to an existing file, set <paramref name="canOverride"/> to <c>true</c> to overwrite and truncate that file.
            If <paramref name="canOverride"/> is <c>false</c>, the upload will fail and <see cref="M:KellermanSoftware.Renci.SshNet.ISftpClient.EndUploadFile(System.IAsyncResult)"/> will throw an
            <see cref="T:KellermanSoftware.Renci.SshNet.Common.SshException"/>.
            </para>
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISftpClient.ChangeDirectory(System.String)">
            <summary>
            Changes remote directory to path.
            </summary>
            <param name="path">New directory path.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPermissionDeniedException">Permission to change directory denied by remote host. <para>-or-</para> A SSH command was denied by the server.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPathNotFoundException"><paramref name="path"/> was not found on the remote host.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">A SSH error where <see cref="P:System.Exception.Message"/> is the message from the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISftpClient.ChangePermissions(System.String,System.Int16)">
            <summary>
            Changes permissions of file(s) to specified mode.
            </summary>
            <param name="path">File(s) path, may match multiple files.</param>
            <param name="mode">The mode.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPermissionDeniedException">Permission to change permission on the path(s) was denied by the remote host. <para>-or-</para> A SSH command was denied by the server.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPathNotFoundException"><paramref name="path"/> was not found on the remote host.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">A SSH error where <see cref="P:System.Exception.Message"/> is the message from the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISftpClient.Create(System.String)">
            <summary>
            Creates or overwrites a file in the specified path.
            </summary>
            <param name="path">The path and name of the file to create.</param>
            <returns>
            A <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.SftpFileStream"/> that provides read/write access to the file specified in path.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPathNotFoundException">The specified path is invalid, or its directory was not found on the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
            <remarks>
            If the target file already exists, it is first truncated to zero bytes.
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISftpClient.Create(System.String,System.Int32)">
            <summary>
            Creates or overwrites the specified file.
            </summary>
            <param name="path">The path and name of the file to create.</param>
            <param name="bufferSize">The maximum number of bytes buffered for reads and writes to the file.</param>
            <returns>
            A <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.SftpFileStream"/> that provides read/write access to the file specified in path.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPathNotFoundException">The specified path is invalid, or its directory was not found on the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
            <remarks>
            If the target file already exists, it is first truncated to zero bytes.
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISftpClient.CreateDirectory(System.String)">
            <summary>
            Creates remote directory specified by path.
            </summary>
            <param name="path">Directory path to create.</param>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is <b>null</b> or contains only whitespace characters.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPermissionDeniedException">Permission to create the directory was denied by the remote host. <para>-or-</para> A SSH command was denied by the server.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">A SSH error where <see cref="P:System.Exception.Message"/> is the message from the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISftpClient.CreateText(System.String)">
            <summary>
            Creates or opens a file for writing UTF-8 encoded text.
            </summary>
            <param name="path">The file to be opened for writing.</param>
            <returns>
            A <see cref="T:System.IO.StreamWriter"/> that writes text to a file using UTF-8 encoding without
            a Byte-Order Mark (BOM).
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPathNotFoundException">The specified path is invalid, or its directory was not found on the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
            <remarks>
            <para>
            If the target file already exists, it is overwritten. It is not first truncated to zero bytes.
            </para>
            <para>
            If the target file does not exist, it is created.
            </para>
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISftpClient.CreateText(System.String,System.Text.Encoding)">
            <summary>
            Creates or opens a file for writing text using the specified encoding.
            </summary>
            <param name="path">The file to be opened for writing.</param>
            <param name="encoding">The character encoding to use.</param>
            <returns>
            A <see cref="T:System.IO.StreamWriter"/> that writes to a file using the specified encoding.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPathNotFoundException">The specified path is invalid, or its directory was not found on the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
            <remarks>
            <para>
            If the target file already exists, it is overwritten. It is not first truncated to zero bytes.
            </para>
            <para>
            If the target file does not exist, it is created.
            </para>
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISftpClient.Delete(System.String)">
            <summary>
            Deletes the specified file or directory.
            </summary>
            <param name="path">The name of the file or directory to be deleted. Wildcard characters are not supported.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPathNotFoundException"><paramref name="path"/> was not found on the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISftpClient.DeleteDirectory(System.String)">
            <summary>
            Deletes remote directory specified by path.
            </summary>
            <param name="path">Directory to be deleted path.</param>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is <b>null</b> or contains only whitespace characters.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPathNotFoundException"><paramref name="path"/> was not found on the remote host.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPermissionDeniedException">Permission to delete the directory was denied by the remote host. <para>-or-</para> A SSH command was denied by the server.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">A SSH error where <see cref="P:System.Exception.Message"/> is the message from the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISftpClient.DeleteFile(System.String)">
            <summary>
            Deletes remote file specified by path.
            </summary>
            <param name="path">File to be deleted path.</param>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is <b>null</b> or contains only whitespace characters.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPathNotFoundException"><paramref name="path"/> was not found on the remote host.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPermissionDeniedException">Permission to delete the file was denied by the remote host. <para>-or-</para> A SSH command was denied by the server.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">A SSH error where <see cref="P:System.Exception.Message"/> is the message from the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISftpClient.DownloadFile(System.String,System.IO.Stream,System.Action{System.UInt64})">
            <summary>
            Downloads remote file specified by the path into the stream.
            </summary>
            <param name="path">File to download.</param>
            <param name="output">Stream to write the file into.</param>
            <param name="downloadCallback">The download callback.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="output" /> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path" /> is <b>null</b> or contains only whitespace characters.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPermissionDeniedException">Permission to perform the operation was denied by the remote host. <para>-or-</para> A SSH command was denied by the server.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPathNotFoundException"><paramref name="path"/> was not found on the remote host.</exception>/// 
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">A SSH error where <see cref="P:System.Exception.Message" /> is the message from the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
            <remarks>
            Method calls made by this method to <paramref name="output" />, may under certain conditions result in exceptions thrown by the stream.
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISftpClient.EndDownloadFile(System.IAsyncResult)">
            <summary>
            Ends an asynchronous file downloading into the stream.
            </summary>
            <param name="asyncResult">The pending asynchronous SFTP request.</param>
            <exception cref="T:System.ArgumentException">The <see cref="T:System.IAsyncResult"/> object did not come from the corresponding async method on this type.<para>-or-</para><see cref="M:KellermanSoftware.Renci.SshNet.ISftpClient.EndDownloadFile(System.IAsyncResult)"/> was called multiple times with the same <see cref="T:System.IAsyncResult"/>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPermissionDeniedException">Permission to perform the operation was denied by the remote host. <para>-or-</para> A SSH command was denied by the server.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPathNotFoundException">The path was not found on the remote host.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">A SSH error where <see cref="P:System.Exception.Message" /> is the message from the remote host.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISftpClient.EndListDirectory(System.IAsyncResult)">
            <summary>
            Ends an asynchronous operation of retrieving list of files in remote directory.
            </summary>
            <param name="asyncResult">The pending asynchronous SFTP request.</param>
            <returns>
            A list of files.
            </returns>
            <exception cref="T:System.ArgumentException">The <see cref="T:System.IAsyncResult"/> object did not come from the corresponding async method on this type.<para>-or-</para><see cref="M:KellermanSoftware.Renci.SshNet.ISftpClient.EndListDirectory(System.IAsyncResult)"/> was called multiple times with the same <see cref="T:System.IAsyncResult"/>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISftpClient.EndSynchronizeDirectories(System.IAsyncResult)">
            <summary>
            Ends the synchronize directories.
            </summary>
            <param name="asyncResult">The async result.</param>
            <returns>
            A list of uploaded files.
            </returns>
            <exception cref="T:System.ArgumentException">The <see cref="T:System.IAsyncResult"/> object did not come from the corresponding async method on this type.<para>-or-</para><see cref="M:KellermanSoftware.Renci.SshNet.ISftpClient.EndSynchronizeDirectories(System.IAsyncResult)"/> was called multiple times with the same <see cref="T:System.IAsyncResult"/>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPathNotFoundException">The destination path was not found on the remote host.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISftpClient.EndUploadFile(System.IAsyncResult)">
            <summary>
            Ends an asynchronous uploading the stream into remote file.
            </summary>
            <param name="asyncResult">The pending asynchronous SFTP request.</param>
            <exception cref="T:System.ArgumentException">The <see cref="T:System.IAsyncResult"/> object did not come from the corresponding async method on this type.<para>-or-</para><see cref="M:KellermanSoftware.Renci.SshNet.ISftpClient.EndUploadFile(System.IAsyncResult)"/> was called multiple times with the same <see cref="T:System.IAsyncResult"/>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPathNotFoundException">The directory of the file was not found on the remote host.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPermissionDeniedException">Permission to upload the file was denied by the remote host. <para>-or-</para> A SSH command was denied by the server.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">A SSH error where <see cref="P:System.Exception.Message" /> is the message from the remote host.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISftpClient.Exists(System.String)">
            <summary>
            Checks whether file or directory exists;
            </summary>
            <param name="path">The path.</param>
            <returns>
            <c>true</c> if directory or file exists; otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is <b>null</b> or contains only whitespace characters.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPermissionDeniedException">Permission to perform the operation was denied by the remote host. <para>-or-</para> A SSH command was denied by the server.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">A SSH error where <see cref="P:System.Exception.Message"/> is the message from the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISftpClient.Get(System.String)">
            <summary>
            Gets reference to remote file or directory.
            </summary>
            <param name="path">The path.</param>
            <returns>
            A reference to <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.ISftpFile"/> file object.
            </returns>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPathNotFoundException"><paramref name="path"/> was not found on the remote host.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <b>null</b>.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISftpClient.GetAttributes(System.String)">
            <summary>
            Gets the <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.SftpFileAttributes"/> of the file on the path.
            </summary>
            <param name="path">The path to the file.</param>
            <returns>
            The <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.SftpFileAttributes"/> of the file on the path.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPathNotFoundException"><paramref name="path"/> was not found on the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISftpClient.GetLastAccessTime(System.String)">
            <summary>
            Returns the date and time the specified file or directory was last accessed.
            </summary>
            <param name="path">The file or directory for which to obtain access date and time information.</param>
            <returns>
            A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file or directory was last accessed.
            This value is expressed in local time.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISftpClient.GetLastAccessTimeUtc(System.String)">
            <summary>
            Returns the date and time, in coordinated universal time (UTC), that the specified file or directory was last accessed.
            </summary>
            <param name="path">The file or directory for which to obtain access date and time information.</param>
            <returns>
            A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file or directory was last accessed.
            This value is expressed in UTC time.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISftpClient.GetLastWriteTime(System.String)">
            <summary>
            Returns the date and time the specified file or directory was last written to.
            </summary>
            <param name="path">The file or directory for which to obtain write date and time information.</param>
            <returns>
            A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file or directory was last written to.
            This value is expressed in local time.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISftpClient.GetLastWriteTimeUtc(System.String)">
            <summary>
            Returns the date and time, in coordinated universal time (UTC), that the specified file or directory was last written to.
            </summary>
            <param name="path">The file or directory for which to obtain write date and time information.</param>
            <returns>
            A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file or directory was last written to.
            This value is expressed in UTC time.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISftpClient.GetStatus(System.String)">
            <summary>
            Gets status using statvfs@openssh.com request.
            </summary>
            <param name="path">The path.</param>
            <returns>
            A <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.SftpFileSytemInformation"/> instance that contains file status information.
            </returns>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <b>null</b>.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISftpClient.ListDirectory(System.String,System.Action{System.Int32})">
            <summary>
            Retrieves list of files in remote directory.
            </summary>
            <param name="path">The path.</param>
            <param name="listCallback">The list callback.</param>
            <returns>
            A list of files.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPermissionDeniedException">Permission to list the contents of the directory was denied by the remote host. <para>-or-</para> A SSH command was denied by the server.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">A SSH error where <see cref="P:System.Exception.Message" /> is the message from the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISftpClient.Open(System.String,System.IO.FileMode)">
            <summary>
            Opens a <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.SftpFileStream"/> on the specified path with read/write access.
            </summary>
            <param name="path">The file to open.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten.</param>
            <returns>
            An unshared <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.SftpFileStream"/> that provides access to the specified file, with the specified mode and read/write access.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISftpClient.Open(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Opens a <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.SftpFileStream"/> on the specified path, with the specified mode and access.
            </summary>
            <param name="path">The file to open.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten.</param>
            <param name="access">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the file.</param>
            <returns>
            An unshared <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.SftpFileStream"/> that provides access to the specified file, with the specified mode and access.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISftpClient.OpenRead(System.String)">
            <summary>
            Opens an existing file for reading.
            </summary>
            <param name="path">The file to be opened for reading.</param>
            <returns>
            A read-only <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.SftpFileStream"/> on the specified path.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISftpClient.OpenText(System.String)">
            <summary>
            Opens an existing UTF-8 encoded text file for reading.
            </summary>
            <param name="path">The file to be opened for reading.</param>
            <returns>
            A <see cref="T:System.IO.StreamReader"/> on the specified path.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISftpClient.OpenWrite(System.String)">
            <summary>
            Opens a file for writing.
            </summary>
            <param name="path">The file to be opened for writing.</param>
            <returns>
            An unshared <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.SftpFileStream"/> object on the specified path with <see cref="F:System.IO.FileAccess.Write"/> access.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
            <remarks>
            If the file does not exist, it is created.
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISftpClient.ReadAllBytes(System.String)">
            <summary>
            Opens a binary file, reads the contents of the file into a byte array, and closes the file.
            </summary>
            <param name="path">The file to open for reading.</param>
            <returns>
            A byte array containing the contents of the file.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISftpClient.ReadAllLines(System.String)">
            <summary>
            Opens a text file, reads all lines of the file using UTF-8 encoding, and closes the file.
            </summary>
            <param name="path">The file to open for reading.</param>
            <returns>
            A string array containing all lines of the file.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISftpClient.ReadAllLines(System.String,System.Text.Encoding)">
            <summary>
            Opens a file, reads all lines of the file with the specified encoding, and closes the file.
            </summary>
            <param name="path">The file to open for reading.</param>
            <param name="encoding">The encoding applied to the contents of the file.</param>
            <returns>
            A string array containing all lines of the file.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISftpClient.ReadAllText(System.String)">
            <summary>
            Opens a text file, reads all lines of the file with the UTF-8 encoding, and closes the file.
            </summary>
            <param name="path">The file to open for reading.</param>
            <returns>
            A string containing all lines of the file.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISftpClient.ReadAllText(System.String,System.Text.Encoding)">
            <summary>
            Opens a file, reads all lines of the file with the specified encoding, and closes the file.
            </summary>
            <param name="path">The file to open for reading.</param>
            <param name="encoding">The encoding applied to the contents of the file.</param>
            <returns>
            A string containing all lines of the file.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISftpClient.ReadLines(System.String)">
            <summary>
            Reads the lines of a file with the UTF-8 encoding.
            </summary>
            <param name="path">The file to read.</param>
            <returns>
            The lines of the file.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISftpClient.ReadLines(System.String,System.Text.Encoding)">
            <summary>
            Read the lines of a file that has a specified encoding.
            </summary>
            <param name="path">The file to read.</param>
            <param name="encoding">The encoding that is applied to the contents of the file.</param>
            <returns>
            The lines of the file.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISftpClient.RenameFile(System.String,System.String)">
            <summary>
            Renames remote file from old path to new path.
            </summary>
            <param name="oldPath">Path to the old file location.</param>
            <param name="newPath">Path to the new file location.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="oldPath"/> is <b>null</b>. <para>-or-</para> or <paramref name="newPath"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPermissionDeniedException">Permission to rename the file was denied by the remote host. <para>-or-</para> A SSH command was denied by the server.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">A SSH error where <see cref="P:System.Exception.Message"/> is the message from the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISftpClient.RenameFile(System.String,System.String,System.Boolean)">
            <summary>
            Renames remote file from old path to new path.
            </summary>
            <param name="oldPath">Path to the old file location.</param>
            <param name="newPath">Path to the new file location.</param>
            <param name="isPosix">if set to <c>true</c> then perform a posix rename.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="oldPath" /> is <b>null</b>. <para>-or-</para> or <paramref name="newPath" /> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPermissionDeniedException">Permission to rename the file was denied by the remote host. <para>-or-</para> A SSH command was denied by the server.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">A SSH error where <see cref="P:System.Exception.Message" /> is the message from the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISftpClient.SetAttributes(System.String,KellermanSoftware.Renci.SshNet.Sftp.SftpFileAttributes)">
            <summary>
            Sets the specified <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.SftpFileAttributes"/> of the file on the specified path.
            </summary>
            <param name="path">The path to the file.</param>
            <param name="fileAttributes">The desired <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.SftpFileAttributes"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISftpClient.SymbolicLink(System.String,System.String)">
            <summary>
            Creates a symbolic link from old path to new path.
            </summary>
            <param name="path">The old path.</param>
            <param name="linkPath">The new path.</param>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is <b>null</b>. <para>-or-</para> <paramref name="linkPath"/> is <b>null</b> or contains only whitespace characters.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPermissionDeniedException">Permission to create the symbolic link was denied by the remote host. <para>-or-</para> A SSH command was denied by the server.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">A SSH error where <see cref="P:System.Exception.Message"/> is the message from the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISftpClient.SynchronizeDirectories(System.String,System.String,System.String)">
            <summary>
            Synchronizes the directories.
            </summary>
            <param name="sourcePath">The source path.</param>
            <param name="destinationPath">The destination path.</param>
            <param name="searchPattern">The search pattern.</param>
            <returns>
            A list of uploaded files.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sourcePath"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="destinationPath"/> is <c>null</c> or contains only whitespace.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPathNotFoundException"><paramref name="destinationPath"/> was not found on the remote host.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISftpClient.UploadFile(System.IO.Stream,System.String,System.Action{System.UInt64})">
            <summary>
            Uploads stream into remote file.
            </summary>
            <param name="input">Data input stream.</param>
            <param name="path">Remote file path.</param>
            <param name="uploadCallback">The upload callback.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="input" /> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path" /> is <b>null</b> or contains only whitespace characters.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPermissionDeniedException">Permission to upload the file was denied by the remote host. <para>-or-</para> A SSH command was denied by the server.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">A SSH error where <see cref="P:System.Exception.Message" /> is the message from the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
            <remarks>
            Method calls made by this method to <paramref name="input" />, may under certain conditions result in exceptions thrown by the stream.
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISftpClient.UploadFile(System.IO.Stream,System.String,System.Boolean,System.Action{System.UInt64})">
            <summary>
            Uploads stream into remote file.
            </summary>
            <param name="input">Data input stream.</param>
            <param name="path">Remote file path.</param>
            <param name="canOverride">if set to <c>true</c> then existing file will be overwritten.</param>
            <param name="uploadCallback">The upload callback.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="input" /> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path" /> is <b>null</b> or contains only whitespace characters.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPermissionDeniedException">Permission to upload the file was denied by the remote host. <para>-or-</para> A SSH command was denied by the server.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">A SSH error where <see cref="P:System.Exception.Message" /> is the message from the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
            <remarks>
            Method calls made by this method to <paramref name="input" />, may under certain conditions result in exceptions thrown by the stream.
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISftpClient.WriteAllBytes(System.String,System.Byte[])">
            <summary>
            Writes the specified byte array to the specified file, and closes the file.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="bytes">The bytes to write to the file.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPathNotFoundException">The specified path is invalid, or its directory was not found on the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
            <remarks>
            <para>
            If the target file already exists, it is overwritten. It is not first truncated to zero bytes.
            </para>
            <para>
            If the target file does not exist, it is created.
            </para>
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISftpClient.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Writes a collection of strings to the file using the UTF-8 encoding, and closes the file.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The lines to write to the file.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPathNotFoundException">The specified path is invalid, or its directory was not found on the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
            <remarks>
            <para>
            The characters are written to the file using UTF-8 encoding without a Byte-Order Mark (BOM).
            </para>
            <para>
            If the target file already exists, it is overwritten. It is not first truncated to zero bytes.
            </para>
            <para>
            If the target file does not exist, it is created.
            </para>
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISftpClient.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <summary>
            Writes a collection of strings to the file using the specified encoding, and closes the file.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The lines to write to the file.</param>
            <param name="encoding">The character encoding to use.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPathNotFoundException">The specified path is invalid, or its directory was not found on the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
            <remarks>
            <para>
            If the target file already exists, it is overwritten. It is not first truncated to zero bytes.
            </para>
            <para>
            If the target file does not exist, it is created.
            </para>
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISftpClient.WriteAllLines(System.String,System.String[])">
            <summary>
            Write the specified string array to the file using the UTF-8 encoding, and closes the file.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The string array to write to the file.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPathNotFoundException">The specified path is invalid, or its directory was not found on the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
            <remarks>
            <para>
            The characters are written to the file using UTF-8 encoding without a Byte-Order Mark (BOM).
            </para>
            <para>
            If the target file already exists, it is overwritten. It is not first truncated to zero bytes.
            </para>
            <para>
            If the target file does not exist, it is created.
            </para>
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISftpClient.WriteAllLines(System.String,System.String[],System.Text.Encoding)">
            <summary>
            Writes the specified string array to the file by using the specified encoding, and closes the file.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The string array to write to the file.</param>
            <param name="encoding">An <see cref="T:System.Text.Encoding"/> object that represents the character encoding applied to the string array.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPathNotFoundException">The specified path is invalid, or its directory was not found on the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
            <remarks>
            <para>
            If the target file already exists, it is overwritten. It is not first truncated to zero bytes.
            </para>
            <para>
            If the target file does not exist, it is created.
            </para>
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISftpClient.WriteAllText(System.String,System.String)">
            <summary>
            Writes the specified string to the file using the UTF-8 encoding, and closes the file.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The string to write to the file.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPathNotFoundException">The specified path is invalid, or its directory was not found on the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
            <remarks>
            <para>
            The characters are written to the file using UTF-8 encoding without a Byte-Order Mark (BOM).
            </para>
            <para>
            If the target file already exists, it is overwritten. It is not first truncated to zero bytes.
            </para>
            <para>
            If the target file does not exist, it is created.
            </para>
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISftpClient.WriteAllText(System.String,System.String,System.Text.Encoding)">
            <summary>
            Writes the specified string to the file using the specified encoding, and closes the file.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The string to write to the file.</param>
            <param name="encoding">The encoding to apply to the string.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPathNotFoundException">The specified path is invalid, or its directory was not found on the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
            <remarks>
            <para>
            If the target file already exists, it is overwritten. It is not first truncated to zero bytes.
            </para>
            <para>
            If the target file does not exist, it is created.
            </para>
            </remarks>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.ISubsystemSession">
            <summary>
            Base interface for SSH subsystem implementations.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.ISubsystemSession.OperationTimeout">
            <summary>
            Gets or set the number of seconds to wait for an operation to complete.
            </summary>
            <value>
            The number of seconds to wait for an operation to complete, or -1 to wait indefinitely.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.ISubsystemSession.IsOpen">
            <summary>
            Gets a value indicating whether this session is open.
            </summary>
            <value>
            <c>true</c> if this session is open; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISubsystemSession.Connect">
            <summary>
            Connects the subsystem using a new SSH channel session.
            </summary>
            <exception cref="T:System.InvalidOperationException">The session is already connected.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the session was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISubsystemSession.Disconnect">
            <summary>
            Disconnects the subsystem channel.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISubsystemSession.WaitOnHandle(System.Threading.WaitHandle,System.Int32)">
            <summary>
            Waits a specified time for a given <see cref="T:System.Threading.WaitHandle"/> to get signaled.
            </summary>
            <param name="waitHandle">The handle to wait for.</param>
            <param name="millisecondsTimeout">The number of millieseconds wait for <paramref name="waitHandle"/> to get signaled, or -1 to wait indefinitely.</param>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">The connection was closed by the server.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">The channel was closed.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshOperationTimeoutException">The handle did not get signaled within the specified timeout.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISubsystemSession.WaitOne(System.Threading.WaitHandle,System.Int32)">
            <summary>
            Blocks the current thread until the specified <see cref="T:System.Threading.WaitHandle"/> gets signaled, using a
            32-bit signed integer to specify the time interval in milliseconds.
            </summary>
            <param name="waitHandle">The handle to wait for.</param>
            <param name="millisecondsTimeout">To number of milliseconds to wait for <paramref name="waitHandle"/> to get signaled, or -1 to wait indefinitely.</param>
            <returns>
            <c>true</c> if <paramref name="waitHandle"/> received a signal within the specified timeout;
            otherwise, <c>false</c>.
            </returns>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">The connection was closed by the server.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">The channel was closed.</exception>
            <remarks>
            The blocking wait is also interrupted when either the established channel is closed, the current
            session is disconnected or an unexpected <see cref="T:System.Exception"/> occurred while processing a channel
            or session event.
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISubsystemSession.WaitAny(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32)">
            <summary>
            Blocks the current thread until the specified <see cref="T:System.Threading.WaitHandle"/> gets signaled, using a
            32-bit signed integer to specify the time interval in milliseconds.
            </summary>
            <param name="waitHandleA">The first handle to wait for.</param>
            <param name="waitHandleB">The second handle to wait for.</param>
            <param name="millisecondsTimeout">To number of milliseconds to wait for a <see cref="T:System.Threading.WaitHandle"/> to get signaled, or -1 to wait indefinitely.</param>
            <returns>
            <c>0</c> if <paramref name="waitHandleA"/> received a signal within the specified timeout and <c>1</c>
            if <paramref name="waitHandleB"/> received a signal within the specified timeout, or <see cref="F:System.Threading.WaitHandle.WaitTimeout"/>
            if no object satisfied the wait.
            </returns>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">The connection was closed by the server.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">The channel was closed.</exception>
            <remarks>
            <para>
            The blocking wait is also interrupted when either the established channel is closed, the current
            session is disconnected or an unexpected <see cref="T:System.Exception"/> occurred while processing a channel
            or session event.
            </para>
            <para>
            When both <paramref name="waitHandleA"/> and <paramref name="waitHandleB"/> are signaled during the call,
            then <c>0</c> is returned.
            </para>
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISubsystemSession.WaitAny(System.Threading.WaitHandle[],System.Int32)">
            <summary>
            Waits for any of the elements in the specified array to receive a signal, using a 32-bit signed
            integer to specify the time interval.
            </summary>
            <param name="waitHandles">A <see cref="T:System.Threading.WaitHandle"/> array - constructed using <see cref="M:KellermanSoftware.Renci.SshNet.ISubsystemSession.CreateWaitHandleArray(System.Threading.WaitHandle[])"/> - containing the objects to wait for.</param>
            <param name="millisecondsTimeout">To number of milliseconds to wait for a <see cref="T:System.Threading.WaitHandle"/> to get signaled, or -1 to wait indefinitely.</param>
            <returns>
            The array index of the first non-system object that satisfied the wait.
            </returns>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">The connection was closed by the server.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">The channel was closed.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshOperationTimeoutException">No object satified the wait and a time interval equivalent to <paramref name="millisecondsTimeout"/> has passed.</exception>
            <remarks>
            For the return value, the index of the first non-system object is considered to be zero.
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISubsystemSession.CreateWaitHandleArray(System.Threading.WaitHandle[])">
            <summary>
            Creates a <see cref="T:System.Threading.WaitHandle"/> array that is composed of system objects and the specified
            elements.
            </summary>
            <param name="waitHandles">A <see cref="T:System.Threading.WaitHandle"/> array containing the objects to wait for.</param>
            <returns>
            A <see cref="T:System.Threading.WaitHandle"/> array that is composed of system objects and the specified elements.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ISubsystemSession.CreateWaitHandleArray(System.Threading.WaitHandle,System.Threading.WaitHandle)">
            <summary>
            Creates a <see cref="T:System.Threading.WaitHandle"/> array that is composed of system objects and the specified
            elements.
            </summary>
            <param name="waitHandle1">The first <see cref="T:System.Threading.WaitHandle"/> to wait for.</param>
            <param name="waitHandle2">The second <see cref="T:System.Threading.WaitHandle"/> to wait for.</param>
            <returns>
            A <see cref="T:System.Threading.WaitHandle"/> array that is composed of system objects and the specified elements.
            </returns>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.KeyboardInteractiveAuthenticationMethod">
            <summary>
            Provides functionality to perform keyboard interactive authentication.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.KeyboardInteractiveAuthenticationMethod.Name">
            <summary>
            Gets authentication method name
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.KeyboardInteractiveAuthenticationMethod.AuthenticationPrompt">
            <summary>
            Occurs when server prompts for more authentication information.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.KeyboardInteractiveAuthenticationMethod.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.KeyboardInteractiveAuthenticationMethod"/> class.
            </summary>
            <param name="username">The username.</param>
            <exception cref="T:System.ArgumentException"><paramref name="username"/> is whitespace or <c>null</c>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.KeyboardInteractiveAuthenticationMethod.Authenticate(KellermanSoftware.Renci.SshNet.Session)">
            <summary>
            Authenticates the specified session.
            </summary>
            <param name="session">The session to authenticate.</param>
            <returns>Result of authentication  process.</returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.KeyboardInteractiveAuthenticationMethod.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.KeyboardInteractiveAuthenticationMethod.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.KeyboardInteractiveAuthenticationMethod.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:KellermanSoftware.Renci.SshNet.KeyboardInteractiveAuthenticationMethod"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.KeyboardInteractiveConnectionInfo">
            <summary>
            Provides connection information when keyboard interactive authentication method is used
            </summary>
            <example>
                <code source="..\..\src\Renci.SshNet.Tests\Classes\KeyboardInteractiveConnectionInfoTest.cs" region="Example KeyboardInteractiveConnectionInfo AuthenticationPrompt" language="C#" title="Connect using interactive method" />
            </example>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.KeyboardInteractiveConnectionInfo.AuthenticationPrompt">
            <summary>
            Occurs when server prompts for more authentication information.
            </summary>
            <example>
                <code source="..\..\src\Renci.SshNet.Tests\Classes\KeyboardInteractiveConnectionInfoTest.cs" region="Example KeyboardInteractiveConnectionInfo AuthenticationPrompt" language="C#" title="Connect using interactive method" />
            </example>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.KeyboardInteractiveConnectionInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.KeyboardInteractiveConnectionInfo"/> class.
            </summary>
            <param name="host">The host.</param>
            <param name="username">The username.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.KeyboardInteractiveConnectionInfo.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.KeyboardInteractiveConnectionInfo"/> class.
            </summary>
            <param name="host">The host.</param>
            <param name="port">The port.</param>
            <param name="username">The username.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.KeyboardInteractiveConnectionInfo.#ctor(System.String,System.Int32,System.String,KellermanSoftware.Renci.SshNet.ProxyTypes,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.KeyboardInteractiveConnectionInfo"/> class.
            </summary>
            <param name="host">Connection host.</param>
            <param name="port">Connection port.</param>
            <param name="username">Connection username.</param>
            <param name="proxyType">Type of the proxy.</param>
            <param name="proxyHost">The proxy host.</param>
            <param name="proxyPort">The proxy port.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.KeyboardInteractiveConnectionInfo.#ctor(System.String,System.Int32,System.String,KellermanSoftware.Renci.SshNet.ProxyTypes,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.KeyboardInteractiveConnectionInfo"/> class.
            </summary>
            <param name="host">Connection host.</param>
            <param name="port">Connection port.</param>
            <param name="username">Connection username.</param>
            <param name="proxyType">Type of the proxy.</param>
            <param name="proxyHost">The proxy host.</param>
            <param name="proxyPort">The proxy port.</param>
            <param name="proxyUsername">The proxy username.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.KeyboardInteractiveConnectionInfo.#ctor(System.String,System.String,KellermanSoftware.Renci.SshNet.ProxyTypes,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.KeyboardInteractiveConnectionInfo"/> class.
            </summary>
            <param name="host">Connection host.</param>
            <param name="username">Connection username.</param>
            <param name="proxyType">Type of the proxy.</param>
            <param name="proxyHost">The proxy host.</param>
            <param name="proxyPort">The proxy port.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.KeyboardInteractiveConnectionInfo.#ctor(System.String,System.String,KellermanSoftware.Renci.SshNet.ProxyTypes,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.KeyboardInteractiveConnectionInfo"/> class.
            </summary>
            <param name="host">Connection host.</param>
            <param name="username">Connection username.</param>
            <param name="proxyType">Type of the proxy.</param>
            <param name="proxyHost">The proxy host.</param>
            <param name="proxyPort">The proxy port.</param>
            <param name="proxyUsername">The proxy username.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.KeyboardInteractiveConnectionInfo.#ctor(System.String,System.String,KellermanSoftware.Renci.SshNet.ProxyTypes,System.String,System.Int32,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.KeyboardInteractiveConnectionInfo"/> class.
            </summary>
            <param name="host">Connection host.</param>
            <param name="username">Connection username.</param>
            <param name="proxyType">Type of the proxy.</param>
            <param name="proxyHost">The proxy host.</param>
            <param name="proxyPort">The proxy port.</param>
            <param name="proxyUsername">The proxy username.</param>
            <param name="proxyPassword">The proxy password.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.KeyboardInteractiveConnectionInfo.#ctor(System.String,System.Int32,System.String,KellermanSoftware.Renci.SshNet.ProxyTypes,System.String,System.Int32,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.KeyboardInteractiveConnectionInfo"/> class.
            </summary>
            <param name="host">Connection host.</param>
            <param name="port">Connection port.</param>
            <param name="username">Connection username.</param>
            <param name="proxyType">Type of the proxy.</param>
            <param name="proxyHost">The proxy host.</param>
            <param name="proxyPort">The proxy port.</param>
            <param name="proxyUsername">The proxy username.</param>
            <param name="proxyPassword">The proxy password.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.KeyboardInteractiveConnectionInfo.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.KeyboardInteractiveConnectionInfo.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.KeyboardInteractiveConnectionInfo.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:KellermanSoftware.Renci.SshNet.KeyboardInteractiveConnectionInfo"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.MessageEventArgs`1">
            <summary>
            Provides data for message events.
            </summary>
            <typeparam name="T">Message type</typeparam>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.MessageEventArgs`1.Message">
            <summary>
            Gets the message.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.MessageEventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.MessageEventArgs`1"/> class.
            </summary>
            <param name="message">The message.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="message"/> is <c>null</c>.</exception>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Messages.Authentication.BannerMessage">
            <summary>
            Represents SSH_MSG_USERAUTH_BANNER message.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Authentication.BannerMessage.Message">
            <summary>
            Gets banner message.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Authentication.BannerMessage.Language">
            <summary>
            Gets banner language.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Authentication.BannerMessage.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Authentication.BannerMessage.LoadData">
            <summary>
            Called when type specific data need to be loaded.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Authentication.BannerMessage.SaveData">
            <summary>
            Called when type specific data need to be saved.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Messages.Authentication.FailureMessage">
            <summary>
            Represents SSH_MSG_USERAUTH_FAILURE message.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Authentication.FailureMessage.AllowedAuthentications">
            <summary>
            Gets or sets the allowed authentications if available.
            </summary>
            <value>
            The allowed authentications.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Authentication.FailureMessage.Message">
            <summary>
            Gets failure message.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Authentication.FailureMessage.PartialSuccess">
            <summary>
            Gets a value indicating whether authentication is partially successful.
            </summary>
            <value>
              <c>true</c> if partially successful; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Authentication.FailureMessage.LoadData">
            <summary>
            Called when type specific data need to be loaded.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Authentication.FailureMessage.SaveData">
            <summary>
            Called when type specific data need to be saved.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Messages.Authentication.InformationRequestMessage">
            <summary>
            Represents SSH_MSG_USERAUTH_INFO_REQUEST message.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Authentication.InformationRequestMessage.Name">
            <summary>
            Gets information request name.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Authentication.InformationRequestMessage.Instruction">
            <summary>
            Gets information request instruction.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Authentication.InformationRequestMessage.Language">
            <summary>
            Gets information request language.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Authentication.InformationRequestMessage.Prompts">
            <summary>
            Gets information request prompts.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Authentication.InformationRequestMessage.LoadData">
            <summary>
            Called when type specific data need to be loaded.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Authentication.InformationRequestMessage.SaveData">
            <summary>
            Called when type specific data need to be saved.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Messages.Authentication.InformationResponseMessage">
            <summary>
            Represents SSH_MSG_USERAUTH_INFO_RESPONSE message.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Authentication.InformationResponseMessage.Responses">
            <summary>
            Gets authentication responses.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Authentication.InformationResponseMessage.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            <c>-1</c> to indicate that the size of the message cannot be determined,
            or is too costly to calculate.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Authentication.InformationResponseMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Authentication.InformationResponseMessage"/> class.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Authentication.InformationResponseMessage.LoadData">
            <summary>
            Called when type specific data need to be loaded.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Authentication.InformationResponseMessage.SaveData">
            <summary>
            Called when type specific data need to be saved.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Messages.Authentication.PasswordChangeRequiredMessage">
            <summary>
            Represents SSH_MSG_USERAUTH_PASSWD_CHANGEREQ message.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Authentication.PasswordChangeRequiredMessage.Message">
            <summary>
            Gets password change request message as UTF-8 encoded byte array.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Authentication.PasswordChangeRequiredMessage.Language">
            <summary>
            Gets message language as UTF-8 encoded byte array.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Authentication.PasswordChangeRequiredMessage.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Authentication.PasswordChangeRequiredMessage.LoadData">
            <summary>
            Called when type specific data need to be loaded.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Authentication.PasswordChangeRequiredMessage.SaveData">
            <summary>
            Called when type specific data need to be saved.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Messages.Authentication.PublicKeyMessage">
            <summary>
            Represents SSH_MSG_USERAUTH_PK_OK message.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Authentication.PublicKeyMessage.PublicKeyAlgorithmName">
            <summary>
            Gets the name of the public key algorithm as ASCII encoded byte array.
            </summary>
            <value>
            The name of the public key algorithm.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Authentication.PublicKeyMessage.PublicKeyData">
            <summary>
            Gets the public key data.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Authentication.PublicKeyMessage.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Authentication.PublicKeyMessage.LoadData">
            <summary>
            Called when type specific data need to be loaded.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Authentication.PublicKeyMessage.SaveData">
            <summary>
            Called when type specific data need to be saved.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Messages.Authentication.RequestMessage">
            <summary>
            Represents SSH_MSG_USERAUTH_REQUEST message. Server as a base message for other user authentication requests.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Messages.Authentication.RequestMessage.AuthenticationMessageCode">
            <summary>
            Returns the authentication message code for <c>SSH_MSG_USERAUTH_REQUEST</c>.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Authentication.RequestMessage.Username">
            <summary>
            Gets authentication username as UTF-8 encoded byte array.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Authentication.RequestMessage.ServiceName">
            <summary>
            Gets the name of the service as ASCII encoded byte array.
            </summary>
            <value>
            The name of the service.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Authentication.RequestMessage.MethodName">
            <summary>
            Gets the name of the authentication method.
            </summary>
            <value>
            The name of the method.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Authentication.RequestMessage.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Authentication.RequestMessage.#ctor(KellermanSoftware.Renci.SshNet.Messages.ServiceName,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Authentication.RequestMessage"/> class.
            </summary>
            <param name="serviceName">Name of the service.</param>
            <param name="username">Authentication username.</param>
            <param name="methodName">The name of the authentication method.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Authentication.RequestMessage.LoadData">
            <summary>
            Called when type specific data need to be loaded.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Authentication.RequestMessage.SaveData">
            <summary>
            Called when type specific data need to be saved.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Messages.Authentication.RequestMessageHost">
            <summary>
            Represents "hostbased" SSH_MSG_USERAUTH_REQUEST message.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Authentication.RequestMessageHost.PublicKeyAlgorithm">
            <summary>
            Gets the public key algorithm for host key as ASCII encoded byte array.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Authentication.RequestMessageHost.PublicHostKey">
            <summary>
            Gets or sets the public host key and certificates for client host.
            </summary>
            <value>
            The public host key.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Authentication.RequestMessageHost.ClientHostName">
            <summary>
            Gets or sets the name of the client host as ASCII encoded byte array.
            </summary>
            <value>
            The name of the client host.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Authentication.RequestMessageHost.ClientUsername">
            <summary>
            Gets or sets the client username on the client host as UTF-8 encoded byte array.
            </summary>
            <value>
            The client username.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Authentication.RequestMessageHost.Signature">
            <summary>
            Gets or sets the signature.
            </summary>
            <value>
            The signature.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Authentication.RequestMessageHost.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Authentication.RequestMessageHost.#ctor(KellermanSoftware.Renci.SshNet.Messages.ServiceName,System.String,System.String,System.Byte[],System.String,System.String,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Authentication.RequestMessageHost"/> class.
            </summary>
            <param name="serviceName">Name of the service.</param>
            <param name="username">Authentication username.</param>
            <param name="publicKeyAlgorithm">The public key algorithm.</param>
            <param name="publicHostKey">The public host key.</param>
            <param name="clientHostName">Name of the client host.</param>
            <param name="clientUsername">The client username.</param>
            <param name="signature">The signature.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Authentication.RequestMessageHost.SaveData">
            <summary>
            Called when type specific data need to be saved.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Messages.Authentication.RequestMessageKeyboardInteractive">
            <summary>
            Represents "keyboard-interactive" SSH_MSG_USERAUTH_REQUEST message.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Authentication.RequestMessageKeyboardInteractive.Language">
            <summary>
            Gets message language.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Authentication.RequestMessageKeyboardInteractive.SubMethods">
            <summary>
            Gets authentication sub methods.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Authentication.RequestMessageKeyboardInteractive.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Authentication.RequestMessageKeyboardInteractive.#ctor(KellermanSoftware.Renci.SshNet.Messages.ServiceName,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Authentication.RequestMessageKeyboardInteractive"/> class.
            </summary>
            <param name="serviceName">Name of the service.</param>
            <param name="username">Authentication username.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Authentication.RequestMessageKeyboardInteractive.SaveData">
            <summary>
            Called when type specific data need to be saved.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Messages.Authentication.RequestMessageNone">
            <summary>
            Represents "none" SSH_MSG_USERAUTH_REQUEST message.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Authentication.RequestMessageNone.#ctor(KellermanSoftware.Renci.SshNet.Messages.ServiceName,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Authentication.RequestMessagePassword"/> class.
            </summary>
            <param name="serviceName">Name of the service.</param>
            <param name="username">Authentication username.</param>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Messages.Authentication.RequestMessagePassword">
            <summary>
            Represents "password" SSH_MSG_USERAUTH_REQUEST message.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Authentication.RequestMessagePassword.Password">
            <summary>
            Gets authentication password.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Authentication.RequestMessagePassword.NewPassword">
            <summary>
            Gets new authentication password.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Authentication.RequestMessagePassword.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Authentication.RequestMessagePassword.#ctor(KellermanSoftware.Renci.SshNet.Messages.ServiceName,System.String,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Authentication.RequestMessagePassword"/> class.
            </summary>
            <param name="serviceName">Name of the service.</param>
            <param name="username">Authentication username.</param>
            <param name="password">Authentication password.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Authentication.RequestMessagePassword.#ctor(KellermanSoftware.Renci.SshNet.Messages.ServiceName,System.String,System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Authentication.RequestMessagePassword"/> class.
            </summary>
            <param name="serviceName">Name of the service.</param>
            <param name="username">Authentication username.</param>
            <param name="password">Authentication password.</param>
            <param name="newPassword">New authentication password.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Authentication.RequestMessagePassword.SaveData">
            <summary>
            Called when type specific data need to be saved.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Messages.Authentication.RequestMessagePublicKey">
            <summary>
            Represents "publickey" SSH_MSG_USERAUTH_REQUEST message.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Authentication.RequestMessagePublicKey.PublicKeyAlgorithmName">
            <summary>
            Gets the name of the public key algorithm as ASCII encoded byte array.
            </summary>
            <value>
            The name of the public key algorithm.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Authentication.RequestMessagePublicKey.PublicKeyData">
            <summary>
            Gets the public key data.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Authentication.RequestMessagePublicKey.Signature">
            <summary>
            Gets or sets public key signature.
            </summary>
            <value>
            The signature.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Authentication.RequestMessagePublicKey.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Authentication.RequestMessagePublicKey.#ctor(KellermanSoftware.Renci.SshNet.Messages.ServiceName,System.String,System.String,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Authentication.RequestMessagePublicKey"/> class.
            </summary>
            <param name="serviceName">Name of the service.</param>
            <param name="username">Authentication username.</param>
            <param name="keyAlgorithmName">Name of private key algorithm.</param>
            <param name="keyData">Private key data.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Authentication.RequestMessagePublicKey.#ctor(KellermanSoftware.Renci.SshNet.Messages.ServiceName,System.String,System.String,System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Authentication.RequestMessagePublicKey"/> class.
            </summary>
            <param name="serviceName">Name of the service.</param>
            <param name="username">Authentication username.</param>
            <param name="keyAlgorithmName">Name of private key algorithm.</param>
            <param name="keyData">Private key data.</param>
            <param name="signature">Private key signature.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Authentication.RequestMessagePublicKey.SaveData">
            <summary>
            Called when type specific data need to be saved.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Messages.Authentication.SuccessMessage">
            <summary>
            Represents SSH_MSG_USERAUTH_SUCCESS message.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Authentication.SuccessMessage.LoadData">
            <summary>
            Called when type specific data need to be loaded.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Authentication.SuccessMessage.SaveData">
            <summary>
            Called when type specific data need to be saved.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.CancelTcpIpForwardGlobalRequestMessage.AddressToBind">
            <summary>
            Gets the address to bind to.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.CancelTcpIpForwardGlobalRequestMessage.PortToBind">
            <summary>
            Gets port number to bind to.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.CancelTcpIpForwardGlobalRequestMessage.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.CancelTcpIpForwardGlobalRequestMessage.LoadData">
            <summary>
            Called when type specific data need to be loaded.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.CancelTcpIpForwardGlobalRequestMessage.SaveData">
            <summary>
            Called when type specific data need to be saved.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelCloseMessage">
            <summary>
            Represents SSH_MSG_CHANNEL_CLOSE message.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelCloseMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelCloseMessage"/> class.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelCloseMessage.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelCloseMessage"/> class.
            </summary>
            <param name="localChannelNumber">The local channel number.</param>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelDataMessage">
            <summary>
            Represents SSH_MSG_CHANNEL_DATA message.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelDataMessage.Data">
            <summary>
            Gets or sets message data.
            </summary>
            <value>
            The data.
            </value>
            <remarks>
            The actual data to read or write depends on the <see cref="P:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelDataMessage.Offset"/> and <see cref="P:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelDataMessage.Size"/>.
            </remarks>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelDataMessage.Offset">
            <summary>
            Gets the zero-based offset in <see cref="P:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelDataMessage.Data"/> at which the data begins.
            </summary>
            <value>
            The zero-based offset in <see cref="P:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelDataMessage.Data"/> at which the data begins.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelDataMessage.Size">
            <summary>
            Gets the number of bytes of <see cref="P:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelDataMessage.Data"/> to read or write.
            </summary>
            <value>
            The number of bytes of <see cref="P:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelDataMessage.Data"/> to read or write.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelDataMessage.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelDataMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelDataMessage"/> class.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelDataMessage.#ctor(System.UInt32,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelDataMessage"/> class.
            </summary>
            <param name="localChannelNumber">The local channel number.</param>
            <param name="data">Message data.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelDataMessage.#ctor(System.UInt32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelDataMessage"/> class.
            </summary>
            <param name="localChannelNumber">The local channel number.</param>
            <param name="data">The message data.</param>
            <param name="offset">The zero-based byte offset in <paramref name="data"/> at which to begin reading or writing data from.</param>
            <param name="size">The number of bytes of <paramref name="data"/> to read or write.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelDataMessage.LoadData">
            <summary>
            Loads the data.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelDataMessage.SaveData">
            <summary>
            Saves the data.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelEofMessage">
            <summary>
            Represents SSH_MSG_CHANNEL_EOF message.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelEofMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelEofMessage"/> class.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelEofMessage.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelEofMessage"/> class.
            </summary>
            <param name="localChannelNumber">The local channel number.</param>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelExtendedDataMessage">
            <summary>
            Represents SSH_MSG_CHANNEL_EXTENDED_DATA message.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelExtendedDataMessage.DataTypeCode">
            <summary>
            Gets message data type code.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelExtendedDataMessage.Data">
            <summary>
            Gets message data.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelExtendedDataMessage.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelExtendedDataMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelExtendedDataMessage"/> class.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelExtendedDataMessage.#ctor(System.UInt32,System.UInt32,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelExtendedDataMessage"/> class.
            </summary>
            <param name="localChannelNumber">The local channel number.</param>
            <param name="dataTypeCode">The message data type code.</param>
            <param name="data">The message data.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelExtendedDataMessage.LoadData">
            <summary>
            Loads the data.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelExtendedDataMessage.SaveData">
            <summary>
            Saves the data.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelFailureMessage">
            <summary>
            Represents SSH_MSG_CHANNEL_FAILURE message.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelFailureMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelFailureMessage"/> class.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelFailureMessage.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelFailureMessage"/> class.
            </summary>
            <param name="localChannelNumber">The local channel number.</param>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelMessage">
            <summary>
            Base class for all channel specific SSH messages.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelMessage.LocalChannelNumber">
            <summary>
            Gets or sets the local channel number.
            </summary>
            <value>
            The local channel number.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelMessage.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelMessage.#ctor">
            <summary>
            Initializes a new <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelMessage"/>.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelMessage.#ctor(System.UInt32)">
            <summary>
            Initializes a new <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelMessage"/> with the specified local channel number.
            </summary>
            <param name="localChannelNumber">The local channel number.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelMessage.LoadData">
            <summary>
            Called when type specific data need to be loaded.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelMessage.SaveData">
            <summary>
            Called when type specific data need to be saved.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelMessage.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelOpenConfirmationMessage">
            <summary>
            Represents SSH_MSG_CHANNEL_OPEN_CONFIRMATION message.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelOpenConfirmationMessage.RemoteChannelNumber">
            <summary>
            Gets the remote channel number.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelOpenConfirmationMessage.InitialWindowSize">
            <summary>
            Gets the initial size of the window.
            </summary>
            <value>
            The initial size of the window.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelOpenConfirmationMessage.MaximumPacketSize">
            <summary>
            Gets the maximum size of the packet.
            </summary>
            <value>
            The maximum size of the packet.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelOpenConfirmationMessage.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelOpenConfirmationMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelOpenConfirmationMessage"/> class.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelOpenConfirmationMessage.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelOpenConfirmationMessage"/> class.
            </summary>
            <param name="localChannelNumber">The local channel number.</param>
            <param name="initialWindowSize">Initial size of the window.</param>
            <param name="maximumPacketSize">Maximum size of the packet.</param>
            <param name="remoteChannelNumber">The remote channel number.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelOpenConfirmationMessage.LoadData">
            <summary>
            Called when type specific data need to be loaded.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelOpenConfirmationMessage.SaveData">
            <summary>
            Called when type specific data need to be saved.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelOpenFailureMessage">
            <summary>
            Represents SSH_MSG_CHANNEL_OPEN_FAILURE message.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelOpenFailureMessage.ReasonCode">
            <summary>
            Gets failure reason code.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelOpenFailureMessage.Description">
            <summary>
            Gets description for failure.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelOpenFailureMessage.Language">
            <summary>
            Gets message language.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelOpenFailureMessage.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelOpenFailureMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelOpenFailureMessage"/> class.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelOpenFailureMessage.#ctor(System.UInt32,System.String,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelOpenFailureMessage"/> class.
            </summary>
            <param name="localChannelNumber">The local channel number.</param>
            <param name="description">The description.</param>
            <param name="reasonCode">The reason code.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelOpenFailureMessage.#ctor(System.UInt32,System.String,System.UInt32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelOpenFailureMessage"/> class.
            </summary>
            <param name="localChannelNumber">The local channel number.</param>
            <param name="description">The description.</param>
            <param name="reasonCode">The reason code.</param>
            <param name="language">The language (RFC3066).</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelOpenFailureMessage.LoadData">
            <summary>
            Called when type specific data need to be loaded.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelOpenFailureMessage.SaveData">
            <summary>
            Called when type specific data need to be saved.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelOpenFailureReasons">
            <summary>
            List channel open failure reasons defined by the protocol.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelOpenFailureReasons.AdministativelyProhibited">
            <summary>
            SSH_OPEN_ADMINISTRATIVELY_PROHIBITED
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelOpenFailureReasons.ConnectFailed">
            <summary>
            SSH_OPEN_CONNECT_FAILED
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelOpenFailureReasons.UnknownChannelType">
            <summary>
            SSH_OPEN_UNKNOWN_CHANNEL_TYPE
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelOpenFailureReasons.ResourceShortage">
            <summary>
            SSH_OPEN_RESOURCE_SHORTAGE
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelOpenInfo">
            <summary>
            Base class for open channel messages
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelOpenInfo.ChannelType">
            <summary>
            Gets the type of the channel to open.
            </summary>
            <value>
            The type of the channel to open.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelOpenInfo.LoadData">
            <summary>
            Called when type specific data need to be loaded.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelOpenInfo.SaveData">
            <summary>
            Called when type specific data need to be saved.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelOpenMessage">
            <summary>
            Represents SSH_MSG_CHANNEL_OPEN message.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelOpenMessage.ChannelType">
            <summary>
            Gets the type of the channel as ASCII encoded byte array.
            </summary>
            <value>
            The type of the channel.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelOpenMessage.LocalChannelNumber">
            <summary>
            Gets or sets the local channel number.
            </summary>
            <value>
            The local channel number.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelOpenMessage.InitialWindowSize">
            <summary>
            Gets the initial size of the window.
            </summary>
            <value>
            The initial size of the window.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelOpenMessage.MaximumPacketSize">
            <summary>
            Gets the maximum size of the packet.
            </summary>
            <value>
            The maximum size of the packet.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelOpenMessage.Info">
            <summary>
            Gets channel specific open information.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelOpenMessage.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelOpenMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelOpenMessage"/> class.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelOpenMessage.#ctor(System.UInt32,System.UInt32,System.UInt32,KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelOpenInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelOpenMessage"/> class.
            </summary>
            <param name="channelNumber">The channel number.</param>
            <param name="initialWindowSize">Initial size of the window.</param>
            <param name="maximumPacketSize">Maximum size of the packet.</param>
            <param name="info">Information specific to the type of the channel to open.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/> is <c>null</c>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelOpenMessage.LoadData">
            <summary>
            Called when type specific data need to be loaded.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelOpenMessage.SaveData">
            <summary>
            Called when type specific data need to be saved.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Messages.Connection.DirectTcpipChannelInfo">
            <summary>
            Used to open "direct-tcpip" channel type
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Messages.Connection.DirectTcpipChannelInfo.NAME">
            <summary>
            Specifies channel open type
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.DirectTcpipChannelInfo.ChannelType">
            <summary>
            Gets the type of the channel to open.
            </summary>
            <value>
            The type of the channel to open.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.DirectTcpipChannelInfo.HostToConnect">
            <summary>
            Gets the host to connect.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.DirectTcpipChannelInfo.PortToConnect">
            <summary>
            Gets the port to connect.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.DirectTcpipChannelInfo.OriginatorAddress">
            <summary>
            Gets the originator address.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.DirectTcpipChannelInfo.OriginatorPort">
            <summary>
            Gets the originator port.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.DirectTcpipChannelInfo.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.DirectTcpipChannelInfo.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.DirectTcpipChannelInfo"/> class from the
            specified data.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="data"/> is <c>null</c>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.DirectTcpipChannelInfo.#ctor(System.String,System.UInt32,System.String,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.DirectTcpipChannelInfo"/> class.
            </summary>
            <param name="hostToConnect">The host to connect.</param>
            <param name="portToConnect">The port to connect.</param>
            <param name="originatorAddress">The originator address.</param>
            <param name="originatorPort">The originator port.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.DirectTcpipChannelInfo.LoadData">
            <summary>
            Called when type specific data need to be loaded.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.DirectTcpipChannelInfo.SaveData">
            <summary>
            Called when type specific data need to be saved.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ForwardedTcpipChannelInfo">
            <summary>
            Used to open "forwarded-tcpip" channel type
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.ForwardedTcpipChannelInfo.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ForwardedTcpipChannelInfo"/> class from the
            specified data.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="data"/> is <c>null</c>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.ForwardedTcpipChannelInfo.#ctor(System.String,System.UInt32,System.String,System.UInt32)">
            <summary>
            Initializes a new <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ForwardedTcpipChannelInfo"/> instance with the specified connector
            address and port, and originator address and port.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Messages.Connection.ForwardedTcpipChannelInfo.NAME">
            <summary>
            Specifies channel open type
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.ForwardedTcpipChannelInfo.ChannelType">
            <summary>
            Gets the type of the channel to open.
            </summary>
            <value>
            The type of the channel to open.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.ForwardedTcpipChannelInfo.ConnectedAddress">
            <summary>
            Gets the connected address.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.ForwardedTcpipChannelInfo.ConnectedPort">
            <summary>
            Gets the connected port.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.ForwardedTcpipChannelInfo.OriginatorAddress">
            <summary>
            Gets the originator address.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.ForwardedTcpipChannelInfo.OriginatorPort">
            <summary>
            Gets the originator port.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.ForwardedTcpipChannelInfo.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.ForwardedTcpipChannelInfo.LoadData">
            <summary>
            Called when type specific data need to be loaded.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.ForwardedTcpipChannelInfo.SaveData">
            <summary>
            Called when type specific data need to be saved.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Messages.Connection.SessionChannelOpenInfo">
            <summary>
            Used to open "session" channel type
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Messages.Connection.SessionChannelOpenInfo.Name">
            <summary>
            Specifies channel open type
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.SessionChannelOpenInfo.ChannelType">
            <summary>
            Gets the type of the channel to open.
            </summary>
            <value>
            The type of the channel to open.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.SessionChannelOpenInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.SessionChannelOpenInfo"/> class.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.SessionChannelOpenInfo.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.SessionChannelOpenInfo"/> class from the
            specified data.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="data"/> is <c>null</c>.</exception>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Messages.Connection.X11ChannelOpenInfo">
            <summary>
            Used to open "x11" channel type
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Messages.Connection.X11ChannelOpenInfo.Name">
            <summary>
            Specifies channel open type
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.X11ChannelOpenInfo.ChannelType">
            <summary>
            Gets the type of the channel to open.
            </summary>
            <value>
            The type of the channel to open.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.X11ChannelOpenInfo.OriginatorAddress">
            <summary>
            Gets the originator address.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.X11ChannelOpenInfo.OriginatorPort">
            <summary>
            Gets the originator port.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.X11ChannelOpenInfo.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.X11ChannelOpenInfo.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.X11ChannelOpenInfo"/> class from the
            specified data.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="data"/> is <c>null</c>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.X11ChannelOpenInfo.#ctor(System.String,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.X11ChannelOpenInfo"/> class with the
            specified originator address and port.
            </summary>
            <param name="originatorAddress">The originator address.</param>
            <param name="originatorPort">The originator port.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.X11ChannelOpenInfo.LoadData">
            <summary>
            Called when type specific data need to be loaded.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.X11ChannelOpenInfo.SaveData">
            <summary>
            Called when type specific data need to be saved.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Messages.Connection.BreakRequestInfo">
            <summary>
            Represents "break" type channel request information
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Messages.Connection.BreakRequestInfo.Name">
            <summary>
            Channel request name
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.BreakRequestInfo.RequestName">
            <summary>
            Gets the name of the request.
            </summary>
            <value>
            The name of the request.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.BreakRequestInfo.BreakLength">
            <summary>
            Gets break length in milliseconds.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.BreakRequestInfo.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.BreakRequestInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ExecRequestInfo"/> class.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.BreakRequestInfo.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ExecRequestInfo"/> class.
            </summary>
            <param name="breakLength">Length of the break.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.BreakRequestInfo.LoadData">
            <summary>
            Called when type specific data need to be loaded.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.BreakRequestInfo.SaveData">
            <summary>
            Called when type specific data need to be saved.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelRequestMessage">
            <summary>
            Represents SSH_MSG_CHANNEL_REQUEST message.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelRequestMessage.RequestName">
            <summary>
            Gets the name of the request.
            </summary>
            <value>
            The name of the request.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelRequestMessage.RequestData">
            <summary>
            Gets channel request data.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelRequestMessage.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelRequestMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelRequestMessage"/> class.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelRequestMessage.#ctor(System.UInt32,KellermanSoftware.Renci.SshNet.Messages.Connection.RequestInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelRequestMessage"/> class.
            </summary>
            <param name="localChannelNumber">The local channel number.</param>
            <param name="info">The info.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelRequestMessage.LoadData">
            <summary>
            Called when type specific data need to be loaded.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelRequestMessage.SaveData">
            <summary>
            Called when type specific data need to be saved.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Messages.Connection.EndOfWriteRequestInfo">
            <summary>
            Represents "eow@openssh.com" type channel request information
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Messages.Connection.EndOfWriteRequestInfo.Name">
            <summary>
            Channel request name
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.EndOfWriteRequestInfo.RequestName">
            <summary>
            Gets the name of the request.
            </summary>
            <value>
            The name of the request.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.EndOfWriteRequestInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.EndOfWriteRequestInfo"/> class.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Messages.Connection.EnvironmentVariableRequestInfo">
            <summary>
            Represents "env" type channel request information
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Messages.Connection.EnvironmentVariableRequestInfo.Name">
            <summary>
            Channel request name
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.EnvironmentVariableRequestInfo.RequestName">
            <summary>
            Gets the name of the request.
            </summary>
            <value>
            The name of the request.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.EnvironmentVariableRequestInfo.VariableName">
            <summary>
            Gets or sets the name of the variable.
            </summary>
            <value>
            The name of the variable.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.EnvironmentVariableRequestInfo.VariableValue">
            <summary>
            Gets or sets the variable value.
            </summary>
            <value>
            The variable value.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.EnvironmentVariableRequestInfo.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.EnvironmentVariableRequestInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.EnvironmentVariableRequestInfo"/> class.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.EnvironmentVariableRequestInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.EnvironmentVariableRequestInfo"/> class.
            </summary>
            <param name="variableName">Name of the variable.</param>
            <param name="variableValue">The variable value.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.EnvironmentVariableRequestInfo.LoadData">
            <summary>
            Called when type specific data need to be loaded.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.EnvironmentVariableRequestInfo.SaveData">
            <summary>
            Called when type specific data need to be saved.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ExecRequestInfo">
            <summary>
            Represents "exec" type channel request information
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Messages.Connection.ExecRequestInfo.Name">
            <summary>
            Channel request name
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.ExecRequestInfo.RequestName">
            <summary>
            Gets the name of the request.
            </summary>
            <value>
            The name of the request.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.ExecRequestInfo.Command">
            <summary>
            Gets command to execute.
            </summary>
            <value>
            The command.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.ExecRequestInfo.Encoding">
            <summary>
            Gets the encoding.
            </summary>
            <value>
            The encoding.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.ExecRequestInfo.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.ExecRequestInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ExecRequestInfo"/> class.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.ExecRequestInfo.#ctor(System.String,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ExecRequestInfo"/> class.
            </summary>
            <param name="command">The command.</param>
            <param name="encoding">The character encoding to use.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="command"/> or <paramref name="encoding"/> is <c>null</c>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.ExecRequestInfo.LoadData">
            <summary>
            Called when type specific data need to be loaded.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.ExecRequestInfo.SaveData">
            <summary>
            Called when type specific data need to be saved.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ExitSignalRequestInfo">
            <summary>
            Represents "exit-signal" type channel request information
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Messages.Connection.ExitSignalRequestInfo.Name">
            <summary>
            Channel request name
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.ExitSignalRequestInfo.RequestName">
            <summary>
            Gets the name of the request.
            </summary>
            <value>
            The name of the request.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.ExitSignalRequestInfo.SignalName">
            <summary>
            Gets the name of the signal.
            </summary>
            <value>
            The name of the signal.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.ExitSignalRequestInfo.CoreDumped">
            <summary>
            Gets a value indicating whether core is dumped.
            </summary>
            <value>
              <c>true</c> if core is dumped; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.ExitSignalRequestInfo.ErrorMessage">
            <summary>
            Gets the error message.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.ExitSignalRequestInfo.Language">
            <summary>
            Gets message language.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.ExitSignalRequestInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ExitSignalRequestInfo"/> class.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.ExitSignalRequestInfo.#ctor(System.String,System.Boolean,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ExitSignalRequestInfo"/> class.
            </summary>
            <param name="signalName">Name of the signal.</param>
            <param name="coreDumped">if set to <c>true</c> then core is dumped.</param>
            <param name="errorMessage">The error message.</param>
            <param name="language">The language.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.ExitSignalRequestInfo.LoadData">
            <summary>
            Called when type specific data need to be loaded.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.ExitSignalRequestInfo.SaveData">
            <summary>
            Called when type specific data need to be saved.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ExitStatusRequestInfo">
            <summary>
            Represents "exit-status" type channel request information
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Messages.Connection.ExitStatusRequestInfo.Name">
            <summary>
            Channel request name.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.ExitStatusRequestInfo.RequestName">
            <summary>
            Gets the name of the request.
            </summary>
            <value>
            The name of the request.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.ExitStatusRequestInfo.ExitStatus">
            <summary>
            Gets the exit status number.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.ExitStatusRequestInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ExitStatusRequestInfo"/> class.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.ExitStatusRequestInfo.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ExitStatusRequestInfo"/> class.
            </summary>
            <param name="exitStatus">The exit status number.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.ExitStatusRequestInfo.LoadData">
            <summary>
            Called when type specific data need to be loaded.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.ExitStatusRequestInfo.SaveData">
            <summary>
            Called when type specific data need to be saved.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Messages.Connection.KeepAliveRequestInfo">
            <summary>
            Represents "keepalive@openssh.com" type channel request information
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Messages.Connection.KeepAliveRequestInfo.Name">
            <summary>
            Channel request name
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.KeepAliveRequestInfo.RequestName">
            <summary>
            Gets the name of the request.
            </summary>
            <value>
            The name of the request.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.KeepAliveRequestInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.EndOfWriteRequestInfo"/> class.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Messages.Connection.PseudoTerminalRequestInfo">
            <summary>
            Represents "pty-req" type channel request information
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Messages.Connection.PseudoTerminalRequestInfo.Name">
            <summary>
            Channel request name
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.PseudoTerminalRequestInfo.RequestName">
            <summary>
            Gets the name of the request.
            </summary>
            <value>
            The name of the request.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.PseudoTerminalRequestInfo.EnvironmentVariable">
            <summary>
            Gets or sets the value of the TERM environment variable (e.g., vt100).
            </summary>
            <value>
            The value of the TERM environment variable.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.PseudoTerminalRequestInfo.Columns">
            <summary>
            Gets or sets the terminal width in columns (e.g., 80).
            </summary>
            <value>
            The terminal width in columns.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.PseudoTerminalRequestInfo.Rows">
            <summary>
            Gets or sets the terminal width in rows (e.g., 24).
            </summary>
            <value>
            The terminal width in rows.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.PseudoTerminalRequestInfo.PixelWidth">
            <summary>
            Gets or sets the terminal width in pixels (e.g., 640).
            </summary>
            <value>
            The terminal width in pixels.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.PseudoTerminalRequestInfo.PixelHeight">
            <summary>
            Gets or sets the terminal height in pixels (e.g., 480).
            </summary>
            <value>
            The terminal height in pixels.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.PseudoTerminalRequestInfo.TerminalModeValues">
            <summary>
            Gets or sets the terminal mode.
            </summary>
            <value>
            The terminal mode.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.PseudoTerminalRequestInfo.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            <c>-1</c> to indicate that the size of the message cannot be determined,
            or is too costly to calculate.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.PseudoTerminalRequestInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.PseudoTerminalRequestInfo"/> class.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.PseudoTerminalRequestInfo.#ctor(System.String,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Collections.Generic.IDictionary{KellermanSoftware.Renci.SshNet.Common.TerminalModes,System.UInt32})">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.PseudoTerminalRequestInfo"/> class.
            </summary>
            <param name="environmentVariable">The <c>TERM</c> environment variable which a identifier for the text window’s capabilities.</param>
            <param name="columns">The terminal width in columns.</param>
            <param name="rows">The terminal width in rows.</param>
            <param name="width">The terminal height in pixels.</param>
            <param name="height">The terminal height in pixels.</param>
            <param name="terminalModeValues">The terminal mode values.</param>
            <remarks>
            <para>
            The <c>TERM</c> environment variable contains an identifier for the text window's capabilities.
            You can get a detailed list of these cababilities by using the ‘infocmp’ command.
            </para>
            <para>
            The column/row dimensions override the pixel dimensions(when nonzero). Pixel dimensions refer
            to the drawable area of the window.
            </para>
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.PseudoTerminalRequestInfo.SaveData">
            <summary>
            Called when type specific data need to be saved.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Messages.Connection.RequestInfo">
            <summary>
            Represents type specific information for channel request.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.RequestInfo.RequestName">
            <summary>
            Gets the name of the request.
            </summary>
            <value>
            The name of the request.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.RequestInfo.WantReply">
            <summary>
            Gets or sets a value indicating whether reply message is needed.
            </summary>
            <value>
              <c>true</c> if reply message is needed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.RequestInfo.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.RequestInfo.LoadData">
            <summary>
            Called when type specific data need to be loaded.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.RequestInfo.SaveData">
            <summary>
            Called when type specific data need to be saved.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ShellRequestInfo">
            <summary>
            Represents "shell" type channel request information
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Messages.Connection.ShellRequestInfo.Name">
            <summary>
            Channel request name
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.ShellRequestInfo.RequestName">
            <summary>
            Gets the name of the request.
            </summary>
            <value>
            The name of the request.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.ShellRequestInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ShellRequestInfo"/> class.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Messages.Connection.SignalRequestInfo">
            <summary>
            Represents "signal" type channel request information
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Messages.Connection.SignalRequestInfo.Name">
            <summary>
            Channel request name.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.SignalRequestInfo.RequestName">
            <summary>
            Gets the name of the request.
            </summary>
            <value>
            The name of the request.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.SignalRequestInfo.SignalName">
            <summary>
            Gets the name of the signal.
            </summary>
            <value>
            The name of the signal.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.SignalRequestInfo.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.SignalRequestInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.SignalRequestInfo"/> class.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.SignalRequestInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.SignalRequestInfo"/> class.
            </summary>
            <param name="signalName">Name of the signal.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.SignalRequestInfo.LoadData">
            <summary>
            Called when type specific data need to be loaded.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.SignalRequestInfo.SaveData">
            <summary>
            Called when type specific data need to be saved.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Messages.Connection.SubsystemRequestInfo">
            <summary>
            Represents "subsystem" type channel request information
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Messages.Connection.SubsystemRequestInfo.Name">
            <summary>
            Channel request name
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.SubsystemRequestInfo.RequestName">
            <summary>
            Gets the name of the request.
            </summary>
            <value>
            The name of the request.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.SubsystemRequestInfo.SubsystemName">
            <summary>
            Gets the name of the subsystem.
            </summary>
            <value>
            The name of the subsystem.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.SubsystemRequestInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.SubsystemRequestInfo"/> class.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.SubsystemRequestInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.SubsystemRequestInfo"/> class.
            </summary>
            <param name="subsystem">The subsystem.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.SubsystemRequestInfo.LoadData">
            <summary>
            Called when type specific data need to be loaded.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.SubsystemRequestInfo.SaveData">
            <summary>
            Called when type specific data need to be saved.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Messages.Connection.WindowChangeRequestInfo">
            <summary>
            Represents "window-change" type channel request information
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Messages.Connection.WindowChangeRequestInfo.Name">
            <summary>
            Channe request name
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.WindowChangeRequestInfo.RequestName">
            <summary>
            Gets the name of the request.
            </summary>
            <value>
            The name of the request.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.WindowChangeRequestInfo.Columns">
            <summary>
            Gets the columns.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.WindowChangeRequestInfo.Rows">
            <summary>
            Gets the rows.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.WindowChangeRequestInfo.Width">
            <summary>
            Gets the width.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.WindowChangeRequestInfo.Height">
            <summary>
            Gets the height.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.WindowChangeRequestInfo.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.WindowChangeRequestInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.WindowChangeRequestInfo"/> class.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.WindowChangeRequestInfo.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.WindowChangeRequestInfo"/> class.
            </summary>
            <param name="columns">The columns.</param>
            <param name="rows">The rows.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.WindowChangeRequestInfo.LoadData">
            <summary>
            Called when type specific data need to be loaded.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.WindowChangeRequestInfo.SaveData">
            <summary>
            Called when type specific data need to be saved.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Messages.Connection.X11ForwardingRequestInfo">
            <summary>
            Represents "x11-req" type channel request information
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Messages.Connection.X11ForwardingRequestInfo.Name">
            <summary>
            Channel request name
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.X11ForwardingRequestInfo.RequestName">
            <summary>
            Gets the name of the request.
            </summary>
            <value>
            The name of the request.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.X11ForwardingRequestInfo.IsSingleConnection">
            <summary>
            Gets or sets a value indicating whether it is a single connection.
            </summary>
            <value>
            	<c>true</c> if it is a single connection; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.X11ForwardingRequestInfo.AuthenticationProtocol">
            <summary>
            Gets or sets the authentication protocol.
            </summary>
            <value>
            The authentication protocol.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.X11ForwardingRequestInfo.AuthenticationCookie">
            <summary>
            Gets or sets the authentication cookie.
            </summary>
            <value>
            The authentication cookie.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.X11ForwardingRequestInfo.ScreenNumber">
            <summary>
            Gets or sets the screen number.
            </summary>
            <value>
            The screen number.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.X11ForwardingRequestInfo.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.X11ForwardingRequestInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.X11ForwardingRequestInfo"/> class.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.X11ForwardingRequestInfo.#ctor(System.Boolean,System.String,System.Byte[],System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.X11ForwardingRequestInfo"/> class.
            </summary>
            <param name="isSingleConnection">if set to <c>true</c> it is a single connection.</param>
            <param name="protocol">The protocol.</param>
            <param name="cookie">The cookie.</param>
            <param name="screenNumber">The screen number.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.X11ForwardingRequestInfo.LoadData">
            <summary>
            Called when type specific data need to be loaded.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.X11ForwardingRequestInfo.SaveData">
            <summary>
            Called when type specific data need to be saved.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Messages.Connection.XonXoffRequestInfo">
            <summary>
            Represents "xon-xoff" type channel request information
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Messages.Connection.XonXoffRequestInfo.Name">
            <summary>
            Channel request type
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.XonXoffRequestInfo.RequestName">
            <summary>
            Gets the name of the request.
            </summary>
            <value>
            The name of the request.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.XonXoffRequestInfo.ClientCanDo">
            <summary>
            Gets or sets a value indicating whether client can do.
            </summary>
            <value>
              <c>true</c> if client can do; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.XonXoffRequestInfo.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.XonXoffRequestInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.XonXoffRequestInfo"/> class.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.XonXoffRequestInfo.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.XonXoffRequestInfo"/> class.
            </summary>
            <param name="clientCanDo">if set to <c>true</c> [client can do].</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.XonXoffRequestInfo.LoadData">
            <summary>
            Called when type specific data need to be loaded.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.XonXoffRequestInfo.SaveData">
            <summary>
            Called when type specific data need to be saved.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelSuccessMessage">
            <summary>
            Represents SSH_MSG_CHANNEL_SUCCESS message.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelSuccessMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelSuccessMessage"/> class.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelSuccessMessage.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelSuccessMessage"/> class.
            </summary>
            <param name="localChannelNumber">The local channel number.</param>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelWindowAdjustMessage">
            <summary>
            Represents SSH_MSG_CHANNEL_SUCCESS message.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelWindowAdjustMessage.BytesToAdd">
            <summary>
            Gets number of bytes to add to the window.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelWindowAdjustMessage.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelWindowAdjustMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelWindowAdjustMessage"/> class.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelWindowAdjustMessage.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelWindowAdjustMessage"/> class.
            </summary>
            <param name="localChannelNumber">The local channel number.</param>
            <param name="bytesToAdd">The bytes to add.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelWindowAdjustMessage.LoadData">
            <summary>
            Called when type specific data need to be loaded.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelWindowAdjustMessage.SaveData">
            <summary>
            Called when type specific data need to be saved.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Messages.Connection.GlobalRequestMessage">
            <summary>
            Represents SSH_MSG_GLOBAL_REQUEST message.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.GlobalRequestMessage.RequestName">
            <summary>
            Gets the name of the request.
            </summary>
            <value>
            The name of the request.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.GlobalRequestMessage.WantReply">
            <summary>
            Gets a value indicating whether message reply should be sent..
            </summary>
            <value>
              <c>true</c> if message reply should be sent; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.GlobalRequestMessage.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.GlobalRequestMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.GlobalRequestMessage"/> class.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.GlobalRequestMessage.#ctor(System.Byte[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.GlobalRequestMessage"/> class.
            </summary>
            <param name="requestName">Name of the request.</param>
            <param name="wantReply">if set to <c>true</c> [want reply].</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.GlobalRequestMessage.LoadData">
            <summary>
            Called when type specific data need to be loaded.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.GlobalRequestMessage.SaveData">
            <summary>
            Called when type specific data need to be saved.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Messages.Connection.GlobalRequestName">
            <summary>
            Specifies supported request names.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Messages.Connection.GlobalRequestName.TcpIpForward">
            <summary>
            tcpip-forward
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Messages.Connection.GlobalRequestName.CancelTcpIpForward">
            <summary>
            cancel-tcpip-forward
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Messages.Connection.RequestFailureMessage">
            <summary>
            Represents SSH_MSG_REQUEST_FAILURE message.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.RequestFailureMessage.LoadData">
            <summary>
            Called when type specific data need to be loaded.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.RequestFailureMessage.SaveData">
            <summary>
            Called when type specific data need to be saved.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Messages.Connection.RequestSuccessMessage">
            <summary>
            Represents SSH_MSG_REQUEST_SUCCESS message.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.RequestSuccessMessage.BoundPort">
            <summary>
            Gets the bound port.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.RequestSuccessMessage.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.RequestSuccessMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.RequestSuccessMessage"/> class.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.RequestSuccessMessage.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.RequestSuccessMessage"/> class.
            </summary>
            <param name="boundPort">The bound port.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.RequestSuccessMessage.LoadData">
            <summary>
            Called when type specific data need to be loaded.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.RequestSuccessMessage.SaveData">
            <summary>
            Called when type specific data need to be saved.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.TcpIpForwardGlobalRequestMessage.AddressToBind">
            <summary>
            Gets the address to bind to.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.TcpIpForwardGlobalRequestMessage.PortToBind">
            <summary>
            Gets port number to bind to.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Connection.TcpIpForwardGlobalRequestMessage.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.TcpIpForwardGlobalRequestMessage.LoadData">
            <summary>
            Called when type specific data need to be loaded.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Connection.TcpIpForwardGlobalRequestMessage.SaveData">
            <summary>
            Called when type specific data need to be saved.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Messages.Message">
            <summary>
            Base class for all SSH protocol messages
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Message.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Message.WriteBytes(KellermanSoftware.Renci.SshNet.Common.SshDataStream)">
            <summary>
            Writes the message to the specified <see cref="T:KellermanSoftware.Renci.SshNet.Common.SshDataStream"/>.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Message.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Message.Process(KellermanSoftware.Renci.SshNet.Session)">
            <summary>
            Process the current message for the specified <see cref="T:KellermanSoftware.Renci.SshNet.Session"/>.
            </summary>
            <param name="session">The <see cref="T:KellermanSoftware.Renci.SshNet.Session"/> for which to process the current message.</param>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Messages.MessageAttribute">
            <summary>
            Indicates that a class represents SSH message. This class cannot be inherited.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.MessageAttribute.Name">
            <summary>
            Gets or sets message name as defined in RFC 4250.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.MessageAttribute.Number">
            <summary>
            Gets or sets message number as defined in RFC 4250.
            </summary>
            <value>
            The number.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.MessageAttribute.#ctor(System.String,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.MessageAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="number">The number.</param>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Messages.ServiceName">
            <summary>
            Specifies list of supported services
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Messages.ServiceName.UserAuthentication">
            <summary>
            ssh-userauth
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Messages.ServiceName.Connection">
            <summary>
            ssh-connection
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Messages.Transport.DebugMessage">
            <summary>
            Represents SSH_MSG_DEBUG message.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Transport.DebugMessage.IsAlwaysDisplay">
            <summary>
            Gets a value indicating whether the message to be always displayed.
            </summary>
            <value>
            	<c>true</c> if the message always to be displayed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Transport.DebugMessage.Message">
            <summary>
            Gets debug message.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Transport.DebugMessage.Language">
            <summary>
            Gets message language.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Transport.DebugMessage.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Transport.DebugMessage.LoadData">
            <summary>
            Called when type specific data need to be loaded.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Transport.DebugMessage.SaveData">
            <summary>
            Called when type specific data need to be saved.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Messages.Transport.DisconnectMessage">
            <summary>
            Represents SSH_MSG_DISCONNECT message.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Transport.DisconnectMessage.ReasonCode">
            <summary>
            Gets disconnect reason code.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Transport.DisconnectMessage.Description">
            <summary>
            Gets disconnect description.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Transport.DisconnectMessage.Language">
            <summary>
            Gets message language.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Transport.DisconnectMessage.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Transport.DisconnectMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Transport.DisconnectMessage"/> class.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Transport.DisconnectMessage.#ctor(KellermanSoftware.Renci.SshNet.Messages.Transport.DisconnectReason,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Transport.DisconnectMessage"/> class.
            </summary>
            <param name="reasonCode">The reason code.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Transport.DisconnectMessage.LoadData">
            <summary>
            Called when type specific data need to be loaded.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Transport.DisconnectMessage.SaveData">
            <summary>
            Called when type specific data need to be saved.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Messages.Transport.DisconnectReason">
            <summary>
            Provides list of disconnect reason as specified by the protocol.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Messages.Transport.DisconnectReason.None">
            <summary>
            Disconnect reason is not provided.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Messages.Transport.DisconnectReason.HostNotAllowedToConnect">
            <summary>
            SSH_DISCONNECT_HOST_NOT_ALLOWED_TO_CONNECT
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Messages.Transport.DisconnectReason.ProtocolError">
            <summary>
            SSH_DISCONNECT_PROTOCOL_ERROR
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Messages.Transport.DisconnectReason.KeyExchangeFailed">
            <summary>
            SSH_DISCONNECT_KEY_EXCHANGE_FAILED
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Messages.Transport.DisconnectReason.Reserved">
            <summary>
            SSH_DISCONNECT_RESERVED
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Messages.Transport.DisconnectReason.MacError">
            <summary>
            SSH_DISCONNECT_MAC_ERROR
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Messages.Transport.DisconnectReason.CompressionError">
            <summary>
            SSH_DISCONNECT_COMPRESSION_ERROR
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Messages.Transport.DisconnectReason.ServiceNotAvailable">
            <summary>
            SSH_DISCONNECT_SERVICE_NOT_AVAILABLE
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Messages.Transport.DisconnectReason.ProtocolVersionNotSupported">
            <summary>
            SSH_DISCONNECT_PROTOCOL_VERSION_NOT_SUPPORTED
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Messages.Transport.DisconnectReason.HostKeyNotVerifiable">
            <summary>
            SSH_DISCONNECT_HOST_KEY_NOT_VERIFIABLE
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Messages.Transport.DisconnectReason.ConnectionLost">
            <summary>
            SSH_DISCONNECT_CONNECTION_LOST
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Messages.Transport.DisconnectReason.ByApplication">
            <summary>
            SSH_DISCONNECT_BY_APPLICATION
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Messages.Transport.DisconnectReason.TooManyConnections">
            <summary>
            SSH_DISCONNECT_TOO_MANY_CONNECTIONS
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Messages.Transport.DisconnectReason.AuthenticationCanceledByUser">
            <summary>
            SSH_DISCONNECT_AUTH_CANCELLED_BY_USER
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Messages.Transport.DisconnectReason.NoMoreAuthenticationMethodsAvailable">
            <summary>
            SSH_DISCONNECT_NO_MORE_AUTH_METHODS_AVAILABLE
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Messages.Transport.DisconnectReason.IllegalUserName">
            <summary>
            SSH_DISCONNECT_ILLEGAL_USER_NAME
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Messages.Transport.IgnoreMessage">
            <summary>
            Represents SSH_MSG_IGNORE message.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Transport.IgnoreMessage.Data">
            <summary>
            Gets ignore message data if any.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Transport.IgnoreMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Transport.IgnoreMessage"/> class
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Transport.IgnoreMessage.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Transport.IgnoreMessage.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Transport.IgnoreMessage"/> class.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Transport.IgnoreMessage.LoadData">
            <summary>
            Called when type specific data need to be loaded.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Transport.IgnoreMessage.SaveData">
            <summary>
            Called when type specific data need to be saved.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Messages.Transport.IKeyExchangedAllowed">
            <summary>
            Indicates that message that implement this interface is allowed during key exchange phase
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeDhGroupExchangeGroup">
            <summary>
            Represents SSH_MSG_KEX_DH_GEX_GROUP message.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeDhGroupExchangeGroup.SafePrime">
            <summary>
            Gets or sets the safe prime.
            </summary>
            <value>
            The safe prime.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeDhGroupExchangeGroup.SubGroup">
            <summary>
            Gets or sets the generator for subgroup in GF(p).
            </summary>
            <value>
            The sub group.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeDhGroupExchangeGroup.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeDhGroupExchangeGroup.LoadData">
            <summary>
            Called when type specific data need to be loaded.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeDhGroupExchangeGroup.SaveData">
            <summary>
            Called when type specific data need to be saved.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeDhGroupExchangeInit">
            <summary>
            Represents SSH_MSG_KEX_DH_GEX_INIT message.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeDhGroupExchangeInit.E">
            <summary>
            Gets the E value.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeDhGroupExchangeInit.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeDhGroupExchangeInit.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeDhGroupExchangeInit"/> class.
            </summary>
            <param name="clientExchangeValue">The client exchange value.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeDhGroupExchangeInit.LoadData">
            <summary>
            Called when type specific data need to be loaded.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeDhGroupExchangeInit.SaveData">
            <summary>
            Called when type specific data need to be saved.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeDhGroupExchangeReply">
            <summary>
            Represents SSH_MSG_KEX_DH_GEX_REPLY message.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeDhGroupExchangeReply.HostKey">
            <summary>
            Gets server public host key and certificates
            </summary>
            <value>The host key.</value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeDhGroupExchangeReply.F">
            <summary>
            Gets the F value.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeDhGroupExchangeReply.Signature">
            <summary>
            Gets the signature of H.
            </summary>
            <value>The signature.</value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeDhGroupExchangeReply.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeDhGroupExchangeReply.LoadData">
            <summary>
            Called when type specific data need to be loaded.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeDhGroupExchangeReply.SaveData">
            <summary>
            Called when type specific data need to be saved.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeDhGroupExchangeRequest">
            <summary>
            Represents SSH_MSG_KEX_DH_GEX_REQUEST message.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeDhGroupExchangeRequest.Minimum">
            <summary>
            Gets or sets the minimal size in bits of an acceptable group.
            </summary>
            <value>
            The minimum.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeDhGroupExchangeRequest.Preferred">
            <summary>
            Gets or sets the preferred size in bits of the group the server will send.
            </summary>
            <value>
            The preferred.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeDhGroupExchangeRequest.Maximum">
            <summary>
            Gets or sets the maximal size in bits of an acceptable group.
            </summary>
            <value>
            The maximum.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeDhGroupExchangeRequest.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeDhGroupExchangeRequest.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeDhGroupExchangeRequest"/> class.
            </summary>
            <param name="minimum">The minimum.</param>
            <param name="preferred">The preferred.</param>
            <param name="maximum">The maximum.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeDhGroupExchangeRequest.LoadData">
            <summary>
            Called when type specific data need to be loaded.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeDhGroupExchangeRequest.SaveData">
            <summary>
            Called when type specific data need to be saved.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeDhInitMessage">
            <summary>
            Represents SSH_MSG_KEXDH_INIT message.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeDhInitMessage.E">
            <summary>
            Gets the E value.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeDhInitMessage.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeDhInitMessage.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeDhInitMessage"/> class.
            </summary>
            <param name="clientExchangeValue">The client exchange value.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeDhInitMessage.LoadData">
            <summary>
            Called when type specific data need to be loaded.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeDhInitMessage.SaveData">
            <summary>
            Called when type specific data need to be saved.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeDhReplyMessage">
            <summary>
            Represents SSH_MSG_KEXDH_REPLY message.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeDhReplyMessage.HostKey">
            <summary>
            Gets server public host key and certificates
            </summary>
            <value>The host key.</value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeDhReplyMessage.F">
            <summary>
            Gets the F value.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeDhReplyMessage.Signature">
            <summary>
            Gets the signature of H.
            </summary>
            <value>The signature.</value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeDhReplyMessage.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeDhReplyMessage.LoadData">
            <summary>
            Called when type specific data need to be loaded.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeDhReplyMessage.SaveData">
            <summary>
            Called when type specific data need to be saved.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeEcdhInitMessage">
            <summary>
            Represents SSH_MSG_KEXECDH_INIT message.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeEcdhInitMessage.QC">
            <summary>
            Gets the client's ephemeral contribution to the ECDH exchange, encoded as an octet string
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeEcdhInitMessage.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeEcdhInitMessage.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeEcdhInitMessage"/> class.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeEcdhInitMessage.#ctor(KellermanSoftware.Renci.SshNet.Common.BigInteger,KellermanSoftware.Renci.SshNet.Common.BigInteger)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeEcdhInitMessage"/> class.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeEcdhInitMessage.LoadData">
            <summary>
            Called when type specific data need to be loaded.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeEcdhInitMessage.SaveData">
            <summary>
            Called when type specific data need to be saved.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeEcdhReplyMessage">
            <summary>
            Represents SSH_MSG_KEXECDH_REPLY message.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeEcdhReplyMessage.KS">
            <summary>
            Gets a string encoding an X.509v3 certificate containing the server's ECDSA public host key
            </summary>
            <value>The host key.</value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeEcdhReplyMessage.QS">
            <summary>
            Gets the server's ephemeral contribution to the ECDH exchange, encoded as an octet string.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeEcdhReplyMessage.Signature">
            <summary>
            Gets an octet string containing the server's signature of the newly established exchange hash value.
            </summary>
            <value>The signature.</value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeEcdhReplyMessage.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeEcdhReplyMessage.LoadData">
            <summary>
            Called when type specific data need to be loaded.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeEcdhReplyMessage.SaveData">
            <summary>
            Called when type specific data need to be saved.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeInitMessage">
            <summary>
            Represents SSH_MSG_KEXINIT message.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeInitMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeInitMessage"/> class.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeInitMessage.Cookie">
            <summary>
            Gets session cookie.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeInitMessage.KeyExchangeAlgorithms">
            <summary>
            Gets or sets supported key exchange algorithms.
            </summary>
            <value>
            Supported key exchange algorithms.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeInitMessage.ServerHostKeyAlgorithms">
            <summary>
            Gets or sets supported server host key algorithms.
            </summary>
            <value>
            Supported server host key algorithms.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeInitMessage.EncryptionAlgorithmsClientToServer">
            <summary>
            Gets or sets supported encryption algorithms client to server.
            </summary>
            <value>
            Supported encryption algorithms client to server.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeInitMessage.EncryptionAlgorithmsServerToClient">
            <summary>
            Gets or sets supported encryption algorithms server to client.
            </summary>
            <value>
            Supported encryption algorithms server to client.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeInitMessage.MacAlgorithmsClientToServer">
            <summary>
            Gets or sets supported hash algorithms client to server.
            </summary>
            <value>
            Supported hash algorithms client to server.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeInitMessage.MacAlgorithmsServerToClient">
            <summary>
            Gets or sets supported hash algorithms server to client.
            </summary>
            <value>
            Supported hash algorithms server to client.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeInitMessage.CompressionAlgorithmsClientToServer">
            <summary>
            Gets or sets supported compression algorithms client to server.
            </summary>
            <value>
            Supported compression algorithms client to server.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeInitMessage.CompressionAlgorithmsServerToClient">
            <summary>
            Gets or sets supported compression algorithms server to client.
            </summary>
            <value>
            Supported compression algorithms server to client.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeInitMessage.LanguagesClientToServer">
            <summary>
            Gets or sets supported languages client to server.
            </summary>
            <value>
            Supported languages client to server.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeInitMessage.LanguagesServerToClient">
            <summary>
            Gets or sets supported languages server to client.
            </summary>
            <value>
            The languages server to client.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeInitMessage.FirstKexPacketFollows">
            <summary>
            Gets or sets a value indicating whether first key exchange packet follows.
            </summary>
            <value>
            <c>true</c> if first key exchange packet follows; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeInitMessage.Reserved">
            <summary>
            Gets or sets the reserved value.
            </summary>
            <value>
            The reserved value.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeInitMessage.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            <c>-1</c> to indicate that the size of the message cannot be determined,
            or is too costly to calculate.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeInitMessage.LoadData">
            <summary>
            Called when type specific data need to be loaded.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeInitMessage.SaveData">
            <summary>
            Called when type specific data need to be saved.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Messages.Transport.NewKeysMessage">
            <summary>
            Represents SSH_MSG_NEWKEYS message.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Transport.NewKeysMessage.LoadData">
            <summary>
            Called when type specific data need to be loaded.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Transport.NewKeysMessage.SaveData">
            <summary>
            Called when type specific data need to be saved.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Messages.Transport.ServiceAcceptMessage">
            <summary>
            Represents SSH_MSG_SERVICE_ACCEPT message.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Transport.ServiceAcceptMessage.ServiceName">
            <summary>
            Gets the name of the service.
            </summary>
            <value>
            The name of the service.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Transport.ServiceAcceptMessage.LoadData">
            <summary>
            Called when type specific data need to be loaded.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Transport.ServiceAcceptMessage.SaveData">
            <summary>
            Called when type specific data need to be saved.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Messages.Transport.ServiceRequestMessage">
            <summary>
            Represents SSH_MSG_SERVICE_REQUEST message.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Transport.ServiceRequestMessage.ServiceName">
            <summary>
            Gets the name of the service.
            </summary>
            <value>
            The name of the service.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Messages.Transport.ServiceRequestMessage.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Transport.ServiceRequestMessage.#ctor(KellermanSoftware.Renci.SshNet.Messages.ServiceName)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Transport.ServiceRequestMessage"/> class.
            </summary>
            <param name="serviceName">Name of the service.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Transport.ServiceRequestMessage.LoadData">
            <summary>
            Called when type specific data need to be loaded.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Transport.ServiceRequestMessage.SaveData">
            <summary>
            Called when type specific data need to be saved.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Messages.Transport.UnimplementedMessage">
            <summary>
            Represents SSH_MSG_UNIMPLEMENTED message.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Transport.UnimplementedMessage.LoadData">
            <summary>
            Called when type specific data need to be loaded.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Messages.Transport.UnimplementedMessage.SaveData">
            <summary>
            Called when type specific data need to be saved.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.NetConfClient">
            <summary>
            Contains operation for working with NetConf server.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.NetConfClient._netConfSession">
            <summary>
            Holds <see cref="T:KellermanSoftware.Renci.SshNet.NetConf.INetConfSession"/> instance that used to communicate to the server
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.NetConfClient.OperationTimeout">
            <summary>
            Gets or sets the operation timeout.
            </summary>
            <value>
            The timeout to wait until an operation completes. The default value is negative
            one (-1) milliseconds, which indicates an infinite time-out period.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value"/> represents a value that is less than -1 or greater than <see cref="F:System.Int32.MaxValue"/> milliseconds.</exception>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.NetConfClient.NetConfSession">
            <summary>
            Gets the current NetConf session.
            </summary>
            <value>
            The current NetConf session.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.NetConfClient.#ctor(KellermanSoftware.Renci.SshNet.ConnectionInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.NetConfClient"/> class.
            </summary>
            <param name="connectionInfo">The connection info.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="connectionInfo"/> is <c>null</c>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.NetConfClient.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.NetConfClient"/> class.
            </summary>
            <param name="host">Connection host.</param>
            <param name="port">Connection port.</param>
            <param name="username">Authentication username.</param>
            <param name="password">Authentication password.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="password"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="host"/> is invalid, or <paramref name="username"/> is <c>null</c> or contains only whitespace characters.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="port"/> is not within <see cref="F:System.Net.IPEndPoint.MinPort"/> and <see cref="F:System.Net.IPEndPoint.MaxPort"/>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.NetConfClient.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.NetConfClient"/> class.
            </summary>
            <param name="host">Connection host.</param>
            <param name="username">Authentication username.</param>
            <param name="password">Authentication password.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="password"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="host"/> is invalid, or <paramref name="username"/> is <c>null</c> or contains only whitespace characters.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.NetConfClient.#ctor(System.String,System.Int32,System.String,KellermanSoftware.Renci.SshNet.PrivateKeyFile[])">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.NetConfClient"/> class.
            </summary>
            <param name="host">Connection host.</param>
            <param name="port">Connection port.</param>
            <param name="username">Authentication username.</param>
            <param name="keyFiles">Authentication private key file(s) .</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyFiles"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="host"/> is invalid, -or- <paramref name="username"/> is <c>null</c> or contains only whitespace characters.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="port"/> is not within <see cref="F:System.Net.IPEndPoint.MinPort"/> and <see cref="F:System.Net.IPEndPoint.MaxPort"/>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.NetConfClient.#ctor(System.String,System.String,KellermanSoftware.Renci.SshNet.PrivateKeyFile[])">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.NetConfClient"/> class.
            </summary>
            <param name="host">Connection host.</param>
            <param name="username">Authentication username.</param>
            <param name="keyFiles">Authentication private key file(s) .</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyFiles"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="host"/> is invalid, -or- <paramref name="username"/> is <c>null</c> or contains only whitespace characters.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.NetConfClient.#ctor(KellermanSoftware.Renci.SshNet.ConnectionInfo,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.NetConfClient"/> class.
            </summary>
            <param name="connectionInfo">The connection info.</param>
            <param name="ownsConnectionInfo">Specified whether this instance owns the connection info.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="connectionInfo"/> is <c>null</c>.</exception>
            <remarks>
            If <paramref name="ownsConnectionInfo"/> is <c>true</c>, then the
            connection info will be disposed when this instance is disposed.
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.NetConfClient.#ctor(KellermanSoftware.Renci.SshNet.ConnectionInfo,System.Boolean,KellermanSoftware.Renci.SshNet.IServiceFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.NetConfClient"/> class.
            </summary>
            <param name="connectionInfo">The connection info.</param>
            <param name="ownsConnectionInfo">Specified whether this instance owns the connection info.</param>
            <param name="serviceFactory">The factory to use for creating new services.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="connectionInfo"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="serviceFactory"/> is <c>null</c>.</exception>
            <remarks>
            If <paramref name="ownsConnectionInfo"/> is <c>true</c>, then the
            connection info will be disposed when this instance is disposed.
            </remarks>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.NetConfClient.ServerCapabilities">
            <summary>
            Gets the NetConf server capabilities.
            </summary>
            <value>
            The NetConf server capabilities.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.NetConfClient.ClientCapabilities">
            <summary>
            Gets the NetConf client capabilities.
            </summary>
            <value>
            The NetConf client capabilities.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.NetConfClient.AutomaticMessageIdHandling">
            <summary>
            Gets or sets a value indicating whether automatic message id handling is
            enabled.
            </summary>
            <value>
            <c>true</c> if automatic message id handling is enabled; otherwise, <c>false</c>.
            The default value is <c>true</c>.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.NetConfClient.SendReceiveRpc(System.Xml.XmlDocument)">
            <summary>
            Sends the receive RPC.
            </summary>
            <param name="rpc">The RPC.</param>
            <returns>Reply message to RPC request</returns>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.NetConfClient.SendReceiveRpc(System.String)">
            <summary>
            Sends the receive RPC.
            </summary>
            <param name="xml">The XML.</param>
            <returns>Reply message to RPC request</returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.NetConfClient.SendCloseRpc">
            <summary>
            Sends the close RPC.
            </summary>
            <returns>Reply message to closing RPC request</returns>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.NetConfClient.OnConnected">
            <summary>
            Called when client is connected to the server.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.NetConfClient.OnDisconnecting">
            <summary>
            Called when client is disconnecting from the server.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.NetConfClient.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.NetConf.INetConfSession.ServerCapabilities">
            <summary>
            Gets the NetConf server capabilities.
            </summary>
            <value>
            The NetConf server capabilities.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.NetConf.INetConfSession.ClientCapabilities">
            <summary>
            Gets the NetConf client capabilities.
            </summary>
            <value>
            The NetConf client capabilities.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.NetConf.NetConfSession.ServerCapabilities">
            <summary>
            Gets NetConf server capabilities.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.NetConf.NetConfSession.ClientCapabilities">
            <summary>
            Gets NetConf client capabilities.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.NetConf.NetConfSession.#ctor(KellermanSoftware.Renci.SshNet.ISession,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.NetConf.NetConfSession"/> class.
            </summary>
            <param name="session">The session.</param>
            <param name="operationTimeout">The number of milliseconds to wait for an operation to complete, or -1 to wait indefinitely.</param>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.NoneAuthenticationMethod">
            <summary>
            Provides functionality for "none" authentication method
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.NoneAuthenticationMethod.Name">
            <summary>
            Gets connection name
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.NoneAuthenticationMethod.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.NoneAuthenticationMethod"/> class.
            </summary>
            <param name="username">The username.</param>
            <exception cref="T:System.ArgumentException"><paramref name="username"/> is whitespace or <c>null</c>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.NoneAuthenticationMethod.Authenticate(KellermanSoftware.Renci.SshNet.Session)">
            <summary>
            Authenticates the specified session.
            </summary>
            <param name="session">The session.</param>
            <returns>
            Result of authentication  process.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="session" /> is <c>null</c>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.NoneAuthenticationMethod.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.NoneAuthenticationMethod.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.NoneAuthenticationMethod.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:KellermanSoftware.Renci.SshNet.NoneAuthenticationMethod"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.PasswordAuthenticationMethod">
            <summary>
            Provides functionality to perform password authentication.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.PasswordAuthenticationMethod.Name">
            <summary>
            Gets authentication method name
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.PasswordAuthenticationMethod.Password">
            <summary>
            Gets the password as a sequence of bytes.
            </summary>
            <value>
            The password as a sequence of bytes.
            </value>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.PasswordAuthenticationMethod.PasswordExpired">
            <summary>
            Occurs when user's password has expired and needs to be changed.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.PasswordAuthenticationMethod.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.PasswordAuthenticationMethod"/> class.
            </summary>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
            <exception cref="T:System.ArgumentException"><paramref name="username"/> is whitespace or <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="password"/> is <c>null</c>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.PasswordAuthenticationMethod.#ctor(System.String,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.PasswordAuthenticationMethod"/> class.
            </summary>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
            <exception cref="T:System.ArgumentException"><paramref name="username"/> is whitespace or <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="password"/> is <c>null</c>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.PasswordAuthenticationMethod.Authenticate(KellermanSoftware.Renci.SshNet.Session)">
            <summary>
            Authenticates the specified session.
            </summary>
            <param name="session">The session to authenticate.</param>
            <returns>
            Result of authentication  process.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="session" /> is <c>null</c>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.PasswordAuthenticationMethod.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.PasswordAuthenticationMethod.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.PasswordAuthenticationMethod.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:KellermanSoftware.Renci.SshNet.PasswordAuthenticationMethod"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.PasswordConnectionInfo">
            <summary>
            Provides connection information when password authentication method is used
            </summary>
            <example>
                <code source="..\..\src\Renci.SshNet.Tests\Classes\PasswordConnectionInfoTest.cs" region="Example PasswordConnectionInfo" language="C#" title="Connect using username and password" />
                <code source="..\..\src\Renci.SshNet.Tests\Classes\PasswordConnectionInfoTest.cs" region="Example PasswordConnectionInfo PasswordExpired" language="C#" title="Change password when connecting" />
                <code source="..\..\src\Renci.SshNet.Tests\Classes\PasswordConnectionInfoTest.cs" region="Example PasswordConnectionInfo AuthenticationBanner" language="C#" title="Display authentication banner" />
            </example>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.PasswordConnectionInfo.PasswordExpired">
            <summary>
            Occurs when user's password has expired and needs to be changed.
            </summary>
            <example>
                <code source="..\..\src\Renci.SshNet.Tests\Classes\PasswordConnectionInfoTest.cs" region="Example PasswordConnectionInfo PasswordExpired" language="C#" title="Change password when connecting" />
            </example>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.PasswordConnectionInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.PasswordConnectionInfo" /> class.
            </summary>
            <param name="host">Connection host.</param>
            <param name="username">Connection username.</param>
            <param name="password">Connection password.</param>
            <example>
                <code source="..\..\src\Renci.SshNet.Tests\Classes\PasswordConnectionInfoTest.cs" region="Example PasswordConnectionInfo" language="C#" title="Connect using username and password" />
            </example>
            <exception cref="T:System.ArgumentNullException"><paramref name="password"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="host"/> is invalid, or <paramref name="username"/> is <c>null</c> or contains only whitespace characters.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.PasswordConnectionInfo.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.PasswordConnectionInfo"/> class.
            </summary>
            <param name="host">Connection host.</param>
            <param name="port">Connection port.</param>
            <param name="username">Connection username.</param>
            <param name="password">Connection password.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="password"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="host"/> is invalid, or <paramref name="username"/> is <c>null</c> or contains only whitespace characters.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="port"/> is not within <see cref="F:System.Net.IPEndPoint.MinPort"/> and <see cref="F:System.Net.IPEndPoint.MaxPort"/>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.PasswordConnectionInfo.#ctor(System.String,System.Int32,System.String,System.String,KellermanSoftware.Renci.SshNet.ProxyTypes,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.PasswordConnectionInfo"/> class.
            </summary>
            <param name="host">Connection host.</param>
            <param name="port">The port.</param>
            <param name="username">Connection username.</param>
            <param name="password">Connection password.</param>
            <param name="proxyType">Type of the proxy.</param>
            <param name="proxyHost">The proxy host.</param>
            <param name="proxyPort">The proxy port.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.PasswordConnectionInfo.#ctor(System.String,System.Int32,System.String,System.String,KellermanSoftware.Renci.SshNet.ProxyTypes,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.PasswordConnectionInfo"/> class.
            </summary>
            <param name="host">Connection host.</param>
            <param name="port">The port.</param>
            <param name="username">Connection username.</param>
            <param name="password">Connection password.</param>
            <param name="proxyType">Type of the proxy.</param>
            <param name="proxyHost">The proxy host.</param>
            <param name="proxyPort">The proxy port.</param>
            <param name="proxyUsername">The proxy username.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.PasswordConnectionInfo.#ctor(System.String,System.String,System.String,KellermanSoftware.Renci.SshNet.ProxyTypes,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.PasswordConnectionInfo"/> class.
            </summary>
            <param name="host">Connection host.</param>
            <param name="username">Connection username.</param>
            <param name="password">Connection password.</param>
            <param name="proxyType">Type of the proxy.</param>
            <param name="proxyHost">The proxy host.</param>
            <param name="proxyPort">The proxy port.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.PasswordConnectionInfo.#ctor(System.String,System.String,System.String,KellermanSoftware.Renci.SshNet.ProxyTypes,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.PasswordConnectionInfo"/> class.
            </summary>
            <param name="host">Connection host.</param>
            <param name="username">Connection username.</param>
            <param name="password">Connection password.</param>
            <param name="proxyType">Type of the proxy.</param>
            <param name="proxyHost">The proxy host.</param>
            <param name="proxyPort">The proxy port.</param>
            <param name="proxyUsername">The proxy username.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.PasswordConnectionInfo.#ctor(System.String,System.String,System.String,KellermanSoftware.Renci.SshNet.ProxyTypes,System.String,System.Int32,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.PasswordConnectionInfo"/> class.
            </summary>
            <param name="host">Connection host.</param>
            <param name="username">Connection username.</param>
            <param name="password">Connection password.</param>
            <param name="proxyType">Type of the proxy.</param>
            <param name="proxyHost">The proxy host.</param>
            <param name="proxyPort">The proxy port.</param>
            <param name="proxyUsername">The proxy username.</param>
            <param name="proxyPassword">The proxy password.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.PasswordConnectionInfo.#ctor(System.String,System.String,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.PasswordConnectionInfo"/> class.
            </summary>
            <param name="host">Connection host.</param>
            <param name="username">Connection username.</param>
            <param name="password">Connection password.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.PasswordConnectionInfo.#ctor(System.String,System.Int32,System.String,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.PasswordConnectionInfo" /> class.
            </summary>
            <param name="host">Connection host.</param>
            <param name="port">Connection port.</param>
            <param name="username">Connection username.</param>
            <param name="password">Connection password.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="password" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="host" /> is invalid, or <paramref name="username" /> is <c>null</c> or contains only whitespace characters.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="port" /> is not within <see cref="F:System.Net.IPEndPoint.MinPort" /> and <see cref="F:System.Net.IPEndPoint.MaxPort" />.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.PasswordConnectionInfo.#ctor(System.String,System.Int32,System.String,System.Byte[],KellermanSoftware.Renci.SshNet.ProxyTypes,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.PasswordConnectionInfo"/> class.
            </summary>
            <param name="host">Connection host.</param>
            <param name="port">The port.</param>
            <param name="username">Connection username.</param>
            <param name="password">Connection password.</param>
            <param name="proxyType">Type of the proxy.</param>
            <param name="proxyHost">The proxy host.</param>
            <param name="proxyPort">The proxy port.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.PasswordConnectionInfo.#ctor(System.String,System.Int32,System.String,System.Byte[],KellermanSoftware.Renci.SshNet.ProxyTypes,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.PasswordConnectionInfo"/> class.
            </summary>
            <param name="host">Connection host.</param>
            <param name="port">The port.</param>
            <param name="username">Connection username.</param>
            <param name="password">Connection password.</param>
            <param name="proxyType">Type of the proxy.</param>
            <param name="proxyHost">The proxy host.</param>
            <param name="proxyPort">The proxy port.</param>
            <param name="proxyUsername">The proxy username.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.PasswordConnectionInfo.#ctor(System.String,System.String,System.Byte[],KellermanSoftware.Renci.SshNet.ProxyTypes,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.PasswordConnectionInfo"/> class.
            </summary>
            <param name="host">Connection host.</param>
            <param name="username">Connection username.</param>
            <param name="password">Connection password.</param>
            <param name="proxyType">Type of the proxy.</param>
            <param name="proxyHost">The proxy host.</param>
            <param name="proxyPort">The proxy port.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.PasswordConnectionInfo.#ctor(System.String,System.String,System.Byte[],KellermanSoftware.Renci.SshNet.ProxyTypes,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.PasswordConnectionInfo"/> class.
            </summary>
            <param name="host">Connection host.</param>
            <param name="username">Connection username.</param>
            <param name="password">Connection password.</param>
            <param name="proxyType">Type of the proxy.</param>
            <param name="proxyHost">The proxy host.</param>
            <param name="proxyPort">The proxy port.</param>
            <param name="proxyUsername">The proxy username.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.PasswordConnectionInfo.#ctor(System.String,System.String,System.Byte[],KellermanSoftware.Renci.SshNet.ProxyTypes,System.String,System.Int32,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.PasswordConnectionInfo"/> class.
            </summary>
            <param name="host">Connection host.</param>
            <param name="username">Connection username.</param>
            <param name="password">Connection password.</param>
            <param name="proxyType">Type of the proxy.</param>
            <param name="proxyHost">The proxy host.</param>
            <param name="proxyPort">The proxy port.</param>
            <param name="proxyUsername">The proxy username.</param>
            <param name="proxyPassword">The proxy password.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.PasswordConnectionInfo.#ctor(System.String,System.Int32,System.String,System.Byte[],KellermanSoftware.Renci.SshNet.ProxyTypes,System.String,System.Int32,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.PasswordConnectionInfo"/> class.
            </summary>
            <param name="host">Connection host.</param>
            <param name="port">The port.</param>
            <param name="username">Connection username.</param>
            <param name="password">Connection password.</param>
            <param name="proxyType">Type of the proxy.</param>
            <param name="proxyHost">The proxy host.</param>
            <param name="proxyPort">The proxy port.</param>
            <param name="proxyUsername">The proxy username.</param>
            <param name="proxyPassword">The proxy password.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.PasswordConnectionInfo.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.PasswordConnectionInfo.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.PasswordConnectionInfo.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:KellermanSoftware.Renci.SshNet.PasswordConnectionInfo"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.PrivateKeyAuthenticationMethod">
            <summary>
            Provides functionality to perform private key authentication.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.PrivateKeyAuthenticationMethod.Name">
            <summary>
            Gets authentication method name
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.PrivateKeyAuthenticationMethod.KeyFiles">
            <summary>
            Gets the key files used for authentication.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.PrivateKeyAuthenticationMethod.#ctor(System.String,KellermanSoftware.Renci.SshNet.PrivateKeyFile[])">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.PrivateKeyAuthenticationMethod"/> class.
            </summary>
            <param name="username">The username.</param>
            <param name="keyFiles">The key files.</param>
            <exception cref="T:System.ArgumentException"><paramref name="username"/> is whitespace or <c>null</c>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.PrivateKeyAuthenticationMethod.Authenticate(KellermanSoftware.Renci.SshNet.Session)">
            <summary>
            Authenticates the specified session.
            </summary>
            <param name="session">The session to authenticate.</param>
            <returns>
            Result of authentication  process.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.PrivateKeyAuthenticationMethod.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.PrivateKeyAuthenticationMethod.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.PrivateKeyAuthenticationMethod.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:KellermanSoftware.Renci.SshNet.PasswordConnectionInfo"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.PrivateKeyConnectionInfo">
            <summary>
            Provides connection information when private key authentication method is used
            </summary>
            <example>
              <code source="..\..\src\Renci.SshNet.Tests\Classes\PrivateKeyConnectionInfoTest.cs" region="Example PrivateKeyConnectionInfo PrivateKeyFile" language="C#" title="Connect using private key" />
              </example>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.PrivateKeyConnectionInfo.KeyFiles">
            <summary>
            Gets the key files used for authentication.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.PrivateKeyConnectionInfo.#ctor(System.String,System.String,KellermanSoftware.Renci.SshNet.PrivateKeyFile[])">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.PrivateKeyConnectionInfo"/> class.
            </summary>
            <param name="host">Connection host.</param>
            <param name="username">Connection username.</param>
            <param name="keyFiles">Connection key files.</param>
            <example>
                <code source="..\..\src\Renci.SshNet.Tests\Classes\PrivateKeyConnectionInfoTest.cs" region="Example PrivateKeyConnectionInfo PrivateKeyFile" language="C#" title="Connect using private key" />
                <code source="..\..\src\Renci.SshNet.Tests\Classes\PrivateKeyConnectionInfoTest.cs" region="Example PrivateKeyConnectionInfo PrivateKeyFile Multiple" language="C#" title="Connect using multiple private key" />
            </example>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.PrivateKeyConnectionInfo.#ctor(System.String,System.Int32,System.String,KellermanSoftware.Renci.SshNet.PrivateKeyFile[])">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.PrivateKeyConnectionInfo"/> class.
            </summary>
            <param name="host">Connection host.</param>
            <param name="port">Connection port.</param>
            <param name="username">Connection username.</param>
            <param name="keyFiles">Connection key files.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.PrivateKeyConnectionInfo.#ctor(System.String,System.Int32,System.String,KellermanSoftware.Renci.SshNet.ProxyTypes,System.String,System.Int32,KellermanSoftware.Renci.SshNet.PrivateKeyFile[])">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.PasswordConnectionInfo"/> class.
            </summary>
            <param name="host">Connection host.</param>
            <param name="port">The port.</param>
            <param name="username">Connection username.</param>
            <param name="proxyType">Type of the proxy.</param>
            <param name="proxyHost">The proxy host.</param>
            <param name="proxyPort">The proxy port.</param>
            <param name="keyFiles">The key files.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.PrivateKeyConnectionInfo.#ctor(System.String,System.Int32,System.String,KellermanSoftware.Renci.SshNet.ProxyTypes,System.String,System.Int32,System.String,KellermanSoftware.Renci.SshNet.PrivateKeyFile[])">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.PasswordConnectionInfo"/> class.
            </summary>
            <param name="host">Connection host.</param>
            <param name="port">The port.</param>
            <param name="username">Connection username.</param>
            <param name="proxyType">Type of the proxy.</param>
            <param name="proxyHost">The proxy host.</param>
            <param name="proxyPort">The proxy port.</param>
            <param name="proxyUsername">The proxy username.</param>
            <param name="keyFiles">The key files.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.PrivateKeyConnectionInfo.#ctor(System.String,System.String,KellermanSoftware.Renci.SshNet.ProxyTypes,System.String,System.Int32,KellermanSoftware.Renci.SshNet.PrivateKeyFile[])">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.PasswordConnectionInfo"/> class.
            </summary>
            <param name="host">Connection host.</param>
            <param name="username">Connection username.</param>
            <param name="proxyType">Type of the proxy.</param>
            <param name="proxyHost">The proxy host.</param>
            <param name="proxyPort">The proxy port.</param>
            <param name="keyFiles">The key files.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.PrivateKeyConnectionInfo.#ctor(System.String,System.String,KellermanSoftware.Renci.SshNet.ProxyTypes,System.String,System.Int32,System.String,KellermanSoftware.Renci.SshNet.PrivateKeyFile[])">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.PasswordConnectionInfo"/> class.
            </summary>
            <param name="host">Connection host.</param>
            <param name="username">Connection username.</param>
            <param name="proxyType">Type of the proxy.</param>
            <param name="proxyHost">The proxy host.</param>
            <param name="proxyPort">The proxy port.</param>
            <param name="proxyUsername">The proxy username.</param>
            <param name="keyFiles">The key files.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.PrivateKeyConnectionInfo.#ctor(System.String,System.String,KellermanSoftware.Renci.SshNet.ProxyTypes,System.String,System.Int32,System.String,System.String,KellermanSoftware.Renci.SshNet.PrivateKeyFile[])">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.PasswordConnectionInfo"/> class.
            </summary>
            <param name="host">Connection host.</param>
            <param name="username">Connection username.</param>
            <param name="proxyType">Type of the proxy.</param>
            <param name="proxyHost">The proxy host.</param>
            <param name="proxyPort">The proxy port.</param>
            <param name="proxyUsername">The proxy username.</param>
            <param name="proxyPassword">The proxy password.</param>
            <param name="keyFiles">The key files.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.PrivateKeyConnectionInfo.#ctor(System.String,System.Int32,System.String,KellermanSoftware.Renci.SshNet.ProxyTypes,System.String,System.Int32,System.String,System.String,KellermanSoftware.Renci.SshNet.PrivateKeyFile[])">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.PasswordConnectionInfo"/> class.
            </summary>
            <param name="host">Connection host.</param>
            <param name="port">The port.</param>
            <param name="username">Connection username.</param>
            <param name="proxyType">Type of the proxy.</param>
            <param name="proxyHost">The proxy host.</param>
            <param name="proxyPort">The proxy port.</param>
            <param name="proxyUsername">The proxy username.</param>
            <param name="proxyPassword">The proxy password.</param>
            <param name="keyFiles">The key files.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.PrivateKeyConnectionInfo.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.PrivateKeyConnectionInfo.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.PrivateKeyConnectionInfo.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:KellermanSoftware.Renci.SshNet.PasswordConnectionInfo"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.PrivateKeyFile">
            <summary>
            Represents private key information.
            </summary>
            <example>
                <code source="..\..\src\Renci.SshNet.Tests\Data\Key.RSA.txt" language="Text" title="Private RSA key example" />
            </example>
            <remarks>
            <para>
            The following private keys are supported:
            <list type="bullet">
                <item>
                    <description>RSA in OpenSSL PEM, ssh.com and OpenSSH key format</description>
                </item>
                <item>
                    <description>DSA in OpenSSL PEM and ssh.com format</description>
                </item>
                <item>
                    <description>ECDSA 256/384/521 in OpenSSL PEM and OpenSSH key format</description>
                </item>
                <item>
                    <description>ED25519 in OpenSSH key format</description>
                </item>
            </list>
            </para>
            <para>
            The following encryption algorithms are supported:
            <list type="bullet">
                <item>
                    <description>DES-EDE3-CBC</description>
                </item>
                <item>
                    <description>DES-EDE3-CFB</description>
                </item>
                <item>
                    <description>DES-CBC</description>
                </item>
                <item>
                    <description>AES-128-CBC</description>
                </item>
                <item>
                    <description>AES-192-CBC</description>
                </item>
                <item>
                    <description>AES-256-CBC</description>
                </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.PrivateKeyFile.HostKey">
            <summary>
            Gets the host key.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.PrivateKeyFile.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.PrivateKeyFile"/> class.
            </summary>
            <param name="privateKey">The private key.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.PrivateKeyFile.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.PrivateKeyFile"/> class.
            </summary>
            <param name="fileName">Name of the file.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="fileName"/> is <c>null</c> or empty.</exception>
            <remarks>This method calls <see cref="M:System.IO.File.Open(System.String,System.IO.FileMode)"/> internally, this method does not catch exceptions from <see cref="M:System.IO.File.Open(System.String,System.IO.FileMode)"/>.</remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.PrivateKeyFile.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.PrivateKeyFile"/> class.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="passPhrase">The pass phrase.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="fileName"/> is <c>null</c> or empty, or <paramref name="passPhrase"/> is <c>null</c>.</exception>
            <remarks>This method calls <see cref="M:System.IO.File.Open(System.String,System.IO.FileMode)"/> internally, this method does not catch exceptions from <see cref="M:System.IO.File.Open(System.String,System.IO.FileMode)"/>.</remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.PrivateKeyFile.#ctor(System.IO.Stream,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.PrivateKeyFile"/> class.
            </summary>
            <param name="privateKey">The private key.</param>
            <param name="passPhrase">The pass phrase.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="privateKey"/> or <paramref name="passPhrase"/> is <c>null</c>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.PrivateKeyFile.Open(System.IO.Stream,System.String)">
            <summary>
            Opens the specified private key.
            </summary>
            <param name="privateKey">The private key.</param>
            <param name="passPhrase">The pass phrase.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.PrivateKeyFile.DecryptKey(KellermanSoftware.Renci.SshNet.CipherInfo,System.Byte[],System.String,System.Byte[])">
            <summary>
            Decrypts encrypted private key file data.
            </summary>
            <param name="cipherInfo">The cipher info.</param>
            <param name="cipherData">Encrypted data.</param>
            <param name="passPhrase">Decryption pass phrase.</param>
            <param name="binarySalt">Decryption binary salt.</param>
            <returns>Decrypted byte array.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="cipherInfo" />, <paramref name="cipherData" />, <paramref name="passPhrase" /> or <paramref name="binarySalt" /> is <c>null</c>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.PrivateKeyFile.ParseOpenSshV1Key(System.Byte[],System.String)">
            <summary>
            Parses an OpenSSH V1 key file (i.e. ED25519 key) according to the the key spec:
            https://github.com/openssh/openssh-portable/blob/master/PROTOCOL.key.
            </summary>
            <param name="keyFileData">the key file data (i.e. base64 encoded data between the header/footer)</param>
            <param name="passPhrase">passphrase or null if there isn't one</param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.PrivateKeyFile.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.PrivateKeyFile.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.PrivateKeyFile.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:KellermanSoftware.Renci.SshNet.PrivateKeyFile"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.PrivateKeyFile.SshDataReader.ReadBigIntWithBits">
            <summary>
            Reads next mpint data type from internal buffer where length specified in bits.
            </summary>
            <returns>mpint read.</returns>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.ProxyTypes">
            <summary>
            Specifies the type of proxy client will use to connect to server.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.ProxyTypes.None">
            <summary>No proxy server.</summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.ProxyTypes.Socks4">
            <summary>A SOCKS4 proxy server.</summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.ProxyTypes.Socks5">
            <summary>A SOCKS5 proxy server.</summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.ProxyTypes.Http">
            <summary>A HTTP proxy server.</summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.RemotePathDoubleQuoteTransformation">
            <summary>
            Encloses a path in double quotes, and escapes any embedded double quote with a backslash.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.RemotePathDoubleQuoteTransformation.Transform(System.String)">
            <summary>
            Encloses a path in double quotes, and escapes any embedded double quote with a backslash.
            </summary>
            <param name="path">The path to transform.</param>
            <returns>
            The transformed path.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <c>null</c>.</exception>
            <example>
            <list type="table">
              <listheader>
                <term>Original</term>
                <term>Transformed</term>
              </listheader>
              <item>
                <term>/var/log/auth.log</term>
                <term>&quot;/var/log/auth.log&quot;</term>
              </item>
              <item>
                <term>/var/mp3/Guns N' Roses</term>
                <term>&quot;/var/mp3/Guns N' Roses&quot;</term>
              </item>
              <item>
                <term>/var/garbage!/temp</term>
                <term>&quot;/var/garbage!/temp&quot;</term>
              </item>
              <item>
                <term>/var/would be 'kewl'!/not?</term>
                <term>&quot;/var/would be 'kewl'!, not?&quot;</term>
              </item>
              <item>
                <term></term>
                <term>&quot;&quot;</term>
              </item>
              <item>
                <term>Hello &quot;World&quot;</term>
                <term>&quot;Hello \&quot;World&quot;</term>
              </item>
            </list>
            </example>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.RemotePathNoneTransformation">
            <summary>
            Performs no transformation.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.RemotePathNoneTransformation.Transform(System.String)">
            <summary>
            Returns the specified path without applying a transformation.
            </summary>
            <param name="path">The path to transform.</param>
            <returns>
            The specified path as is.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <c>null</c>.</exception>
            <remarks>
            This transformation is recommended for servers that do not require any quoting to preserve the
            literal value of metacharacters, or when paths are guaranteed to never contain any such characters.
            </remarks>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.RemotePathShellQuoteTransformation">
            <summary>
            Quotes a path in a way to be suitable to be used with a shell-based server.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.RemotePathShellQuoteTransformation.Transform(System.String)">
            <summary>
            Quotes a path in a way to be suitable to be used with a shell-based server.
            </summary>
            <param name="path">The path to transform.</param>
            <returns>
            A quoted path.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <c>null</c>.</exception>
            <remarks>
            <para>
            If <paramref name="path"/> contains a single-quote, that character is embedded
            in quotation marks (eg. "'"). Sequences of single-quotes are grouped in a single
            pair of quotation marks.
            </para>
            <para>
            An exclamation mark in <paramref name="path"/> is escaped with a backslash. This is
            necessary because C Shell interprets it as a meta-character for history substitution
            even when enclosed in single quotes or quotation marks.
            </para>
            <para>
            All other characters are enclosed in single quotes. Sequences of such characters are grouped
            in a single pair of single quotes.
            </para>
            <para>
            References:
            <list type="bullet">
              <item>
                <description><a href="http://pubs.opengroup.org/onlinepubs/7908799/xcu/chap2.html">Shell Command Language</a></description>
              </item>
              <item>
                <description><a href="https://earthsci.stanford.edu/computing/unix/shell/specialchars.php">Unix C-Shell special characters and their uses</a></description>
              </item>
              <item>
                <description><a href="https://docstore.mik.ua/orelly/unix3/upt/ch27_13.htm">Differences Between Bourne and C Shell Quoting</a></description>
              </item>
            </list>
            </para>
            </remarks>
            <example>
            <list type="table">
              <listheader>
                <term>Original</term>
                <term>Transformed</term>
              </listheader>
              <item>
                <term>/var/log/auth.log</term>
                <term>'/var/log/auth.log'</term>
              </item>
              <item>
                <term>/var/mp3/Guns N' Roses</term>
                <term>'/var/mp3/Guns N'"'"' Roses'</term>
              </item>
              <item>
                <term>/var/garbage!/temp</term>
                <term>'/var/garbage'\!'/temp'</term>
              </item>
              <item>
                <term>/var/would be 'kewl'!, not?</term>
                <term>'/var/would be '"'"'kewl'"'"\!', not?'</term>
              </item>
              <item>
                <term></term>
                <term>''</term>
              </item>
              <item>
                <term>Hello &quot;World&quot;</term>
                <term>'Hello "World"'</term>
              </item>
            </list>
            </example>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.RemotePathTransformation">
            <summary>
            Provides access to built-in remote path transformations.
            </summary>
            <remarks>
            References:
            <list type="bullet">
              <item>
                <description><a href="http://pubs.opengroup.org/onlinepubs/7908799/xcu/chap2.html">Shell Command Language</a></description>
              </item>
              <item>
                <description><a href="https://earthsci.stanford.edu/computing/unix/shell/specialchars.php">Unix C-Shell special characters and their uses</a></description>
              </item>
              <item>
                <description><a href="https://docstore.mik.ua/orelly/unix3/upt/ch27_13.htm">Differences Between Bourne and C Shell Quoting</a></description>
              </item>
              <item>
                <description><a href="https://blogs.msdn.microsoft.com/twistylittlepassagesallalike/2011/04/23/everyone-quotes-command-line-arguments-the-wrong-way/">Everyone quotes command line arguments the wrong way</a></description>
              </item>
            </list>
            </remarks>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.RemotePathTransformation.ShellQuote">
            <summary>
            Quotes a path in a way to be suitable to be used with a shell-based server.
            </summary>
            <returns>
            A quoted path.
            </returns>
            <remarks>
            <para>
            If a path contains a single-quote, that character is embedded in quotation marks (eg. "'").
            Sequences of single-quotes are grouped in a single pair of quotation marks.
            </para>
            <para>
            An exclamation mark in a path is escaped with a backslash. This is necessary because C Shell
            interprets it as a meta-character for history substitution even when enclosed in single quotes
             or quotation marks.
            </para>
            <para>
            All other characters are enclosed in single quotes. Sequences of such characters are grouped
            in a single pair of single quotes.
            </para>
            </remarks>
            <example>
            <list type="table">
              <listheader>
                <term>Original</term>
                <term>Transformed</term>
              </listheader>
              <item>
                <term>/var/log/auth.log</term>
                <term>'/var/log/auth.log'</term>
              </item>
              <item>
                <term>/var/mp3/Guns N' Roses</term>
                <term>'/var/mp3/Guns N'"'"' Roses'</term>
              </item>
              <item>
                <term>/var/garbage!/temp</term>
                <term>'/var/garbage'\!'/temp'</term>
              </item>
              <item>
                <term>/var/would be 'kewl'!, not?</term>
                <term>'/var/would be '"'"'kewl'"'"\!', not?'</term>
              </item>
              <item>
                <term></term>
                <term>''</term>
              </item>
              <item>
                <term>Hello &quot;World&quot;</term>
                <term>'Hello "World"'</term>
              </item>
            </list>
            </example>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.RemotePathTransformation.None">
            <summary>
            Performs no transformation.
            </summary>
            <remarks>
            Recommended for servers that do not require any character to be escaped or enclosed in quotes,
            or when paths are guaranteed to never contain any special characters (such as #, &quot;, ', $, ...).
            </remarks>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.RemotePathTransformation.DoubleQuote">
            <summary>
            Encloses a path in double quotes, and escapes any embedded double quote with a backslash.
            </summary>
            <value>
            A transformation that encloses a path in double quotes, and escapes any embedded double quote with
            a backslash.
            </value>
            <example>
            <list type="table">
              <listheader>
                <term>Original</term>
                <term>Transformed</term>
              </listheader>
              <item>
                <term>/var/log/auth.log</term>
                <term>&quot;/var/log/auth.log&quot;</term>
              </item>
              <item>
                <term>/var/mp3/Guns N' Roses</term>
                <term>&quot;/var/mp3/Guns N' Roses&quot;</term>
              </item>
              <item>
                <term>/var/garbage!/temp</term>
                <term>&quot;/var/garbage!/temp&quot;</term>
              </item>
              <item>
                <term>/var/would be 'kewl'!, not?</term>
                <term>&quot;/var/would be 'kewl'!, not?&quot;</term>
              </item>
              <item>
                <term></term>
                <term>&quot;&quot;</term>
              </item>
              <item>
                <term>Hello &quot;World&quot;</term>
                <term>&quot;Hello \&quot;World&quot;</term>
              </item>
            </list>
            </example>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.ScpClient">
            <summary>
            Provides SCP client functionality.
            </summary>
            <remarks>
            <para>
            More information on the SCP protocol is available here:
            https://github.com/net-ssh/net-scp/blob/master/lib/net/scp.rb
            </para>
            <para>
            Known issues in OpenSSH:
            <list type="bullet">
              <item>
                <description>Recursive download (-prf) does not deal well with specific UTF-8 and newline characters.</description>
                <description>Recursive update does not support empty path for uploading to home directory.</description>
              </item>
            </list>
            </para>
            </remarks>
            <summary>
            Provides SCP client functionality.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.ScpClient.OperationTimeout">
            <summary>
            Gets or sets the operation timeout.
            </summary>
            <value>
            The timeout to wait until an operation completes. The default value is negative
            one (-1) milliseconds, which indicates an infinite time-out period.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.ScpClient.BufferSize">
            <summary>
            Gets or sets the size of the buffer.
            </summary>
            <value>
            The size of the buffer. The default buffer size is 16384 bytes.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.ScpClient.RemotePathTransformation">
            <summary>
            Gets or sets the transformation to apply to remote paths.
            </summary>
            <value>
            The transformation to apply to remote paths. The default is <see cref="P:KellermanSoftware.Renci.SshNet.RemotePathTransformation.DoubleQuote"/>.
            </value>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is <c>null</c>.</exception>
            <remarks>
            <para>
            This transformation is applied to the remote file or directory path that is passed to the
            <c>scp</c> command.
            </para>
            <para>
            See <see cref="T:KellermanSoftware.Renci.SshNet.RemotePathTransformation"/> for the transformations that are supplied
            out-of-the-box with SSH.NET.
            </para>
            </remarks>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.ScpClient.Downloading">
            <summary>
            Occurs when downloading file.
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.ScpClient.Uploading">
            <summary>
            Occurs when uploading file.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ScpClient.#ctor(KellermanSoftware.Renci.SshNet.ConnectionInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.ScpClient"/> class.
            </summary>
            <param name="connectionInfo">The connection info.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="connectionInfo"/> is <c>null</c>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ScpClient.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.ScpClient"/> class.
            </summary>
            <param name="host">Connection host.</param>
            <param name="port">Connection port.</param>
            <param name="username">Authentication username.</param>
            <param name="password">Authentication password.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="password"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="host"/> is invalid, or <paramref name="username"/> is <c>null</c> or contains only whitespace characters.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="port"/> is not within <see cref="F:System.Net.IPEndPoint.MinPort"/> and <see cref="F:System.Net.IPEndPoint.MaxPort"/>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ScpClient.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.ScpClient"/> class.
            </summary>
            <param name="host">Connection host.</param>
            <param name="username">Authentication username.</param>
            <param name="password">Authentication password.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="password"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="host"/> is invalid, or <paramref name="username"/> is <c>null</c> or contains only whitespace characters.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ScpClient.#ctor(System.String,System.Int32,System.String,KellermanSoftware.Renci.SshNet.PrivateKeyFile[])">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.ScpClient"/> class.
            </summary>
            <param name="host">Connection host.</param>
            <param name="port">Connection port.</param>
            <param name="username">Authentication username.</param>
            <param name="keyFiles">Authentication private key file(s) .</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyFiles"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="host"/> is invalid, -or- <paramref name="username"/> is <c>null</c> or contains only whitespace characters.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="port"/> is not within <see cref="F:System.Net.IPEndPoint.MinPort"/> and <see cref="F:System.Net.IPEndPoint.MaxPort"/>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ScpClient.#ctor(System.String,System.String,KellermanSoftware.Renci.SshNet.PrivateKeyFile[])">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.ScpClient"/> class.
            </summary>
            <param name="host">Connection host.</param>
            <param name="username">Authentication username.</param>
            <param name="keyFiles">Authentication private key file(s) .</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyFiles"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="host"/> is invalid, -or- <paramref name="username"/> is <c>null</c> or contains only whitespace characters.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ScpClient.#ctor(KellermanSoftware.Renci.SshNet.ConnectionInfo,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.ScpClient"/> class.
            </summary>
            <param name="connectionInfo">The connection info.</param>
            <param name="ownsConnectionInfo">Specified whether this instance owns the connection info.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="connectionInfo"/> is <c>null</c>.</exception>
            <remarks>
            If <paramref name="ownsConnectionInfo"/> is <c>true</c>, then the
            connection info will be disposed when this instance is disposed.
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ScpClient.#ctor(KellermanSoftware.Renci.SshNet.ConnectionInfo,System.Boolean,KellermanSoftware.Renci.SshNet.IServiceFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.ScpClient"/> class.
            </summary>
            <param name="connectionInfo">The connection info.</param>
            <param name="ownsConnectionInfo">Specified whether this instance owns the connection info.</param>
            <param name="serviceFactory">The factory to use for creating new services.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="connectionInfo"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="serviceFactory"/> is <c>null</c>.</exception>
            <remarks>
            If <paramref name="ownsConnectionInfo"/> is <c>true</c>, then the
            connection info will be disposed when this instance is disposed.
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ScpClient.Upload(System.IO.Stream,System.String)">
            <summary>
            Uploads the specified stream to the remote host.
            </summary>
            <param name="source">The <see cref="T:System.IO.Stream"/> to upload.</param>
            <param name="path">A relative or absolute path for the remote file.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is a zero-length <see cref="T:System.String"/>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.ScpException">A directory with the specified path exists on the remote host.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">The secure copy execution request was rejected by the server.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ScpClient.Download(System.String,System.IO.Stream)">
            <summary>
            Downloads the specified file from the remote host to the stream.
            </summary>
            <param name="filename">A relative or absolute path for the remote file.</param>
            <param name="destination">The <see cref="T:System.IO.Stream"/> to download the remote file to.</param>
            <exception cref="T:System.ArgumentException"><paramref name="filename"/> is <c>null</c> or contains only whitespace characters.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.ScpException"><paramref name="filename"/> exists on the remote host, and is not a regular file.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">The secure copy execution request was rejected by the server.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ScpClient.UploadFileModeAndName(KellermanSoftware.Renci.SshNet.Channels.IChannelSession,System.IO.Stream,System.Int64,System.String)">
            <summary>
            Sets mode, size and name of file being upload.
            </summary>
            <param name="channel">The channel to perform the upload in.</param>
            <param name="input">A <see cref="T:System.IO.Stream"/> from which any feedback from the server can be read.</param>
            <param name="fileSize">The size of the content to upload.</param>
            <param name="serverFileName">The name of the file, without path, to which the content is to be uploaded.</param>
            <remarks>
            <para>
            When the SCP transfer is already initiated for a file, a zero-length <see cref="T:System.String"/> should
            be specified for <paramref name="serverFileName"/>. This prevents the server from uploading the
            content to a file with path <c>&lt;file path&gt;/<paramref name="serverFileName"/></c> if there's
            already a directory with this path, and allows us to receive an error response.
            </para>
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ScpClient.UploadFileContent(KellermanSoftware.Renci.SshNet.Channels.IChannelSession,System.IO.Stream,System.IO.Stream,System.String)">
            <summary>
            Uploads the content of a file.
            </summary>
            <param name="channel">The channel to perform the upload in.</param>
            <param name="input">A <see cref="T:System.IO.Stream"/> from which any feedback from the server can be read.</param>
            <param name="source">The content to upload.</param>
            <param name="remoteFileName">The name of the remote file, without path, to which the content is uploaded.</param>
            <remarks>
            <paramref name="remoteFileName"/> is only used for raising the <see cref="E:KellermanSoftware.Renci.SshNet.ScpClient.Uploading"/> event.
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ScpClient.CheckReturnCode(System.IO.Stream)">
            <summary>
            Checks the return code.
            </summary>
            <param name="input">The output stream.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ScpClient.ReadString(System.IO.Stream)">
            <summary>
            Read a LF-terminated string from the <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to read from.</param>
            <returns>
            The string without trailing LF.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ScpClient.Upload(System.IO.FileInfo,System.String)">
            <summary>
            Uploads the specified file to the remote host.
            </summary>
            <param name="fileInfo">The file system info.</param>
            <param name="path">A relative or absolute path for the remote file.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="fileInfo" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is a zero-length <see cref="T:System.String"/>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.ScpException">A directory with the specified path exists on the remote host.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">The secure copy execution request was rejected by the server.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ScpClient.Upload(System.IO.DirectoryInfo,System.String)">
            <summary>
            Uploads the specified directory to the remote host.
            </summary>
            <param name="directoryInfo">The directory info.</param>
            <param name="path">A relative or absolute path for the remote directory.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="directoryInfo"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is a zero-length string.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.ScpException"><paramref name="path"/> does not exist on the remote host, is not a directory or the user does not have the required permission.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">The secure copy execution request was rejected by the server.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ScpClient.Download(System.String,System.IO.FileInfo)">
            <summary>
            Downloads the specified file from the remote host to local file.
            </summary>
            <param name="filename">Remote host file name.</param>
            <param name="fileInfo">Local file information.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="fileInfo"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="filename"/> is <c>null</c> or empty.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.ScpException"><paramref name="filename"/> exists on the remote host, and is not a regular file.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">The secure copy execution request was rejected by the server.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ScpClient.Download(System.String,System.IO.DirectoryInfo)">
            <summary>
            Downloads the specified directory from the remote host to local directory.
            </summary>
            <param name="directoryName">Remote host directory name.</param>
            <param name="directoryInfo">Local directory information.</param>
            <exception cref="T:System.ArgumentException"><paramref name="directoryName"/> is <c>null</c> or empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="directoryInfo"/> is <c>null</c>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.ScpException">File or directory with the specified path does not exist on the remote host.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">The secure copy execution request was rejected by the server.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ScpClient.UploadTimes(KellermanSoftware.Renci.SshNet.Channels.IChannelSession,System.IO.Stream,System.IO.FileSystemInfo)">
            <summary>
            Uploads the <see cref="P:System.IO.FileSystemInfo.LastWriteTimeUtc"/> and <see cref="P:System.IO.FileSystemInfo.LastAccessTimeUtc"/>
            of the next file or directory to upload.
            </summary>
            <param name="channel">The channel to perform the upload in.</param>
            <param name="input">A <see cref="T:System.IO.Stream"/> from which any feedback from the server can be read.</param>
            <param name="fileOrDirectory">The file or directory to upload.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ScpClient.UploadDirectoryContent(KellermanSoftware.Renci.SshNet.Channels.IChannelSession,System.IO.Stream,System.IO.DirectoryInfo)">
            <summary>
            Upload the files and subdirectories in the specified directory.
            </summary>
            <param name="channel">The channel to perform the upload in.</param>
            <param name="input">A <see cref="T:System.IO.Stream"/> from which any feedback from the server can be read.</param>
            <param name="directoryInfo">The directory to upload.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ScpClient.UploadDirectoryModeAndName(KellermanSoftware.Renci.SshNet.Channels.IChannelSession,System.IO.Stream,System.String)">
            <summary>
            Sets mode and name of the directory being upload.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ScpClient.IsValidScpFilePath(System.String)">
            <summary>
            Return a value indicating whether the specified path is a valid SCP file path.
            </summary>
            <param name="path">The path to verify.</param>
            <returns>
            <see langword="true"/> if <paramref name="path"/> is a valid SCP file path; otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            To match OpenSSH behavior (introduced as a result of CVE-2018-20685), a file path is considered
            invalid in any of the following conditions:
            <list type="bullet">
              <item>
                <description><paramref name="path"/> is a zero-length string.</description>
              </item>
              <item>
                <description><paramref name="path"/> is &quot;<c>.</c>&quot;.</description>
              </item>
              <item>
                <description><paramref name="path"/> is &quot;<c>..</c>&quot;.</description>
              </item>
              <item>
                <description><paramref name="path"/> contains a forward slash (/).</description>
              </item>
            </list>
            </remarks>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Security.Algorithm">
            <summary>
            Represents the abstract base class from which all implementations of algorithms must inherit.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.Algorithm.Name">
            <summary>
            Gets algorithm name.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Security.CertificateHostAlgorithm">
            <summary>
            Implements certificate support for host algorithm.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.CertificateHostAlgorithm.Data">
            <summary>
            Gets the host key data.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.CertificateHostAlgorithm.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Security.CertificateHostAlgorithm"/> class.
            </summary>
            <param name="name">The host key name.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.CertificateHostAlgorithm.Sign(System.Byte[])">
            <summary>
            Signs the specified data.
            </summary>
            <param name="data">The data.</param>
            <returns>Signed data.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.CertificateHostAlgorithm.VerifySignature(System.Byte[],System.Byte[])">
            <summary>
            Verifies the signature.
            </summary>
            <param name="data">The data.</param>
            <param name="signature">The signature.</param>
            <returns><c>true</c> if signature was successfully verified; otherwise <c>false</c>.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.AsymmetricCipher">
            <summary>
            Base class for asymmetric cipher implementations.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.Cryptography.AsymmetricCipher.MinimumSize">
            <summary>
            Gets the minimum data size.
            </summary>
            <value>
            The minimum data size.
            </value>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.BCrypt">
            <summary>BCrypt implementation.</summary>
            <remarks>
             <para>
                   BCrypt implements OpenBSD-style Blowfish password hashing using the scheme described in
                   <a href="http://www.usenix.org/event/usenix99/provos/provos_html/index.html">"A Future-
                   Adaptable Password Scheme"</a> by Niels Provos and David Mazieres.
             </para>
             <para>
                   This password hashing system tries to thwart off-line password cracking using a
                   computationally-intensive hashing algorithm, based on Bruce Schneier's Blowfish cipher.
                   The work factor of the algorithm is parameterised, so it can be increased as computers
                   get faster.
             </para>
             <para>
                   Usage is really simple. To hash a password for the first time, call the <see
                   cref="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.BCrypt.HashPassword(System.String)"/> method with a random salt, like this:
             </para>
             <code>string pw_hash = BCrypt.HashPassword(plain_password);</code>
             <para>
                   To check whether a plaintext password matches one that has been hashed previously,
                   use the <see cref="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.BCrypt.Verify(System.String,System.String)"/> method:
             </para>
             <code>
                if (BCrypt.Verify(candidate_password, stored_hash))
                    Console.WriteLine("It matches");
                else
                    Console.WriteLine("It does not match");
              </code>
              <para>
                    The <see cref="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.BCrypt.GenerateSalt"/> method takes an optional parameter (workFactor) that
                    determines the computational complexity of the hashing:
              </para>
              <code>
                string strong_salt = BCrypt.GenerateSalt(10);
                string stronger_salt = BCrypt.GenerateSalt(12);
              </code>
              <para>
                    The amount of work increases exponentially (2^workFactor), so each increment is twice
                    as much work. The default workFactor is 10, and the valid range is 4 to 31.
              </para>
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.BCrypt.HashString(System.String)">
            <summary>
             Hash a string using the OpenBSD bcrypt scheme and a salt generated by <see
             cref="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.BCrypt.GenerateSalt"/>.
            </summary>
            <remarks>Just an alias for HashPassword.</remarks>
            <param name="source">The string to hash.</param>
            <returns>The hashed string.</returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.BCrypt.HashString(System.String,System.Int32)">
            <summary>
             Hash a string using the OpenBSD bcrypt scheme and a salt generated by <see
             cref="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.BCrypt.GenerateSalt"/>.
            </summary>
            <remarks>Just an alias for HashPassword.</remarks>
            <param name="source">  The string to hash.</param>
            <param name="workFactor">The log2 of the number of rounds of hashing to apply - the work
                                     factor therefore increases as 2^workFactor.</param>
            <returns>The hashed string.</returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.BCrypt.HashPassword(System.String)">
            <summary>
             Hash a password using the OpenBSD bcrypt scheme and a salt generated by <see
             cref="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.BCrypt.GenerateSalt"/>.
            </summary>
            <param name="input">The password to hash.</param>
            <returns>The hashed password.</returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.BCrypt.HashPassword(System.String,System.Int32)">
            <summary>
             Hash a password using the OpenBSD bcrypt scheme and a salt generated by <see
             cref="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.BCrypt.GenerateSalt(System.Int32)"/> using the given <paramref name="workFactor"/>.
            </summary>
            <param name="input">     The password to hash.</param>
            <param name="workFactor">The log2 of the number of rounds of hashing to apply - the work
                                     factor therefore increases as 2^workFactor.</param>
            <returns>The hashed password.</returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.BCrypt.HashPassword(System.String,System.String)">
            <summary>Hash a password using the OpenBSD bcrypt scheme.</summary>
            <exception cref="T:System.ArgumentException">Thrown when one or more arguments have unsupported or
                                                illegal values.</exception>
            <param name="input">The password to hash.</param>
            <param name="salt">    the salt to hash with (perhaps generated using BCrypt.gensalt).</param>
            <returns>The hashed password</returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.BCrypt.GenerateSalt(System.Int32)">
            <summary>
             Generate a salt for use with the <see cref="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.BCrypt.HashPassword(System.String,System.String)"/> method.
            </summary>
            <param name="workFactor">The log2 of the number of rounds of hashing to apply - the work
                                     factor therefore increases as 2**workFactor.</param>
            <returns>A base64 encoded salt value.</returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.BCrypt.GenerateSalt">
            <summary>
             Generate a salt for use with the <see cref="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.BCrypt.HashPassword(System.String,System.String)"/> method
             selecting a reasonable default for the number of hashing rounds to apply.
            </summary>
            <returns>A base64 encoded salt value.</returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.BCrypt.Verify(System.String,System.String)">
            <summary>
             Verifies that the hash of the given <paramref name="text"/> matches the provided
             <paramref name="hash"/>
            </summary>
            <param name="text">The text to verify.</param>
            <param name="hash"> The previously-hashed password.</param>
            <returns>true if the passwords match, false otherwise.</returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.BCrypt.EncodeBase64(System.Byte[],System.Int32)">
            <summary>
             Encode a byte array using bcrypt's slightly-modified base64 encoding scheme. Note that this
             is *not* compatible with the standard MIME-base64 encoding.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown when one or more arguments have unsupported or
                                                illegal values.</exception>
            <param name="byteArray">The byte array to encode.</param>
            <param name="length">   The number of bytes to encode.</param>
            <returns>Base64-encoded string.</returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.BCrypt.DecodeBase64(System.String,System.Int32)">
            <summary>
             Decode a string encoded using bcrypt's base64 scheme to a byte array. Note that this is *not*
             compatible with the standard MIME-base64 encoding.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown when one or more arguments have unsupported or
                                                illegal values.</exception>
            <param name="encodedstring">The string to decode.</param>
            <param name="maximumBytes"> The maximum bytes to decode.</param>
            <returns>The decoded byte array.</returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.BCrypt.Char64(System.Char)">
            <summary>
             Look up the 3 bits base64-encoded by the specified character, range-checking against
             conversion table.
            </summary>
            <param name="character">The base64-encoded value.</param>
            <returns>The decoded value of x.</returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.BCrypt.Encipher(System.UInt32[],System.Int32)">
            <summary>Blowfish encipher a single 64-bit block encoded as two 32-bit halves.</summary>
            <param name="blockArray">An array containing the two 32-bit half blocks.</param>
            <param name="offset">    The position in the array of the blocks.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.BCrypt.StreamToWord(System.Byte[],System.Int32@)">
            <summary>Cycically extract a word of key material.</summary>
            <param name="data">The string to extract the data from.</param>
            <param name="offset"> [in,out] The current offset.</param>
            <returns>The next word of material from data.</returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.BCrypt.InitializeKey">
            <summary>Initializes the Blowfish key schedule.</summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.BCrypt.Key(System.Byte[])">
            <summary>Key the Blowfish cipher.</summary>
            <param name="keyBytes">The key byte array.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.BCrypt.EKSKey(System.Byte[],System.Byte[])">
            <summary>
             Perform the "enhanced key schedule" step described by Provos and Mazieres in "A Future-
             Adaptable Password Scheme" http://www.openbsd.org/papers/bcrypt-paper.ps.
            </summary>
            <param name="saltBytes"> Salt byte array.</param>
            <param name="inputBytes">Input byte array.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.BCrypt.CryptRaw(System.Byte[],System.Byte[],System.Int32)">
            <summary>Perform the central hashing step in the bcrypt scheme.</summary>
            <exception cref="T:System.ArgumentException">Thrown when one or more arguments have unsupported or
                                                illegal values.</exception>
            <param name="inputBytes">The input byte array to hash.</param>
            <param name="saltBytes"> The salt byte array to hash with.</param>
            <param name="logRounds"> The binary logarithm of the number of rounds of hashing to apply.</param>
            <returns>A byte array containing the hashed result.</returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.BCrypt.Hash(System.Byte[],System.Byte[],System.Byte[])">
            Compatibility with new OpenBSD function.
            Ported from SSHJ library (https://github.com/hierynomus/sshj)
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.BCrypt.Pbkdf(System.Byte[],System.Byte[],System.Int32,System.Byte[])">
            <summary>
            Applies the Bcrypt kdf to derive a key and iv from the passphrase, 
            the key/iv are returned in the output variable.
            Ported from the SSHJ library. https://github.com/hierynomus/sshj
            </summary>
            <param name="password"></param>
            <param name="salt"></param>
            <param name="rounds"></param>
            <param name="output"></param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.BCrypt.AppendArrays(System.Byte[],System.Byte[][])">
            <summary>
            Appends multiple byte arrays into one array.
            </summary>
            <param name="b1"></param>
            <param name="others"></param>
            <returns></returns>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.BCrypt.SaltParseException">
            <summary>Exception for signalling parse errors. </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.BCrypt.SaltParseException.#ctor">
            <summary>Default constructor. </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.BCrypt.SaltParseException.#ctor(System.String)">
            <summary>Initializes a new instance of <see cref="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.BCrypt.SaltParseException"/>.</summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.BCrypt.SaltParseException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of <see cref="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.BCrypt.SaltParseException"/>.</summary>
            <param name="message">       The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.BlockCipher">
            <summary>
            Base class for block cipher implementations.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Security.Cryptography.BlockCipher._blockSize">
            <summary>
            Gets the size of the block in bytes.
            </summary>
            <value>
            The size of the block in bytes.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.Cryptography.BlockCipher.MinimumSize">
            <summary>
            Gets the minimum data size.
            </summary>
            <value>
            The minimum data size.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.Cryptography.BlockCipher.BlockSize">
            <summary>
            Gets the size of the block.
            </summary>
            <value>
            The size of the block.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.BlockCipher.#ctor(System.Byte[],System.Byte,KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.CipherMode,KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.CipherPadding)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.BlockCipher"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="blockSize">Size of the block.</param>
            <param name="mode">Cipher mode.</param>
            <param name="padding">Cipher padding.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.BlockCipher.Encrypt(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encrypts the specified data.
            </summary>
            <param name="data">The data.</param>
            <param name="offset">The zero-based offset in <paramref name="data"/> at which to begin encrypting.</param>
            <param name="length">The number of bytes to encrypt from <paramref name="data"/>.</param>
            <returns>Encrypted data</returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.BlockCipher.Decrypt(System.Byte[])">
            <summary>
            Decrypts the specified data.
            </summary>
            <param name="data">The data.</param>
            <returns>Decrypted data</returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.BlockCipher.Decrypt(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decrypts the specified input.
            </summary>
            <param name="data">The input.</param>
            <param name="offset">The zero-based offset in <paramref name="data"/> at which to begin decrypting.</param>
            <param name="length">The number of bytes to decrypt from <paramref name="data"/>.</param>
            <returns>
            The decrypted data.
            </returns>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.Cipher">
            <summary>
            Base class for cipher implementation.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.Cryptography.Cipher.MinimumSize">
            <summary>
            Gets the minimum data size.
            </summary>
            <value>
            The minimum data size.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Cipher.Encrypt(System.Byte[])">
            <summary>
            Encrypts the specified input.
            </summary>
            <param name="input">The input.</param>
            <returns>Encrypted data.</returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Cipher.Encrypt(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encrypts the specified input.
            </summary>
            <param name="input">The input.</param>
            <param name="offset">The zero-based offset in <paramref name="input"/> at which to begin encrypting.</param>
            <param name="length">The number of bytes to encrypt from <paramref name="input"/>.</param>
            <returns>
            The encrypted data.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Cipher.Decrypt(System.Byte[])">
            <summary>
            Decrypts the specified input.
            </summary>
            <param name="input">The input.</param>
            <returns>
            The decrypted data.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Cipher.Decrypt(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decrypts the specified input.
            </summary>
            <param name="input">The input.</param>
            <param name="offset">The zero-based offset in <paramref name="input"/> at which to begin decrypting.</param>
            <param name="length">The number of bytes to decrypt from <paramref name="input"/>.</param>
            <returns>
            The decrypted data.
            </returns>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.CipherDigitalSignature">
            <summary>
            Implements digital signature where where asymmetric cipher is used,
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.CipherDigitalSignature.#ctor(KellermanSoftware.Renci.SshNet.Common.ObjectIdentifier,KellermanSoftware.Renci.SshNet.Security.Cryptography.AsymmetricCipher)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.CipherDigitalSignature"/> class.
            </summary>
            <param name="oid">The object identifier.</param>
            <param name="cipher">The cipher.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.CipherDigitalSignature.Verify(System.Byte[],System.Byte[])">
            <summary>
            Verifies the signature.
            </summary>
            <param name="input">The input.</param>
            <param name="signature">The signature.</param>
            <returns>
              <c>True</c> if signature was successfully verified; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.CipherDigitalSignature.Sign(System.Byte[])">
            <summary>
            Creates the signature.
            </summary>
            <param name="input">The input.</param>
            <returns>
            Signed input data.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.CipherDigitalSignature.Hash(System.Byte[])">
            <summary>
            Hashes the specified input.
            </summary>
            <param name="input">The input.</param>
            <returns>Hashed data.</returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.CipherDigitalSignature.DerEncode(System.Byte[])">
            <summary>
            Encodes hash using DER.
            </summary>
            <param name="hashData">The hash data.</param>
            <returns>DER Encoded byte array</returns>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.AesCipher">
            <summary>
            AES cipher implementation.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.AesCipher.#ctor(System.Byte[],KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.CipherMode,KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.CipherPadding)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.AesCipher"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="mode">The mode.</param>
            <param name="padding">The padding.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Keysize is not valid for this algorithm.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.AesCipher.EncryptBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Encrypts the specified region of the input byte array and copies the encrypted data to the specified region of the output byte array.
            </summary>
            <param name="inputBuffer">The input data to encrypt.</param>
            <param name="inputOffset">The offset into the input byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the input byte array to use as data.</param>
            <param name="outputBuffer">The output to which to write encrypted data.</param>
            <param name="outputOffset">The offset into the output byte array from which to begin writing data.</param>
            <returns>
            The number of bytes encrypted.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="inputBuffer"/> or <paramref name="outputBuffer"/> is <c>null</c>.</exception>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="inputBuffer"/> or <paramref name="outputBuffer"/> is too short.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.AesCipher.DecryptBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Decrypts the specified region of the input byte array and copies the decrypted data to the specified region of the output byte array.
            </summary>
            <param name="inputBuffer">The input data to decrypt.</param>
            <param name="inputOffset">The offset into the input byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the input byte array to use as data.</param>
            <param name="outputBuffer">The output to which to write decrypted data.</param>
            <param name="outputOffset">The offset into the output byte array from which to begin writing data.</param>
            <returns>
            The number of bytes decrypted.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="inputBuffer"/> or <paramref name="outputBuffer"/> is <c>null</c>.</exception>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="inputBuffer"/> or <paramref name="outputBuffer"/> is too short.</exception>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.Arc4Cipher">
            <summary>
            Implements ARCH4 cipher algorithm
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.Arc4Cipher._engineState">
            <summary>
             Holds the state of the RC4 engine
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.Arc4Cipher.MinimumSize">
            <summary>
            Gets the minimum data size.
            </summary>
            <value>
            The minimum data size.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.Arc4Cipher.#ctor(System.Byte[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.Arc4Cipher" /> class.
            </summary>
            <param name="key">The key.</param>
            <param name="dischargeFirstBytes">if set to <c>true</c> will disharged first 1536 bytes.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key" /> is <c>null</c>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.Arc4Cipher.EncryptBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Encrypts the specified region of the input byte array and copies the encrypted data to the specified region of the output byte array.
            </summary>
            <param name="inputBuffer">The input data to encrypt.</param>
            <param name="inputOffset">The offset into the input byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the input byte array to use as data.</param>
            <param name="outputBuffer">The output to which to write encrypted data.</param>
            <param name="outputOffset">The offset into the output byte array from which to begin writing data.</param>
            <returns>
            The number of bytes encrypted.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.Arc4Cipher.DecryptBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Decrypts the specified region of the input byte array and copies the decrypted data to the specified region of the output byte array.
            </summary>
            <param name="inputBuffer">The input data to decrypt.</param>
            <param name="inputOffset">The offset into the input byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the input byte array to use as data.</param>
            <param name="outputBuffer">The output to which to write decrypted data.</param>
            <param name="outputOffset">The offset into the output byte array from which to begin writing data.</param>
            <returns>
            The number of bytes decrypted.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.Arc4Cipher.Encrypt(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encrypts the specified input.
            </summary>
            <param name="input">The input.</param>
            <param name="offset">The zero-based offset in <paramref name="input"/> at which to begin encrypting.</param>
            <param name="length">The number of bytes to encrypt from <paramref name="input"/>.</param>
            <returns>
            Encrypted data.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.Arc4Cipher.Decrypt(System.Byte[])">
            <summary>
            Decrypts the specified input.
            </summary>
            <param name="input">The input.</param>
            <returns>
            The decrypted data.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.Arc4Cipher.Decrypt(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decrypts the specified input.
            </summary>
            <param name="input">The input.</param>
            <param name="offset">The zero-based offset in <paramref name="input"/> at which to begin decrypting.</param>
            <param name="length">The number of bytes to decrypt from <paramref name="input"/>.</param>
            <returns>
            The decrypted data.
            </returns>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.BlowfishCipher">
            <summary>
            Blowfish cipher implementation.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.BlowfishCipher._s0">
            <summary>
            The s-boxes
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.BlowfishCipher._s1">
            <summary>
            The s-boxes
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.BlowfishCipher._s2">
            <summary>
            The s-boxes
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.BlowfishCipher._s3">
            <summary>
            The s-boxes
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.BlowfishCipher._p">
            <summary>
            The p-array
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.BlowfishCipher.#ctor(System.Byte[],KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.CipherMode,KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.CipherPadding)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.BlowfishCipher"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="mode">The mode.</param>
            <param name="padding">The padding.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Keysize is not valid for this algorithm.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.BlowfishCipher.EncryptBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Encrypts the specified region of the input byte array and copies the encrypted data to the specified region of the output byte array.
            </summary>
            <param name="inputBuffer">The input data to encrypt.</param>
            <param name="inputOffset">The offset into the input byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the input byte array to use as data.</param>
            <param name="outputBuffer">The output to which to write encrypted data.</param>
            <param name="outputOffset">The offset into the output byte array from which to begin writing data.</param>
            <returns>
            The number of bytes encrypted.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.BlowfishCipher.DecryptBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Decrypts the specified region of the input byte array and copies the decrypted data to the specified region of the output byte array.
            </summary>
            <param name="inputBuffer">The input data to decrypt.</param>
            <param name="inputOffset">The offset into the input byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the input byte array to use as data.</param>
            <param name="outputBuffer">The output to which to write decrypted data.</param>
            <param name="outputOffset">The offset into the output byte array from which to begin writing data.</param>
            <returns>
            The number of bytes decrypted.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.BlowfishCipher.ProcessTable(System.UInt32,System.UInt32,System.UInt32[])">
            <summary>
            apply the encryption cycle to each value pair in the table.
            </summary>
            <param name="xl">The xl.</param>
            <param name="xr">The xr.</param>
            <param name="table">The table.</param>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.CastCipher">
            <summary>
            Implements CAST cipher algorithm
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.CastCipher._kr">
            <summary>
            The rotating round key
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.CastCipher._km">
            <summary>
            The masking round key
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.CastCipher.#ctor(System.Byte[],KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.CipherMode,KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.CipherPadding)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.CastCipher"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="mode">The mode.</param>
            <param name="padding">The padding.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Keysize is not valid for this algorithm.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.CastCipher.EncryptBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Encrypts the specified region of the input byte array and copies the encrypted data to the specified region of the output byte array.
            </summary>
            <param name="inputBuffer">The input data to encrypt.</param>
            <param name="inputOffset">The offset into the input byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the input byte array to use as data.</param>
            <param name="outputBuffer">The output to which to write encrypted data.</param>
            <param name="outputOffset">The offset into the output byte array from which to begin writing data.</param>
            <returns>
            The number of bytes encrypted.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.CastCipher.DecryptBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Decrypts the specified region of the input byte array and copies the decrypted data to the specified region of the output byte array.
            </summary>
            <param name="inputBuffer">The input data to decrypt.</param>
            <param name="inputOffset">The offset into the input byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the input byte array to use as data.</param>
            <param name="outputBuffer">The output to which to write decrypted data.</param>
            <param name="outputOffset">The offset into the output byte array from which to begin writing data.</param>
            <returns>
            The number of bytes decrypted.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.CastCipher.SetKey(System.Byte[])">
            <summary>
            Sets the subkeys using the same nomenclatureas described in RFC2144.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.CastCipher.F1(System.UInt32,System.UInt32,System.Int32)">
            <summary>
            The first of the three processing functions for the encryption and decryption.
            </summary>
            <param name="d">The input to be processed.</param>
            <param name="kmi">The mask to be used from Km[n].</param>
            <param name="kri">The rotation value to be used.</param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.CastCipher.F2(System.UInt32,System.UInt32,System.Int32)">
            <summary>
            The second of the three processing functions for the encryption and decryption.
            </summary>
            <param name="d">The input to be processed.</param>
            <param name="kmi">The mask to be used from Km[n].</param>
            <param name="kri">The rotation value to be used.</param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.CastCipher.F3(System.UInt32,System.UInt32,System.Int32)">
            <summary>
            The third of the three processing functions for the encryption and decryption.
            </summary>
            <param name="d">The input to be processed.</param>
            <param name="kmi">The mask to be used from Km[n].</param>
            <param name="kri">The rotation value to be used.</param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.CastCipher.CastEncipher(System.UInt32,System.UInt32,System.UInt32[])">
            <summary>
            Does the 16 rounds to encrypt the block.
            </summary>
            <param name="l0">The LH-32bits of the plaintext block.</param>
            <param name="r0">The RH-32bits of the plaintext block.</param>
            <param name="result">The result.</param>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.CipherMode">
            <summary>
            Base class for cipher mode implementations
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.CipherMode.Cipher">
            <summary>
            Gets the cipher.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.CipherMode.IV">
            <summary>
            Gets the IV vector.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.CipherMode._blockSize">
            <summary>
            Holds block size of the cipher.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.CipherMode.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.CipherMode"/> class.
            </summary>
            <param name="iv">The iv.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.CipherMode.Init(KellermanSoftware.Renci.SshNet.Security.Cryptography.BlockCipher)">
            <summary>
            Initializes the specified cipher mode.
            </summary>
            <param name="cipher">The cipher.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.CipherMode.EncryptBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Encrypts the specified region of the input byte array and copies the encrypted data to the specified region of the output byte array.
            </summary>
            <param name="inputBuffer">The input data to encrypt.</param>
            <param name="inputOffset">The offset into the input byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the input byte array to use as data.</param>
            <param name="outputBuffer">The output to which to write encrypted data.</param>
            <param name="outputOffset">The offset into the output byte array from which to begin writing data.</param>
            <returns>
            The number of bytes encrypted.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.CipherMode.DecryptBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Decrypts the specified region of the input byte array and copies the decrypted data to the specified region of the output byte array.
            </summary>
            <param name="inputBuffer">The input data to decrypt.</param>
            <param name="inputOffset">The offset into the input byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the input byte array to use as data.</param>
            <param name="outputBuffer">The output to which to write decrypted data.</param>
            <param name="outputOffset">The offset into the output byte array from which to begin writing data.</param>
            <returns>
            The number of bytes decrypted.
            </returns>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.CipherPadding">
            <summary>
            Base class for cipher padding implementations
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.CipherPadding.Pad(System.Int32,System.Byte[])">
            <summary>
            Pads the specified input to match the block size.
            </summary>
            <param name="blockSize">Size of the block.</param>
            <param name="input">The input.</param>
            <returns>
            Padded data array.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.CipherPadding.Pad(System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Pads the specified input to match the block size.
            </summary>
            <param name="blockSize">Size of the block.</param>
            <param name="input">The input.</param>
            <param name="offset">The zero-based offset in <paramref name="input"/> at which the data to pad starts.</param>
            <param name="length">The number of bytes in <paramref name="input"/> to take into account.</param>
            <returns>
            The padded data array.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.CipherPadding.Pad(System.Byte[],System.Int32)">
            <summary>
            Pads the specified input with a given number of bytes.
            </summary>
            <param name="input">The input.</param>
            <param name="paddinglength">The number of bytes to pad the input with.</param>
            <returns>
            The padded data array.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.CipherPadding.Pad(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Pads the specified input with a given number of bytes.
            </summary>
            <param name="input">The input.</param>
            <param name="offset">The zero-based offset in <paramref name="input"/> at which the data to pad starts.</param>
            <param name="length">The number of bytes in <paramref name="input"/> to take into account.</param>
            <param name="paddinglength">The number of bytes to pad the input with.</param>
            <returns>
            The padded data array.
            </returns>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.DesCipher">
            <summary>
            Implements DES cipher algorithm.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.DesCipher.#ctor(System.Byte[],KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.CipherMode,KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.CipherPadding)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.DesCipher"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="mode">The mode.</param>
            <param name="padding">The padding.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.DesCipher.EncryptBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Encrypts the specified region of the input byte array and copies the encrypted data to the specified region of the output byte array.
            </summary>
            <param name="inputBuffer">The input data to encrypt.</param>
            <param name="inputOffset">The offset into the input byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the input byte array to use as data.</param>
            <param name="outputBuffer">The output to which to write encrypted data.</param>
            <param name="outputOffset">The offset into the output byte array from which to begin writing data.</param>
            <returns>
            The number of bytes encrypted.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.DesCipher.DecryptBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Decrypts the specified region of the input byte array and copies the decrypted data to the specified region of the output byte array.
            </summary>
            <param name="inputBuffer">The input data to decrypt.</param>
            <param name="inputOffset">The offset into the input byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the input byte array to use as data.</param>
            <param name="outputBuffer">The output to which to write decrypted data.</param>
            <param name="outputOffset">The offset into the output byte array from which to begin writing data.</param>
            <returns>
            The number of bytes decrypted.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.DesCipher.GenerateWorkingKey(System.Boolean,System.Byte[])">
            <summary>
            Generates the working key.
            </summary>
            <param name="encrypting">if set to <c>true</c> [encrypting].</param>
            <param name="key">The key.</param>
            <returns>Generated working key.</returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.DesCipher.ValidateKey">
            <summary>
            Validates the key.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.DesCipher.DesFunc(System.Int32[],System.Byte[],System.Int32,System.Byte[],System.Int32)">
            <summary>
            Performs DES function.
            </summary>
            <param name="wKey">The w key.</param>
            <param name="input">The input.</param>
            <param name="inOff">The in off.</param>
            <param name="outBytes">The out bytes.</param>
            <param name="outOff">The out off.</param>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.Modes.CbcCipherMode">
            <summary>
            Implements CBC cipher mode
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.Modes.CbcCipherMode.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.Modes.CbcCipherMode"/> class.
            </summary>
            <param name="iv">The iv.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.Modes.CbcCipherMode.EncryptBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Encrypts the specified region of the input byte array and copies the encrypted data to the specified region of the output byte array.
            </summary>
            <param name="inputBuffer">The input data to encrypt.</param>
            <param name="inputOffset">The offset into the input byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the input byte array to use as data.</param>
            <param name="outputBuffer">The output to which to write encrypted data.</param>
            <param name="outputOffset">The offset into the output byte array from which to begin writing data.</param>
            <returns>
            The number of bytes encrypted.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.Modes.CbcCipherMode.DecryptBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Decrypts the specified region of the input byte array and copies the decrypted data to the specified region of the output byte array.
            </summary>
            <param name="inputBuffer">The input data to decrypt.</param>
            <param name="inputOffset">The offset into the input byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the input byte array to use as data.</param>
            <param name="outputBuffer">The output to which to write decrypted data.</param>
            <param name="outputOffset">The offset into the output byte array from which to begin writing data.</param>
            <returns>
            The number of bytes decrypted.
            </returns>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.Modes.CfbCipherMode">
            <summary>
            Implements CFB cipher mode
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.Modes.CfbCipherMode.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.Modes.CfbCipherMode"/> class.
            </summary>
            <param name="iv">The iv.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.Modes.CfbCipherMode.EncryptBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Encrypts the specified region of the input byte array and copies the encrypted data to the specified region of the output byte array.
            </summary>
            <param name="inputBuffer">The input data to encrypt.</param>
            <param name="inputOffset">The offset into the input byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the input byte array to use as data.</param>
            <param name="outputBuffer">The output to which to write encrypted data.</param>
            <param name="outputOffset">The offset into the output byte array from which to begin writing data.</param>
            <returns>
            The number of bytes encrypted.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.Modes.CfbCipherMode.DecryptBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Decrypts the specified region of the input byte array and copies the decrypted data to the specified region of the output byte array.
            </summary>
            <param name="inputBuffer">The input data to decrypt.</param>
            <param name="inputOffset">The offset into the input byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the input byte array to use as data.</param>
            <param name="outputBuffer">The output to which to write decrypted data.</param>
            <param name="outputOffset">The offset into the output byte array from which to begin writing data.</param>
            <returns>
            The number of bytes decrypted.
            </returns>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.Modes.CtrCipherMode">
            <summary>
            Implements CTR cipher mode
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.Modes.CtrCipherMode.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.Modes.CtrCipherMode"/> class.
            </summary>
            <param name="iv">The iv.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.Modes.CtrCipherMode.EncryptBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Encrypts the specified region of the input byte array and copies the encrypted data to the specified region of the output byte array.
            </summary>
            <param name="inputBuffer">The input data to encrypt.</param>
            <param name="inputOffset">The offset into the input byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the input byte array to use as data.</param>
            <param name="outputBuffer">The output to which to write encrypted data.</param>
            <param name="outputOffset">The offset into the output byte array from which to begin writing data.</param>
            <returns>
            The number of bytes encrypted.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.Modes.CtrCipherMode.DecryptBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Decrypts the specified region of the input byte array and copies the decrypted data to the specified region of the output byte array.
            </summary>
            <param name="inputBuffer">The input data to decrypt.</param>
            <param name="inputOffset">The offset into the input byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the input byte array to use as data.</param>
            <param name="outputBuffer">The output to which to write decrypted data.</param>
            <param name="outputOffset">The offset into the output byte array from which to begin writing data.</param>
            <returns>
            The number of bytes decrypted.
            </returns>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.Modes.OfbCipherMode">
            <summary>
            Implements OFB cipher mode
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.Modes.OfbCipherMode.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.Modes.OfbCipherMode"/> class.
            </summary>
            <param name="iv">The iv.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.Modes.OfbCipherMode.EncryptBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Encrypts the specified region of the input byte array and copies the encrypted data to the specified region of the output byte array.
            </summary>
            <param name="inputBuffer">The input data to encrypt.</param>
            <param name="inputOffset">The offset into the input byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the input byte array to use as data.</param>
            <param name="outputBuffer">The output to which to write encrypted data.</param>
            <param name="outputOffset">The offset into the output byte array from which to begin writing data.</param>
            <returns>
            The number of bytes encrypted.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.Modes.OfbCipherMode.DecryptBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Decrypts the specified region of the input byte array and copies the decrypted data to the specified region of the output byte array.
            </summary>
            <param name="inputBuffer">The input data to decrypt.</param>
            <param name="inputOffset">The offset into the input byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the input byte array to use as data.</param>
            <param name="outputBuffer">The output to which to write decrypted data.</param>
            <param name="outputOffset">The offset into the output byte array from which to begin writing data.</param>
            <returns>
            The number of bytes decrypted.
            </returns>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.Paddings.PKCS5Padding">
            <summary>
            Implements PKCS5 cipher padding
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.Paddings.PKCS5Padding.Pad(System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Pads the specified input to match the block size.
            </summary>
            <param name="blockSize">The size of the block.</param>
            <param name="input">The input.</param>
            <param name="offset">The zero-based offset in <paramref name="input"/> at which the data to pad starts.</param>
            <param name="length">The number of bytes in <paramref name="input"/> to take into account.</param>
            <returns>
            The padded data array.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.Paddings.PKCS5Padding.Pad(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Pads the specified input with a given number of bytes.
            </summary>
            <param name="input">The input.</param>
            <param name="offset">The zero-based offset in <paramref name="input"/> at which the data to pad starts.</param>
            <param name="length">The number of bytes in <paramref name="input"/> to take into account.</param>
            <param name="paddinglength">The number of bytes to pad the input with.</param>
            <returns>
            The padded data array.
            </returns>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.Paddings.PKCS7Padding">
            <summary>
            Implements PKCS7 cipher padding
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.Paddings.PKCS7Padding.Pad(System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Pads the specified input to match the block size.
            </summary>
            <param name="blockSize">The size of the block.</param>
            <param name="input">The input.</param>
            <param name="offset">The zero-based offset in <paramref name="input"/> at which the data to pad starts.</param>
            <param name="length">The number of bytes in <paramref name="input"/> to take into account.</param>
            <returns>
            The padded data array.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.Paddings.PKCS7Padding.Pad(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Pads the specified input with a given number of bytes.
            </summary>
            <param name="input">The input.</param>
            <param name="offset">The zero-based offset in <paramref name="input"/> at which the data to pad starts.</param>
            <param name="length">The number of bytes in <paramref name="input"/> to take into account.</param>
            <param name="paddinglength">The number of bytes to pad the input with.</param>
            <returns>
            The padded data array.
            </returns>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.RsaCipher">
            <summary>
            Implements RSA cipher algorithm.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.RsaCipher.#ctor(KellermanSoftware.Renci.SshNet.Security.RsaKey)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.RsaCipher"/> class.
            </summary>
            <param name="key">The RSA key.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.RsaCipher.Encrypt(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encrypts the specified data.
            </summary>
            <param name="data">The data.</param>
            <param name="offset">The zero-based offset in <paramref name="data"/> at which to begin encrypting.</param>
            <param name="length">The number of bytes to encrypt from <paramref name="data"/>.</param>
            <returns>Encrypted data.</returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.RsaCipher.Decrypt(System.Byte[])">
            <summary>
            Decrypts the specified data.
            </summary>
            <param name="data">The data.</param>
            <returns>
            The decrypted data.
            </returns>
            <exception cref="T:System.NotSupportedException">Only block type 01 or 02 are supported.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when decrypted block type is not supported.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.RsaCipher.Decrypt(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decrypts the specified input.
            </summary>
            <param name="data">The input.</param>
            <param name="offset">The zero-based offset in <paramref name="data"/> at which to begin decrypting.</param>
            <param name="length">The number of bytes to decrypt from <paramref name="data"/>.</param>
            <returns>
            The decrypted data.
            </returns>
            <exception cref="T:System.NotSupportedException">Only block type 01 or 02 are supported.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when decrypted block type is not supported.</exception>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.SerpentCipher">
            <summary>
            Implements Serpent cipher algorithm.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.SerpentCipher.#ctor(System.Byte[],KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.CipherMode,KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.CipherPadding)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.SerpentCipher"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="mode">The mode.</param>
            <param name="padding">The padding.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Keysize is not valid for this algorithm.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.SerpentCipher.EncryptBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Encrypts the specified region of the input byte array and copies the encrypted data to the specified region of the output byte array.
            </summary>
            <param name="inputBuffer">The input data to encrypt.</param>
            <param name="inputOffset">The offset into the input byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the input byte array to use as data.</param>
            <param name="outputBuffer">The output to which to write encrypted data.</param>
            <param name="outputOffset">The offset into the output byte array from which to begin writing data.</param>
            <returns>
            The number of bytes encrypted.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.SerpentCipher.DecryptBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Decrypts the specified region of the input byte array and copies the decrypted data to the specified region of the output byte array.
            </summary>
            <param name="inputBuffer">The input data to decrypt.</param>
            <param name="inputOffset">The offset into the input byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the input byte array to use as data.</param>
            <param name="outputBuffer">The output to which to write decrypted data.</param>
            <param name="outputOffset">The offset into the output byte array from which to begin writing data.</param>
            <returns>
            The number of bytes decrypted.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.SerpentCipher.MakeWorkingKey(System.Byte[])">
            <summary>
            Expand a user-supplied key material into a session key.
            </summary>
            <param name="key">The user-key bytes to use.</param>
            <returns>
            A session key.
            </returns>
            <exception cref="T:System.ArgumentException"><paramref name="key"/> is not multiple of 4 bytes.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.SerpentCipher.Sb0(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            S0 - { 3, 8,15, 1,10, 6, 5,11,14,13, 4, 2, 7, 0, 9,12 } - 15 terms.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <param name="c">The c.</param>
            <param name="d">The d.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.SerpentCipher.Ib0(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            InvSO - {13, 3,11, 0,10, 6, 5,12, 1,14, 4, 7,15, 9, 8, 2 } - 15 terms.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <param name="c">The c.</param>
            <param name="d">The d.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.SerpentCipher.Sb1(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            S1 - {15,12, 2, 7, 9, 0, 5,10, 1,11,14, 8, 6,13, 3, 4 } - 14 terms.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <param name="c">The c.</param>
            <param name="d">The d.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.SerpentCipher.Ib1(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            InvS1 - { 5, 8, 2,14,15, 6,12, 3,11, 4, 7, 9, 1,13,10, 0 } - 14 steps.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <param name="c">The c.</param>
            <param name="d">The d.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.SerpentCipher.Sb2(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            S2 - { 8, 6, 7, 9, 3,12,10,15,13, 1,14, 4, 0,11, 5, 2 } - 16 terms.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <param name="c">The c.</param>
            <param name="d">The d.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.SerpentCipher.Ib2(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            InvS2 - {12, 9,15, 4,11,14, 1, 2, 0, 3, 6,13, 5, 8,10, 7 } - 16 steps.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <param name="c">The c.</param>
            <param name="d">The d.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.SerpentCipher.Sb3(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            S3 - { 0,15,11, 8,12, 9, 6, 3,13, 1, 2, 4,10, 7, 5,14 } - 16 terms.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <param name="c">The c.</param>
            <param name="d">The d.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.SerpentCipher.Ib3(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            InvS3 - { 0, 9,10, 7,11,14, 6,13, 3, 5,12, 2, 4, 8,15, 1 } - 15 terms
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <param name="c">The c.</param>
            <param name="d">The d.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.SerpentCipher.Sb4(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            S4 - { 1,15, 8, 3,12, 0,11, 6, 2, 5, 4,10, 9,14, 7,13 } - 15 terms.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <param name="c">The c.</param>
            <param name="d">The d.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.SerpentCipher.Ib4(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            InvS4 - { 5, 0, 8, 3,10, 9, 7,14, 2,12,11, 6, 4,15,13, 1 } - 15 terms.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <param name="c">The c.</param>
            <param name="d">The d.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.SerpentCipher.Sb5(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            S5 - {15, 5, 2,11, 4,10, 9,12, 0, 3,14, 8,13, 6, 7, 1 } - 16 terms.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <param name="c">The c.</param>
            <param name="d">The d.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.SerpentCipher.Ib5(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            InvS5 - { 8,15, 2, 9, 4, 1,13,14,11, 6, 5, 3, 7,12,10, 0 } - 16 terms.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <param name="c">The c.</param>
            <param name="d">The d.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.SerpentCipher.Sb6(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            S6 - { 7, 2,12, 5, 8, 4, 6,11,14, 9, 1,15,13, 3,10, 0 } - 15 terms.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <param name="c">The c.</param>
            <param name="d">The d.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.SerpentCipher.Ib6(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            InvS6 - {15,10, 1,13, 5, 3, 6, 0, 4, 9,14, 7, 2,12, 8,11 } - 15 terms.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <param name="c">The c.</param>
            <param name="d">The d.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.SerpentCipher.Sb7(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            S7 - { 1,13,15, 0,14, 8, 2,11, 7, 4,12,10, 9, 3, 5, 6 } - 16 terms.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <param name="c">The c.</param>
            <param name="d">The d.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.SerpentCipher.Ib7(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            InvS7 - { 3, 0, 6,13, 9,14,15, 8, 5,12,11, 7,10, 1, 4, 2 } - 17 terms.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <param name="c">The c.</param>
            <param name="d">The d.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.SerpentCipher.LT">
            <summary>
            Apply the linear transformation to the register set.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.SerpentCipher.InverseLT">
            <summary>
            Apply the inverse of the linear transformation to the register set.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.TripleDesCipher">
            <summary>
            Implements 3DES cipher algorithm.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.TripleDesCipher.#ctor(System.Byte[],KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.CipherMode,KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.CipherPadding)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.TripleDesCipher"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="mode">The mode.</param>
            <param name="padding">The padding.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.TripleDesCipher.EncryptBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Encrypts the specified region of the input byte array and copies the encrypted data to the specified region of the output byte array.
            </summary>
            <param name="inputBuffer">The input data to encrypt.</param>
            <param name="inputOffset">The offset into the input byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the input byte array to use as data.</param>
            <param name="outputBuffer">The output to which to write encrypted data.</param>
            <param name="outputOffset">The offset into the output byte array from which to begin writing data.</param>
            <returns>
            The number of bytes encrypted.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.TripleDesCipher.DecryptBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Decrypts the specified region of the input byte array and copies the decrypted data to the specified region of the output byte array.
            </summary>
            <param name="inputBuffer">The input data to decrypt.</param>
            <param name="inputOffset">The offset into the input byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the input byte array to use as data.</param>
            <param name="outputBuffer">The output to which to write decrypted data.</param>
            <param name="outputOffset">The offset into the output byte array from which to begin writing data.</param>
            <returns>
            The number of bytes decrypted.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.TripleDesCipher.ValidateKey">
            <summary>
            Validates the key.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.TwofishCipher">
            <summary>
            Implements Twofish cipher algorithm
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.TwofishCipher.#ctor(System.Byte[],KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.CipherMode,KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.CipherPadding)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.TwofishCipher"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="mode">The mode.</param>
            <param name="padding">The padding.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Keysize is not valid for this algorithm.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.TwofishCipher.EncryptBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Encrypts the specified region of the input byte array and copies the encrypted data to the specified region of the output byte array.
            </summary>
            <param name="inputBuffer">The input data to encrypt.</param>
            <param name="inputOffset">The offset into the input byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the input byte array to use as data.</param>
            <param name="outputBuffer">The output to which to write encrypted data.</param>
            <param name="outputOffset">The offset into the output byte array from which to begin writing data.</param>
            <returns>
            The number of bytes encrypted.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.TwofishCipher.DecryptBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Decrypts the specified region of the input byte array and copies the decrypted data to the specified region of the output byte array.
            </summary>
            <param name="inputBuffer">The input data to decrypt.</param>
            <param name="inputOffset">The offset into the input byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the input byte array to use as data.</param>
            <param name="outputBuffer">The output to which to write decrypted data.</param>
            <param name="outputOffset">The offset into the output byte array from which to begin writing data.</param>
            <returns>
            The number of bytes decrypted.
            </returns>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.TwofishCipher.P_00">
            Define the fixed p0/p1 permutations used in keyed S-box lookup.
            By changing the following constant definitions, the S-boxes will
            automatically Get changed in the Twofish engine.
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.TwofishCipher.gSubKeys">
            gSubKeys[] and gSBox[] are eventually used in the
            encryption and decryption methods.
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.TwofishCipher.RS_MDS_Encode(System.Int32,System.Int32)">
             Use (12, 8) Reed-Solomon code over GF(256) to produce
             a key S-box 32-bit entity from 2 key material 32-bit
             entities.
            
             @param    k0 first 32-bit entity
             @param    k1 second 32-bit entity
             @return     Remainder polynomial Generated using RS code
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.Ciphers.TwofishCipher.RS_rem(System.Int32)">
            Reed-Solomon code parameters: (12,8) reversible code:
            <p>
            <pre>
            G(x) = x^4 + (a+1/a)x^3 + ax^2 + (a+1/a)x + 1
            </pre>
            where a = primitive root of field generator 0x14D
            </p>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.DigitalSignature">
            <summary>
            Base class for signature implementations
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.DigitalSignature.Verify(System.Byte[],System.Byte[])">
            <summary>
            Verifies the signature.
            </summary>
            <param name="input">The input.</param>
            <param name="signature">The signature.</param>
            <returns><c>True</c> if signature was successfully verified; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.DigitalSignature.Sign(System.Byte[])">
            <summary>
            Creates the signature.
            </summary>
            <param name="input">The input.</param>
            <returns>Signed input data.</returns>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.DsaDigitalSignature">
            <summary>
            Implements DSA digital signature algorithm.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.DsaDigitalSignature.#ctor(KellermanSoftware.Renci.SshNet.Security.DsaKey)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.DsaDigitalSignature" /> class.
            </summary>
            <param name="key">The DSA key.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.DsaDigitalSignature.Verify(System.Byte[],System.Byte[])">
            <summary>
            Verifies the signature.
            </summary>
            <param name="input">The input.</param>
            <param name="signature">The signature.</param>
            <returns>
            <c>true</c> if signature was successfully verified; otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.InvalidOperationException">Invalid signature.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.DsaDigitalSignature.Sign(System.Byte[])">
            <summary>
            Creates the signature.
            </summary>
            <param name="input">The input.</param>
            <returns>
            Signed input data.
            </returns>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">Invalid DSA key.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.DsaDigitalSignature.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.DsaDigitalSignature.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.DsaDigitalSignature.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.DsaDigitalSignature"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.EcdsaDigitalSignature">
            <summary>
            Implements ECDSA digital signature algorithm.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.EcdsaDigitalSignature.#ctor(KellermanSoftware.Renci.SshNet.Security.EcdsaKey)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.EcdsaDigitalSignature" /> class.
            </summary>
            <param name="key">The ECDSA key.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.EcdsaDigitalSignature.Verify(System.Byte[],System.Byte[])">
            <summary>
            Verifies the signature.
            </summary>
            <param name="input">The input.</param>
            <param name="signature">The signature.</param>
            <returns>
            <c>true</c> if signature was successfully verified; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.EcdsaDigitalSignature.Sign(System.Byte[])">
            <summary>
            Creates the signature.
            </summary>
            <param name="input">The input.</param>
            <returns>
            Signed input data.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.EcdsaDigitalSignature.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.EcdsaDigitalSignature.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.EcdsaDigitalSignature.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.EcdsaDigitalSignature"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.ED25519DigitalSignature">
            <summary>
            Implements ECDSA digital signature algorithm.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.ED25519DigitalSignature.#ctor(KellermanSoftware.Renci.SshNet.Security.ED25519Key)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.ED25519DigitalSignature" /> class.
            </summary>
            <param name="key">The ED25519Key key.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.ED25519DigitalSignature.Verify(System.Byte[],System.Byte[])">
            <summary>
            Verifies the signature.
            </summary>
            <param name="input">The input.</param>
            <param name="signature">The signature.</param>
            <returns>
            <c>true</c> if signature was successfully verified; otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.InvalidOperationException">Invalid signature.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.ED25519DigitalSignature.Sign(System.Byte[])">
            <summary>
            Creates the signature.
            </summary>
            <param name="input">The input.</param>
            <returns>
            Signed input data.
            </returns>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">Invalid ED25519Key key.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.ED25519DigitalSignature.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.ED25519DigitalSignature.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.ED25519DigitalSignature.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.ED25519DigitalSignature"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.HMACMD5">
            <summary>
            Computes a Hash-based Message Authentication Code (HMAC) by using the <see cref="T:System.Security.Cryptography.MD5"/> hash function.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.HMACMD5.#ctor(System.Byte[])">
            <summary>
            Initializes a <see cref="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.HMACMD5"/> with the specified key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.HMACMD5.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a <see cref="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.HMACSHA1"/> with the specified key and size of the computed hash code.
            </summary>
            <param name="key">The key.</param>
            <param name="hashSize">The size, in bits, of the computed hash code.</param>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.Cryptography.HMACMD5.HashSize">
            <summary>
            Gets the size, in bits, of the computed hash code.
            </summary>
            <value>
            The size, in bits, of the computed hash code.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.HMACMD5.HashFinal">
            <summary>
            Finalizes the hash computation after the last data is processed by the cryptographic stream object.
            </summary>
            <returns>
            The computed hash code.
            </returns>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.HMACSHA1">
            <summary>
            Computes a Hash-based Message Authentication Code (HMAC) by using the <see cref="T:System.Security.Cryptography.SHA1"/> hash function.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.HMACSHA1.#ctor(System.Byte[])">
            <summary>
            Initializes a <see cref="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.HMACSHA1"/> with the specified key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.HMACSHA1.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a <see cref="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.HMACSHA1"/> with the specified key and size of the computed hash code.
            </summary>
            <param name="key">The key.</param>
            <param name="hashSize">The size, in bits, of the computed hash code.</param>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.Cryptography.HMACSHA1.HashSize">
            <summary>
            Gets the size, in bits, of the computed hash code.
            </summary>
            <value>
            The size, in bits, of the computed hash code.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.HMACSHA1.HashFinal">
            <summary>
            Finalizes the hash computation after the last data is processed by the cryptographic stream object.
            </summary>
            <returns>
            The computed hash code.
            </returns>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.HMACSHA256">
            <summary>
            Computes a Hash-based Message Authentication Code (HMAC) by using the <see cref="T:System.Security.Cryptography.SHA256"/> hash function.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.HMACSHA256.#ctor(System.Byte[])">
            <summary>
            Initializes a <see cref="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.HMACSHA256"/> with the specified key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.HMACSHA256.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a <see cref="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.HMACSHA256"/> with the specified key and size of the computed hash code.
            </summary>
            <param name="key">The key.</param>
            <param name="hashSize">The size, in bits, of the computed hash code.</param>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.Cryptography.HMACSHA256.HashSize">
            <summary>
            Gets the size, in bits, of the computed hash code.
            </summary>
            <value>
            The size, in bits, of the computed hash code.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.HMACSHA256.HashFinal">
            <summary>
            Finalizes the hash computation after the last data is processed by the cryptographic stream object.
            </summary>
            <returns>
            The computed hash code.
            </returns>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.HMACSHA384">
            <summary>
            Computes a Hash-based Message Authentication Code (HMAC) by using the <see cref="T:System.Security.Cryptography.SHA384"/> hash function.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.HMACSHA384.#ctor(System.Byte[])">
            <summary>
            Initializes a <see cref="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.HMACSHA384"/> with the specified key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.HMACSHA384.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a <see cref="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.HMACSHA384"/> with the specified key and size of the computed hash code.
            </summary>
            <param name="key">The key.</param>
            <param name="hashSize">The size, in bits, of the computed hash code.</param>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.Cryptography.HMACSHA384.HashSize">
            <summary>
            Gets the size, in bits, of the computed hash code.
            </summary>
            <value>
            The size, in bits, of the computed hash code.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.HMACSHA384.HashFinal">
            <summary>
            Finalizes the hash computation after the last data is processed by the cryptographic stream object.
            </summary>
            <returns>
            The computed hash code.
            </returns>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.HMACSHA512">
            <summary>
            Computes a Hash-based Message Authentication Code (HMAC) by using the <see cref="T:System.Security.Cryptography.SHA512"/> hash function.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.HMACSHA512.#ctor(System.Byte[])">
            <summary>
            Initializes a <see cref="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.HMACSHA512"/> with the specified key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.HMACSHA512.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a <see cref="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.HMACSHA512"/> with the specified key and size of the computed hash code.
            </summary>
            <param name="key">The key.</param>
            <param name="hashSize">The size, in bits, of the computed hash code.</param>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.Cryptography.HMACSHA512.HashSize">
            <summary>
            Gets the size, in bits, of the computed hash code.
            </summary>
            <value>
            The size, in bits, of the computed hash code.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.HMACSHA512.HashFinal">
            <summary>
            Finalizes the hash computation after the last data is processed by the cryptographic stream object.
            </summary>
            <returns>
            The computed hash code.
            </returns>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.RsaDigitalSignature">
            <summary>
            Implements RSA digital signature algorithm.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.RsaDigitalSignature.#ctor(KellermanSoftware.Renci.SshNet.Security.RsaKey)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.RsaDigitalSignature"/> class.
            </summary>
            <param name="rsaKey">The RSA key.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.RsaDigitalSignature.Hash(System.Byte[])">
            <summary>
            Hashes the specified input.
            </summary>
            <param name="input">The input.</param>
            <returns>
            Hashed data.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.RsaDigitalSignature.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.RsaDigitalSignature.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.RsaDigitalSignature.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.RsaDigitalSignature"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.StreamCipher">
            <summary>
            Base class of stream cipher algorithms.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.StreamCipher.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.StreamCipher"/> class.
            </summary>
            <param name="key">The key.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.SymmetricCipher">
            <summary>
            Base class for symmetric cipher implementations.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.Cryptography.SymmetricCipher.Key">
            <summary>
            Gets the key.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.SymmetricCipher.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Security.Cryptography.SymmetricCipher"/> class.
            </summary>
            <param name="key">The key.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.SymmetricCipher.EncryptBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Encrypts the specified region of the input byte array and copies the encrypted data to the specified region of the output byte array.
            </summary>
            <param name="inputBuffer">The input data to encrypt.</param>
            <param name="inputOffset">The offset into the input byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the input byte array to use as data.</param>
            <param name="outputBuffer">The output to which to write encrypted data.</param>
            <param name="outputOffset">The offset into the output byte array from which to begin writing data.</param>
            <returns>
            The number of bytes encrypted.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Cryptography.SymmetricCipher.DecryptBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Decrypts the specified region of the input byte array and copies the decrypted data to the specified region of the output byte array.
            </summary>
            <param name="inputBuffer">The input data to decrypt.</param>
            <param name="inputOffset">The offset into the input byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the input byte array to use as data.</param>
            <param name="outputBuffer">The output to which to write decrypted data.</param>
            <param name="outputOffset">The offset into the output byte array from which to begin writing data.</param>
            <returns>
            The number of bytes decrypted.
            </returns>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Security.DsaKey">
            <summary>
            Contains DSA private and public key
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.DsaKey.P">
            <summary>
            Gets the P.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.DsaKey.Q">
            <summary>
            Gets the Q.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.DsaKey.G">
            <summary>
            Gets the G.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.DsaKey.Y">
            <summary>
            Gets public key Y.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.DsaKey.X">
            <summary>
            Gets private key X.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.DsaKey.KeyLength">
            <summary>
            Gets the length of the key.
            </summary>
            <value>
            The length of the key.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.DsaKey.DigitalSignature">
            <summary>
            Gets the digital signature.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.DsaKey.Public">
            <summary>
            Gets or sets the public.
            </summary>
            <value>
            The public.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.DsaKey.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Security.DsaKey"/> class.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.DsaKey.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Security.DsaKey"/> class.
            </summary>
            <param name="data">DER encoded private key data.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.DsaKey.#ctor(KellermanSoftware.Renci.SshNet.Common.BigInteger,KellermanSoftware.Renci.SshNet.Common.BigInteger,KellermanSoftware.Renci.SshNet.Common.BigInteger,KellermanSoftware.Renci.SshNet.Common.BigInteger,KellermanSoftware.Renci.SshNet.Common.BigInteger)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Security.DsaKey" /> class.
            </summary>
            <param name="p">The p.</param>
            <param name="q">The q.</param>
            <param name="g">The g.</param>
            <param name="y">The y.</param>
            <param name="x">The x.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.DsaKey.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.DsaKey.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.DsaKey.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:KellermanSoftware.Renci.SshNet.Security.DsaKey"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Security.EcdsaKey">
            <summary>
            Contains ECDSA (ecdsa-sha2-nistp{256,384,521}) private and public key
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.EcdsaKey.ToString">
            <summary>
            Gets the SSH name of the ECDSA Key
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.EcdsaKey.HashAlgorithm">
            <summary>
            Gets the HashAlgorithm to use
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.EcdsaKey.KeyLength">
            <summary>
            Gets the length of the key.
            </summary>
            <value>
            The length of the key.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.EcdsaKey.DigitalSignature">
            <summary>
            Gets the digital signature.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.EcdsaKey.Public">
            <summary>
            Gets or sets the public.
            </summary>
            <value>
            The public.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.EcdsaKey.Ecdsa">
            <summary>
            Gets ECDsa Object
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.EcdsaKey.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Security.EcdsaKey"/> class.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.EcdsaKey.#ctor(System.String,System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Security.EcdsaKey"/> class.
            </summary>
            <param name="curve">The curve name</param>
            <param name="publickey">Value of publickey</param>
            <param name="privatekey">Value of privatekey</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.EcdsaKey.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Security.EcdsaKey"/> class.
            </summary>
            <param name="data">DER encoded private key data.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.EcdsaKey.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.EcdsaKey.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.EcdsaKey.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:KellermanSoftware.Renci.SshNet.Security.DsaKey"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Security.ED25519Key">
            <summary>
            Contains ED25519 private and public key
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.ED25519Key.ToString">
            <summary>
            Gets the Key String.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.ED25519Key.Public">
            <summary>
            Gets or sets the public.
            </summary>
            <value>
            The public.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.ED25519Key.KeyLength">
            <summary>
            Gets the length of the key.
            </summary>
            <value>
            The length of the key.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.ED25519Key.DigitalSignature">
            <summary>
            Gets the digital signature.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.ED25519Key.PublicKey">
            <summary>
            Gets the PublicKey Bytes
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.ED25519Key.PrivateKey">
            <summary>
            Gets the PrivateKey Bytes
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.ED25519Key.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Security.ED25519Key"/> class.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.ED25519Key.#ctor(System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Security.ED25519Key"/> class.
            </summary>
            <param name="pk">pk data.</param>
            <param name="sk">sk data.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.ED25519Key.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.ED25519Key.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.ED25519Key.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:KellermanSoftware.Renci.SshNet.Security.DsaKey"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Security.Key">
            <summary>
            Base class for asymmetric cipher algorithms
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Security.Key._privateKey">
            <summary>
            Specifies array of big integers that represent private key
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.Key.DigitalSignature">
            <summary>
            Gets the key specific digital signature.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.Key.Public">
            <summary>
            Gets or sets the public key.
            </summary>
            <value>
            The public.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.Key.KeyLength">
            <summary>
            Gets the length of the key.
            </summary>
            <value>
            The length of the key.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Key.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Security.Key"/> class.
            </summary>
            <param name="data">DER encoded private key data.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Key.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Security.Key"/> class.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Key.Sign(System.Byte[])">
            <summary>
            Signs the specified data with the key.
            </summary>
            <param name="data">The data to sign.</param>
            <returns>
            Signed data.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.Key.VerifySignature(System.Byte[],System.Byte[])">
            <summary>
            Verifies the signature.
            </summary>
            <param name="data">The data to verify.</param>
            <param name="signature">The signature to verify against.</param>
            <returns><c>True</c> is signature was successfully verifies; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Security.RsaKey">
            <summary>
            Contains RSA private and public key
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.RsaKey.ToString">
            <summary>
            Gets the Key String.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.RsaKey.Modulus">
            <summary>
            Gets the modulus.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.RsaKey.Exponent">
            <summary>
            Gets the exponent.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.RsaKey.D">
            <summary>
            Gets the D.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.RsaKey.P">
            <summary>
            Gets the P.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.RsaKey.Q">
            <summary>
            Gets the Q.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.RsaKey.DP">
            <summary>
            Gets the DP.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.RsaKey.DQ">
            <summary>
            Gets the DQ.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.RsaKey.InverseQ">
            <summary>
            Gets the inverse Q.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.RsaKey.KeyLength">
            <summary>
            Gets the length of the key.
            </summary>
            <value>
            The length of the key.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.RsaKey.DigitalSignature">
            <summary>
            Gets the digital signature.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.RsaKey.Public">
            <summary>
            Gets or sets the public.
            </summary>
            <value>
            The public.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.RsaKey.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Security.RsaKey"/> class.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.RsaKey.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Security.RsaKey"/> class.
            </summary>
            <param name="data">DER encoded private key data.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.RsaKey.#ctor(KellermanSoftware.Renci.SshNet.Common.BigInteger,KellermanSoftware.Renci.SshNet.Common.BigInteger,KellermanSoftware.Renci.SshNet.Common.BigInteger,KellermanSoftware.Renci.SshNet.Common.BigInteger,KellermanSoftware.Renci.SshNet.Common.BigInteger,KellermanSoftware.Renci.SshNet.Common.BigInteger)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Security.RsaKey"/> class.
            </summary>
            <param name="modulus">The modulus.</param>
            <param name="exponent">The exponent.</param>
            <param name="d">The d.</param>
            <param name="p">The p.</param>
            <param name="q">The q.</param>
            <param name="inverseQ">The inverse Q.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.RsaKey.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.RsaKey.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.RsaKey.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:KellermanSoftware.Renci.SshNet.Security.RsaKey"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.GroupExchangeHashData.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Security.HostAlgorithm">
            <summary>
            Base class for SSH host algorithms.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.HostAlgorithm.Name">
            <summary>
            Gets the host key name.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.HostAlgorithm.Data">
            <summary>
            Gets the host key data.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.HostAlgorithm.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Security.HostAlgorithm"/> class.
            </summary>
            <param name="name">The host key name.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.HostAlgorithm.Sign(System.Byte[])">
            <summary>
            Signs the specified data.
            </summary>
            <param name="data">The data.</param>
            <returns>Signed data.</returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.HostAlgorithm.VerifySignature(System.Byte[],System.Byte[])">
            <summary>
            Verifies the signature.
            </summary>
            <param name="data">The data.</param>
            <param name="signature">The signature.</param>
            <returns><c>True</c> is signature was successfully verifies; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Security.IKeyExchange">
            <summary>
            Represents a key exchange algorithm.
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.Security.IKeyExchange.HostKeyReceived">
            <summary>
            Occurs when the host key is received.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.IKeyExchange.Name">
            <summary>
            Gets the name of the algorithm.
            </summary>
            <value>
            The name of the algorithm.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.IKeyExchange.ExchangeHash">
            <summary>
            Gets the exchange hash.
            </summary>
            <value>
            The exchange hash.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.IKeyExchange.Start(KellermanSoftware.Renci.SshNet.Session,KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeInitMessage)">
            <summary>
            Starts the key exchange algorithm.
            </summary>
            <param name="session">The session.</param>
            <param name="message">Key exchange init message.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.IKeyExchange.Finish">
            <summary>
            Finishes the key exchange algorithm.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.IKeyExchange.CreateClientCipher">
            <summary>
            Creates the client-side cipher to use.
            </summary>
            <returns>
            The client cipher.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.IKeyExchange.CreateServerCipher">
            <summary>
            Creates the server-side cipher to use.
            </summary>
            <returns>
            The server cipher.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.IKeyExchange.CreateServerHash">
            <summary>
            Creates the server-side hash algorithm to use.
            </summary>
            <returns>
            The server hash algorithm.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.IKeyExchange.CreateClientHash">
            <summary>
            Creates the client-side hash algorithm to use.
            </summary>
            <returns>
            The client hash algorithm.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.IKeyExchange.CreateCompressor">
            <summary>
            Creates the compression algorithm to use to deflate data.
            </summary>
            <returns>
            The compression method to deflate data.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.IKeyExchange.CreateDecompressor">
            <summary>
            Creates the compression algorithm to use to inflate data.
            </summary>
            <returns>
            The compression method to inflate data.
            </returns>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Security.KeyExchange">
            <summary>
            Represents base class for different key exchange algorithm implementations
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.KeyExchange.Session">
            <summary>
            Gets or sets the session.
            </summary>
            <value>
            The session.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.KeyExchange.SharedKey">
            <summary>
            Gets or sets key exchange shared key.
            </summary>
            <value>
            The shared key.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.KeyExchange.ExchangeHash">
            <summary>
            Gets the exchange hash.
            </summary>
            <value>The exchange hash.</value>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.Security.KeyExchange.HostKeyReceived">
            <summary>
            Occurs when host key received.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.KeyExchange.Start(KellermanSoftware.Renci.SshNet.Session,KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeInitMessage)">
            <summary>
            Starts key exchange algorithm
            </summary>
            <param name="session">The session.</param>
            <param name="message">Key exchange init message.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.KeyExchange.Finish">
            <summary>
            Finishes key exchange algorithm.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.KeyExchange.CreateServerCipher">
            <summary>
            Creates the server side cipher to use.
            </summary>
            <returns>Server cipher.</returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.KeyExchange.CreateClientCipher">
            <summary>
            Creates the client side cipher to use.
            </summary>
            <returns>Client cipher.</returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.KeyExchange.CreateServerHash">
            <summary>
            Creates the server side hash algorithm to use.
            </summary>
            <returns>Hash algorithm</returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.KeyExchange.CreateClientHash">
            <summary>
            Creates the client side hash algorithm to use.
            </summary>
            <returns>Hash algorithm</returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.KeyExchange.CreateCompressor">
            <summary>
            Creates the compression algorithm to use to deflate data.
            </summary>
            <returns>Compression method.</returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.KeyExchange.CreateDecompressor">
            <summary>
            Creates the compression algorithm to use to inflate data.
            </summary>
            <returns>Compression method.</returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.KeyExchange.CanTrustHostKey(KellermanSoftware.Renci.SshNet.Security.KeyHostAlgorithm)">
            <summary>
            Determines whether the specified host key can be trusted.
            </summary>
            <param name="host">The host algorithm.</param>
            <returns>
            <c>true</c> if the specified host can be trusted; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.KeyExchange.ValidateExchangeHash">
            <summary>
            Validates the exchange hash.
            </summary>
            <returns>true if exchange hash is valid; otherwise false.</returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.KeyExchange.CalculateHash">
            <summary>
            Calculates key exchange hash value.
            </summary>
            <returns>Key exchange hash.</returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.KeyExchange.Hash(System.Byte[])">
            <summary>
            Hashes the specified data bytes.
            </summary>
            <param name="hashData">The hash data.</param>
            <returns>
            Hashed bytes
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.KeyExchange.SendMessage(KellermanSoftware.Renci.SshNet.Messages.Message)">
            <summary>
            Sends SSH message to the server
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.KeyExchange.GenerateSessionKey(System.Byte[],System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Generates the session key.
            </summary>
            <param name="sharedKey">The shared key.</param>
            <param name="exchangeHash">The exchange hash.</param>
            <param name="key">The key.</param>
            <param name="size">The size.</param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.KeyExchange.GenerateSessionKey(System.Byte[],System.Byte[],System.Char,System.Byte[])">
            <summary>
            Generates the session key.
            </summary>
            <param name="sharedKey">The shared key.</param>
            <param name="exchangeHash">The exchange hash.</param>
            <param name="p">The p.</param>
            <param name="sessionId">The session id.</param>
            <returns></returns>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.KeyExchange.SessionKeyGeneration.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.KeyExchange.SessionKeyAdjustment.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.KeyExchange.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.KeyExchange.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.KeyExchange.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:KellermanSoftware.Renci.SshNet.Security.KeyExchange"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Security.KeyExchangeDiffieHellman">
            <summary>
            Represents base class for Diffie Hellman key exchange algorithm
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Security.KeyExchangeDiffieHellman._group">
            <summary>
            Specifies key exchange group number.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Security.KeyExchangeDiffieHellman._prime">
            <summary>
            Specifies key exchange prime number.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Security.KeyExchangeDiffieHellman._clientPayload">
            <summary>
            Specifies client payload
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Security.KeyExchangeDiffieHellman._serverPayload">
            <summary>
            Specifies server payload
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Security.KeyExchangeDiffieHellman._clientExchangeValue">
            <summary>
            Specifies client exchange number.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Security.KeyExchangeDiffieHellman._serverExchangeValue">
            <summary>
            Specifies server exchange number.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Security.KeyExchangeDiffieHellman._privateExponent">
            <summary>
            Specifies random generated number.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Security.KeyExchangeDiffieHellman._hostKey">
            <summary>
            Specifies host key data.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Security.KeyExchangeDiffieHellman._signature">
            <summary>
            Specifies signature data.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.KeyExchangeDiffieHellman.HashSize">
            <summary>
            Gets the size, in bits, of the computed hash code.
            </summary>
            <value>
            The size, in bits, of the computed hash code.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.KeyExchangeDiffieHellman.ValidateExchangeHash">
            <summary>
            Validates the exchange hash.
            </summary>
            <returns>
            true if exchange hash is valid; otherwise false.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.KeyExchangeDiffieHellman.Start(KellermanSoftware.Renci.SshNet.Session,KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeInitMessage)">
            <summary>
            Starts key exchange algorithm
            </summary>
            <param name="session">The session.</param>
            <param name="message">Key exchange init message.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.KeyExchangeDiffieHellman.PopulateClientExchangeValue">
            <summary>
            Populates the client exchange value.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.KeyExchangeDiffieHellman.HandleServerDhReply(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Handles the server DH reply message.
            </summary>
            <param name="hostKey">The host key.</param>
            <param name="serverExchangeValue">The server exchange value.</param>
            <param name="signature">The signature.</param>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Security.KeyExchangeDiffieHellmanGroup14Sha1">
            <summary>
            Represents "diffie-hellman-group14-sha1" algorithm implementation.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Security.KeyExchangeDiffieHellmanGroup14Sha1.SecondOkleyGroupReversed">
            <summary>
            https://tools.ietf.org/html/rfc2409#section-6.2
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.KeyExchangeDiffieHellmanGroup14Sha1.Name">
            <summary>
            Gets algorithm name.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.KeyExchangeDiffieHellmanGroup14Sha1.GroupPrime">
            <summary>
            Gets the group prime.
            </summary>
            <value>
            The group prime.
            </value>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Security.KeyExchangeDiffieHellmanGroup14Sha256">
            <summary>
            Represents "diffie-hellman-group14-sha256" algorithm implementation.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Security.KeyExchangeDiffieHellmanGroup14Sha256.SecondOkleyGroupReversed">
            <summary>
            https://tools.ietf.org/html/rfc2409#section-6.2
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.KeyExchangeDiffieHellmanGroup14Sha256.Name">
            <summary>
            Gets algorithm name.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.KeyExchangeDiffieHellmanGroup14Sha256.GroupPrime">
            <summary>
            Gets the group prime.
            </summary>
            <value>
            The group prime.
            </value>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Security.KeyExchangeDiffieHellmanGroup16Sha512">
            <summary>
            Represents "diffie-hellman-group16-sha512" algorithm implementation.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Security.KeyExchangeDiffieHellmanGroup16Sha512.MoreModularExponentialGroup16Reversed">
            <summary>
            https://tools.ietf.org/html/rfc3526#section-5
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.KeyExchangeDiffieHellmanGroup16Sha512.Name">
            <summary>
            Gets algorithm name.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Security.KeyExchangeDiffieHellmanGroup1Sha1">
            <summary>
            Represents "diffie-hellman-group1-sha1" algorithm implementation.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.KeyExchangeDiffieHellmanGroup1Sha1.Name">
            <summary>
            Gets algorithm name.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.KeyExchangeDiffieHellmanGroup1Sha1.GroupPrime">
            <summary>
            Gets the group prime.
            </summary>
            <value>
            The group prime.
            </value>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Security.KeyExchangeDiffieHellmanGroupExchangeSha1">
            <summary>
            Represents "diffie-hellman-group-exchange-sha1" algorithm implementation.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.KeyExchangeDiffieHellmanGroupExchangeSha1.Name">
            <summary>
            Gets algorithm name.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.KeyExchangeDiffieHellmanGroupExchangeSha1.HashSize">
            <summary>
            Gets the size, in bits, of the computed hash code.
            </summary>
            <value>
            The size, in bits, of the computed hash code.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.KeyExchangeDiffieHellmanGroupExchangeSha1.Hash(System.Byte[])">
            <summary>
            Hashes the specified data bytes.
            </summary>
            <param name="hashData">The hash data.</param>
            <returns>
            Hashed bytes
            </returns>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Security.KeyExchangeDiffieHellmanGroupExchangeSha256">
            <summary>
            Represents "diffie-hellman-group-exchange-sha256" algorithm implementation.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.KeyExchangeDiffieHellmanGroupExchangeSha256.Name">
            <summary>
            Gets algorithm name.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.KeyExchangeDiffieHellmanGroupExchangeSha256.HashSize">
            <summary>
            Gets the size, in bits, of the computed hash code.
            </summary>
            <value>
            The size, in bits, of the computed hash code.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.KeyExchangeDiffieHellmanGroupExchangeSha256.Hash(System.Byte[])">
            <summary>
            Hashes the specified data bytes.
            </summary>
            <param name="hashBytes">Data to hash.</param>
            <returns>
            Hashed bytes
            </returns>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Security.KeyExchangeDiffieHellmanGroupExchangeShaBase">
            <summary>
            Base class for "diffie-hellman-group-exchange" algorithms.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.KeyExchangeDiffieHellmanGroupExchangeShaBase.CalculateHash">
            <summary>
            Calculates key exchange hash value.
            </summary>
            <returns>
            Key exchange hash.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.KeyExchangeDiffieHellmanGroupExchangeShaBase.Start(KellermanSoftware.Renci.SshNet.Session,KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeInitMessage)">
            <summary>
            Starts key exchange algorithm
            </summary>
            <param name="session">The session.</param>
            <param name="message">Key exchange init message.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.KeyExchangeDiffieHellmanGroupExchangeShaBase.Finish">
            <summary>
            Finishes key exchange algorithm.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Security.KeyExchangeDiffieHellmanGroupSha1">
            <summary>
            Represents "diffie-hellman-group1-sha1" algorithm implementation.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.KeyExchangeDiffieHellmanGroupSha1.HashSize">
            <summary>
            Gets the size, in bits, of the computed hash code.
            </summary>
            <value>
            The size, in bits, of the computed hash code.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.KeyExchangeDiffieHellmanGroupSha1.Hash(System.Byte[])">
            <summary>
            Hashes the specified data bytes.
            </summary>
            <param name="hashData">The hash data.</param>
            <returns>
            Hashed bytes
            </returns>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Security.KeyExchangeDiffieHellmanGroupSha256">
            <summary>
            Base class for "diffie-hellman" SHA-256 group algorithm implementations.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.KeyExchangeDiffieHellmanGroupSha256.HashSize">
            <summary>
            Gets the size, in bits, of the computed hash code.
            </summary>
            <value>
            The size, in bits, of the computed hash code.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.KeyExchangeDiffieHellmanGroupSha256.Hash(System.Byte[])">
            <summary>
            Hashes the specified data bytes.
            </summary>
            <param name="hashData">The hash data.</param>
            <returns>
            Hashed bytes
            </returns>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Security.KeyExchangeDiffieHellmanGroupSha512">
            <summary>
            Base class for "diffie-hellman" SHA-512 group algorithm implementations.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.KeyExchangeDiffieHellmanGroupSha512.HashSize">
            <summary>
            Gets the size, in bits, of the computed hash code.
            </summary>
            <value>
            The size, in bits, of the computed hash code.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.KeyExchangeDiffieHellmanGroupSha512.Hash(System.Byte[])">
            <summary>
            Hashes the specified data bytes.
            </summary>
            <param name="hashData">The hash data.</param>
            <returns>
            Hashed bytes
            </returns>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.KeyExchangeDiffieHellmanGroupShaBase.GroupPrime">
            <summary>
            Gets the group prime.
            </summary>
            <value>
            The group prime.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.KeyExchangeDiffieHellmanGroupShaBase.CalculateHash">
            <summary>
            Calculates key exchange hash value.
            </summary>
            <returns>
            Key exchange hash.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.KeyExchangeDiffieHellmanGroupShaBase.Start(KellermanSoftware.Renci.SshNet.Session,KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeInitMessage)">
            <summary>
            Starts key exchange algorithm
            </summary>
            <param name="session">The session.</param>
            <param name="message">Key exchange init message.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.KeyExchangeDiffieHellmanGroupShaBase.Finish">
            <summary>
            Finishes key exchange algorithm.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Security.KeyExchangeEC._clientPayload">
            <summary>
            Specifies client payload
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Security.KeyExchangeEC._serverPayload">
            <summary>
            Specifies server payload
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Security.KeyExchangeEC._clientExchangeValue">
            <summary>
            Specifies client exchange.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Security.KeyExchangeEC._serverExchangeValue">
            <summary>
            Specifies server exchange.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Security.KeyExchangeEC._hostKey">
            <summary>
            Specifies host key data.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Security.KeyExchangeEC._signature">
            <summary>
            Specifies signature data.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.KeyExchangeEC.HashSize">
            <summary>
            Gets the size, in bits, of the computed hash code.
            </summary>
            <value>
            The size, in bits, of the computed hash code.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.KeyExchangeEC.CalculateHash">
            <summary>
            Calculates key exchange hash value.
            </summary>
            <returns>
            Key exchange hash.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.KeyExchangeEC.ValidateExchangeHash">
            <summary>
            Validates the exchange hash.
            </summary>
            <returns>
            true if exchange hash is valid; otherwise false.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.KeyExchangeEC.Start(KellermanSoftware.Renci.SshNet.Session,KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeInitMessage)">
            <summary>
            Starts key exchange algorithm
            </summary>
            <param name="session">The session.</param>
            <param name="message">Key exchange init message.</param>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.KeyExchangeECCurve25519.Name">
            <summary>
            Gets algorithm name.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.KeyExchangeECCurve25519.HashSize">
            <summary>
            Gets the size, in bits, of the computed hash code.
            </summary>
            <value>
            The size, in bits, of the computed hash code.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.KeyExchangeECCurve25519.Start(KellermanSoftware.Renci.SshNet.Session,KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeInitMessage)">
            <summary>
            Starts key exchange algorithm
            </summary>
            <param name="session">The session.</param>
            <param name="message">Key exchange init message.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.KeyExchangeECCurve25519.Finish">
            <summary>
            Finishes key exchange algorithm.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.KeyExchangeECCurve25519.Hash(System.Byte[])">
            <summary>
            Hashes the specified data bytes.
            </summary>
            <param name="hashData">The hash data.</param>
            <returns>
            Hashed bytes
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.KeyExchangeECCurve25519.HandleServerEcdhReply(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Handles the server DH reply message.
            </summary>
            <param name="hostKey">The host key.</param>
            <param name="serverExchangeValue">The server exchange value.</param>
            <param name="signature">The signature.</param>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.KeyExchangeECDH.CurveParameter">
            <summary>
            Gets the parameter of the curve.
            </summary>
            <value>
            The parameter of the curve.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.KeyExchangeECDH.Start(KellermanSoftware.Renci.SshNet.Session,KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeInitMessage)">
            <summary>
            Starts key exchange algorithm
            </summary>
            <param name="session">The session.</param>
            <param name="message">Key exchange init message.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.KeyExchangeECDH.Finish">
            <summary>
            Finishes key exchange algorithm.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.KeyExchangeECDH.HandleServerEcdhReply(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Handles the server DH reply message.
            </summary>
            <param name="hostKey">The host key.</param>
            <param name="serverExchangeValue">The server exchange value.</param>
            <param name="signature">The signature.</param>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.KeyExchangeECDH256.Name">
            <summary>
            Gets algorithm name.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.KeyExchangeECDH256.CurveParameter">
            <summary>
            Gets Curve Parameter.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.KeyExchangeECDH256.HashSize">
            <summary>
            Gets the size, in bits, of the computed hash code.
            </summary>
            <value>
            The size, in bits, of the computed hash code.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.KeyExchangeECDH256.Hash(System.Byte[])">
            <summary>
            Hashes the specified data bytes.
            </summary>
            <param name="hashData">The hash data.</param>
            <returns>
            Hashed bytes
            </returns>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.KeyExchangeECDH384.Name">
            <summary>
            Gets algorithm name.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.KeyExchangeECDH384.CurveParameter">
            <summary>
            Gets Curve Parameter.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.KeyExchangeECDH384.HashSize">
            <summary>
            Gets the size, in bits, of the computed hash code.
            </summary>
            <value>
            The size, in bits, of the computed hash code.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.KeyExchangeECDH384.Hash(System.Byte[])">
            <summary>
            Hashes the specified data bytes.
            </summary>
            <param name="hashData">The hash data.</param>
            <returns>
            Hashed bytes
            </returns>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.KeyExchangeECDH521.Name">
            <summary>
            Gets algorithm name.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.KeyExchangeECDH521.CurveParameter">
            <summary>
            Gets Curve Parameter.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.KeyExchangeECDH521.HashSize">
            <summary>
            Gets the size, in bits, of the computed hash code.
            </summary>
            <value>
            The size, in bits, of the computed hash code.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.KeyExchangeECDH521.Hash(System.Byte[])">
            <summary>
            Hashes the specified data bytes.
            </summary>
            <param name="hashData">The hash data.</param>
            <returns>
            Hashed bytes
            </returns>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.KeyExchangeHashData.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Security.KeyHostAlgorithm">
            <summary>
            Implements key support for host algorithm.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.KeyHostAlgorithm.Key">
            <summary>
            Gets the key.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.KeyHostAlgorithm.Data">
            <summary>
            Gets the public key data.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.KeyHostAlgorithm.#ctor(System.String,KellermanSoftware.Renci.SshNet.Security.Key)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Security.KeyHostAlgorithm"/> class.
            </summary>
            <param name="name">Host key name.</param>
            <param name="key">Host key.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.KeyHostAlgorithm.#ctor(System.String,KellermanSoftware.Renci.SshNet.Security.Key,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Security.HostAlgorithm"/> class.
            </summary>
            <param name="name">Host key name.</param>
            <param name="key">Host key.</param>
            <param name="data">Host key encoded data.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.KeyHostAlgorithm.Sign(System.Byte[])">
            <summary>
            Signs the specified data.
            </summary>
            <param name="data">The data.</param>
            <returns>
            Signed data.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.KeyHostAlgorithm.VerifySignature(System.Byte[],System.Byte[])">
            <summary>
            Verifies the signature.
            </summary>
            <param name="data">The data.</param>
            <param name="signature">The signature.</param>
            <returns>
              <c>True</c> is signature was successfully verifies; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.KeyHostAlgorithm.SignatureKeyData.AlgorithmName">
            <summary>
            Gets or sets the name of the algorithm as UTF-8 encoded byte array.
            </summary>
            <value>
            The name of the algorithm.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.KeyHostAlgorithm.SignatureKeyData.Signature">
            <summary>
            Gets or sets the signature.
            </summary>
            <value>
            The signature.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Security.KeyHostAlgorithm.SignatureKeyData.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.KeyHostAlgorithm.SignatureKeyData.LoadData">
            <summary>
            Called when type specific data need to be loaded.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Security.KeyHostAlgorithm.SignatureKeyData.SaveData">
            <summary>
            Called when type specific data need to be saved.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.ServiceFactory">
            <summary>
            Basic factory for creating new services.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.ServiceFactory.PartialSuccessLimit">
            <summary>
            Defines the number of times an authentication attempt with any given <see cref="T:KellermanSoftware.Renci.SshNet.IAuthenticationMethod"/>
            can result in <see cref="F:KellermanSoftware.Renci.SshNet.AuthenticationResult.PartialSuccess"/> before it is disregarded.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ServiceFactory.CreateClientAuthentication">
            <summary>
            Creates a <see cref="T:KellermanSoftware.Renci.SshNet.IClientAuthentication"/>.
            </summary>
            <returns>
            A <see cref="T:KellermanSoftware.Renci.SshNet.IClientAuthentication"/>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ServiceFactory.CreateSession(KellermanSoftware.Renci.SshNet.ConnectionInfo,KellermanSoftware.Renci.SshNet.Connection.ISocketFactory)">
            <summary>
            Creates a new <see cref="T:KellermanSoftware.Renci.SshNet.ISession"/> with the specified <see cref="T:KellermanSoftware.Renci.SshNet.ConnectionInfo"/> and
            <see cref="T:KellermanSoftware.Renci.SshNet.Connection.ISocketFactory"/>.
            </summary>
            <param name="connectionInfo">The <see cref="T:KellermanSoftware.Renci.SshNet.ConnectionInfo"/> to use for creating a new session.</param>
            <param name="socketFactory">A factory to create <see cref="T:System.Net.Sockets.Socket"/> instances.</param>
            <returns>
            An <see cref="T:KellermanSoftware.Renci.SshNet.ISession"/> for the specified <see cref="T:KellermanSoftware.Renci.SshNet.ConnectionInfo"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="connectionInfo"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="socketFactory"/> is <c>null</c>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ServiceFactory.CreateSftpSession(KellermanSoftware.Renci.SshNet.ISession,System.Int32,System.Text.Encoding,KellermanSoftware.Renci.SshNet.Sftp.ISftpResponseFactory)">
            <summary>
            Creates a new <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.ISftpSession"/> in a given <see cref="T:KellermanSoftware.Renci.SshNet.ISession"/> and with
            the specified operation timeout and encoding.
            </summary>
            <param name="session">The <see cref="T:KellermanSoftware.Renci.SshNet.ISession"/> to create the <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.ISftpSession"/> in.</param>
            <param name="operationTimeout">The number of milliseconds to wait for an operation to complete, or -1 to wait indefinitely.</param>
            <param name="encoding">The encoding.</param>
            <param name="sftpMessageFactory">The factory to use for creating SFTP messages.</param>
            <returns>
            An <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.ISftpSession"/>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ServiceFactory.CreatePipeStream">
            <summary>
            Create a new <see cref="T:KellermanSoftware.Renci.SshNet.Common.PipeStream"/>.
            </summary>
            <returns>
            A <see cref="T:KellermanSoftware.Renci.SshNet.Common.PipeStream"/>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ServiceFactory.CreateKeyExchange(System.Collections.Generic.IDictionary{System.String,System.Type},System.String[])">
            <summary>
            Negotiates a key exchange algorithm, and creates a <see cref="T:KellermanSoftware.Renci.SshNet.Security.IKeyExchange" /> for the negotiated
            algorithm.
            </summary>
            <param name="clientAlgorithms">A <see cref="T:System.Collections.Generic.IDictionary`2"/> of the key exchange algorithms supported by the client where key is the name of the algorithm, and value is the type implementing this algorithm.</param>
            <param name="serverAlgorithms">The names of the key exchange algorithms supported by the SSH server.</param>
            <returns>
            A <see cref="T:KellermanSoftware.Renci.SshNet.Security.IKeyExchange"/> that was negotiated between client and server.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="clientAlgorithms"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="serverAlgorithms"/> is <c>null</c>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">No key exchange algorithms are supported by both client and server.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ServiceFactory.CreateShellStream(KellermanSoftware.Renci.SshNet.ISession,System.String,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Collections.Generic.IDictionary{KellermanSoftware.Renci.SshNet.Common.TerminalModes,System.UInt32},System.Int32)">
            <summary>
            Creates a shell stream.
            </summary>
            <param name="session">The SSH session.</param>
            <param name="terminalName">The <c>TERM</c> environment variable.</param>
            <param name="columns">The terminal width in columns.</param>
            <param name="rows">The terminal width in rows.</param>
            <param name="width">The terminal height in pixels.</param>
            <param name="height">The terminal height in pixels.</param>
            <param name="terminalModeValues">The terminal mode values.</param>
            <param name="bufferSize">The size of the buffer.</param>
            <returns>
            The created <see cref="T:KellermanSoftware.Renci.SshNet.ShellStream"/> instance.
            </returns>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <remarks>
            <para>
            The <c>TERM</c> environment variable contains an identifier for the text window's capabilities.
            You can get a detailed list of these cababilities by using the ‘infocmp’ command.
            </para>
            <para>
            The column/row dimensions override the pixel dimensions(when non-zero). Pixel dimensions refer
            to the drawable area of the window.
            </para>
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ServiceFactory.CreateRemotePathDoubleQuoteTransformation">
            <summary>
            Creates an <see cref="T:KellermanSoftware.Renci.SshNet.IRemotePathTransformation"/> that encloses a path in double quotes, and escapes
            any embedded double quote with a backslash.
            </summary>
            <returns>
            An <see cref="T:KellermanSoftware.Renci.SshNet.IRemotePathTransformation"/> that encloses a path in double quotes, and escapes any
            embedded double quote with a backslash.
            with a shell.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ServiceFactory.CreateConnector(KellermanSoftware.Renci.SshNet.IConnectionInfo,KellermanSoftware.Renci.SshNet.Connection.ISocketFactory)">
            <summary>
            Creates an <see cref="T:KellermanSoftware.Renci.SshNet.Connection.IConnector"/> that can be used to establish a connection
            to the server identified by the specified <paramref name="connectionInfo"/>.
            </summary>
            <param name="connectionInfo">A <see cref="T:KellermanSoftware.Renci.SshNet.IConnectionInfo"/> detailing the server to establish a connection to.</param>
            <param name="socketFactory">A factory to create <see cref="T:System.Net.Sockets.Socket"/> instances.</param>
            <returns>
            An <see cref="T:KellermanSoftware.Renci.SshNet.Connection.IConnector"/> that can be used to establish a connection to the
            server identified by the specified <paramref name="connectionInfo"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="connectionInfo"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="socketFactory"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="P:KellermanSoftware.Renci.SshNet.IConnectionInfo.ProxyType"/> value of <paramref name="connectionInfo"/> is not supported.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ServiceFactory.CreateProtocolVersionExchange">
            <summary>
            Creates an <see cref="T:KellermanSoftware.Renci.SshNet.Connection.IProtocolVersionExchange"/> that deals with the SSH protocol
            version exchange.
            </summary>
            <returns>
            An <see cref="T:KellermanSoftware.Renci.SshNet.Connection.IProtocolVersionExchange"/>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ServiceFactory.CreateSocketFactory">
            <summary>
            Creates a factory to create <see cref="T:System.Net.Sockets.Socket"/> instances.
            </summary>
            <returns>
            An <see cref="T:KellermanSoftware.Renci.SshNet.Connection.ISocketFactory"/>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ServiceFactory.CreateNetConfSession(KellermanSoftware.Renci.SshNet.ISession,System.Int32)">
            <summary>
            Creates a new <see cref="T:KellermanSoftware.Renci.SshNet.NetConf.INetConfSession"/> in a given <see cref="T:KellermanSoftware.Renci.SshNet.ISession"/>
            and with the specified operation timeout.
            </summary>
            <param name="session">The <see cref="T:KellermanSoftware.Renci.SshNet.ISession"/> to create the <see cref="T:KellermanSoftware.Renci.SshNet.NetConf.INetConfSession"/> in.</param>
            <param name="operationTimeout">The number of milliseconds to wait for an operation to complete, or -1 to wait indefinitely.</param>
            <returns>
            An <see cref="T:KellermanSoftware.Renci.SshNet.NetConf.INetConfSession"/>.
            </returns>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Session">
            <summary>
            Provides functionality to connect and interact with SSH server.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Session.InfiniteTimeSpan">
            <summary>
            Specifies an infinite waiting period.
            </summary>
            <remarks>
            The value of this field is <c>-1</c> millisecond.
            </remarks>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Session.Infinite">
            <summary>
            Specifies an infinite waiting period.
            </summary>
            <remarks>
            The value of this field is <c>-1</c>.
            </remarks>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Session.MaximumSshPacketSize">
            <summary>
            Specifies maximum packet size defined by the protocol.
            </summary>
            <value>
            68536 (64 KB + 3000 bytes).
            </value>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Session.InitialLocalWindowSize">
            <summary>
            Holds the initial local window size for the channels.
            </summary>
            <value>
            2147483647 (2^31 - 1) bytes.
            </value>
            <remarks>
            We currently do not define a maximum (remote) window size.
            </remarks>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Session.LocalChannelDataPacketSize">
            <summary>
            Holds the maximum size of channel data packets that we receive.
            </summary>
            <value>
            64 KB.
            </value>
            <remarks>
            <para>
            This is the maximum size (in bytes) we support for the data (payload) of a
            <c>SSH_MSG_CHANNEL_DATA</c> message we receive.
            </para>
            <para>
            We currently do not enforce this limit.
            </para>
            </remarks>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Session.AuthenticationConnection">
            <summary>
            Controls how many authentication attempts can take place at the same time.
            </summary>
            <remarks>
            Some server may restrict number to prevent authentication attacks
            </remarks>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Session._sshMessageFactory">
            <summary>
            Holds metada about session messages
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Session._messageListenerCompleted">
            <summary>
            Holds a <see cref="T:System.Threading.WaitHandle"/> that is signaled when the message listener loop has completed.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Session._outboundPacketSequence">
            <summary>
            Specifies outbound packet number
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Session._inboundPacketSequence">
            <summary>
            Specifies incoming packet number
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Session._serviceAccepted">
            <summary>
            WaitHandle to signal that last service request was accepted
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Session._exceptionWaitHandle">
            <summary>
            WaitHandle to signal that exception was thrown by another thread.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Session._keyExchangeCompletedWaitHandle">
            <summary>
            WaitHandle to signal that key exchange was completed.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Session._keyExchangeInProgress">
            <summary>
            WaitHandle to signal that key exchange is in progress.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Session._exception">
            <summary>
            Exception that need to be thrown by waiting thread
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Session._isAuthenticated">
            <summary>
            Specifies whether connection is authenticated
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Session._isDisconnecting">
            <summary>
            Specifies whether user issued Disconnect command or not
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Session._serviceFactory">
            <summary>
            Holds the factory to use for creating new services.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Session._socket">
            <summary>
            Holds connection socket.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Session._socketReadLock">
            <summary>
            Holds an object that is used to ensure only a single thread can read from
            <see cref="F:KellermanSoftware.Renci.SshNet.Session._socket"/> at any given time.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Session._socketWriteLock">
            <summary>
            Holds an object that is used to ensure only a single thread can write to
            <see cref="F:KellermanSoftware.Renci.SshNet.Session._socket"/> at any given time.
            </summary>
            <remarks>
            This is also used to ensure that <see cref="F:KellermanSoftware.Renci.SshNet.Session._outboundPacketSequence"/> is
            incremented atomatically.
            </remarks>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Session._socketDisposeLock">
            <summary>
            Holds an object that is used to ensure only a single thread can dispose
            <see cref="F:KellermanSoftware.Renci.SshNet.Session._socket"/> at any given time.
            </summary>
            <remarks>
            This is also used to ensure that <see cref="F:KellermanSoftware.Renci.SshNet.Session._socket"/> will not be disposed
            while performing a given operation or set of operations on <see cref="F:KellermanSoftware.Renci.SshNet.Session._socket"/>.
            </remarks>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Session.SessionSemaphore">
            <summary>
            Gets the session semaphore that controls session channels.
            </summary>
            <value>
            The session semaphore.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Session.NextChannelNumber">
            <summary>
            Gets the next channel number.
            </summary>
            <value>
            The next channel number.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Session.IsConnected">
            <summary>
            Gets a value indicating whether the session is connected.
            </summary>
            <value>
            <c>true</c> if the session is connected; otherwise, <c>false</c>.
            </value>
            <remarks>
            This methods returns <c>true</c> in all but the following cases:
            <list type="bullet">
                <item>
                    <description>The <see cref="T:KellermanSoftware.Renci.SshNet.Session"/> is disposed.</description>
                </item>
                <item>
                    <description>The <c>SSH_MSG_DISCONNECT</c> message - which is used to disconnect from the server - has been sent.</description>
                </item>
                <item>
                    <description>The client has not been authenticated successfully.</description>
                </item>
                <item>
                    <description>The listener thread - which is used to receive messages from the server - has stopped.</description>
                </item>
                <item>
                    <description>The socket used to communicate with the server is no longer connected.</description>
                </item>
            </list>
            </remarks>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Session.SessionId">
            <summary>
            Gets the session id.
            </summary>
            <value>
            The session id, or <c>null</c> if the client has not been authenticated.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Session.ClientInitMessage">
            <summary>
            Gets the client init message.
            </summary>
            <value>The client init message.</value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Session.ServerVersion">
            <summary>
            Gets or sets the server version string.
            </summary>
            <value>The server version.</value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Session.ClientVersion">
            <summary>
            Gets or sets the client version string.
            </summary>
            <value>The client version.</value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Session.ConnectionInfo">
            <summary>
            Gets or sets the connection info.
            </summary>
            <value>The connection info.</value>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.Session.ErrorOccured">
            <summary>
            Occurs when an error occurred.
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.Session.Disconnected">
            <summary>
            Occurs when session has been disconnected from the server.
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.Session.HostKeyReceived">
            <summary>
            Occurs when host key received.
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.Session.UserAuthenticationBannerReceived">
            <summary>
            Occurs when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Authentication.BannerMessage"/> message is received from the server.
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.Session.UserAuthenticationInformationRequestReceived">
            <summary>
            Occurs when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Authentication.InformationRequestMessage"/> message is received from the server.
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.Session.UserAuthenticationPasswordChangeRequiredReceived">
            <summary>
            Occurs when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Authentication.PasswordChangeRequiredMessage"/> message is received from the server.
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.Session.UserAuthenticationPublicKeyReceived">
            <summary>
            Occurs when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Authentication.PublicKeyMessage"/> message is received from the server.
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.Session.KeyExchangeDhGroupExchangeGroupReceived">
            <summary>
            Occurs when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeDhGroupExchangeGroup"/> message is received from the server.
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.Session.KeyExchangeDhGroupExchangeReplyReceived">
            <summary>
            Occurs when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeDhGroupExchangeReply"/> message is received from the server.
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.Session.DisconnectReceived">
            <summary>
            Occurs when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Transport.DisconnectMessage"/> message received
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.Session.IgnoreReceived">
            <summary>
            Occurs when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Transport.IgnoreMessage"/> message received
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.Session.UnimplementedReceived">
            <summary>
            Occurs when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Transport.UnimplementedMessage"/> message received
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.Session.DebugReceived">
            <summary>
            Occurs when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Transport.DebugMessage"/> message received
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.Session.ServiceRequestReceived">
            <summary>
            Occurs when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Transport.ServiceRequestMessage"/> message received
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.Session.ServiceAcceptReceived">
            <summary>
            Occurs when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Transport.ServiceAcceptMessage"/> message received
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.Session.KeyExchangeInitReceived">
            <summary>
            Occurs when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeInitMessage"/> message received
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.Session.KeyExchangeDhReplyMessageReceived">
            <summary>
            Occurs when a <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeDhReplyMessage"/> message is received from the SSH server.
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.Session.KeyExchangeEcdhReplyMessageReceived">
            <summary>
            Occurs when a <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeEcdhReplyMessage"/> message is received from the SSH server.
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.Session.NewKeysReceived">
            <summary>
            Occurs when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Transport.NewKeysMessage"/> message received
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.Session.UserAuthenticationRequestReceived">
            <summary>
            Occurs when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Authentication.RequestMessage"/> message received
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.Session.UserAuthenticationFailureReceived">
            <summary>
            Occurs when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Authentication.FailureMessage"/> message received
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.Session.UserAuthenticationSuccessReceived">
            <summary>
            Occurs when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Authentication.SuccessMessage"/> message received
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.Session.GlobalRequestReceived">
            <summary>
            Occurs when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.GlobalRequestMessage"/> message received
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.Session.RequestSuccessReceived">
            <summary>
            Occurs when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.RequestSuccessMessage"/> message received
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.Session.RequestFailureReceived">
            <summary>
            Occurs when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.RequestFailureMessage"/> message received
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.Session.ChannelOpenReceived">
            <summary>
            Occurs when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelOpenMessage"/> message received
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.Session.ChannelOpenConfirmationReceived">
            <summary>
            Occurs when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelOpenConfirmationMessage"/> message received
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.Session.ChannelOpenFailureReceived">
            <summary>
            Occurs when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelOpenFailureMessage"/> message received
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.Session.ChannelWindowAdjustReceived">
            <summary>
            Occurs when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelWindowAdjustMessage"/> message received
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.Session.ChannelDataReceived">
            <summary>
            Occurs when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelDataMessage"/> message received
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.Session.ChannelExtendedDataReceived">
            <summary>
            Occurs when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelExtendedDataMessage"/> message received
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.Session.ChannelEofReceived">
            <summary>
            Occurs when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelEofMessage"/> message received
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.Session.ChannelCloseReceived">
            <summary>
            Occurs when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelCloseMessage"/> message received
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.Session.ChannelRequestReceived">
            <summary>
            Occurs when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelRequestMessage"/> message received
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.Session.ChannelSuccessReceived">
            <summary>
            Occurs when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelSuccessMessage"/> message received
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.Session.ChannelFailureReceived">
            <summary>
            Occurs when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelFailureMessage"/> message received
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Session.#ctor(KellermanSoftware.Renci.SshNet.ConnectionInfo,KellermanSoftware.Renci.SshNet.IServiceFactory,KellermanSoftware.Renci.SshNet.Connection.ISocketFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Session"/> class.
            </summary>
            <param name="connectionInfo">The connection info.</param>
            <param name="serviceFactory">The factory to use for creating new services.</param>
            <param name="socketFactory">A factory to create <see cref="T:System.Net.Sockets.Socket"/> instances.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="connectionInfo"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="serviceFactory"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="socketFactory"/> is <c>null</c>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Session.Connect">
            <summary>
            Connects to the server.
            </summary>
            <exception cref="T:System.Net.Sockets.SocketException">Socket connection to the SSH server or proxy server could not be established, or an error occurred while resolving the hostname.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">SSH session could not be established.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshAuthenticationException">Authentication of SSH session failed.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.ProxyException">Failed to establish proxy connection.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Session.Disconnect">
            <summary>
            Disconnects from the server.
            </summary>
            <remarks>
            This sends a <b>SSH_MSG_DISCONNECT</b> message to the server, waits for the
            server to close the socket on its end and subsequently closes the client socket.
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Session.KellermanSoftware#Renci#SshNet#ISession#WaitOnHandle(System.Threading.WaitHandle)">
            <summary>
            Waits for the specified handle or the exception handle for the receive thread
            to signal within the connection timeout.
            </summary>
            <param name="waitHandle">The wait handle.</param>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">A received package was invalid or failed the message integrity check.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshOperationTimeoutException">None of the handles are signaled in time and the session is not disconnecting.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">A socket error was signaled while receiving messages from the server.</exception>
            <remarks>
            When neither handles are signaled in time and the session is not closing, then the
            session is disconnected.
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Session.KellermanSoftware#Renci#SshNet#ISession#WaitOnHandle(System.Threading.WaitHandle,System.TimeSpan)">
            <summary>
            Waits for the specified handle or the exception handle for the receive thread
            to signal within the specified timeout.
            </summary>
            <param name="waitHandle">The wait handle.</param>
            <param name="timeout">The time to wait for any of the handles to become signaled.</param>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">A received package was invalid or failed the message integrity check.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshOperationTimeoutException">None of the handles are signaled in time and the session is not disconnecting.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">A socket error was signaled while receiving messages from the server.</exception>
            <remarks>
            When neither handles are signaled in time and the session is not closing, then the
            session is disconnected.
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Session.WaitOnHandle(System.Threading.WaitHandle)">
            <summary>
            Waits for the specified handle or the exception handle for the receive thread
            to signal within the connection timeout.
            </summary>
            <param name="waitHandle">The wait handle.</param>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">A received package was invalid or failed the message integrity check.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshOperationTimeoutException">None of the handles are signaled in time and the session is not disconnecting.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">A socket error was signaled while receiving messages from the server.</exception>
            <remarks>
            When neither handles are signaled in time and the session is not closing, then the
            session is disconnected.
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Session.KellermanSoftware#Renci#SshNet#ISession#TryWait(System.Threading.WaitHandle,System.TimeSpan)">
            <summary>
            Waits for the specified <seec ref="WaitHandle"/> to receive a signal, using a <see cref="T:System.TimeSpan"/>
            to specify the time interval.
            </summary>
            <param name="waitHandle">The <see cref="T:System.Threading.WaitHandle"/> that should be signaled.</param>
            <param name="timeout">A <see cref="T:System.TimeSpan"/> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan"/> that represents <c>-1</c> milliseconds to wait indefinitely.</param>
            <returns>
            A <see cref="T:KellermanSoftware.Renci.SshNet.WaitResult"/>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Session.KellermanSoftware#Renci#SshNet#ISession#TryWait(System.Threading.WaitHandle,System.TimeSpan,System.Exception@)">
            <summary>
            Waits for the specified <seec ref="WaitHandle"/> to receive a signal, using a <see cref="T:System.TimeSpan"/>
            to specify the time interval.
            </summary>
            <param name="waitHandle">The <see cref="T:System.Threading.WaitHandle"/> that should be signaled.</param>
            <param name="timeout">A <see cref="T:System.TimeSpan"/> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan"/> that represents <c>-1</c> milliseconds to wait indefinitely.</param>
            <param name="exception">When this method returns <see cref="F:KellermanSoftware.Renci.SshNet.WaitResult.Failed"/>, contains the <see cref="T:System.Exception"/>.</param>
            <returns>
            A <see cref="T:KellermanSoftware.Renci.SshNet.WaitResult"/>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Session.TryWait(System.Threading.WaitHandle,System.TimeSpan,System.Exception@)">
            <summary>
            Waits for the specified <seec ref="WaitHandle"/> to receive a signal, using a <see cref="T:System.TimeSpan"/>
            to specify the time interval.
            </summary>
            <param name="waitHandle">The <see cref="T:System.Threading.WaitHandle"/> that should be signaled.</param>
            <param name="timeout">A <see cref="T:System.TimeSpan"/> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan"/> that represents <c>-1</c> milliseconds to wait indefinitely.</param>
            <param name="exception">When this method returns <see cref="F:KellermanSoftware.Renci.SshNet.WaitResult.Failed"/>, contains the <see cref="T:System.Exception"/>.</param>
            <returns>
            A <see cref="T:KellermanSoftware.Renci.SshNet.WaitResult"/>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Session.WaitOnHandle(System.Threading.WaitHandle,System.TimeSpan)">
            <summary>
            Waits for the specified handle or the exception handle for the receive thread
            to signal within the specified timeout.
            </summary>
            <param name="waitHandle">The wait handle.</param>
            <param name="timeout">The time to wait for any of the handles to become signaled.</param>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">A received package was invalid or failed the message integrity check.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshOperationTimeoutException">None of the handles are signaled in time and the session is not disconnecting.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">A socket error was signaled while receiving messages from the server.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Session.SendMessage(KellermanSoftware.Renci.SshNet.Messages.Message)">
            <summary>
            Sends a message to the server.
            </summary>
            <param name="message">The message to send.</param>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">The client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshOperationTimeoutException">The operation timed out.</exception>
            <exception cref="T:System.InvalidOperationException">The size of the packet exceeds the maximum size defined by the protocol.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Session.SendPacket(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sends an SSH packet to the server.
            </summary>
            <param name="packet">A byte array containing the packet to send.</param>
            <param name="offset">The offset of the packet.</param>
            <param name="length">The length of the packet.</param>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected to the server.</exception>
            <remarks>
            <para>
            The send is performed in a dispose lock to avoid <see cref="T:System.NullReferenceException"/>
            and/or <see cref="T:System.ObjectDisposedException"/> when sending the packet.
            </para>
            <para>
            This method is only to be used when the connection is established, as the locking
            overhead is not required while establising the connection.
            </para>
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Session.TrySendMessage(KellermanSoftware.Renci.SshNet.Messages.Message)">
            <summary>
            Sends a message to the server.
            </summary>
            <param name="message">The message to send.</param>
            <returns>
            <c>true</c> if the message was sent to the server; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.InvalidOperationException">The size of the packet exceeds the maximum size defined by the protocol.</exception>
            <remarks>
            This methods returns <c>false</c> when the attempt to send the message results in a
            <see cref="T:System.Net.Sockets.SocketException"/> or a <see cref="T:KellermanSoftware.Renci.SshNet.Common.SshException"/>.
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Session.ReceiveMessage(System.Net.Sockets.Socket)">
            <summary>
            Receives the message from the server.
            </summary>
            <returns>
            The incoming SSH message, or <c>null</c> if the connection with the SSH server was closed.
            </returns>
            <remarks>
            We need no locking here since all messages are read by a single thread.
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Session.OnDisconnectReceived(KellermanSoftware.Renci.SshNet.Messages.Transport.DisconnectMessage)">
            <summary>
            Called when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Transport.DisconnectMessage"/> received.
            </summary>
            <param name="message"><see cref="T:KellermanSoftware.Renci.SshNet.Messages.Transport.DisconnectMessage"/> message.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Session.OnIgnoreReceived(KellermanSoftware.Renci.SshNet.Messages.Transport.IgnoreMessage)">
            <summary>
            Called when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Transport.IgnoreMessage"/> received.
            </summary>
            <param name="message"><see cref="T:KellermanSoftware.Renci.SshNet.Messages.Transport.IgnoreMessage"/> message.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Session.OnUnimplementedReceived(KellermanSoftware.Renci.SshNet.Messages.Transport.UnimplementedMessage)">
            <summary>
            Called when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Transport.UnimplementedMessage"/> message received.
            </summary>
            <param name="message"><see cref="T:KellermanSoftware.Renci.SshNet.Messages.Transport.UnimplementedMessage"/> message.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Session.OnDebugReceived(KellermanSoftware.Renci.SshNet.Messages.Transport.DebugMessage)">
            <summary>
            Called when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Transport.DebugMessage"/> message received.
            </summary>
            <param name="message"><see cref="T:KellermanSoftware.Renci.SshNet.Messages.Transport.DebugMessage"/> message.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Session.OnServiceRequestReceived(KellermanSoftware.Renci.SshNet.Messages.Transport.ServiceRequestMessage)">
            <summary>
            Called when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Transport.ServiceRequestMessage"/> message received.
            </summary>
            <param name="message"><see cref="T:KellermanSoftware.Renci.SshNet.Messages.Transport.ServiceRequestMessage"/> message.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Session.OnServiceAcceptReceived(KellermanSoftware.Renci.SshNet.Messages.Transport.ServiceAcceptMessage)">
            <summary>
            Called when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Transport.ServiceAcceptMessage"/> message received.
            </summary>
            <param name="message"><see cref="T:KellermanSoftware.Renci.SshNet.Messages.Transport.ServiceAcceptMessage"/> message.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Session.OnKeyExchangeInitReceived(KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeInitMessage)">
            <summary>
            Called when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeInitMessage"/> message received.
            </summary>
            <param name="message"><see cref="T:KellermanSoftware.Renci.SshNet.Messages.Transport.KeyExchangeInitMessage"/> message.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Session.OnNewKeysReceived(KellermanSoftware.Renci.SshNet.Messages.Transport.NewKeysMessage)">
            <summary>
            Called when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Transport.NewKeysMessage"/> message received.
            </summary>
            <param name="message"><see cref="T:KellermanSoftware.Renci.SshNet.Messages.Transport.NewKeysMessage"/> message.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Session.KellermanSoftware#Renci#SshNet#ISession#OnDisconnecting">
            <summary>
            Called when client is disconnecting from the server.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Session.OnUserAuthenticationRequestReceived(KellermanSoftware.Renci.SshNet.Messages.Authentication.RequestMessage)">
            <summary>
            Called when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Authentication.RequestMessage"/> message received.
            </summary>
            <param name="message"><see cref="T:KellermanSoftware.Renci.SshNet.Messages.Authentication.RequestMessage"/> message.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Session.OnUserAuthenticationFailureReceived(KellermanSoftware.Renci.SshNet.Messages.Authentication.FailureMessage)">
            <summary>
            Called when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Authentication.FailureMessage"/> message received.
            </summary>
            <param name="message"><see cref="T:KellermanSoftware.Renci.SshNet.Messages.Authentication.FailureMessage"/> message.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Session.OnUserAuthenticationSuccessReceived(KellermanSoftware.Renci.SshNet.Messages.Authentication.SuccessMessage)">
            <summary>
            Called when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Authentication.SuccessMessage"/> message received.
            </summary>
            <param name="message"><see cref="T:KellermanSoftware.Renci.SshNet.Messages.Authentication.SuccessMessage"/> message.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Session.OnUserAuthenticationBannerReceived(KellermanSoftware.Renci.SshNet.Messages.Authentication.BannerMessage)">
            <summary>
            Called when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Authentication.BannerMessage"/> message received.
            </summary>
            <param name="message"><see cref="T:KellermanSoftware.Renci.SshNet.Messages.Authentication.BannerMessage"/> message.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Session.OnUserAuthenticationInformationRequestReceived(KellermanSoftware.Renci.SshNet.Messages.Authentication.InformationRequestMessage)">
            <summary>
            Called when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Authentication.InformationRequestMessage"/> message received.
            </summary>
            <param name="message"><see cref="T:KellermanSoftware.Renci.SshNet.Messages.Authentication.InformationRequestMessage"/> message.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Session.OnGlobalRequestReceived(KellermanSoftware.Renci.SshNet.Messages.Connection.GlobalRequestMessage)">
            <summary>
            Called when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.GlobalRequestMessage"/> message received.
            </summary>
            <param name="message"><see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.GlobalRequestMessage"/> message.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Session.OnRequestSuccessReceived(KellermanSoftware.Renci.SshNet.Messages.Connection.RequestSuccessMessage)">
            <summary>
            Called when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.RequestSuccessMessage"/> message received.
            </summary>
            <param name="message"><see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.RequestSuccessMessage"/> message.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Session.OnRequestFailureReceived(KellermanSoftware.Renci.SshNet.Messages.Connection.RequestFailureMessage)">
            <summary>
            Called when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.RequestFailureMessage"/> message received.
            </summary>
            <param name="message"><see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.RequestFailureMessage"/> message.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Session.OnChannelOpenReceived(KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelOpenMessage)">
            <summary>
            Called when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelOpenMessage"/> message received.
            </summary>
            <param name="message"><see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelOpenMessage"/> message.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Session.OnChannelOpenConfirmationReceived(KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelOpenConfirmationMessage)">
            <summary>
            Called when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelOpenConfirmationMessage"/> message received.
            </summary>
            <param name="message"><see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelOpenConfirmationMessage"/> message.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Session.OnChannelOpenFailureReceived(KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelOpenFailureMessage)">
            <summary>
            Called when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelOpenFailureMessage"/> message received.
            </summary>
            <param name="message"><see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelOpenFailureMessage"/> message.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Session.OnChannelWindowAdjustReceived(KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelWindowAdjustMessage)">
            <summary>
            Called when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelWindowAdjustMessage"/> message received.
            </summary>
            <param name="message"><see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelWindowAdjustMessage"/> message.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Session.OnChannelDataReceived(KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelDataMessage)">
            <summary>
            Called when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelDataMessage"/> message received.
            </summary>
            <param name="message"><see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelDataMessage"/> message.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Session.OnChannelExtendedDataReceived(KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelExtendedDataMessage)">
            <summary>
            Called when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelExtendedDataMessage"/> message received.
            </summary>
            <param name="message"><see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelExtendedDataMessage"/> message.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Session.OnChannelEofReceived(KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelEofMessage)">
            <summary>
            Called when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelCloseMessage"/> message received.
            </summary>
            <param name="message"><see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelCloseMessage"/> message.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Session.OnChannelCloseReceived(KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelCloseMessage)">
            <summary>
            Called when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelCloseMessage"/> message received.
            </summary>
            <param name="message"><see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelCloseMessage"/> message.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Session.OnChannelRequestReceived(KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelRequestMessage)">
            <summary>
            Called when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelRequestMessage"/> message received.
            </summary>
            <param name="message"><see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelRequestMessage"/> message.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Session.OnChannelSuccessReceived(KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelSuccessMessage)">
            <summary>
            Called when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelSuccessMessage"/> message received.
            </summary>
            <param name="message"><see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelSuccessMessage"/> message.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Session.OnChannelFailureReceived(KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelFailureMessage)">
            <summary>
            Called when <see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelFailureMessage"/> message received.
            </summary>
            <param name="message"><see cref="T:KellermanSoftware.Renci.SshNet.Messages.Connection.ChannelFailureMessage"/> message.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Session.RegisterMessage(System.String)">
            <summary>
            Registers SSH message with the session.
            </summary>
            <param name="messageName">The name of the message to register with the session.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Session.UnRegisterMessage(System.String)">
            <summary>
            Unregister SSH message from the session.
            </summary>
            <param name="messageName">The name of the message to unregister with the session.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Session.LoadMessage(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Loads a message from a given buffer.
            </summary>
            <param name="data">An array of bytes from which to construct the message.</param>
            <param name="offset">The zero-based byte offset in <paramref name="data"/> at which to begin reading.</param>
            <param name="count">The number of bytes to load.</param>
            <returns>
            A message constructed from <paramref name="data"/>.
            </returns>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">The type of the message is not supported.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Session.IsSocketConnected">
            <summary>
            Gets a value indicating whether the socket is connected.
            </summary>
            <returns>
            <c>true</c> if the socket is connected; otherwise, <c>false</c>.
            </returns>
            <remarks>
            <para>
            As a first check we verify whether <see cref="P:System.Net.Sockets.Socket.Connected"/> is
            <c>true</c>. However, this only returns the state of the socket as of
            the last I/O operation.
            </para>
            <para>
            Therefore we use the combination of <see cref="M:System.Net.Sockets.Socket.Poll(System.Int32,System.Net.Sockets.SelectMode)"/> with mode <see cref="F:System.Net.Sockets.SelectMode.SelectRead"/>
            and <see cref="P:System.Net.Sockets.Socket.Available"/> to verify if the socket is still connected.
            </para>
            <para>
            The MSDN doc mention the following on the return value of <see cref="M:System.Net.Sockets.Socket.Poll(System.Int32,System.Net.Sockets.SelectMode)"/>
            with mode <see cref="F:System.Net.Sockets.SelectMode.SelectRead"/>:
            <list type="bullet">
                <item>
                    <description><c>true</c> if data is available for reading;</description>
                </item>
                <item>
                    <description><c>true</c> if the connection has been closed, reset, or terminated; otherwise, returns <c>false</c>.</description>
                </item>
            </list>
            </para>
            <para>
            <c>Conclusion:</c> when the return value is <c>true</c> - but no data is available for reading - then
            the socket is no longer connected.
            </para>
            <para>
            When a <see cref="T:System.Net.Sockets.Socket"/> is used from multiple threads, there's a race condition
            between the invocation of <see cref="M:System.Net.Sockets.Socket.Poll(System.Int32,System.Net.Sockets.SelectMode)"/> and the moment
            when the value of <see cref="P:System.Net.Sockets.Socket.Available"/> is obtained. To workaround this issue
            we synchronize reads from the <see cref="T:System.Net.Sockets.Socket"/>.
            </para>
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Session.TrySocketRead(System.Net.Sockets.Socket,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Performs a blocking read on the socket until <paramref name="length"/> bytes are received.
            </summary>
            <param name="socket">The <see cref="T:System.Net.Sockets.Socket"/> to read from.</param>
            <param name="buffer">An array of type <see cref="T:System.Byte"/> that is the storage location for the received data.</param>
            <param name="offset">The position in <paramref name="buffer"/> parameter to store the received data.</param>
            <param name="length">The number of bytes to read.</param>
            <returns>
            The number of bytes read.
            </returns>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshOperationTimeoutException">The read has timed-out.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">The read failed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Session.SocketDisconnectAndDispose">
            <summary>
            Shuts down and disposes the socket.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Session.MessageListener">
            <summary>
            Listens for incoming message from the server and handles them. This method run as a task on separate thread.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Session.RaiseError(System.Exception)">
            <summary>
            Raises the <see cref="E:KellermanSoftware.Renci.SshNet.Session.ErrorOccured"/> event.
            </summary>
            <param name="exp">The <see cref="T:System.Exception"/>.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Session.Reset">
            <summary>
            Resets connection-specific information to ensure state of a previous connection
            does not affect new connections.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Session.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Session.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Session.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:KellermanSoftware.Renci.SshNet.Session"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Session.KellermanSoftware#Renci#SshNet#ISession#ConnectionInfo">
            <summary>
            Gets or sets the connection info.
            </summary>
            <value>The connection info.</value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Session.KellermanSoftware#Renci#SshNet#ISession#CreateChannelSession">
            <summary>
            Create a new SSH session channel.
            </summary>
            <returns>
            A new SSH session channel.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Session.KellermanSoftware#Renci#SshNet#ISession#CreateChannelDirectTcpip">
            <summary>
            Create a new channel for a locally forwarded TCP/IP port.
            </summary>
            <returns>
            A new channel for a locally forwarded TCP/IP port.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Session.KellermanSoftware#Renci#SshNet#ISession#CreateChannelForwardedTcpip(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Creates a "forwarded-tcpip" SSH channel.
            </summary>
            <returns>
            A new "forwarded-tcpip" SSH channel.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Session.KellermanSoftware#Renci#SshNet#ISession#SendMessage(KellermanSoftware.Renci.SshNet.Messages.Message)">
            <summary>
            Sends a message to the server.
            </summary>
            <param name="message">The message to send.</param>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">The client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshOperationTimeoutException">The operation timed out.</exception>
            <exception cref="T:System.InvalidOperationException">The size of the packet exceeds the maximum size defined by the protocol.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Session.KellermanSoftware#Renci#SshNet#ISession#TrySendMessage(KellermanSoftware.Renci.SshNet.Messages.Message)">
            <summary>
            Sends a message to the server.
            </summary>
            <param name="message">The message to send.</param>
            <returns>
            <c>true</c> if the message was sent to the server; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.InvalidOperationException">The size of the packet exceeds the maximum size defined by the protocol.</exception>
            <remarks>
            This methods returns <c>false</c> when the attempt to send the message results in a
            <see cref="T:System.Net.Sockets.SocketException"/> or a <see cref="T:KellermanSoftware.Renci.SshNet.Common.SshException"/>.
            </remarks>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.WaitResult">
            <summary>
            Represents the result of a wait operations.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.WaitResult.Success">
            <summary>
            The <see cref="T:System.Threading.WaitHandle"/> was signaled within the specified interval.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.WaitResult.TimedOut">
            <summary>
            The <see cref="T:System.Threading.WaitHandle"/> was not signaled within the specified interval.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.WaitResult.Disconnected">
            <summary>
            The session is in a disconnected state.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.WaitResult.Failed">
            <summary>
            The session is in a failed state.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.SftpClient">
            <summary>
            Implementation of the SSH File Transfer Protocol (SFTP) over SSH.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.SftpClient._sftpSession">
            <summary>
            Holds the <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.ISftpSession"/> instance that is used to communicate to the
            SFTP server.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.SftpClient._operationTimeout">
            <summary>
            Holds the operation timeout.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.SftpClient._bufferSize">
            <summary>
            Holds the size of the buffer.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.SftpClient.OperationTimeout">
            <summary>
            Gets or sets the operation timeout.
            </summary>
            <value>
            The timeout to wait until an operation completes. The default value is negative
            one (-1) milliseconds, which indicates an infinite timeout period.
            </value>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value"/> represents a value that is less than -1 or greater than <see cref="F:System.Int32.MaxValue"/> milliseconds.</exception>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.SftpClient.BufferSize">
            <summary>
            Gets or sets the maximum size of the buffer in bytes.
            </summary>
            <value>
            The size of the buffer. The default buffer size is 32768 bytes (32 KB).
            </value>
            <remarks>
            <para>
            For write operations, this limits the size of the payload for
            individual SSH_FXP_WRITE messages. The actual size is always
            capped at the maximum packet size supported by the peer
            (minus the size of protocol fields).
            </para>
            <para>
            For read operations, this controls the size of the payload which
            is requested from the peer in a SSH_FXP_READ message. The peer
            will send the requested number of bytes in a SSH_FXP_DATA message,
            possibly split over multiple SSH_MSG_CHANNEL_DATA messages.
            </para>
            <para>
            To optimize the size of the SSH packets sent by the peer,
            the actual requested size will take into account the size of the
            SSH_FXP_DATA protocol fields.
            </para>
            <para>
            The size of the each indivual SSH_FXP_DATA message is limited to the
            local maximum packet size of the channel, which is set to <c>64 KB</c>
            for SSH.NET. However, the peer can limit this even further.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.SftpClient.WorkingDirectory">
            <summary>
            Gets remote working directory.
            </summary>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.SftpClient.ProtocolVersion">
            <summary>
            Gets sftp protocol version.
            </summary>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.SftpClient.SftpSession">
            <summary>
            Gets the current SFTP session.
            </summary>
            <value>
            The current SFTP session.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.#ctor(KellermanSoftware.Renci.SshNet.ConnectionInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.SftpClient"/> class.
            </summary>
            <param name="connectionInfo">The connection info.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="connectionInfo"/> is <b>null</b>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.SftpClient"/> class.
            </summary>
            <param name="host">Connection host.</param>
            <param name="port">Connection port.</param>
            <param name="username">Authentication username.</param>
            <param name="password">Authentication password.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="password"/> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="host"/> is invalid. <para>-or-</para> <paramref name="username"/> is <b>null</b> or contains only whitespace characters.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="port"/> is not within <see cref="F:System.Net.IPEndPoint.MinPort"/> and <see cref="F:System.Net.IPEndPoint.MaxPort"/>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.SftpClient"/> class.
            </summary>
            <param name="host">Connection host.</param>
            <param name="username">Authentication username.</param>
            <param name="password">Authentication password.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="password"/> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="host"/> is invalid. <para>-or-</para> <paramref name="username"/> is <b>null</b> contains only whitespace characters.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.#ctor(System.String,System.Int32,System.String,KellermanSoftware.Renci.SshNet.PrivateKeyFile[])">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.SftpClient"/> class.
            </summary>
            <param name="host">Connection host.</param>
            <param name="port">Connection port.</param>
            <param name="username">Authentication username.</param>
            <param name="keyFiles">Authentication private key file(s) .</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyFiles"/> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="host"/> is invalid. <para>-or-</para> <paramref name="username"/> is nu<b>null</b>ll or contains only whitespace characters.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="port"/> is not within <see cref="F:System.Net.IPEndPoint.MinPort"/> and <see cref="F:System.Net.IPEndPoint.MaxPort"/>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.#ctor(System.String,System.String,KellermanSoftware.Renci.SshNet.PrivateKeyFile[])">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.SftpClient"/> class.
            </summary>
            <param name="host">Connection host.</param>
            <param name="username">Authentication username.</param>
            <param name="keyFiles">Authentication private key file(s) .</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyFiles"/> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="host"/> is invalid. <para>-or-</para> <paramref name="username"/> is <b>null</b> or contains only whitespace characters.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.#ctor(KellermanSoftware.Renci.SshNet.ConnectionInfo,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.SftpClient"/> class.
            </summary>
            <param name="connectionInfo">The connection info.</param>
            <param name="ownsConnectionInfo">Specified whether this instance owns the connection info.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="connectionInfo"/> is <c>null</c>.</exception>
            <remarks>
            If <paramref name="ownsConnectionInfo"/> is <c>true</c>, the connection info will be disposed when this
            instance is disposed.
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.#ctor(KellermanSoftware.Renci.SshNet.ConnectionInfo,System.Boolean,KellermanSoftware.Renci.SshNet.IServiceFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.SftpClient"/> class.
            </summary>
            <param name="connectionInfo">The connection info.</param>
            <param name="ownsConnectionInfo">Specified whether this instance owns the connection info.</param>
            <param name="serviceFactory">The factory to use for creating new services.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="connectionInfo"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="serviceFactory"/> is <c>null</c>.</exception>
            <remarks>
            If <paramref name="ownsConnectionInfo"/> is <c>true</c>, the connection info will be disposed when this
            instance is disposed.
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.ChangeDirectory(System.String)">
            <summary>
            Changes remote directory to path.
            </summary>
            <param name="path">New directory path.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPermissionDeniedException">Permission to change directory denied by remote host. <para>-or-</para> A SSH command was denied by the server.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPathNotFoundException"><paramref name="path"/> was not found on the remote host.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">A SSH error where <see cref="P:System.Exception.Message"/> is the message from the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.ChangePermissions(System.String,System.Int16)">
            <summary>
            Changes permissions of file(s) to specified mode.
            </summary>
            <param name="path">File(s) path, may match multiple files.</param>
            <param name="mode">The mode.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPermissionDeniedException">Permission to change permission on the path(s) was denied by the remote host. <para>-or-</para> A SSH command was denied by the server.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPathNotFoundException"><paramref name="path"/> was not found on the remote host.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">A SSH error where <see cref="P:System.Exception.Message"/> is the message from the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.CreateDirectory(System.String)">
            <summary>
            Creates remote directory specified by path.
            </summary>
            <param name="path">Directory path to create.</param>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is <b>null</b> or contains only whitespace characters.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPermissionDeniedException">Permission to create the directory was denied by the remote host. <para>-or-</para> A SSH command was denied by the server.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">A SSH error where <see cref="P:System.Exception.Message"/> is the message from the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.DeleteDirectory(System.String)">
            <summary>
            Deletes remote directory specified by path.
            </summary>
            <param name="path">Directory to be deleted path.</param>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is <b>null</b> or contains only whitespace characters.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPathNotFoundException"><paramref name="path"/> was not found on the remote host.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPermissionDeniedException">Permission to delete the directory was denied by the remote host. <para>-or-</para> A SSH command was denied by the server.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">A SSH error where <see cref="P:System.Exception.Message"/> is the message from the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.DeleteFile(System.String)">
            <summary>
            Deletes remote file specified by path.
            </summary>
            <param name="path">File to be deleted path.</param>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is <b>null</b> or contains only whitespace characters.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPathNotFoundException"><paramref name="path"/> was not found on the remote host.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPermissionDeniedException">Permission to delete the file was denied by the remote host. <para>-or-</para> A SSH command was denied by the server.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">A SSH error where <see cref="P:System.Exception.Message"/> is the message from the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.RenameFile(System.String,System.String)">
            <summary>
            Renames remote file from old path to new path.
            </summary>
            <param name="oldPath">Path to the old file location.</param>
            <param name="newPath">Path to the new file location.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="oldPath"/> is <b>null</b>. <para>-or-</para> or <paramref name="newPath"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPermissionDeniedException">Permission to rename the file was denied by the remote host. <para>-or-</para> A SSH command was denied by the server.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">A SSH error where <see cref="P:System.Exception.Message"/> is the message from the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.RenameFile(System.String,System.String,System.Boolean)">
            <summary>
            Renames remote file from old path to new path.
            </summary>
            <param name="oldPath">Path to the old file location.</param>
            <param name="newPath">Path to the new file location.</param>
            <param name="isPosix">if set to <c>true</c> then perform a posix rename.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="oldPath" /> is <b>null</b>. <para>-or-</para> or <paramref name="newPath" /> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPermissionDeniedException">Permission to rename the file was denied by the remote host. <para>-or-</para> A SSH command was denied by the server.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">A SSH error where <see cref="P:System.Exception.Message" /> is the message from the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.SymbolicLink(System.String,System.String)">
            <summary>
            Creates a symbolic link from old path to new path.
            </summary>
            <param name="path">The old path.</param>
            <param name="linkPath">The new path.</param>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is <b>null</b>. <para>-or-</para> <paramref name="linkPath"/> is <b>null</b> or contains only whitespace characters.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPermissionDeniedException">Permission to create the symbolic link was denied by the remote host. <para>-or-</para> A SSH command was denied by the server.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">A SSH error where <see cref="P:System.Exception.Message"/> is the message from the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.ListDirectory(System.String,System.Action{System.Int32})">
            <summary>
            Retrieves list of files in remote directory.
            </summary>
            <param name="path">The path.</param>
            <param name="listCallback">The list callback.</param>
            <returns>
            A list of files.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPermissionDeniedException">Permission to list the contents of the directory was denied by the remote host. <para>-or-</para> A SSH command was denied by the server.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">A SSH error where <see cref="P:System.Exception.Message" /> is the message from the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.BeginListDirectory(System.String,System.AsyncCallback,System.Object,System.Action{System.Int32})">
            <summary>
            Begins an asynchronous operation of retrieving list of files in remote directory.
            </summary>
            <param name="path">The path.</param>
            <param name="asyncCallback">The method to be called when the asynchronous write operation is completed.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous write request from other requests.</param>
            <param name="listCallback">The list callback.</param>
            <returns>
            An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.
            </returns>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.EndListDirectory(System.IAsyncResult)">
            <summary>
            Ends an asynchronous operation of retrieving list of files in remote directory.
            </summary>
            <param name="asyncResult">The pending asynchronous SFTP request.</param>
            <returns>
            A list of files.
            </returns>
            <exception cref="T:System.ArgumentException">The <see cref="T:System.IAsyncResult"/> object did not come from the corresponding async method on this type.<para>-or-</para><see cref="M:KellermanSoftware.Renci.SshNet.SftpClient.EndListDirectory(System.IAsyncResult)"/> was called multiple times with the same <see cref="T:System.IAsyncResult"/>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.Get(System.String)">
            <summary>
            Gets reference to remote file or directory.
            </summary>
            <param name="path">The path.</param>
            <returns>
            A reference to <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.ISftpFile"/> file object.
            </returns>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPathNotFoundException"><paramref name="path"/> was not found on the remote host.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <b>null</b>.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.Exists(System.String)">
            <summary>
            Checks whether file or directory exists;
            </summary>
            <param name="path">The path.</param>
            <returns>
            <c>true</c> if directory or file exists; otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is <b>null</b> or contains only whitespace characters.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPermissionDeniedException">Permission to perform the operation was denied by the remote host. <para>-or-</para> A SSH command was denied by the server.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">A SSH error where <see cref="P:System.Exception.Message"/> is the message from the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.DownloadFile(System.String,System.IO.Stream,System.Action{System.UInt64})">
            <summary>
            Downloads remote file specified by the path into the stream.
            </summary>
            <param name="path">File to download.</param>
            <param name="output">Stream to write the file into.</param>
            <param name="downloadCallback">The download callback.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="output" /> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path" /> is <b>null</b> or contains only whitespace characters.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPermissionDeniedException">Permission to perform the operation was denied by the remote host. <para>-or-</para> A SSH command was denied by the server.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPathNotFoundException"><paramref name="path"/> was not found on the remote host.</exception>/// 
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">A SSH error where <see cref="P:System.Exception.Message" /> is the message from the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
            <remarks>
            Method calls made by this method to <paramref name="output" />, may under certain conditions result in exceptions thrown by the stream.
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.BeginDownloadFile(System.String,System.IO.Stream)">
            <summary>
            Begins an asynchronous file downloading into the stream.
            </summary>
            <param name="path">The path.</param>
            <param name="output">The output.</param>
            <returns>
            An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="output" /> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path" /> is <b>null</b> or contains only whitespace characters.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPermissionDeniedException">Permission to perform the operation was denied by the remote host. <para>-or-</para> A SSH command was denied by the server.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">A SSH error where <see cref="P:System.Exception.Message" /> is the message from the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
            <remarks>
            Method calls made by this method to <paramref name="output" />, may under certain conditions result in exceptions thrown by the stream.
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.BeginDownloadFile(System.String,System.IO.Stream,System.AsyncCallback)">
            <summary>
            Begins an asynchronous file downloading into the stream.
            </summary>
            <param name="path">The path.</param>
            <param name="output">The output.</param>
            <param name="asyncCallback">The method to be called when the asynchronous write operation is completed.</param>
            <returns>
            An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="output" /> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path" /> is <b>null</b> or contains only whitespace characters.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPermissionDeniedException">Permission to perform the operation was denied by the remote host. <para>-or-</para> A SSH command was denied by the server.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">A SSH error where <see cref="P:System.Exception.Message" /> is the message from the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
            <remarks>
            Method calls made by this method to <paramref name="output" />, may under certain conditions result in exceptions thrown by the stream.
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.BeginDownloadFile(System.String,System.IO.Stream,System.AsyncCallback,System.Object,System.Action{System.UInt64})">
            <summary>
            Begins an asynchronous file downloading into the stream.
            </summary>
            <param name="path">The path.</param>
            <param name="output">The output.</param>
            <param name="asyncCallback">The method to be called when the asynchronous write operation is completed.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous write request from other requests.</param>
            <param name="downloadCallback">The download callback.</param>
            <returns>
            An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="output" /> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path" /> is <b>null</b> or contains only whitespace characters.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
            <remarks>
            Method calls made by this method to <paramref name="output" />, may under certain conditions result in exceptions thrown by the stream.
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.EndDownloadFile(System.IAsyncResult)">
            <summary>
            Ends an asynchronous file downloading into the stream.
            </summary>
            <param name="asyncResult">The pending asynchronous SFTP request.</param>
            <exception cref="T:System.ArgumentException">The <see cref="T:System.IAsyncResult"/> object did not come from the corresponding async method on this type.<para>-or-</para><see cref="M:KellermanSoftware.Renci.SshNet.SftpClient.EndDownloadFile(System.IAsyncResult)"/> was called multiple times with the same <see cref="T:System.IAsyncResult"/>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPermissionDeniedException">Permission to perform the operation was denied by the remote host. <para>-or-</para> A SSH command was denied by the server.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPathNotFoundException">The path was not found on the remote host.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">A SSH error where <see cref="P:System.Exception.Message" /> is the message from the remote host.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.UploadFile(System.IO.Stream,System.String,System.Action{System.UInt64})">
            <summary>
            Uploads stream into remote file.
            </summary>
            <param name="input">Data input stream.</param>
            <param name="path">Remote file path.</param>
            <param name="uploadCallback">The upload callback.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="input" /> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path" /> is <b>null</b> or contains only whitespace characters.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPermissionDeniedException">Permission to upload the file was denied by the remote host. <para>-or-</para> A SSH command was denied by the server.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">A SSH error where <see cref="P:System.Exception.Message" /> is the message from the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
            <remarks>
            Method calls made by this method to <paramref name="input" />, may under certain conditions result in exceptions thrown by the stream.
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.UploadFile(System.IO.Stream,System.String,System.Boolean,System.Action{System.UInt64})">
            <summary>
            Uploads stream into remote file.
            </summary>
            <param name="input">Data input stream.</param>
            <param name="path">Remote file path.</param>
            <param name="canOverride">if set to <c>true</c> then existing file will be overwritten.</param>
            <param name="uploadCallback">The upload callback.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="input" /> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path" /> is <b>null</b> or contains only whitespace characters.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPermissionDeniedException">Permission to upload the file was denied by the remote host. <para>-or-</para> A SSH command was denied by the server.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">A SSH error where <see cref="P:System.Exception.Message" /> is the message from the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
            <remarks>
            Method calls made by this method to <paramref name="input" />, may under certain conditions result in exceptions thrown by the stream.
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.BeginUploadFile(System.IO.Stream,System.String)">
            <summary>
            Begins an asynchronous uploading the stream into remote file.
            </summary>
            <param name="input">Data input stream.</param>
            <param name="path">Remote file path.</param>
            <returns>
            An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input" /> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path" /> is <b>null</b> or contains only whitespace characters.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPermissionDeniedException">Permission to list the contents of the directory was denied by the remote host. <para>-or-</para> A SSH command was denied by the server.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">A SSH error where <see cref="P:System.Exception.Message" /> is the message from the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
            <remarks>
            <para>
            Method calls made by this method to <paramref name="input" />, may under certain conditions result in exceptions thrown by the stream.
            </para>
            <para>
            If the remote file already exists, it is overwritten and truncated.
            </para>
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.BeginUploadFile(System.IO.Stream,System.String,System.AsyncCallback)">
            <summary>
            Begins an asynchronous uploading the stream into remote file.
            </summary>
            <param name="input">Data input stream.</param>
            <param name="path">Remote file path.</param>
            <param name="asyncCallback">The method to be called when the asynchronous write operation is completed.</param>
            <returns>
            An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input" /> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path" /> is <b>null</b> or contains only whitespace characters.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPermissionDeniedException">Permission to list the contents of the directory was denied by the remote host. <para>-or-</para> A SSH command was denied by the server.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">A SSH error where <see cref="P:System.Exception.Message" /> is the message from the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
            <remarks>
            <para>
            Method calls made by this method to <paramref name="input" />, may under certain conditions result in exceptions thrown by the stream.
            </para>
            <para>
            If the remote file already exists, it is overwritten and truncated.
            </para>
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.BeginUploadFile(System.IO.Stream,System.String,System.AsyncCallback,System.Object,System.Action{System.UInt64})">
            <summary>
            Begins an asynchronous uploading the stream into remote file.
            </summary>
            <param name="input">Data input stream.</param>
            <param name="path">Remote file path.</param>
            <param name="asyncCallback">The method to be called when the asynchronous write operation is completed.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous write request from other requests.</param>
            <param name="uploadCallback">The upload callback.</param>
            <returns>
            An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input" /> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path" /> is <b>null</b> or contains only whitespace characters.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPermissionDeniedException">Permission to list the contents of the directory was denied by the remote host. <para>-or-</para> A SSH command was denied by the server.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">A SSH error where <see cref="P:System.Exception.Message" /> is the message from the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
            <remarks>
            <para>
            Method calls made by this method to <paramref name="input" />, may under certain conditions result in exceptions thrown by the stream.
            </para>
            <para>
            If the remote file already exists, it is overwritten and truncated.
            </para>
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.BeginUploadFile(System.IO.Stream,System.String,System.Boolean,System.AsyncCallback,System.Object,System.Action{System.UInt64})">
            <summary>
            Begins an asynchronous uploading the stream into remote file.
            </summary>
            <param name="input">Data input stream.</param>
            <param name="path">Remote file path.</param>
            <param name="canOverride">Specified whether an existing file can be overwritten.</param>
            <param name="asyncCallback">The method to be called when the asynchronous write operation is completed.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous write request from other requests.</param>
            <param name="uploadCallback">The upload callback.</param>
            <returns>
            An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input" /> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path" /> is <b>null</b> or contains only whitespace characters.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
            <remarks>
            <para>
            Method calls made by this method to <paramref name="input" />, may under certain conditions result in exceptions thrown by the stream.
            </para>
            <para>
            When <paramref name="path"/> refers to an existing file, set <paramref name="canOverride"/> to <c>true</c> to overwrite and truncate that file.
            If <paramref name="canOverride"/> is <c>false</c>, the upload will fail and <see cref="M:KellermanSoftware.Renci.SshNet.SftpClient.EndUploadFile(System.IAsyncResult)"/> will throw an
            <see cref="T:KellermanSoftware.Renci.SshNet.Common.SshException"/>.
            </para>
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.EndUploadFile(System.IAsyncResult)">
            <summary>
            Ends an asynchronous uploading the stream into remote file.
            </summary>
            <param name="asyncResult">The pending asynchronous SFTP request.</param>
            <exception cref="T:System.ArgumentException">The <see cref="T:System.IAsyncResult"/> object did not come from the corresponding async method on this type.<para>-or-</para><see cref="M:KellermanSoftware.Renci.SshNet.SftpClient.EndUploadFile(System.IAsyncResult)"/> was called multiple times with the same <see cref="T:System.IAsyncResult"/>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPathNotFoundException">The directory of the file was not found on the remote host.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPermissionDeniedException">Permission to upload the file was denied by the remote host. <para>-or-</para> A SSH command was denied by the server.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">A SSH error where <see cref="P:System.Exception.Message" /> is the message from the remote host.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.GetStatus(System.String)">
            <summary>
            Gets status using statvfs@openssh.com request.
            </summary>
            <param name="path">The path.</param>
            <returns>
            A <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.SftpFileSytemInformation"/> instance that contains file status information.
            </returns>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <b>null</b>.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Appends lines to a file, creating the file if it does not already exist.
            </summary>
            <param name="path">The file to append the lines to. The file is created if it does not already exist.</param>
            <param name="contents">The lines to append to the file.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is<b>null</b> <para>-or-</para> <paramref name="contents"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPathNotFoundException">The specified path is invalid, or its directory was not found on the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
            <remarks>
            The characters are written to the file using UTF-8 encoding without a Byte-Order Mark (BOM)
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <summary>
            Appends lines to a file by using a specified encoding, creating the file if it does not already exist.
            </summary>
            <param name="path">The file to append the lines to. The file is created if it does not already exist.</param>
            <param name="contents">The lines to append to the file.</param>
            <param name="encoding">The character encoding to use.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>. <para>-or-</para> <paramref name="contents"/> is <b>null</b>. <para>-or-</para> <paramref name="encoding"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPathNotFoundException">The specified path is invalid, or its directory was not found on the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.AppendAllText(System.String,System.String)">
            <summary>
            Appends the specified string to the file, creating the file if it does not already exist.
            </summary>
            <param name="path">The file to append the specified string to.</param>
            <param name="contents">The string to append to the file.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>. <para>-or-</para> <paramref name="contents"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPathNotFoundException">The specified path is invalid, or its directory was not found on the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
            <remarks>
            The characters are written to the file using UTF-8 encoding without a Byte-Order Mark (BOM).
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.AppendAllText(System.String,System.String,System.Text.Encoding)">
            <summary>
            Appends the specified string to the file, creating the file if it does not already exist.
            </summary>
            <param name="path">The file to append the specified string to.</param>
            <param name="contents">The string to append to the file.</param>
            <param name="encoding">The character encoding to use.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>. <para>-or-</para> <paramref name="contents"/> is <b>null</b>. <para>-or-</para> <paramref name="encoding"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPathNotFoundException">The specified path is invalid, or its directory was not found on the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.AppendText(System.String)">
            <summary>
            Creates a <see cref="T:System.IO.StreamWriter"/> that appends UTF-8 encoded text to the specified file,
            creating the file if it does not already exist.
            </summary>
            <param name="path">The path to the file to append to.</param>
            <returns>
            A <see cref="T:System.IO.StreamWriter"/> that appends text to a file using UTF-8 encoding without a
            Byte-Order Mark (BOM).
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPathNotFoundException">The specified path is invalid, or its directory was not found on the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.AppendText(System.String,System.Text.Encoding)">
            <summary>
            Creates a <see cref="T:System.IO.StreamWriter"/> that appends text to a file using the specified
            encoding, creating the file if it does not already exist.
            </summary>
            <param name="path">The path to the file to append to.</param>
            <param name="encoding">The character encoding to use.</param>
            <returns>
            A <see cref="T:System.IO.StreamWriter"/> that appends text to a file using the specified encoding.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>. <para>-or-</para> <paramref name="encoding"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPathNotFoundException">The specified path is invalid, or its directory was not found on the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.Create(System.String)">
            <summary>
            Creates or overwrites a file in the specified path.
            </summary>
            <param name="path">The path and name of the file to create.</param>
            <returns>
            A <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.SftpFileStream"/> that provides read/write access to the file specified in path.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPathNotFoundException">The specified path is invalid, or its directory was not found on the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
            <remarks>
            If the target file already exists, it is first truncated to zero bytes.
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.Create(System.String,System.Int32)">
            <summary>
            Creates or overwrites the specified file.
            </summary>
            <param name="path">The path and name of the file to create.</param>
            <param name="bufferSize">The maximum number of bytes buffered for reads and writes to the file.</param>
            <returns>
            A <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.SftpFileStream"/> that provides read/write access to the file specified in path.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPathNotFoundException">The specified path is invalid, or its directory was not found on the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
            <remarks>
            If the target file already exists, it is first truncated to zero bytes.
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.CreateText(System.String)">
            <summary>
            Creates or opens a file for writing UTF-8 encoded text.
            </summary>
            <param name="path">The file to be opened for writing.</param>
            <returns>
            A <see cref="T:System.IO.StreamWriter"/> that writes text to a file using UTF-8 encoding without
            a Byte-Order Mark (BOM).
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPathNotFoundException">The specified path is invalid, or its directory was not found on the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
            <remarks>
            <para>
            If the target file already exists, it is overwritten. It is not first truncated to zero bytes.
            </para>
            <para>
            If the target file does not exist, it is created.
            </para>
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.CreateText(System.String,System.Text.Encoding)">
            <summary>
            Creates or opens a file for writing text using the specified encoding.
            </summary>
            <param name="path">The file to be opened for writing.</param>
            <param name="encoding">The character encoding to use.</param>
            <returns>
            A <see cref="T:System.IO.StreamWriter"/> that writes to a file using the specified encoding.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPathNotFoundException">The specified path is invalid, or its directory was not found on the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
            <remarks>
            <para>
            If the target file already exists, it is overwritten. It is not first truncated to zero bytes.
            </para>
            <para>
            If the target file does not exist, it is created.
            </para>
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.Delete(System.String)">
            <summary>
            Deletes the specified file or directory.
            </summary>
            <param name="path">The name of the file or directory to be deleted. Wildcard characters are not supported.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPathNotFoundException"><paramref name="path"/> was not found on the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.GetLastAccessTime(System.String)">
            <summary>
            Returns the date and time the specified file or directory was last accessed.
            </summary>
            <param name="path">The file or directory for which to obtain access date and time information.</param>
            <returns>
            A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file or directory was last accessed.
            This value is expressed in local time.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.GetLastAccessTimeUtc(System.String)">
            <summary>
            Returns the date and time, in coordinated universal time (UTC), that the specified file or directory was last accessed.
            </summary>
            <param name="path">The file or directory for which to obtain access date and time information.</param>
            <returns>
            A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file or directory was last accessed.
            This value is expressed in UTC time.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.GetLastWriteTime(System.String)">
            <summary>
            Returns the date and time the specified file or directory was last written to.
            </summary>
            <param name="path">The file or directory for which to obtain write date and time information.</param>
            <returns>
            A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file or directory was last written to.
            This value is expressed in local time.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.GetLastWriteTimeUtc(System.String)">
            <summary>
            Returns the date and time, in coordinated universal time (UTC), that the specified file or directory was last written to.
            </summary>
            <param name="path">The file or directory for which to obtain write date and time information.</param>
            <returns>
            A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file or directory was last written to.
            This value is expressed in UTC time.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.Open(System.String,System.IO.FileMode)">
            <summary>
            Opens a <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.SftpFileStream"/> on the specified path with read/write access.
            </summary>
            <param name="path">The file to open.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten.</param>
            <returns>
            An unshared <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.SftpFileStream"/> that provides access to the specified file, with the specified mode and read/write access.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.Open(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Opens a <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.SftpFileStream"/> on the specified path, with the specified mode and access.
            </summary>
            <param name="path">The file to open.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten.</param>
            <param name="access">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the file.</param>
            <returns>
            An unshared <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.SftpFileStream"/> that provides access to the specified file, with the specified mode and access.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.OpenRead(System.String)">
            <summary>
            Opens an existing file for reading.
            </summary>
            <param name="path">The file to be opened for reading.</param>
            <returns>
            A read-only <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.SftpFileStream"/> on the specified path.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.OpenText(System.String)">
            <summary>
            Opens an existing UTF-8 encoded text file for reading.
            </summary>
            <param name="path">The file to be opened for reading.</param>
            <returns>
            A <see cref="T:System.IO.StreamReader"/> on the specified path.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.OpenWrite(System.String)">
            <summary>
            Opens a file for writing.
            </summary>
            <param name="path">The file to be opened for writing.</param>
            <returns>
            An unshared <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.SftpFileStream"/> object on the specified path with <see cref="F:System.IO.FileAccess.Write"/> access.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
            <remarks>
            If the file does not exist, it is created.
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.ReadAllBytes(System.String)">
            <summary>
            Opens a binary file, reads the contents of the file into a byte array, and closes the file.
            </summary>
            <param name="path">The file to open for reading.</param>
            <returns>
            A byte array containing the contents of the file.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.ReadAllLines(System.String)">
            <summary>
            Opens a text file, reads all lines of the file using UTF-8 encoding, and closes the file.
            </summary>
            <param name="path">The file to open for reading.</param>
            <returns>
            A string array containing all lines of the file.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.ReadAllLines(System.String,System.Text.Encoding)">
            <summary>
            Opens a file, reads all lines of the file with the specified encoding, and closes the file.
            </summary>
            <param name="path">The file to open for reading.</param>
            <param name="encoding">The encoding applied to the contents of the file.</param>
            <returns>
            A string array containing all lines of the file.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.ReadAllText(System.String)">
            <summary>
            Opens a text file, reads all lines of the file with the UTF-8 encoding, and closes the file.
            </summary>
            <param name="path">The file to open for reading.</param>
            <returns>
            A string containing all lines of the file.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.ReadAllText(System.String,System.Text.Encoding)">
            <summary>
            Opens a file, reads all lines of the file with the specified encoding, and closes the file.
            </summary>
            <param name="path">The file to open for reading.</param>
            <param name="encoding">The encoding applied to the contents of the file.</param>
            <returns>
            A string containing all lines of the file.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.ReadLines(System.String)">
            <summary>
            Reads the lines of a file with the UTF-8 encoding.
            </summary>
            <param name="path">The file to read.</param>
            <returns>
            The lines of the file.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.ReadLines(System.String,System.Text.Encoding)">
            <summary>
            Read the lines of a file that has a specified encoding.
            </summary>
            <param name="path">The file to read.</param>
            <param name="encoding">The encoding that is applied to the contents of the file.</param>
            <returns>
            The lines of the file.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.SetLastAccessTime(System.String,System.DateTime)">
            <summary>
            Sets the date and time the specified file was last accessed.
            </summary>
            <param name="path">The file for which to set the access date and time information.</param>
            <param name="lastAccessTime">A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of path. This value is expressed in local time.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the specified file was last accessed.
            </summary>
            <param name="path">The file for which to set the access date and time information.</param>
            <param name="lastAccessTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of path. This value is expressed in UTC time.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.SetLastWriteTime(System.String,System.DateTime)">
            <summary>
            Sets the date and time that the specified file was last written to.
            </summary>
            <param name="path">The file for which to set the date and time information.</param>
            <param name="lastWriteTime">A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of path. This value is expressed in local time.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the specified file was last written to.
            </summary>
            <param name="path">The file for which to set the date and time information.</param>
            <param name="lastWriteTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of path. This value is expressed in UTC time.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.WriteAllBytes(System.String,System.Byte[])">
            <summary>
            Writes the specified byte array to the specified file, and closes the file.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="bytes">The bytes to write to the file.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPathNotFoundException">The specified path is invalid, or its directory was not found on the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
            <remarks>
            <para>
            If the target file already exists, it is overwritten. It is not first truncated to zero bytes.
            </para>
            <para>
            If the target file does not exist, it is created.
            </para>
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Writes a collection of strings to the file using the UTF-8 encoding, and closes the file.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The lines to write to the file.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPathNotFoundException">The specified path is invalid, or its directory was not found on the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
            <remarks>
            <para>
            The characters are written to the file using UTF-8 encoding without a Byte-Order Mark (BOM).
            </para>
            <para>
            If the target file already exists, it is overwritten. It is not first truncated to zero bytes.
            </para>
            <para>
            If the target file does not exist, it is created.
            </para>
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.WriteAllLines(System.String,System.String[])">
            <summary>
            Write the specified string array to the file using the UTF-8 encoding, and closes the file.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The string array to write to the file.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPathNotFoundException">The specified path is invalid, or its directory was not found on the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
            <remarks>
            <para>
            The characters are written to the file using UTF-8 encoding without a Byte-Order Mark (BOM).
            </para>
            <para>
            If the target file already exists, it is overwritten. It is not first truncated to zero bytes.
            </para>
            <para>
            If the target file does not exist, it is created.
            </para>
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <summary>
            Writes a collection of strings to the file using the specified encoding, and closes the file.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The lines to write to the file.</param>
            <param name="encoding">The character encoding to use.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPathNotFoundException">The specified path is invalid, or its directory was not found on the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
            <remarks>
            <para>
            If the target file already exists, it is overwritten. It is not first truncated to zero bytes.
            </para>
            <para>
            If the target file does not exist, it is created.
            </para>
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.WriteAllLines(System.String,System.String[],System.Text.Encoding)">
            <summary>
            Writes the specified string array to the file by using the specified encoding, and closes the file.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The string array to write to the file.</param>
            <param name="encoding">An <see cref="T:System.Text.Encoding"/> object that represents the character encoding applied to the string array.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPathNotFoundException">The specified path is invalid, or its directory was not found on the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
            <remarks>
            <para>
            If the target file already exists, it is overwritten. It is not first truncated to zero bytes.
            </para>
            <para>
            If the target file does not exist, it is created.
            </para>
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.WriteAllText(System.String,System.String)">
            <summary>
            Writes the specified string to the file using the UTF-8 encoding, and closes the file.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The string to write to the file.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPathNotFoundException">The specified path is invalid, or its directory was not found on the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
            <remarks>
            <para>
            The characters are written to the file using UTF-8 encoding without a Byte-Order Mark (BOM).
            </para>
            <para>
            If the target file already exists, it is overwritten. It is not first truncated to zero bytes.
            </para>
            <para>
            If the target file does not exist, it is created.
            </para>
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.WriteAllText(System.String,System.String,System.Text.Encoding)">
            <summary>
            Writes the specified string to the file using the specified encoding, and closes the file.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The string to write to the file.</param>
            <param name="encoding">The encoding to apply to the string.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPathNotFoundException">The specified path is invalid, or its directory was not found on the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
            <remarks>
            <para>
            If the target file already exists, it is overwritten. It is not first truncated to zero bytes.
            </para>
            <para>
            If the target file does not exist, it is created.
            </para>
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.GetAttributes(System.String)">
            <summary>
            Gets the <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.SftpFileAttributes"/> of the file on the path.
            </summary>
            <param name="path">The path to the file.</param>
            <returns>
            The <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.SftpFileAttributes"/> of the file on the path.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPathNotFoundException"><paramref name="path"/> was not found on the remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.SetAttributes(System.String,KellermanSoftware.Renci.SshNet.Sftp.SftpFileAttributes)">
            <summary>
            Sets the specified <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.SftpFileAttributes"/> of the file on the specified path.
            </summary>
            <param name="path">The path to the file.</param>
            <param name="fileAttributes">The desired <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.SftpFileAttributes"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the client was disposed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.SynchronizeDirectories(System.String,System.String,System.String)">
            <summary>
            Synchronizes the directories.
            </summary>
            <param name="sourcePath">The source path.</param>
            <param name="destinationPath">The destination path.</param>
            <param name="searchPattern">The search pattern.</param>
            <returns>
            A list of uploaded files.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sourcePath"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="destinationPath"/> is <c>null</c> or contains only whitespace.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPathNotFoundException"><paramref name="destinationPath"/> was not found on the remote host.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.BeginSynchronizeDirectories(System.String,System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins the synchronize directories.
            </summary>
            <param name="sourcePath">The source path.</param>
            <param name="destinationPath">The destination path.</param>
            <param name="searchPattern">The search pattern.</param>
            <param name="asyncCallback">The async callback.</param>
            <param name="state">The state.</param>
            <returns>
            An <see cref="T:System.IAsyncResult" /> that represents the asynchronous directory synchronization.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sourcePath"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="destinationPath"/> is <c>null</c> or contains only whitespace.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.EndSynchronizeDirectories(System.IAsyncResult)">
            <summary>
            Ends the synchronize directories.
            </summary>
            <param name="asyncResult">The async result.</param>
            <returns>
            A list of uploaded files.
            </returns>
            <exception cref="T:System.ArgumentException">The <see cref="T:System.IAsyncResult"/> object did not come from the corresponding async method on this type.<para>-or-</para><see cref="M:KellermanSoftware.Renci.SshNet.SftpClient.EndSynchronizeDirectories(System.IAsyncResult)"/> was called multiple times with the same <see cref="T:System.IAsyncResult"/>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SftpPathNotFoundException">The destination path was not found on the remote host.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.InternalListDirectory(System.String,System.Action{System.Int32})">
            <summary>
            Internals the list directory.
            </summary>
            <param name="path">The path.</param>
            <param name="listCallback">The list callback.</param>
            <returns>
            A list of files in the specfied directory.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <b>null</b>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client not connected.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.InternalDownloadFile(System.String,System.IO.Stream,KellermanSoftware.Renci.SshNet.Sftp.SftpDownloadAsyncResult,System.Action{System.UInt64})">
            <summary>
            Internals the download file.
            </summary>
            <param name="path">The path.</param>
            <param name="output">The output.</param>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that references the asynchronous request.</param>
            <param name="downloadCallback">The download callback.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="output" /> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path" /> is <b>null</b> or contains whitespace.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client not connected.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.InternalUploadFile(System.IO.Stream,System.String,KellermanSoftware.Renci.SshNet.Sftp.Flags,KellermanSoftware.Renci.SshNet.Sftp.SftpUploadAsyncResult,System.Action{System.UInt64})">
            <summary>
            Internals the upload file.
            </summary>
            <param name="input">The input.</param>
            <param name="path">The path.</param>
            <param name="flags">The flags.</param>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that references the asynchronous request.</param>
            <param name="uploadCallback">The upload callback.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="input" /> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path" /> is <b>null</b> or contains whitespace.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client not connected.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.OnConnected">
            <summary>
            Called when client is connected to the server.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.OnDisconnecting">
            <summary>
            Called when client is disconnecting from the server.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SftpClient.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Sftp.Flags.Read">
            <summary>
            SSH_FXF_READ
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Sftp.Flags.Write">
            <summary>
            SSH_FXF_WRITE
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Sftp.Flags.Append">
            <summary>
            SSH_FXF_APPEND
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Sftp.Flags.CreateNewOrOpen">
            <summary>
            SSH_FXF_CREAT
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Sftp.Flags.Truncate">
            <summary>
            SSH_FXF_TRUNC
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Sftp.Flags.CreateNew">
            <summary>
            SSH_FXF_EXCL
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Sftp.ISftpFile">
            <summary>
            Represents SFTP file information
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.ISftpFile.Attributes">
            <summary>
            Gets the file attributes.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.ISftpFile.FullName">
            <summary>
            Gets the full path of the directory or file.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.ISftpFile.Name">
            <summary>
            For files, gets the name of the file. For directories, gets the name of the last directory in the hierarchy if a hierarchy exists. 
            Otherwise, the Name property gets the name of the directory.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.ISftpFile.LastAccessTime">
            <summary>
            Gets or sets the time the current file or directory was last accessed.
            </summary>
            <value>
            The time that the current file or directory was last accessed.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.ISftpFile.LastWriteTime">
            <summary>
            Gets or sets the time when the current file or directory was last written to.
            </summary>
            <value>
            The time the current file was last written.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.ISftpFile.LastAccessTimeUtc">
            <summary>
            Gets or sets the time, in coordinated universal time (UTC), the current file or directory was last accessed.
            </summary>
            <value>
            The time that the current file or directory was last accessed.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.ISftpFile.LastWriteTimeUtc">
            <summary>
            Gets or sets the time, in coordinated universal time (UTC), when the current file or directory was last written to.
            </summary>
            <value>
            The time the current file was last written.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.ISftpFile.Length">
            <summary>
            Gets or sets the size, in bytes, of the current file.
            </summary>
            <value>
            The size of the current file in bytes.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.ISftpFile.UserId">
            <summary>
            Gets or sets file user id.
            </summary>
            <value>
            File user id.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.ISftpFile.GroupId">
            <summary>
            Gets or sets file group id.
            </summary>
            <value>
            File group id.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.ISftpFile.IsSocket">
            <summary>
            Gets a value indicating whether file represents a socket.
            </summary>
            <value>
              <c>true</c> if file represents a socket; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.ISftpFile.IsSymbolicLink">
            <summary>
            Gets a value indicating whether file represents a symbolic link.
            </summary>
            <value>
            	<c>true</c> if file represents a symbolic link; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.ISftpFile.IsRegularFile">
            <summary>
            Gets a value indicating whether file represents a regular file.
            </summary>
            <value>
            	<c>true</c> if file represents a regular file; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.ISftpFile.IsBlockDevice">
            <summary>
            Gets a value indicating whether file represents a block device.
            </summary>
            <value>
            	<c>true</c> if file represents a block device; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.ISftpFile.IsDirectory">
            <summary>
            Gets a value indicating whether file represents a directory.
            </summary>
            <value>
            	<c>true</c> if file represents a directory; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.ISftpFile.IsCharacterDevice">
            <summary>
            Gets a value indicating whether file represents a character device.
            </summary>
            <value>
            	<c>true</c> if file represents a character device; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.ISftpFile.IsNamedPipe">
            <summary>
            Gets a value indicating whether file represents a named pipe.
            </summary>
            <value>
            	<c>true</c> if file represents a named pipe; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.ISftpFile.OwnerCanRead">
            <summary>
            Gets or sets a value indicating whether the owner can read from this file.
            </summary>
            <value>
              <c>true</c> if owner can read from this file; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.ISftpFile.OwnerCanWrite">
            <summary>
            Gets or sets a value indicating whether the owner can write into this file.
            </summary>
            <value>
              <c>true</c> if owner can write into this file; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.ISftpFile.OwnerCanExecute">
            <summary>
            Gets or sets a value indicating whether the owner can execute this file.
            </summary>
            <value>
              <c>true</c> if owner can execute this file; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.ISftpFile.GroupCanRead">
            <summary>
            Gets or sets a value indicating whether the group members can read from this file.
            </summary>
            <value>
              <c>true</c> if group members can read from this file; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.ISftpFile.GroupCanWrite">
            <summary>
            Gets or sets a value indicating whether the group members can write into this file.
            </summary>
            <value>
              <c>true</c> if group members can write into this file; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.ISftpFile.GroupCanExecute">
            <summary>
            Gets or sets a value indicating whether the group members can execute this file.
            </summary>
            <value>
              <c>true</c> if group members can execute this file; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.ISftpFile.OthersCanRead">
            <summary>
            Gets or sets a value indicating whether the others can read from this file.
            </summary>
            <value>
              <c>true</c> if others can read from this file; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.ISftpFile.OthersCanWrite">
            <summary>
            Gets or sets a value indicating whether the others can write into this file.
            </summary>
            <value>
              <c>true</c> if others can write into this file; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.ISftpFile.OthersCanExecute">
            <summary>
            Gets or sets a value indicating whether the others can execute this file.
            </summary>
            <value>
              <c>true</c> if others can execute this file; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.ISftpFile.SetPermissions(System.Int16)">
            <summary>
            Sets file  permissions.
            </summary>
            <param name="mode">The mode.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.ISftpFile.Delete">
            <summary>
            Permanently deletes a file on remote machine.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.ISftpFile.MoveTo(System.String)">
            <summary>
            Moves a specified file to a new location on remote machine, providing the option to specify a new file name.
            </summary>
            <param name="destFileName">The path to move the file to, which can specify a different file name.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="destFileName"/> is <c>null</c>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.ISftpFile.UpdateStatus">
            <summary>
            Updates file status on the server.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.ISftpSession.ProtocolVersion">
            <summary>
            Gets the SFTP protocol version.
            </summary>
            <value>
            The SFTP protocol version.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.ISftpSession.WorkingDirectory">
            <summary>
            Gets the remote working directory.
            </summary>
            <value>
            The remote working directory.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.ISftpSession.ChangeDirectory(System.String)">
            <summary>
            Changes the current working directory to the specified path.
            </summary>
            <param name="path">The new working directory.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.ISftpSession.GetCanonicalPath(System.String)">
            <summary>
            Resolves a given path into an absolute path on the server.
            </summary>
            <param name="path">The path to resolve.</param>
            <returns>
            The absolute path.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.ISftpSession.RequestFStat(System.Byte[],System.Boolean)">
            <summary>
            Performs SSH_FXP_FSTAT request.
            </summary>
            <param name="handle">The handle.</param>
            <param name="nullOnError">if set to <c>true</c> returns <c>null</c> instead of throwing an exception.</param>
            <returns>
            File attributes
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.ISftpSession.RequestStat(System.String,System.Boolean)">
            <summary>
            Performs SSH_FXP_STAT request.
            </summary>
            <param name="path">The path.</param>
            <param name="nullOnError">if set to <c>true</c> returns null instead of throwing an exception.</param>
            <returns>
            File attributes
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.ISftpSession.BeginStat(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Performs SSH_FXP_STAT request
            </summary>
            <param name="path">The path.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate that is executed when <see cref="M:KellermanSoftware.Renci.SshNet.Sftp.ISftpSession.BeginOpen(System.String,KellermanSoftware.Renci.SshNet.Sftp.Flags,System.AsyncCallback,System.Object)"/> completes.</param>
            <param name="state">An object that contains any additional user-defined data.</param>
            <returns>
            A <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.SftpOpenAsyncResult"/> that represents the asynchronous call.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.ISftpSession.EndStat(KellermanSoftware.Renci.SshNet.Sftp.SFtpStatAsyncResult)">
            <summary>
            Handles the end of an asynchronous read.
            </summary>
            <param name="asyncResult">An <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.SFtpStatAsyncResult"/> that represents an asynchronous call.</param>
            <returns>
            The file attributes.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is <c>null</c>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.ISftpSession.RequestLStat(System.String)">
            <summary>
            Performs SSH_FXP_LSTAT request.
            </summary>
            <param name="path">The path.</param>
            <returns>
            File attributes
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.ISftpSession.BeginLStat(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Performs SSH_FXP_LSTAT request.
            </summary>
            <param name="path">The path.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate that is executed when <see cref="M:KellermanSoftware.Renci.SshNet.Sftp.ISftpSession.BeginLStat(System.String,System.AsyncCallback,System.Object)"/> completes.</param>
            <param name="state">An object that contains any additional user-defined data.</param>
            <returns>
            A <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.SFtpStatAsyncResult"/> that represents the asynchronous call.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.ISftpSession.EndLStat(KellermanSoftware.Renci.SshNet.Sftp.SFtpStatAsyncResult)">
            <summary>
            Handles the end of an asynchronous SSH_FXP_LSTAT request.
            </summary>
            <param name="asyncResult">An <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.SFtpStatAsyncResult"/> that represents an asynchronous call.</param>
            <returns>
            The file attributes.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is <c>null</c>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.ISftpSession.RequestMkDir(System.String)">
            <summary>
            Performs SSH_FXP_MKDIR request.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.ISftpSession.RequestOpen(System.String,KellermanSoftware.Renci.SshNet.Sftp.Flags,System.Boolean)">
            <summary>
            Performs SSH_FXP_OPEN request
            </summary>
            <param name="path">The path.</param>
            <param name="flags">The flags.</param>
            <param name="nullOnError">if set to <c>true</c> returns <c>null</c> instead of throwing an exception.</param>
            <returns>File handle.</returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.ISftpSession.BeginOpen(System.String,KellermanSoftware.Renci.SshNet.Sftp.Flags,System.AsyncCallback,System.Object)">
            <summary>
            Performs SSH_FXP_OPEN request
            </summary>
            <param name="path">The path.</param>
            <param name="flags">The flags.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate that is executed when <see cref="M:KellermanSoftware.Renci.SshNet.Sftp.ISftpSession.BeginOpen(System.String,KellermanSoftware.Renci.SshNet.Sftp.Flags,System.AsyncCallback,System.Object)"/> completes.</param>
            <param name="state">An object that contains any additional user-defined data.</param>
            <returns>
            A <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.SftpOpenAsyncResult"/> that represents the asynchronous call.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.ISftpSession.EndOpen(KellermanSoftware.Renci.SshNet.Sftp.SftpOpenAsyncResult)">
            <summary>
            Handles the end of an asynchronous read.
            </summary>
            <param name="asyncResult">An <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.SftpOpenAsyncResult"/> that represents an asynchronous call.</param>
            <returns>
            A <see cref="T:System.Byte"/> array representing a file handle.
            </returns>
            <remarks>
            If all available data has been read, the <see cref="M:KellermanSoftware.Renci.SshNet.Sftp.ISftpSession.EndOpen(KellermanSoftware.Renci.SshNet.Sftp.SftpOpenAsyncResult)"/> method completes
            immediately and returns zero bytes.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is <c>null</c>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.ISftpSession.RequestOpenDir(System.String,System.Boolean)">
            <summary>
            Performs SSH_FXP_OPENDIR request
            </summary>
            <param name="path">The path.</param>
            <param name="nullOnError">if set to <c>true</c> returns null instead of throwing an exception.</param>
            <returns>File handle.</returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.ISftpSession.RequestPosixRename(System.String,System.String)">
            <summary>
            Performs posix-rename@openssh.com extended request.
            </summary>
            <param name="oldPath">The old path.</param>
            <param name="newPath">The new path.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.ISftpSession.RequestRead(System.Byte[],System.UInt64,System.UInt32)">
            <summary>
            Performs SSH_FXP_READ request.
            </summary>
            <param name="handle">The handle.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
            <returns>data array; null if EOF</returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.ISftpSession.BeginRead(System.Byte[],System.UInt64,System.UInt32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous read using a SSH_FXP_READ request.
            </summary>
            <param name="handle">The handle to the file to read from.</param>
            <param name="offset">The offset in the file to start reading from.</param>
            <param name="length">The number of bytes to read.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate that is executed when <see cref="M:KellermanSoftware.Renci.SshNet.Sftp.ISftpSession.BeginRead(System.Byte[],System.UInt64,System.UInt32,System.AsyncCallback,System.Object)"/> completes.</param>
            <param name="state">An object that contains any additional user-defined data.</param>
            <returns>
            A <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.SftpReadAsyncResult"/> that represents the asynchronous call.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.ISftpSession.EndRead(KellermanSoftware.Renci.SshNet.Sftp.SftpReadAsyncResult)">
            <summary>
            Handles the end of an asynchronous read.
            </summary>
            <param name="asyncResult">An <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.SftpReadAsyncResult"/> that represents an asynchronous call.</param>
            <returns>
            A <see cref="T:System.Byte"/> array representing the data read.
            </returns>
            <remarks>
            If all available data has been read, the <see cref="M:KellermanSoftware.Renci.SshNet.Sftp.ISftpSession.EndRead(KellermanSoftware.Renci.SshNet.Sftp.SftpReadAsyncResult)"/> method completes
            immediately and returns zero bytes.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is <c>null</c>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.ISftpSession.RequestReadDir(System.Byte[])">
            <summary>
            Performs SSH_FXP_READDIR request
            </summary>
            <param name="handle">The handle.</param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.ISftpSession.BeginRealPath(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Performs SSH_FXP_REALPATH request.
            </summary>
            <param name="path">The path.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate that is executed when <see cref="M:KellermanSoftware.Renci.SshNet.Sftp.ISftpSession.BeginRealPath(System.String,System.AsyncCallback,System.Object)"/> completes.</param>
            <param name="state">An object that contains any additional user-defined data.</param>
            <returns>
            A <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.SftpRealPathAsyncResult"/> that represents the asynchronous call.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.ISftpSession.EndRealPath(KellermanSoftware.Renci.SshNet.Sftp.SftpRealPathAsyncResult)">
            <summary>
            Handles the end of an asynchronous SSH_FXP_REALPATH request.
            </summary>
            <param name="asyncResult">An <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.SftpRealPathAsyncResult"/> that represents an asynchronous call.</param>
            <returns>
            The absolute path.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is <c>null</c>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.ISftpSession.RequestRemove(System.String)">
            <summary>
            Performs SSH_FXP_REMOVE request.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.ISftpSession.RequestRename(System.String,System.String)">
            <summary>
            Performs SSH_FXP_RENAME request.
            </summary>
            <param name="oldPath">The old path.</param>
            <param name="newPath">The new path.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.ISftpSession.RequestRmDir(System.String)">
            <summary>
            Performs SSH_FXP_RMDIR request.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.ISftpSession.RequestSetStat(System.String,KellermanSoftware.Renci.SshNet.Sftp.SftpFileAttributes)">
            <summary>
            Performs SSH_FXP_SETSTAT request.
            </summary>
            <param name="path">The path.</param>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.ISftpSession.RequestStatVfs(System.String,System.Boolean)">
            <summary>
            Performs statvfs@openssh.com extended request.
            </summary>
            <param name="path">The path.</param>
            <param name="nullOnError">if set to <c>true</c> [null on error].</param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.ISftpSession.RequestSymLink(System.String,System.String)">
            <summary>
            Performs SSH_FXP_SYMLINK request.
            </summary>
            <param name="linkpath">The linkpath.</param>
            <param name="targetpath">The targetpath.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.ISftpSession.RequestFSetStat(System.Byte[],KellermanSoftware.Renci.SshNet.Sftp.SftpFileAttributes)">
            <summary>
            Performs SSH_FXP_FSETSTAT request.
            </summary>
            <param name="handle">The handle.</param>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.ISftpSession.RequestWrite(System.Byte[],System.UInt64,System.Byte[],System.Int32,System.Int32,System.Threading.AutoResetEvent,System.Action{KellermanSoftware.Renci.SshNet.Sftp.Responses.SftpStatusResponse})">
            <summary>
            Performs SSH_FXP_WRITE request.
            </summary>
            <param name="handle">The handle.</param>
            <param name="serverOffset">The the zero-based offset (in bytes) relative to the beginning of the file that the write must start at.</param>
            <param name="data">The buffer holding the data to write.</param>
            <param name="offset">the zero-based offset in <paramref name="data" /> at which to begin taking bytes to write.</param>
            <param name="length">The length (in bytes) of the data to write.</param>
            <param name="wait">The wait event handle if needed.</param>
            <param name="writeCompleted">The callback to invoke when the write has completed.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.ISftpSession.RequestClose(System.Byte[])">
            <summary>
            Performs SSH_FXP_CLOSE request.
            </summary>
            <param name="handle">The handle.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.ISftpSession.BeginClose(System.Byte[],System.AsyncCallback,System.Object)">
            <summary>
            Performs SSH_FXP_CLOSE request.
            </summary>
            <param name="handle">The handle.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate that is executed when <see cref="M:KellermanSoftware.Renci.SshNet.Sftp.ISftpSession.BeginClose(System.Byte[],System.AsyncCallback,System.Object)"/> completes.</param>
            <param name="state">An object that contains any additional user-defined data.</param>
            <returns>
            A <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.SftpCloseAsyncResult"/> that represents the asynchronous call.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.ISftpSession.EndClose(KellermanSoftware.Renci.SshNet.Sftp.SftpCloseAsyncResult)">
            <summary>
            Handles the end of an asynchronous close.
            </summary>
            <param name="asyncResult">An <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.SftpCloseAsyncResult"/> that represents an asynchronous call.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is <c>null</c>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.ISftpSession.CalculateOptimalReadLength(System.UInt32)">
            <summary>
            Calculates the optimal size of the buffer to read data from the channel.
            </summary>
            <param name="bufferSize">The buffer size configured on the client.</param>
            <returns>
            The optimal size of the buffer to read data from the channel.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.ISftpSession.CalculateOptimalWriteLength(System.UInt32,System.Byte[])">
            <summary>
            Calculates the optimal size of the buffer to write data on the channel.
            </summary>
            <param name="bufferSize">The buffer size configured on the client.</param>
            <param name="handle">The file handle.</param>
            <returns>
            The optimal size of the buffer to write data on the channel.
            </returns>
            <remarks>
            Currently, we do not take the remote window size into account.
            </remarks>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.Requests.FStatVfsRequest.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.Requests.HardLinkRequest.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.Requests.PosixRenameRequest.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.Requests.StatVfsRequest.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.Requests.SftpBlockRequest.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.Requests.SftpCloseRequest.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.Requests.SftpExtendedRequest.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.Requests.SftpFSetStatRequest.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.Requests.SftpFStatRequest.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.Requests.SftpInitRequest.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.Requests.SftpLinkRequest.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.Requests.SftpLinkRequest.#ctor(System.UInt32,System.UInt32,System.String,System.String,System.Boolean,System.Action{KellermanSoftware.Renci.SshNet.Sftp.Responses.SftpStatusResponse})">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.Requests.SftpLinkRequest" /> class.
            </summary>
            <param name="protocolVersion">The protocol version.</param>
            <param name="requestId">The request id.</param>
            <param name="newLinkPath">Specifies the path name of the new link to create.</param>
            <param name="existingPath">Specifies the path of a target object to which the newly created link will refer.  In the case of a symbolic link, this path may not exist.</param>
            <param name="isSymLink">if set to <c>false</c> the link should be a hard link, or a second directory entry referring to the same file or directory object.</param>
            <param name="statusAction">The status action.</param>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.Requests.SftpLStatRequest.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.Requests.SftpMkDirRequest.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.Requests.SftpOpenDirRequest.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.Requests.SftpOpenRequest.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.Requests.SftpReadDirRequest.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.Requests.SftpReadLinkRequest.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.Requests.SftpReadRequest.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.Requests.SftpRealPathRequest.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.Requests.SftpRemoveRequest.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.Requests.SftpRenameRequest.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.Requests.SftpRequest.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.Requests.SftpRmDirRequest.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.Requests.SftpSetStatRequest.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.Requests.SftpStatRequest.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.Requests.SftpSymLinkRequest.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.Requests.SftpUnblockRequest.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.Requests.SftpWriteRequest.ServerFileOffset">
            <summary>
            Gets the zero-based offset (in bytes) relative to the beginning of the file that the write
            must start at.
            </summary>
            <value>
            The zero-based offset (in bytes) relative to the beginning of the file that the write must
            start at.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.Requests.SftpWriteRequest.Data">
            <summary>
            Gets the buffer holding the data to write.
            </summary>
            <value>
            The buffer holding the data to write.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.Requests.SftpWriteRequest.Offset">
            <summary>
            Gets the zero-based offset in <see cref="P:KellermanSoftware.Renci.SshNet.Sftp.Requests.SftpWriteRequest.Data" /> at which to begin taking bytes to
            write.
            </summary>
            <value>
            The zero-based offset in <see cref="P:KellermanSoftware.Renci.SshNet.Sftp.Requests.SftpWriteRequest.Data" /> at which to begin taking bytes to write.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.Requests.SftpWriteRequest.Length">
            <summary>
            Gets the length (in bytes) of the data to write.
            </summary>
            <value>
            The length (in bytes) of the data to write.
            </value>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Sftp.SftpDownloadAsyncResult">
            <summary>
            Encapsulates the results of an asynchronous download operation.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpDownloadAsyncResult.IsDownloadCanceled">
            <summary>
            Gets or sets a value indicating whether to cancel asynchronous download operation.
            </summary>
            <value>
            <c>true</c> if download operation to be canceled; otherwise, <c>false</c>.
            </value>
            <remarks>
            Download operation will be canceled after finishing uploading current buffer.
            </remarks>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpDownloadAsyncResult.DownloadedBytes">
            <summary>
            Gets the number of downloaded bytes.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.SftpDownloadAsyncResult.#ctor(System.AsyncCallback,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.SftpDownloadAsyncResult"/> class.
            </summary>
            <param name="asyncCallback">The async callback.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.SftpDownloadAsyncResult.Update(System.UInt64)">
            <summary>
            Updates asynchronous operation status information.
            </summary>
            <param name="downloadedBytes">Number of downloaded bytes.</param>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Sftp.SftpFile">
            <summary>
            Represents SFTP file information
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpFile.Attributes">
            <summary>
            Gets the file attributes.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.SftpFile.#ctor(KellermanSoftware.Renci.SshNet.Sftp.ISftpSession,System.String,KellermanSoftware.Renci.SshNet.Sftp.SftpFileAttributes)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.SftpFile"/> class.
            </summary>
            <param name="sftpSession">The SFTP session.</param>
            <param name="fullName">Full path of the directory or file.</param>
            <param name="attributes">Attributes of the directory or file.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="sftpSession"/> or <paramref name="fullName"/> is <c>null</c>.</exception>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpFile.FullName">
            <summary>
            Gets the full path of the directory or file.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpFile.Name">
            <summary>
            For files, gets the name of the file. For directories, gets the name of the last directory in the hierarchy if a hierarchy exists. 
            Otherwise, the Name property gets the name of the directory.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpFile.LastAccessTime">
            <summary>
            Gets or sets the time the current file or directory was last accessed.
            </summary>
            <value>
            The time that the current file or directory was last accessed.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpFile.LastWriteTime">
            <summary>
            Gets or sets the time when the current file or directory was last written to.
            </summary>
            <value>
            The time the current file was last written.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpFile.LastAccessTimeUtc">
            <summary>
            Gets or sets the time, in coordinated universal time (UTC), the current file or directory was last accessed.
            </summary>
            <value>
            The time that the current file or directory was last accessed.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpFile.LastWriteTimeUtc">
            <summary>
            Gets or sets the time, in coordinated universal time (UTC), when the current file or directory was last written to.
            </summary>
            <value>
            The time the current file was last written.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpFile.Length">
            <summary>
            Gets or sets the size, in bytes, of the current file.
            </summary>
            <value>
            The size of the current file in bytes.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpFile.UserId">
            <summary>
            Gets or sets file user id.
            </summary>
            <value>
            File user id.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpFile.GroupId">
            <summary>
            Gets or sets file group id.
            </summary>
            <value>
            File group id.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpFile.IsSocket">
            <summary>
            Gets a value indicating whether file represents a socket.
            </summary>
            <value>
              <c>true</c> if file represents a socket; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpFile.IsSymbolicLink">
            <summary>
            Gets a value indicating whether file represents a symbolic link.
            </summary>
            <value>
            	<c>true</c> if file represents a symbolic link; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpFile.IsRegularFile">
            <summary>
            Gets a value indicating whether file represents a regular file.
            </summary>
            <value>
            	<c>true</c> if file represents a regular file; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpFile.IsBlockDevice">
            <summary>
            Gets a value indicating whether file represents a block device.
            </summary>
            <value>
            	<c>true</c> if file represents a block device; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpFile.IsDirectory">
            <summary>
            Gets a value indicating whether file represents a directory.
            </summary>
            <value>
            	<c>true</c> if file represents a directory; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpFile.IsCharacterDevice">
            <summary>
            Gets a value indicating whether file represents a character device.
            </summary>
            <value>
            	<c>true</c> if file represents a character device; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpFile.IsNamedPipe">
            <summary>
            Gets a value indicating whether file represents a named pipe.
            </summary>
            <value>
            	<c>true</c> if file represents a named pipe; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpFile.OwnerCanRead">
            <summary>
            Gets or sets a value indicating whether the owner can read from this file.
            </summary>
            <value>
              <c>true</c> if owner can read from this file; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpFile.OwnerCanWrite">
            <summary>
            Gets or sets a value indicating whether the owner can write into this file.
            </summary>
            <value>
              <c>true</c> if owner can write into this file; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpFile.OwnerCanExecute">
            <summary>
            Gets or sets a value indicating whether the owner can execute this file.
            </summary>
            <value>
              <c>true</c> if owner can execute this file; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpFile.GroupCanRead">
            <summary>
            Gets or sets a value indicating whether the group members can read from this file.
            </summary>
            <value>
              <c>true</c> if group members can read from this file; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpFile.GroupCanWrite">
            <summary>
            Gets or sets a value indicating whether the group members can write into this file.
            </summary>
            <value>
              <c>true</c> if group members can write into this file; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpFile.GroupCanExecute">
            <summary>
            Gets or sets a value indicating whether the group members can execute this file.
            </summary>
            <value>
              <c>true</c> if group members can execute this file; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpFile.OthersCanRead">
            <summary>
            Gets or sets a value indicating whether the others can read from this file.
            </summary>
            <value>
              <c>true</c> if others can read from this file; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpFile.OthersCanWrite">
            <summary>
            Gets or sets a value indicating whether the others can write into this file.
            </summary>
            <value>
              <c>true</c> if others can write into this file; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpFile.OthersCanExecute">
            <summary>
            Gets or sets a value indicating whether the others can execute this file.
            </summary>
            <value>
              <c>true</c> if others can execute this file; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.SftpFile.SetPermissions(System.Int16)">
            <summary>
            Sets file  permissions.
            </summary>
            <param name="mode">The mode.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.SftpFile.Delete">
            <summary>
            Permanently deletes a file on remote machine.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.SftpFile.MoveTo(System.String)">
            <summary>
            Moves a specified file to a new location on remote machine, providing the option to specify a new file name.
            </summary>
            <param name="destFileName">The path to move the file to, which can specify a different file name.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="destFileName"/> is <c>null</c>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.SftpFile.UpdateStatus">
            <summary>
            Updates file status on the server.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.SftpFile.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Sftp.SftpFileAttributes">
            <summary>
            Contains SFTP file attributes.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpFileAttributes.LastAccessTime">
            <summary>
            Gets or sets the local time the current file or directory was last accessed.
            </summary>
            <value>
            The local time that the current file or directory was last accessed.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpFileAttributes.LastWriteTime">
            <summary>
            Gets or sets the local time when the current file or directory was last written to.
            </summary>
            <value>
            The local time the current file was last written.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpFileAttributes.LastAccessTimeUtc">
            <summary>
            Gets or sets the UTC time the current file or directory was last accessed.
            </summary>
            <value>
            The UTC time that the current file or directory was last accessed.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpFileAttributes.LastWriteTimeUtc">
            <summary>
            Gets or sets the UTC time when the current file or directory was last written to.
            </summary>
            <value>
            The UTC time the current file was last written.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpFileAttributes.Size">
            <summary>
            Gets or sets the size, in bytes, of the current file.
            </summary>
            <value>
            The size of the current file in bytes.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpFileAttributes.UserId">
            <summary>
            Gets or sets file user id.
            </summary>
            <value>
            File user id.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpFileAttributes.GroupId">
            <summary>
            Gets or sets file group id.
            </summary>
            <value>
            File group id.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpFileAttributes.IsSocket">
            <summary>
            Gets a value indicating whether file represents a socket.
            </summary>
            <value>
              <c>true</c> if file represents a socket; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpFileAttributes.IsSymbolicLink">
            <summary>
            Gets a value indicating whether file represents a symbolic link.
            </summary>
            <value>
            	<c>true</c> if file represents a symbolic link; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpFileAttributes.IsRegularFile">
            <summary>
            Gets a value indicating whether file represents a regular file.
            </summary>
            <value>
            	<c>true</c> if file represents a regular file; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpFileAttributes.IsBlockDevice">
            <summary>
            Gets a value indicating whether file represents a block device.
            </summary>
            <value>
            	<c>true</c> if file represents a block device; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpFileAttributes.IsDirectory">
            <summary>
            Gets a value indicating whether file represents a directory.
            </summary>
            <value>
            	<c>true</c> if file represents a directory; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpFileAttributes.IsCharacterDevice">
            <summary>
            Gets a value indicating whether file represents a character device.
            </summary>
            <value>
            	<c>true</c> if file represents a character device; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpFileAttributes.IsNamedPipe">
            <summary>
            Gets a value indicating whether file represents a named pipe.
            </summary>
            <value>
            	<c>true</c> if file represents a named pipe; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpFileAttributes.OwnerCanRead">
            <summary>
            Gets a value indicating whether the owner can read from this file.
            </summary>
            <value>
              <c>true</c> if owner can read from this file; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpFileAttributes.OwnerCanWrite">
            <summary>
            Gets a value indicating whether the owner can write into this file.
            </summary>
            <value>
              <c>true</c> if owner can write into this file; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpFileAttributes.OwnerCanExecute">
            <summary>
            Gets a value indicating whether the owner can execute this file.
            </summary>
            <value>
              <c>true</c> if owner can execute this file; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpFileAttributes.GroupCanRead">
            <summary>
            Gets a value indicating whether the group members can read from this file.
            </summary>
            <value>
              <c>true</c> if group members can read from this file; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpFileAttributes.GroupCanWrite">
            <summary>
            Gets a value indicating whether the group members can write into this file.
            </summary>
            <value>
              <c>true</c> if group members can write into this file; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpFileAttributes.GroupCanExecute">
            <summary>
            Gets a value indicating whether the group members can execute this file.
            </summary>
            <value>
              <c>true</c> if group members can execute this file; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpFileAttributes.OthersCanRead">
            <summary>
            Gets a value indicating whether the others can read from this file.
            </summary>
            <value>
              <c>true</c> if others can read from this file; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpFileAttributes.OthersCanWrite">
            <summary>
            Gets a value indicating whether the others can write into this file.
            </summary>
            <value>
              <c>true</c> if others can write into this file; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpFileAttributes.OthersCanExecute">
            <summary>
            Gets a value indicating whether the others can execute this file.
            </summary>
            <value>
              <c>true</c> if others can execute this file; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpFileAttributes.Extensions">
            <summary>
            Gets or sets the extensions.
            </summary>
            <value>
            The extensions.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.SftpFileAttributes.SetPermissions(System.Int16)">
            <summary>
            Sets the permissions.
            </summary>
            <param name="mode">The mode.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.SftpFileAttributes.GetBytes">
            <summary>
            Returns a byte array representing the current <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.SftpFileAttributes"/>.
            </summary>
            <returns>
            A byte array representing the current <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.SftpFileAttributes"/>.
            </returns>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Sftp.SftpFileReader._fileSize">
            <summary>
            Holds the size of the file, when available.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Sftp.SftpFileReader._endOfFileReceived">
            <summary>
            Holds a value indicating whether EOF has already been signaled by the SSH server.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Sftp.SftpFileReader._isEndOfFileRead">
            <summary>
            Holds a value indicating whether the client has read up to the end of the file.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.SftpFileReader.#ctor(System.Byte[],KellermanSoftware.Renci.SshNet.Sftp.ISftpSession,System.UInt32,System.Int32,System.Nullable{System.Int64})">
            <summary>
            Initializes a new <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.SftpFileReader"/> instance with the specified handle,
            <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.ISftpSession"/> and the maximum number of pending reads.
            </summary>
            <param name="handle"></param>
            <param name="sftpSession"></param>
            <param name="chunkSize">The size of a individual read-ahead chunk.</param>
            <param name="maxPendingReads">The maximum number of pending reads.</param>
            <param name="fileSize">The size of the file, if known; otherwise, <c>null</c>.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.SftpFileReader.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.SftpFileReader.ContinueReadAhead">
            <summary>
            Returns a value indicating whether the read-ahead loop should be continued.
            </summary>
            <returns>
            <c>true</c> if the read-ahead loop should be continued; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Sftp.SftpFileStream">
            <summary>
            Exposes a <see cref="T:System.IO.Stream"/> around a remote SFTP file, supporting both synchronous and asynchronous read and write operations.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpFileStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            <returns>
            <c>true</c> if the stream supports reading; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpFileStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <returns>
            <c>true</c> if the stream supports seeking; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpFileStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <returns>
            <c>true</c> if the stream supports writing; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpFileStream.CanTimeout">
            <summary>
            Indicates whether timeout properties are usable for <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.SftpFileStream"/>.
            </summary>
            <value>
            <c>true</c> in all cases.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpFileStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
            <returns>A long value representing the length of the stream in bytes.</returns>
            <exception cref="T:System.NotSupportedException">A class derived from Stream does not support seeking. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
            <exception cref="T:System.IO.IOException">IO operation failed. </exception>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpFileStream.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
            <returns>The current position within the stream.</returns>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support seeking. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpFileStream.Name">
            <summary>
            Gets the name of the path that was used to construct the current <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.SftpFileStream"/>.
            </summary>
            <value>
            The name of the path that was used to construct the current <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.SftpFileStream"/>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpFileStream.Handle">
            <summary>
            Gets the operating system file handle for the file that the current <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.SftpFileStream"/> encapsulates.
            </summary>
            <value>
            The operating system file handle for the file that the current <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.SftpFileStream"/> encapsulates.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpFileStream.Timeout">
            <summary>
            Gets or sets the operation timeout.
            </summary>
            <value>
            The timeout.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.SftpFileStream.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.SftpFileStream"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.SftpFileStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the file.
            </summary>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.ObjectDisposedException">Stream is closed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.SftpFileStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the
            number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name="offset"/> and (<paramref name="offset"/> + <paramref name="count"/> - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested
            if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> is larger than the buffer length.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <c>null</c>. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> or <paramref name="count"/> is negative.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support reading. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
            <remarks>
            <para>
            This method attempts to read up to <paramref name="count"/> bytes. This either from the buffer, from the
            server (using one or more <c>SSH_FXP_READ</c> requests) or using a combination of both.
            </para>
            <para>
            The read loop is interrupted when either <paramref name="count"/> bytes are read, the server returns zero
            bytes (EOF) or less bytes than the read buffer size.
            </para>
            <para>
            When a server returns less number of bytes than the read buffer size, this <c>may</c> indicate that EOF has
            been reached. A subsequent (<c>SSH_FXP_READ</c>) server request is necessary to make sure EOF has effectively
            been reached.  Breaking out of the read loop avoids reading from the server twice to determine EOF: once in
            the read loop, and once upon the next <see cref="M:KellermanSoftware.Renci.SshNet.Sftp.SftpFileStream.Read(System.Byte[],System.Int32,System.Int32)"/> or <see cref="M:KellermanSoftware.Renci.SshNet.Sftp.SftpFileStream.ReadByte"/> invocation.
            </para>
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.SftpFileStream.ReadByte">
            <summary>
            Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.
            </summary>
            <returns>
            The unsigned byte cast to an <see cref="T:System.Int32"/>, or -1 if at the end of the stream.
            </returns>
            <exception cref="T:System.NotSupportedException">The stream does not support reading. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
            <exception cref="T:System.IO.IOException">Read operation failed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.SftpFileStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the <paramref name="origin"/> parameter.</param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used to obtain the new position.</param>
            <returns>
            The new position within the current stream.
            </returns>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support seeking, such as if the stream is constructed from a pipe or console output. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.SftpFileStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
            <exception cref="T:System.NotSupportedException">The stream does not support both writing and seeking.</exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value"/> must be greater than zero.</exception>
            <remarks>
            <para>
            Buffers are first flushed.
            </para>
            <para>
            If the specified value is less than the current length of the stream, the stream is truncated and - if the
            current position is greater than the new length - the current position is moved to the last byte of the stream.
            </para>
            <para>
            If the given value is greater than the current length of the stream, the stream is expanded and the current
            position remains the same.
            </para>
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.SftpFileStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count"/> bytes from <paramref name="buffer"/> to the current stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> is greater than the buffer length.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> or <paramref name="count"/> is negative.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
            <exception cref="T:System.NotSupportedException">The stream does not support writing.</exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.SftpFileStream.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current position in the stream and advances the position within the stream by one byte.
            </summary>
            <param name="value">The byte to write to the stream.</param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support writing, or the stream is already closed. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.SftpFileStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.IO.Stream"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.SftpFileStream.FlushReadBuffer">
            <summary>
            Flushes the read data from the buffer.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.SftpFileStream.FlushWriteBuffer">
            <summary>
            Flush any buffered write data to the file.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.SftpFileStream.SetupRead">
            <summary>
            Setups the read.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.SftpFileStream.SetupWrite">
            <summary>
            Setups the write.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Sftp.SftpFileSytemInformation">
            <summary>
            Contains File system information exposed by statvfs@openssh.com request.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpFileSytemInformation.FileSystemBlockSize">
            <summary>
            Gets the file system block size.
            </summary>
            <value>
            The file system block size.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpFileSytemInformation.BlockSize">
            <summary>
            Gets the fundamental file system size of the block.
            </summary>
            <value>
            The fundamental file system block size.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpFileSytemInformation.TotalBlocks">
            <summary>
            Gets the total blocks.
            </summary>
            <value>
            The total blocks.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpFileSytemInformation.FreeBlocks">
            <summary>
            Gets the free blocks.
            </summary>
            <value>
            The free blocks.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpFileSytemInformation.AvailableBlocks">
            <summary>
            Gets the available blocks.
            </summary>
            <value>
            The available blocks.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpFileSytemInformation.TotalNodes">
            <summary>
            Gets the total nodes.
            </summary>
            <value>
            The total nodes.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpFileSytemInformation.FreeNodes">
            <summary>
            Gets the free nodes.
            </summary>
            <value>
            The free nodes.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpFileSytemInformation.AvailableNodes">
            <summary>
            Gets the available nodes.
            </summary>
            <value>
            The available nodes.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpFileSytemInformation.Sid">
            <summary>
            Gets the sid.
            </summary>
            <value>
            The sid.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpFileSytemInformation.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <value>
            <c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpFileSytemInformation.SupportsSetUid">
            <summary>
            Gets a value indicating whether [supports set uid].
            </summary>
            <value>
              <c>true</c> if [supports set uid]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpFileSytemInformation.MaxNameLenght">
            <summary>
            Gets the max name lenght.
            </summary>
            <value>
            The max name lenght.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.SftpFileSytemInformation.#ctor(System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.SftpFileSytemInformation" /> class.
            </summary>
            <param name="bsize">The bsize.</param>
            <param name="frsize">The frsize.</param>
            <param name="blocks">The blocks.</param>
            <param name="bfree">The bfree.</param>
            <param name="bavail">The bavail.</param>
            <param name="files">The files.</param>
            <param name="ffree">The ffree.</param>
            <param name="favail">The favail.</param>
            <param name="sid">The sid.</param>
            <param name="flag">The flag.</param>
            <param name="namemax">The namemax.</param>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Sftp.SftpListDirectoryAsyncResult">
            <summary>
            Encapsulates the results of an asynchronous directory list operation.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpListDirectoryAsyncResult.FilesRead">
            <summary>
            Gets the number of files read so far.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.SftpListDirectoryAsyncResult.#ctor(System.AsyncCallback,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.SftpListDirectoryAsyncResult"/> class.
            </summary>
            <param name="asyncCallback">The async callback.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.SftpListDirectoryAsyncResult.Update(System.Int32)">
            <summary>
            Updates asynchronous operation status information.
            </summary>
            <param name="filesRead">The files read.</param>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpMessage.BufferCapacity">
            <summary>
            Gets the size of the message in bytes.
            </summary>
            <value>
            The size of the messages in bytes.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.SftpMessage.WriteBytes(KellermanSoftware.Renci.SshNet.Common.SshDataStream)">
            <summary>
            Writes the current message to the specified <see cref="T:KellermanSoftware.Renci.SshNet.Common.SshDataStream"/>.
            </summary>
            <param name="stream">The <see cref="T:KellermanSoftware.Renci.SshNet.Common.SshDataStream"/> to write the message to.</param>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Sftp.SftpMessageTypes.Init">
            <summary>
            SSH_FXP_INIT
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Sftp.SftpMessageTypes.Version">
            <summary>
            SSH_FXP_VERSION
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Sftp.SftpMessageTypes.Open">
            <summary>
            SSH_FXP_OPEN
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Sftp.SftpMessageTypes.Close">
            <summary>
            SSH_FXP_CLOSE
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Sftp.SftpMessageTypes.Read">
            <summary>
            SSH_FXP_READ
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Sftp.SftpMessageTypes.Write">
            <summary>
            SSH_FXP_WRITE
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Sftp.SftpMessageTypes.LStat">
            <summary>
            SSH_FXP_LSTAT
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Sftp.SftpMessageTypes.FStat">
            <summary>
            SSH_FXP_FSTAT
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Sftp.SftpMessageTypes.SetStat">
            <summary>
            SSH_FXP_SETSTAT
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Sftp.SftpMessageTypes.FSetStat">
            <summary>
            SSH_FXP_FSETSTAT
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Sftp.SftpMessageTypes.OpenDir">
            <summary>
            SSH_FXP_OPENDIR
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Sftp.SftpMessageTypes.ReadDir">
            <summary>
            SSH_FXP_READDIR
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Sftp.SftpMessageTypes.Remove">
            <summary>
            SSH_FXP_REMOVE
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Sftp.SftpMessageTypes.MkDir">
            <summary>
            SSH_FXP_MKDIR
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Sftp.SftpMessageTypes.RmDir">
            <summary>
            SSH_FXP_RMDIR
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Sftp.SftpMessageTypes.RealPath">
            <summary>
            SSH_FXP_REALPATH
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Sftp.SftpMessageTypes.Stat">
            <summary>
            SSH_FXP_STAT
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Sftp.SftpMessageTypes.Rename">
            <summary>
            SSH_FXP_RENAME
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Sftp.SftpMessageTypes.ReadLink">
            <summary>
            SSH_FXP_READLINK
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Sftp.SftpMessageTypes.SymLink">
            <summary>
            SSH_FXP_SYMLINK
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Sftp.SftpMessageTypes.Link">
            <summary>
            SSH_FXP_LINK
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Sftp.SftpMessageTypes.Block">
            <summary>
            SSH_FXP_BLOCK
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Sftp.SftpMessageTypes.Unblock">
            <summary>
            SSH_FXP_UNBLOCK
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Sftp.SftpMessageTypes.Status">
            <summary>
            SSH_FXP_STATUS
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Sftp.SftpMessageTypes.Handle">
            <summary>
            SSH_FXP_HANDLE
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Sftp.SftpMessageTypes.Data">
            <summary>
            SSH_FXP_DATA
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Sftp.SftpMessageTypes.Name">
            <summary>
            SSH_FXP_NAME
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Sftp.SftpMessageTypes.Attrs">
            <summary>
            SSH_FXP_ATTRS
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Sftp.SftpMessageTypes.Extended">
            <summary>
            SSH_FXP_EXTENDED
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Sftp.SftpMessageTypes.ExtendedReply">
            <summary>
            SSH_FXP_EXTENDED_REPLY
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpSession.Encoding">
            <summary>
            Gets the character encoding to use.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpSession.WorkingDirectory">
            <summary>
            Gets the remote working directory.
            </summary>
            <value>
            The remote working directory.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpSession.ProtocolVersion">
            <summary>
            Gets the SFTP protocol version.
            </summary>
            <value>
            The SFTP protocol version.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpSession.NextRequestId">
            <summary>
            Gets the next request id for sftp session.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.SftpSession.ChangeDirectory(System.String)">
            <summary>
            Changes the current working directory to the specified path.
            </summary>
            <param name="path">The new working directory.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.SftpSession.GetCanonicalPath(System.String)">
            <summary>
            Resolves a given path into an absolute path on the server.
            </summary>
            <param name="path">The path to resolve.</param>
            <returns>
            The absolute path.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.SftpSession.RequestOpen(System.String,KellermanSoftware.Renci.SshNet.Sftp.Flags,System.Boolean)">
            <summary>
            Performs SSH_FXP_OPEN request
            </summary>
            <param name="path">The path.</param>
            <param name="flags">The flags.</param>
            <param name="nullOnError">if set to <c>true</c> returns <c>null</c> instead of throwing an exception.</param>
            <returns>File handle.</returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.SftpSession.BeginOpen(System.String,KellermanSoftware.Renci.SshNet.Sftp.Flags,System.AsyncCallback,System.Object)">
            <summary>
            Performs SSH_FXP_OPEN request
            </summary>
            <param name="path">The path.</param>
            <param name="flags">The flags.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate that is executed when <see cref="M:KellermanSoftware.Renci.SshNet.Sftp.SftpSession.BeginOpen(System.String,KellermanSoftware.Renci.SshNet.Sftp.Flags,System.AsyncCallback,System.Object)"/> completes.</param>
            <param name="state">An object that contains any additional user-defined data.</param>
            <returns>
            A <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.SftpOpenAsyncResult"/> that represents the asynchronous call.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.SftpSession.EndOpen(KellermanSoftware.Renci.SshNet.Sftp.SftpOpenAsyncResult)">
            <summary>
            Handles the end of an asynchronous open.
            </summary>
            <param name="asyncResult">An <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.SftpOpenAsyncResult"/> that represents an asynchronous call.</param>
            <returns>
            A <see cref="T:System.Byte"/> array representing a file handle.
            </returns>
            <remarks>
            If all available data has been read, the <see cref="M:KellermanSoftware.Renci.SshNet.Sftp.SftpSession.EndOpen(KellermanSoftware.Renci.SshNet.Sftp.SftpOpenAsyncResult)"/> method completes
            immediately and returns zero bytes.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is <c>null</c>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.SftpSession.RequestClose(System.Byte[])">
            <summary>
            Performs SSH_FXP_CLOSE request.
            </summary>
            <param name="handle">The handle.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.SftpSession.BeginClose(System.Byte[],System.AsyncCallback,System.Object)">
            <summary>
            Performs SSH_FXP_CLOSE request.
            </summary>
            <param name="handle">The handle.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate that is executed when <see cref="M:KellermanSoftware.Renci.SshNet.Sftp.SftpSession.BeginClose(System.Byte[],System.AsyncCallback,System.Object)"/> completes.</param>
            <param name="state">An object that contains any additional user-defined data.</param>
            <returns>
            A <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.SftpCloseAsyncResult"/> that represents the asynchronous call.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.SftpSession.EndClose(KellermanSoftware.Renci.SshNet.Sftp.SftpCloseAsyncResult)">
            <summary>
            Handles the end of an asynchronous close.
            </summary>
            <param name="asyncResult">An <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.SftpCloseAsyncResult"/> that represents an asynchronous call.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is <c>null</c>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.SftpSession.BeginRead(System.Byte[],System.UInt64,System.UInt32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous read using a SSH_FXP_READ request.
            </summary>
            <param name="handle">The handle to the file to read from.</param>
            <param name="offset">The offset in the file to start reading from.</param>
            <param name="length">The number of bytes to read.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate that is executed when <see cref="M:KellermanSoftware.Renci.SshNet.Sftp.SftpSession.BeginRead(System.Byte[],System.UInt64,System.UInt32,System.AsyncCallback,System.Object)"/> completes.</param>
            <param name="state">An object that contains any additional user-defined data.</param>
            <returns>
            A <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.SftpReadAsyncResult"/> that represents the asynchronous call.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.SftpSession.EndRead(KellermanSoftware.Renci.SshNet.Sftp.SftpReadAsyncResult)">
            <summary>
            Handles the end of an asynchronous read.
            </summary>
            <param name="asyncResult">An <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.SftpReadAsyncResult"/> that represents an asynchronous call.</param>
            <returns>
            A <see cref="T:System.Byte"/> array representing the data read.
            </returns>
            <remarks>
            If all available data has been read, the <see cref="M:KellermanSoftware.Renci.SshNet.Sftp.SftpSession.EndRead(KellermanSoftware.Renci.SshNet.Sftp.SftpReadAsyncResult)"/> method completes
            immediately and returns zero bytes.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is <c>null</c>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.SftpSession.RequestRead(System.Byte[],System.UInt64,System.UInt32)">
            <summary>
            Performs SSH_FXP_READ request.
            </summary>
            <param name="handle">The handle.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
            <returns>data array; null if EOF</returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.SftpSession.RequestWrite(System.Byte[],System.UInt64,System.Byte[],System.Int32,System.Int32,System.Threading.AutoResetEvent,System.Action{KellermanSoftware.Renci.SshNet.Sftp.Responses.SftpStatusResponse})">
            <summary>
            Performs SSH_FXP_WRITE request.
            </summary>
            <param name="handle">The handle.</param>
            <param name="serverOffset">The the zero-based offset (in bytes) relative to the beginning of the file that the write must start at.</param>
            <param name="data">The buffer holding the data to write.</param>
            <param name="offset">the zero-based offset in <paramref name="data" /> at which to begin taking bytes to write.</param>
            <param name="length">The length (in bytes) of the data to write.</param>
            <param name="wait">The wait event handle if needed.</param>
            <param name="writeCompleted">The callback to invoke when the write has completed.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.SftpSession.RequestLStat(System.String)">
            <summary>
            Performs SSH_FXP_LSTAT request.
            </summary>
            <param name="path">The path.</param>
            <returns>
            File attributes
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.SftpSession.BeginLStat(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Performs SSH_FXP_LSTAT request.
            </summary>
            <param name="path">The path.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate that is executed when <see cref="M:KellermanSoftware.Renci.SshNet.Sftp.SftpSession.BeginLStat(System.String,System.AsyncCallback,System.Object)"/> completes.</param>
            <param name="state">An object that contains any additional user-defined data.</param>
            <returns>
            A <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.SFtpStatAsyncResult"/> that represents the asynchronous call.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.SftpSession.EndLStat(KellermanSoftware.Renci.SshNet.Sftp.SFtpStatAsyncResult)">
            <summary>
            Handles the end of an asynchronous SSH_FXP_LSTAT request.
            </summary>
            <param name="asyncResult">An <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.SFtpStatAsyncResult"/> that represents an asynchronous call.</param>
            <returns>
            The file attributes.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is <c>null</c>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.SftpSession.RequestFStat(System.Byte[],System.Boolean)">
            <summary>
            Performs SSH_FXP_FSTAT request.
            </summary>
            <param name="handle">The handle.</param>
            <param name="nullOnError">if set to <c>true</c> returns <c>null</c> instead of throwing an exception.</param>
            <returns>
            File attributes
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.SftpSession.RequestSetStat(System.String,KellermanSoftware.Renci.SshNet.Sftp.SftpFileAttributes)">
            <summary>
            Performs SSH_FXP_SETSTAT request.
            </summary>
            <param name="path">The path.</param>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.SftpSession.RequestFSetStat(System.Byte[],KellermanSoftware.Renci.SshNet.Sftp.SftpFileAttributes)">
            <summary>
            Performs SSH_FXP_FSETSTAT request.
            </summary>
            <param name="handle">The handle.</param>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.SftpSession.RequestOpenDir(System.String,System.Boolean)">
            <summary>
            Performs SSH_FXP_OPENDIR request
            </summary>
            <param name="path">The path.</param>
            <param name="nullOnError">if set to <c>true</c> returns <c>null</c> instead of throwing an exception.</param>
            <returns>File handle.</returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.SftpSession.RequestReadDir(System.Byte[])">
            <summary>
            Performs SSH_FXP_READDIR request
            </summary>
            <param name="handle">The handle.</param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.SftpSession.RequestRemove(System.String)">
            <summary>
            Performs SSH_FXP_REMOVE request.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.SftpSession.RequestMkDir(System.String)">
            <summary>
            Performs SSH_FXP_MKDIR request.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.SftpSession.RequestRmDir(System.String)">
            <summary>
            Performs SSH_FXP_RMDIR request.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.SftpSession.RequestRealPath(System.String,System.Boolean)">
            <summary>
            Performs SSH_FXP_REALPATH request
            </summary>
            <param name="path">The path.</param>
            <param name="nullOnError">if set to <c>true</c> returns null instead of throwing an exception.</param>
            <returns>
            The absolute path.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.SftpSession.BeginRealPath(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Performs SSH_FXP_REALPATH request.
            </summary>
            <param name="path">The path.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate that is executed when <see cref="M:KellermanSoftware.Renci.SshNet.Sftp.SftpSession.BeginRealPath(System.String,System.AsyncCallback,System.Object)"/> completes.</param>
            <param name="state">An object that contains any additional user-defined data.</param>
            <returns>
            A <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.SftpRealPathAsyncResult"/> that represents the asynchronous call.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.SftpSession.EndRealPath(KellermanSoftware.Renci.SshNet.Sftp.SftpRealPathAsyncResult)">
            <summary>
            Handles the end of an asynchronous SSH_FXP_REALPATH request.
            </summary>
            <param name="asyncResult">An <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.SftpRealPathAsyncResult"/> that represents an asynchronous call.</param>
            <returns>
            The absolute path.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is <c>null</c>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.SftpSession.RequestStat(System.String,System.Boolean)">
            <summary>
            Performs SSH_FXP_STAT request.
            </summary>
            <param name="path">The path.</param>
            <param name="nullOnError">if set to <c>true</c> returns null instead of throwing an exception.</param>
            <returns>
            File attributes
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.SftpSession.BeginStat(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Performs SSH_FXP_STAT request
            </summary>
            <param name="path">The path.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate that is executed when <see cref="M:KellermanSoftware.Renci.SshNet.Sftp.SftpSession.BeginStat(System.String,System.AsyncCallback,System.Object)"/> completes.</param>
            <param name="state">An object that contains any additional user-defined data.</param>
            <returns>
            A <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.SFtpStatAsyncResult"/> that represents the asynchronous call.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.SftpSession.EndStat(KellermanSoftware.Renci.SshNet.Sftp.SFtpStatAsyncResult)">
            <summary>
            Handles the end of an asynchronous stat.
            </summary>
            <param name="asyncResult">An <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.SFtpStatAsyncResult"/> that represents an asynchronous call.</param>
            <returns>
            The file attributes.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is <c>null</c>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.SftpSession.RequestRename(System.String,System.String)">
            <summary>
            Performs SSH_FXP_RENAME request.
            </summary>
            <param name="oldPath">The old path.</param>
            <param name="newPath">The new path.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.SftpSession.RequestReadLink(System.String,System.Boolean)">
            <summary>
            Performs SSH_FXP_READLINK request.
            </summary>
            <param name="path">The path.</param>
            <param name="nullOnError">if set to <c>true</c> returns null instead of throwing an exception.</param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.SftpSession.RequestSymLink(System.String,System.String)">
            <summary>
            Performs SSH_FXP_SYMLINK request.
            </summary>
            <param name="linkpath">The linkpath.</param>
            <param name="targetpath">The targetpath.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.SftpSession.RequestPosixRename(System.String,System.String)">
            <summary>
            Performs posix-rename@openssh.com extended request.
            </summary>
            <param name="oldPath">The old path.</param>
            <param name="newPath">The new path.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.SftpSession.RequestStatVfs(System.String,System.Boolean)">
            <summary>
            Performs statvfs@openssh.com extended request.
            </summary>
            <param name="path">The path.</param>
            <param name="nullOnError">if set to <c>true</c> [null on error].</param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.SftpSession.RequestFStatVfs(System.Byte[],System.Boolean)">
            <summary>
            Performs fstatvfs@openssh.com extended request.
            </summary>
            <param name="handle">The file handle.</param>
            <param name="nullOnError">if set to <c>true</c> [null on error].</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.SftpSession.HardLink(System.String,System.String)">
            <summary>
            Performs hardlink@openssh.com extended request.
            </summary>
            <param name="oldPath">The old path.</param>
            <param name="newPath">The new path.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.SftpSession.CalculateOptimalReadLength(System.UInt32)">
            <summary>
            Calculates the optimal size of the buffer to read data from the channel.
            </summary>
            <param name="bufferSize">The buffer size configured on the client.</param>
            <returns>
            The optimal size of the buffer to read data from the channel.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.SftpSession.CalculateOptimalWriteLength(System.UInt32,System.Byte[])">
            <summary>
            Calculates the optimal size of the buffer to write data on the channel.
            </summary>
            <param name="bufferSize">The buffer size configured on the client.</param>
            <param name="handle">The file handle.</param>
            <returns>
            The optimal size of the buffer to write data on the channel.
            </returns>
            <remarks>
            Currently, we do not take the remote window size into account.
            </remarks>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Sftp.SftpSynchronizeDirectoriesAsyncResult">
            <summary>
            Encapsulates the results of an asynchronous directory synchronization operation.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpSynchronizeDirectoriesAsyncResult.FilesRead">
            <summary>
            Gets the number of files read so far.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.SftpSynchronizeDirectoriesAsyncResult.#ctor(System.AsyncCallback,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.SftpListDirectoryAsyncResult" /> class.
            </summary>
            <param name="asyncCallback">The async callback.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.SftpSynchronizeDirectoriesAsyncResult.Update(System.Int32)">
            <summary>
            Updates asynchronous operation status information.
            </summary>
            <param name="filesRead">The files read.</param>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Sftp.SftpUploadAsyncResult">
            <summary>
            Encapsulates the results of an asynchronous upload operation.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpUploadAsyncResult.IsUploadCanceled">
            <summary>
            Gets or sets a value indicating whether to cancel asynchronous upload operation
            </summary>
            <value>
            <c>true</c> if upload operation to be canceled; otherwise, <c>false</c>.
            </value>
            <remarks>
            Upload operation will be canceled after finishing uploading current buffer.
            </remarks>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Sftp.SftpUploadAsyncResult.UploadedBytes">
            <summary>
            Gets the number of uploaded bytes.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.SftpUploadAsyncResult.#ctor(System.AsyncCallback,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Sftp.SftpUploadAsyncResult"/> class.
            </summary>
            <param name="asyncCallback">The async callback.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Sftp.SftpUploadAsyncResult.Update(System.UInt64)">
            <summary>
            Updates asynchronous operation status information.
            </summary>
            <param name="uploadedBytes">Number of uploaded bytes.</param>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Sftp.StatusCodes.Ok">
            <summary>
            SSH_FX_OK
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Sftp.StatusCodes.Eof">
            <summary>
            SSH_FX_EOF
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Sftp.StatusCodes.NoSuchFile">
            <summary>
            SSH_FX_NO_SUCH_FILE
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Sftp.StatusCodes.PermissionDenied">
            <summary>
            SSH_FX_PERMISSION_DENIED
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Sftp.StatusCodes.Failure">
            <summary>
            SSH_FX_FAILURE
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Sftp.StatusCodes.BadMessage">
            <summary>
            SSH_FX_BAD_MESSAGE
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Sftp.StatusCodes.NoConnection">
            <summary>
            SSH_FX_NO_CONNECTION
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Sftp.StatusCodes.ConnectionLost">
            <summary>
            SSH_FX_CONNECTION_LOST
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Sftp.StatusCodes.OperationUnsupported">
            <summary>
            SSH_FX_OP_UNSUPPORTED
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Sftp.StatusCodes.InvalidHandle">
            <summary>
            SSH_FX_INVALID_HANDLE
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Sftp.StatusCodes.NoSuchPath">
            <summary>
            SSH_FX_NO_SUCH_PATH
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Sftp.StatusCodes.FileAlreadyExists">
            <summary>
            SSH_FX_FILE_ALREADY_EXISTS
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Sftp.StatusCodes.WriteProtect">
            <summary>
            SSH_FX_WRITE_PROTECT
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Sftp.StatusCodes.NoMedia">
            <summary>
            SSH_FX_NO_MEDIA
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Sftp.StatusCodes.NoSpaceOnFilesystem">
            <summary>
            SSH_FX_NO_SPACE_ON_FILESYSTEM
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Sftp.StatusCodes.QuotaExceeded">
            <summary>
            SSH_FX_QUOTA_EXCEEDED
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Sftp.StatusCodes.UnknownPrincipal">
            <summary>
            SSH_FX_UNKNOWN_PRINCIPAL
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Sftp.StatusCodes.LockConflict">
            <summary>
            SSH_FX_LOCK_CONFLICT
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Sftp.StatusCodes.DirNotEmpty">
            <summary>
            SSH_FX_DIR_NOT_EMPTY
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Sftp.StatusCodes.NotDirectory">
            <summary>
            SSH_FX_NOT_A_DIRECTORY
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Sftp.StatusCodes.InvalidFilename">
            <summary>
            SSH_FX_INVALID_FILENAME
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Sftp.StatusCodes.LinkLoop">
            <summary>
            SSH_FX_LINK_LOOP
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Sftp.StatusCodes.CannotDelete">
            <summary>
            SSH_FX_CANNOT_DELETE
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Sftp.StatusCodes.InvalidParameter">
            <summary>
            SSH_FX_INVALID_PARAMETER
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Sftp.StatusCodes.FileIsADirectory">
            <summary>
            SSH_FX_FILE_IS_A_DIRECTORY
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Sftp.StatusCodes.ByteRangeLockConflict">
            <summary>
            SSH_FX_BYTE_RANGE_LOCK_CONFLICT
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Sftp.StatusCodes.ByteRangeLockRefused">
            <summary>
            SSH_FX_BYTE_RANGE_LOCK_REFUSED
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Sftp.StatusCodes.DeletePending">
            <summary>
            SSH_FX_DELETE_PENDING
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Sftp.StatusCodes.FileCorrupt">
            <summary>
            SSH_FX_FILE_CORRUPT
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Sftp.StatusCodes.OwnerInvalid">
            <summary>
            SSH_FX_OWNER_INVALID
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Sftp.StatusCodes.GroupInvalid">
            <summary>
            SSH_FX_GROUP_INVALID
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.Sftp.StatusCodes.NoMatchingByteRangeLock">
            <summary>
            SSH_FX_NO_MATCHING_BYTE_RANGE_LOCK
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.Shell">
            <summary>
            Represents instance of the SSH shell object
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.Shell.IsStarted">
            <summary>
            Gets a value indicating whether this shell is started.
            </summary>
            <value>
            <c>true</c> if started is started; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.Shell.Starting">
            <summary>
            Occurs when shell is starting.
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.Shell.Started">
            <summary>
            Occurs when shell is started.
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.Shell.Stopping">
            <summary>
            Occurs when shell is stopping.
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.Shell.Stopped">
            <summary>
            Occurs when shell is stopped.
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.Shell.ErrorOccurred">
            <summary>
            Occurs when an error occurred.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Shell.#ctor(KellermanSoftware.Renci.SshNet.ISession,System.IO.Stream,System.IO.Stream,System.IO.Stream,System.String,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Collections.Generic.IDictionary{KellermanSoftware.Renci.SshNet.Common.TerminalModes,System.UInt32},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.Shell"/> class.
            </summary>
            <param name="session">The session.</param>
            <param name="input">The input.</param>
            <param name="output">The output.</param>
            <param name="extendedOutput">The extended output.</param>
            <param name="terminalName">Name of the terminal.</param>
            <param name="columns">The columns.</param>
            <param name="rows">The rows.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="terminalModes">The terminal modes.</param>
            <param name="bufferSize">Size of the buffer for output stream.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Shell.Start">
            <summary>
            Starts this shell.
            </summary>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">Shell is started.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Shell.Stop">
            <summary>
            Stops this shell.
            </summary>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">Shell is not started.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Shell.UnsubscribeFromSessionEvents(KellermanSoftware.Renci.SshNet.ISession)">
            <summary>
            Unsubscribes the current <see cref="T:KellermanSoftware.Renci.SshNet.Shell"/> from session events.
            </summary>
            <param name="session">The session.</param>
            <remarks>
            Does nothing when <paramref name="session"/> is <c>null</c>.
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Shell.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Shell.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.Shell.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:KellermanSoftware.Renci.SshNet.Shell"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.ShellStream">
            <summary>
            Contains operation for working with SSH Shell.
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.ShellStream.DataReceived">
            <summary>
            Occurs when data was received.
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.ShellStream.ErrorOccurred">
            <summary>
            Occurs when an error occurred.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.ShellStream.DataAvailable">
            <summary>
            Gets a value that indicates whether data is available on the <see cref="T:KellermanSoftware.Renci.SshNet.ShellStream"/> to be read.
            </summary>
            <value>
            <c>true</c> if data is available to be read; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.ShellStream.BufferSize">
            <summary>
            Gets the number of bytes that will be written to the internal buffer.
            </summary>
            <value>
            The number of bytes that will be written to the internal buffer.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ShellStream.#ctor(KellermanSoftware.Renci.SshNet.ISession,System.String,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Collections.Generic.IDictionary{KellermanSoftware.Renci.SshNet.Common.TerminalModes,System.UInt32},System.Int32)">
            <summary>
            Initializes a new <see cref="T:KellermanSoftware.Renci.SshNet.ShellStream"/> instance.
            </summary>
            <param name="session">The SSH session.</param>
            <param name="terminalName">The <c>TERM</c> environment variable.</param>
            <param name="columns">The terminal width in columns.</param>
            <param name="rows">The terminal width in rows.</param>
            <param name="width">The terminal height in pixels.</param>
            <param name="height">The terminal height in pixels.</param>
            <param name="terminalModeValues">The terminal mode values.</param>
            <param name="bufferSize">The size of the buffer.</param>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">The channel could not be opened.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">The pseudo-terminal request was not accepted by the server.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">The request to start a shell was not accepted by the server.</exception>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.ShellStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            <returns>
            <c>true</c> if the stream supports reading; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.ShellStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <returns>
            <c>true</c> if the stream supports seeking; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.ShellStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <returns>
            <c>true</c> if the stream supports writing; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ShellStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.ShellStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
            <returns>A long value representing the length of the stream in bytes.</returns>
            <exception cref="T:System.NotSupportedException">A class derived from Stream does not support seeking.</exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.ShellStream.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
            <returns>
            The current position within the stream.
            </returns>
            <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
            <exception cref="T:System.NotSupportedException">The stream does not support seeking.</exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ShellStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name="offset"/> and (<paramref name="offset"/> + <paramref name="count"/> - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> is larger than the buffer length. </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> or <paramref name="count"/> is negative.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>   
            <exception cref="T:System.NotSupportedException">The stream does not support reading.</exception>   
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ShellStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            This method is not supported.
            </summary>
            <param name="offset">A byte offset relative to the <paramref name="origin"/> parameter.</param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used to obtain the new position.</param>
            <returns>
            The new position within the current stream.
            </returns>
            <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
            <exception cref="T:System.NotSupportedException">The stream does not support seeking, such as if the stream is constructed from a pipe or console output.</exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ShellStream.SetLength(System.Int64)">
            <summary>
            This method is not supported.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
            <exception cref="T:System.NotSupportedException">The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output.</exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ShellStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count"/> bytes from <paramref name="buffer"/> to the current stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> is greater than the buffer length.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> or <paramref name="count"/> is negative.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
            <exception cref="T:System.NotSupportedException">The stream does not support writing.</exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ShellStream.Expect(KellermanSoftware.Renci.SshNet.ExpectAction[])">
            <summary>
            Expects the specified expression and performs action when one is found.
            </summary>
            <param name="expectActions">The expected expressions and actions to perform.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ShellStream.Expect(System.TimeSpan,KellermanSoftware.Renci.SshNet.ExpectAction[])">
            <summary>
            Expects the specified expression and performs action when one is found.
            </summary>
            <param name="timeout">Time to wait for input.</param>
            <param name="expectActions">The expected expressions and actions to perform, if the specified time elapsed and expected condition have not met, that method will exit without executing any action.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ShellStream.BeginExpect(KellermanSoftware.Renci.SshNet.ExpectAction[])">
            <summary>
            Begins the expect.
            </summary>
            <param name="expectActions">The expect actions.</param>
            <returns>
            An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ShellStream.BeginExpect(System.AsyncCallback,KellermanSoftware.Renci.SshNet.ExpectAction[])">
            <summary>
            Begins the expect.
            </summary>
            <param name="callback">The callback.</param>
            <param name="expectActions">The expect actions.</param>
            <returns>
            An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ShellStream.BeginExpect(System.AsyncCallback,System.Object,KellermanSoftware.Renci.SshNet.ExpectAction[])">
            <summary>
            Begins the expect.
            </summary>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <param name="expectActions">The expect actions.</param>
            <returns>
            An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ShellStream.BeginExpect(System.TimeSpan,System.AsyncCallback,System.Object,KellermanSoftware.Renci.SshNet.ExpectAction[])">
            <summary>
            Begins the expect.
            </summary>
            <param name="timeout">The timeout.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <param name="expectActions">The expect actions.</param>
            <returns>
            An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ShellStream.EndExpect(System.IAsyncResult)">
            <summary>
            Ends the execute.
            </summary>
            <param name="asyncResult">The async result.</param>
            <exception cref="T:System.ArgumentException">Either the IAsyncResult object did not come from the corresponding async method on this type, or EndExecute was called multiple times with the same IAsyncResult.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ShellStream.Expect(System.String)">
            <summary>
            Expects the expression specified by text.
            </summary>
            <param name="text">The text to expect.</param>
            <returns>
            Text available in the shell that ends with expected text.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ShellStream.Expect(System.String,System.TimeSpan)">
            <summary>
            Expects the expression specified by text.
            </summary>
            <param name="text">The text to expect.</param>
            <param name="timeout">Time to wait for input.</param>
            <returns>
            The text available in the shell that ends with expected text, or <c>null</c> if the specified time has elapsed.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ShellStream.Expect(System.Text.RegularExpressions.Regex)">
            <summary>
            Expects the expression specified by regular expression.
            </summary>
            <param name="regex">The regular expression to expect.</param>
            <returns>
            The text available in the shell that contains all the text that ends with expected expression.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ShellStream.Expect(System.Text.RegularExpressions.Regex,System.TimeSpan)">
            <summary>
            Expects the expression specified by regular expression.
            </summary>
            <param name="regex">The regular expression to expect.</param>
            <param name="timeout">Time to wait for input.</param>
            <returns>
            The text available in the shell that contains all the text that ends with expected expression,
            or <c>null</c> if the specified time has elapsed.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ShellStream.ReadLine">
            <summary>
            Reads the line from the shell. If line is not available it will block the execution and will wait for new line.
            </summary>
            <returns>
            The line read from the shell.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ShellStream.ReadLine(System.TimeSpan)">
            <summary>
            Reads a line from the shell. If line is not available it will block the execution and will wait for new line.
            </summary>
            <param name="timeout">Time to wait for input.</param>
            <returns>
            The line read from the shell, or <c>null</c> when no input is received for the specified timeout.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ShellStream.Read">
            <summary>
            Reads text available in the shell.
            </summary>
            <returns>
            The text available in the shell.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ShellStream.Write(System.String)">
            <summary>
            Writes the specified text to the shell.
            </summary>
            <param name="text">The text to be written to the shell.</param>
            <remarks>
            If <paramref name="text"/> is <c>null</c>, nothing is written.
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ShellStream.WriteLine(System.String)">
            <summary>
            Writes the line to the shell.
            </summary>
            <param name="line">The line to be written to the shell.</param>
            <remarks>
            If <paramref name="line"/> is <c>null</c>, only the line terminator is written.
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ShellStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.IO.Stream"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.ShellStream.UnsubscribeFromSessionEvents(KellermanSoftware.Renci.SshNet.ISession)">
            <summary>
            Unsubscribes the current <see cref="T:KellermanSoftware.Renci.SshNet.ShellStream"/> from session events.
            </summary>
            <param name="session">The session.</param>
            <remarks>
            Does nothing when <paramref name="session"/> is <c>null</c>.
            </remarks>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.SshClient">
            <summary>
            Provides client connection to SSH server.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.SshClient._forwardedPorts">
            <summary>
            Holds the list of forwarded ports
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.SshClient._isDisposed">
            <summary>
            Holds a value indicating whether the current instance is disposed.
            </summary>
            <value>
            <c>true</c> if the current instance is disposed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.SshClient.ForwardedPorts">
            <summary>
            Gets the list of forwarded ports.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SshClient.#ctor(KellermanSoftware.Renci.SshNet.ConnectionInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.SshClient" /> class.
            </summary>
            <param name="connectionInfo">The connection info.</param>
            <example>
                <code source="..\..\src\Renci.SshNet.Tests\Classes\PasswordConnectionInfoTest.cs" region="Example PasswordConnectionInfo" language="C#" title="Connect using PasswordConnectionInfo object" />
                <code source="..\..\src\Renci.SshNet.Tests\Classes\PasswordConnectionInfoTest.cs" region="Example PasswordConnectionInfo PasswordExpired" language="C#" title="Connect using PasswordConnectionInfo object with passwod change option" />
                <code source="..\..\src\Renci.SshNet.Tests\Classes\PrivateKeyConnectionInfoTest.cs" region="Example PrivateKeyConnectionInfo PrivateKeyFile" language="C#" title="Connect using PrivateKeyConnectionInfo" />
                <code source="..\..\src\Renci.SshNet.Tests\Classes\SshClientTest.cs" region="Example SshClient Connect Timeout" language="C#" title="Specify connection timeout when connecting" />
            </example>
            <exception cref="T:System.ArgumentNullException"><paramref name="connectionInfo"/> is <c>null</c>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SshClient.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.SshClient"/> class.
            </summary>
            <param name="host">Connection host.</param>
            <param name="port">Connection port.</param>
            <param name="username">Authentication username.</param>
            <param name="password">Authentication password.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="password"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="host"/> is invalid, or <paramref name="username"/> is <c>null</c> or contains only whitespace characters.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="port"/> is not within <see cref="F:System.Net.IPEndPoint.MinPort"/> and <see cref="F:System.Net.IPEndPoint.MaxPort"/>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SshClient.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.SshClient"/> class.
            </summary>
            <param name="host">Connection host.</param>
            <param name="username">Authentication username.</param>
            <param name="password">Authentication password.</param>
            <example>
                <code source="..\..\src\Renci.SshNet.Tests\Classes\SshClientTest.cs" region="Example SshClient(host, username) Connect" language="C#" title="Connect using username and password" />
            </example>
            <exception cref="T:System.ArgumentNullException"><paramref name="password"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="host"/> is invalid, or <paramref name="username"/> is <c>null</c> or contains only whitespace characters.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SshClient.#ctor(System.String,System.Int32,System.String,KellermanSoftware.Renci.SshNet.PrivateKeyFile[])">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.SshClient"/> class.
            </summary>
            <param name="host">Connection host.</param>
            <param name="port">Connection port.</param>
            <param name="username">Authentication username.</param>
            <param name="keyFiles">Authentication private key file(s) .</param>
            <example>
                <code source="..\..\src\Renci.SshNet.Tests\Classes\SshClientTest.cs" region="Example SshClient(host, username) Connect PrivateKeyFile" language="C#" title="Connect using username and private key" />
                <code source="..\..\src\Renci.SshNet.Tests\Classes\SshClientTest.cs" region="Example SshClient(host, username) Connect PrivateKeyFile PassPhrase" language="C#" title="Connect using username and private key and pass phrase" />
            </example>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyFiles"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="host"/> is invalid, -or- <paramref name="username"/> is <c>null</c> or contains only whitespace characters.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="port"/> is not within <see cref="F:System.Net.IPEndPoint.MinPort"/> and <see cref="F:System.Net.IPEndPoint.MaxPort"/>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SshClient.#ctor(System.String,System.String,KellermanSoftware.Renci.SshNet.PrivateKeyFile[])">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.SshClient"/> class.
            </summary>
            <param name="host">Connection host.</param>
            <param name="username">Authentication username.</param>
            <param name="keyFiles">Authentication private key file(s) .</param>
            <example>
                <code source="..\..\src\Renci.SshNet.Tests\Classes\SshClientTest.cs" region="Example SshClient(host, username) Connect PrivateKeyFile" language="C#" title="Connect using private key" />
                <code source="..\..\src\Renci.SshNet.Tests\Classes\SshClientTest.cs" region="Example SshClient(host, username) Connect PrivateKeyFile PassPhrase" language="C#" title="Connect using private key and pass phrase" />
            </example>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyFiles"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="host"/> is invalid, -or- <paramref name="username"/> is <c>null</c> or contains only whitespace characters.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SshClient.#ctor(KellermanSoftware.Renci.SshNet.ConnectionInfo,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.SshClient"/> class.
            </summary>
            <param name="connectionInfo">The connection info.</param>
            <param name="ownsConnectionInfo">Specified whether this instance owns the connection info.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="connectionInfo"/> is <c>null</c>.</exception>
            <remarks>
            If <paramref name="ownsConnectionInfo"/> is <c>true</c>, then the
            connection info will be disposed when this instance is disposed.
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SshClient.#ctor(KellermanSoftware.Renci.SshNet.ConnectionInfo,System.Boolean,KellermanSoftware.Renci.SshNet.IServiceFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.SshClient"/> class.
            </summary>
            <param name="connectionInfo">The connection info.</param>
            <param name="ownsConnectionInfo">Specified whether this instance owns the connection info.</param>
            <param name="serviceFactory">The factory to use for creating new services.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="connectionInfo"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="serviceFactory"/> is <c>null</c>.</exception>
            <remarks>
            If <paramref name="ownsConnectionInfo"/> is <c>true</c>, then the
            connection info will be disposed when this instance is disposed.
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SshClient.OnDisconnecting">
            <summary>
            Called when client is disconnecting from the server.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SshClient.AddForwardedPort(KellermanSoftware.Renci.SshNet.ForwardedPort)">
            <summary>
            Adds the forwarded port.
            </summary>
            <param name="port">The port.</param>
            <example>
                <code source="..\..\src\Renci.SshNet.Tests\Classes\ForwardedPortRemoteTest.cs" region="Example SshClient AddForwardedPort Start Stop ForwardedPortRemote" language="C#" title="Remote port forwarding" />
                <code source="..\..\src\Renci.SshNet.Tests\Classes\ForwardedPortLocalTest.cs" region="Example SshClient AddForwardedPort Start Stop ForwardedPortLocal" language="C#" title="Local port forwarding" />
            </example>
            <exception cref="T:System.InvalidOperationException">Forwarded port is already added to a different client.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="port"/> is <c>null</c>.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SshClient.RemoveForwardedPort(KellermanSoftware.Renci.SshNet.ForwardedPort)">
            <summary>
            Stops and removes the forwarded port from the list.
            </summary>
            <param name="port">Forwarded port.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="port"/> is <c>null</c>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SshClient.CreateCommand(System.String)">
            <summary>
            Creates the command to be executed.
            </summary>
            <param name="commandText">The command text.</param>
            <returns><see cref="T:KellermanSoftware.Renci.SshNet.SshCommand"/> object.</returns>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SshClient.CreateCommand(System.String,System.Text.Encoding)">
            <summary>
            Creates the command to be executed with specified encoding.
            </summary>
            <param name="commandText">The command text.</param>
            <param name="encoding">The encoding to use for results.</param>
            <returns><see cref="T:KellermanSoftware.Renci.SshNet.SshCommand"/> object which uses specified encoding.</returns>
            <remarks>This method will change current default encoding.</remarks>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="commandText"/> or <paramref name="encoding"/> is <c>null</c>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SshClient.RunCommand(System.String)">
            <summary>
            Creates and executes the command.
            </summary>
            <param name="commandText">The command text.</param>
            <returns>Returns an instance of <see cref="T:KellermanSoftware.Renci.SshNet.SshCommand"/> with execution results.</returns>
            <remarks>This method internally uses asynchronous calls.</remarks>
            <example>
                <code source="..\..\src\Renci.SshNet.Tests\Classes\SshCommandTest.cs" region="Example SshCommand RunCommand Result" language="C#" title="Running simple command" />
                <code source="..\..\src\Renci.SshNet.Tests\Classes\SshCommandTest.cs" region="Example SshCommand RunCommand Parallel" language="C#" title="Run many commands in parallel" />
            </example>
            <exception cref="T:System.ArgumentException">CommandText property is empty.</exception>
            <exception cref="T:Renci.SshNet.Common.SshException">Invalid Operation - An existing channel was used to execute this command.</exception>
            <exception cref="T:System.InvalidOperationException">Asynchronous operation is already in progress.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="commandText"/> is <c>null</c>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SshClient.CreateShell(System.IO.Stream,System.IO.Stream,System.IO.Stream,System.String,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Collections.Generic.IDictionary{KellermanSoftware.Renci.SshNet.Common.TerminalModes,System.UInt32},System.Int32)">
            <summary>
            Creates the shell.
            </summary>
            <param name="input">The input.</param>
            <param name="output">The output.</param>
            <param name="extendedOutput">The extended output.</param>
            <param name="terminalName">Name of the terminal.</param>
            <param name="columns">The columns.</param>
            <param name="rows">The rows.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="terminalModes">The terminal mode.</param>
            <param name="bufferSize">Size of the internal read buffer.</param>
            <returns>
            Returns a representation of a <see cref="T:KellermanSoftware.Renci.SshNet.Shell" /> object.
            </returns>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SshClient.CreateShell(System.IO.Stream,System.IO.Stream,System.IO.Stream,System.String,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Collections.Generic.IDictionary{KellermanSoftware.Renci.SshNet.Common.TerminalModes,System.UInt32})">
            <summary>
            Creates the shell.
            </summary>
            <param name="input">The input.</param>
            <param name="output">The output.</param>
            <param name="extendedOutput">The extended output.</param>
            <param name="terminalName">Name of the terminal.</param>
            <param name="columns">The columns.</param>
            <param name="rows">The rows.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="terminalModes">The terminal mode.</param>
            <returns>
            Returns a representation of a <see cref="T:KellermanSoftware.Renci.SshNet.Shell" /> object.
            </returns>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SshClient.CreateShell(System.IO.Stream,System.IO.Stream,System.IO.Stream)">
            <summary>
            Creates the shell.
            </summary>
            <param name="input">The input.</param>
            <param name="output">The output.</param>
            <param name="extendedOutput">The extended output.</param>
            <returns>
            Returns a representation of a <see cref="T:KellermanSoftware.Renci.SshNet.Shell" /> object.
            </returns>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SshClient.CreateShell(System.Text.Encoding,System.String,System.IO.Stream,System.IO.Stream,System.String,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Collections.Generic.IDictionary{KellermanSoftware.Renci.SshNet.Common.TerminalModes,System.UInt32},System.Int32)">
            <summary>
            Creates the shell.
            </summary>
            <param name="encoding">The encoding to use to send the input.</param>
            <param name="input">The input.</param>
            <param name="output">The output.</param>
            <param name="extendedOutput">The extended output.</param>
            <param name="terminalName">Name of the terminal.</param>
            <param name="columns">The columns.</param>
            <param name="rows">The rows.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="terminalModes">The terminal mode.</param>
            <param name="bufferSize">Size of the internal read buffer.</param>
            <returns>
            Returns a representation of a <see cref="T:KellermanSoftware.Renci.SshNet.Shell" /> object.
            </returns>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SshClient.CreateShell(System.Text.Encoding,System.String,System.IO.Stream,System.IO.Stream,System.String,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Collections.Generic.IDictionary{KellermanSoftware.Renci.SshNet.Common.TerminalModes,System.UInt32})">
            <summary>
            Creates the shell.
            </summary>
            <param name="encoding">The encoding.</param>
            <param name="input">The input.</param>
            <param name="output">The output.</param>
            <param name="extendedOutput">The extended output.</param>
            <param name="terminalName">Name of the terminal.</param>
            <param name="columns">The columns.</param>
            <param name="rows">The rows.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="terminalModes">The terminal modes.</param>
            <returns>
            Returns a representation of a <see cref="T:KellermanSoftware.Renci.SshNet.Shell" /> object.
            </returns>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SshClient.CreateShell(System.Text.Encoding,System.String,System.IO.Stream,System.IO.Stream)">
            <summary>
            Creates the shell.
            </summary>
            <param name="encoding">The encoding.</param>
            <param name="input">The input.</param>
            <param name="output">The output.</param>
            <param name="extendedOutput">The extended output.</param>
            <returns>
            Returns a representation of a <see cref="T:KellermanSoftware.Renci.SshNet.Shell" /> object.
            </returns>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SshClient.CreateShellStream(System.String,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Int32)">
            <summary>
            Creates the shell stream.
            </summary>
            <param name="terminalName">The <c>TERM</c> environment variable.</param>
            <param name="columns">The terminal width in columns.</param>
            <param name="rows">The terminal width in rows.</param>
            <param name="width">The terminal height in pixels.</param>
            <param name="height">The terminal height in pixels.</param>
            <param name="bufferSize">The size of the buffer.</param>
            <returns>
            The created <see cref="T:KellermanSoftware.Renci.SshNet.ShellStream"/> instance.
            </returns>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <remarks>
            <para>
            The <c>TERM</c> environment variable contains an identifier for the text window's capabilities.
            You can get a detailed list of these cababilities by using the ‘infocmp’ command.
            </para>
            <para>
            The column/row dimensions override the pixel dimensions(when nonzero). Pixel dimensions refer
            to the drawable area of the window.
            </para>
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SshClient.CreateShellStream(System.String,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Int32,System.Collections.Generic.IDictionary{KellermanSoftware.Renci.SshNet.Common.TerminalModes,System.UInt32})">
            <summary>
            Creates the shell stream.
            </summary>
            <param name="terminalName">The <c>TERM</c> environment variable.</param>
            <param name="columns">The terminal width in columns.</param>
            <param name="rows">The terminal width in rows.</param>
            <param name="width">The terminal height in pixels.</param>
            <param name="height">The terminal height in pixels.</param>
            <param name="bufferSize">The size of the buffer.</param>
            <param name="terminalModeValues">The terminal mode values.</param>
            <returns>
            The created <see cref="T:KellermanSoftware.Renci.SshNet.ShellStream"/> instance.
            </returns>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <remarks>
            <para>
            The <c>TERM</c> environment variable contains an identifier for the text window's capabilities.
            You can get a detailed list of these cababilities by using the ‘infocmp’ command.
            </para>
            <para>
            The column/row dimensions override the pixel dimensions(when non-zero). Pixel dimensions refer
            to the drawable area of the window.
            </para>
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SshClient.OnDisconnected">
            <summary>
            Stops forwarded ports.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SshClient.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.SshCommand">
            <summary>
            Represents SSH command that can be executed.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.SshCommand.CommandText">
            <summary>
            Gets the command text.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.SshCommand.CommandTimeout">
            <summary>
            Gets or sets the command timeout.
            </summary>
            <value>
            The command timeout.
            </value>
            <example>
                <code source="..\..\src\Renci.SshNet.Tests\Classes\SshCommandTest.cs" region="Example SshCommand CreateCommand Execute CommandTimeout" language="C#" title="Specify command execution timeout" />
            </example>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.SshCommand.ExitStatus">
            <summary>
            Gets the command exit status.
            </summary>
            <example>
                <code source="..\..\src\Renci.SshNet.Tests\Classes\SshCommandTest.cs" region="Example SshCommand RunCommand ExitStatus" language="C#" title="Get command execution exit status" />
            </example>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.SshCommand.OutputStream">
            <summary>
            Gets the output stream.
            </summary>
            <example>
                <code source="..\..\src\Renci.SshNet.Tests\Classes\SshCommandTest.cs" region="Example SshCommand CreateCommand Execute OutputStream" language="C#" title="Use OutputStream to get command execution output" />
            </example>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.SshCommand.ExtendedOutputStream">
            <summary>
            Gets the extended output stream.
            </summary>
            <example>
                <code source="..\..\src\Renci.SshNet.Tests\Classes\SshCommandTest.cs" region="Example SshCommand CreateCommand Execute ExtendedOutputStream" language="C#" title="Use ExtendedOutputStream to get command debug execution output" />
            </example>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.SshCommand.Result">
            <summary>
            Gets the command execution result.
            </summary>
            <example>
                <code source="..\..\src\Renci.SshNet.Tests\Classes\SshCommandTest.cs" region="Example SshCommand RunCommand Result" language="C#" title="Running simple command" />
            </example>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.SshCommand.Error">
            <summary>
            Gets the command execution error.
            </summary>
            <example>
                <code source="..\..\src\Renci.SshNet.Tests\Classes\SshCommandTest.cs" region="Example SshCommand CreateCommand Error" language="C#" title="Display command execution error" />
            </example>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SshCommand.#ctor(KellermanSoftware.Renci.SshNet.ISession,System.String,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:KellermanSoftware.Renci.SshNet.SshCommand"/> class.
            </summary>
            <param name="session">The session.</param>
            <param name="commandText">The command text.</param>
            <param name="encoding">The encoding to use for the results.</param>
            <exception cref="T:System.ArgumentNullException">Either <paramref name="session"/>, <paramref name="commandText"/> is <c>null</c>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SshCommand.BeginExecute">
            <summary>
            Begins an asynchronous command execution.
            </summary>
            <returns>
            An <see cref="T:System.IAsyncResult" /> that represents the asynchronous command execution, which could still be pending.
            </returns>
            <example>
                <code source="..\..\src\Renci.SshNet.Tests\Classes\SshCommandTest.cs" region="Example SshCommand CreateCommand BeginExecute IsCompleted EndExecute" language="C#" title="Asynchronous Command Execution" />
            </example>
            <exception cref="T:System.InvalidOperationException">Asynchronous operation is already in progress.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">Invalid operation.</exception>
            <exception cref="T:System.ArgumentException">CommandText property is empty.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshOperationTimeoutException">Operation has timed out.</exception>
            <exception cref="T:System.InvalidOperationException">Asynchronous operation is already in progress.</exception>
            <exception cref="T:System.ArgumentException">CommandText property is empty.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SshCommand.BeginExecute(System.AsyncCallback)">
            <summary>
            Begins an asynchronous command execution.
            </summary>
            <param name="callback">An optional asynchronous callback, to be called when the command execution is complete.</param>
            <returns>
            An <see cref="T:System.IAsyncResult" /> that represents the asynchronous command execution, which could still be pending.
            </returns>
            <exception cref="T:System.InvalidOperationException">Asynchronous operation is already in progress.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">Invalid operation.</exception>
            <exception cref="T:System.ArgumentException">CommandText property is empty.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshOperationTimeoutException">Operation has timed out.</exception>
            <exception cref="T:System.InvalidOperationException">Asynchronous operation is already in progress.</exception>
            <exception cref="T:System.ArgumentException">CommandText property is empty.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SshCommand.BeginExecute(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous command execution.
            </summary>
            <param name="callback">An optional asynchronous callback, to be called when the command execution is complete.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests.</param>
            <returns>
            An <see cref="T:System.IAsyncResult" /> that represents the asynchronous command execution, which could still be pending.
            </returns>
            <exception cref="T:System.InvalidOperationException">Asynchronous operation is already in progress.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">Invalid operation.</exception>
            <exception cref="T:System.ArgumentException">CommandText property is empty.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshOperationTimeoutException">Operation has timed out.</exception>
            <exception cref="T:System.InvalidOperationException">Asynchronous operation is already in progress.</exception>
            <exception cref="T:System.ArgumentException">CommandText property is empty.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SshCommand.BeginExecute(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous command execution.
            </summary>
            <param name="commandText">The command text.</param>
            <param name="callback">An optional asynchronous callback, to be called when the command execution is complete.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests.</param>
            <returns>
            An <see cref="T:System.IAsyncResult" /> that represents the asynchronous command execution, which could still be pending.
            </returns>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshOperationTimeoutException">Operation has timed out.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SshCommand.EndExecute(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous command execution to complete.
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous request to finish.</param>
            <returns>Command execution result.</returns>
            <example>
                <code source="..\..\src\Renci.SshNet.Tests\Classes\SshCommandTest.cs" region="Example SshCommand CreateCommand BeginExecute IsCompleted EndExecute" language="C#" title="Asynchronous Command Execution" />
            </example>
            <exception cref="T:System.ArgumentException">Either the IAsyncResult object did not come from the corresponding async method on this type, or EndExecute was called multiple times with the same IAsyncResult.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is <c>null</c>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SshCommand.Execute">
            <summary>
            Executes command specified by <see cref="P:KellermanSoftware.Renci.SshNet.SshCommand.CommandText"/> property.
            </summary>
            <returns>Command execution result</returns>
            <example>
                <code source="..\..\src\Renci.SshNet.Tests\Classes\SshCommandTest.cs" region="Example SshCommand CreateCommand Execute" language="C#" title="Simple command execution" />
                <code source="..\..\src\Renci.SshNet.Tests\Classes\SshCommandTest.cs" region="Example SshCommand CreateCommand Error" language="C#" title="Display command execution error" />
                <code source="..\..\src\Renci.SshNet.Tests\Classes\SshCommandTest.cs" region="Example SshCommand CreateCommand Execute CommandTimeout" language="C#" title="Specify command execution timeout" />
            </example>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshOperationTimeoutException">Operation has timed out.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SshCommand.CancelAsync">
            <summary>
            Cancels command execution in asynchronous scenarios. 
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SshCommand.Execute(System.String)">
            <summary>
            Executes the specified command text.
            </summary>
            <param name="commandText">The command text.</param>
            <returns>Command execution result</returns>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshConnectionException">Client is not connected.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshOperationTimeoutException">Operation has timed out.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SshCommand.WaitOnHandle(System.Threading.WaitHandle)">
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshOperationTimeoutException">Command '{0}' has timed out.</exception>
            <remarks>The actual command will be included in the exception message.</remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SshCommand.UnsubscribeFromEventsAndDisposeChannel(KellermanSoftware.Renci.SshNet.Channels.IChannel)">
            <summary>
            Unsubscribes the current <see cref="T:KellermanSoftware.Renci.SshNet.SshCommand"/> from channel events, and disposes
            the <see cref="T:KellermanSoftware.Renci.SshNet.Channels.IChannel"/>.
            </summary>
            <param name="channel">The channel.</param>
            <remarks>
            Does nothing when <paramref name="channel"/> is <c>null</c>.
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SshCommand.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SshCommand.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SshCommand.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:KellermanSoftware.Renci.SshNet.SshCommand"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.SshMessageFactory.HighestMessageNumber">
            <summary>
            Defines the highest message number that is currently supported.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.SshMessageFactory.TotalMessageCount">
            <summary>
            Defines the total number of supported messages.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SshMessageFactory.Reset">
            <summary>
            Disables and deactivate all messages.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Renci.SshNet.SubsystemSession">
            <summary>
            Base class for SSH subsystem implementations
            </summary>
        </member>
        <member name="F:KellermanSoftware.Renci.SshNet.SubsystemSession.SystemWaitHandleCount">
            <summary>
            Holds the number of system wait handles that are returned as the leading entries in the array returned
            in <see cref="M:KellermanSoftware.Renci.SshNet.SubsystemSession.CreateWaitHandleArray(System.Threading.WaitHandle[])"/>.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.SubsystemSession.OperationTimeout">
            <summary>
            Gets or set the number of seconds to wait for an operation to complete.
            </summary>
            <value>
            The number of seconds to wait for an operation to complete, or -1 to wait indefinitely.
            </value>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.SubsystemSession.ErrorOccurred">
            <summary>
            Occurs when an error occurred.
            </summary>
        </member>
        <member name="E:KellermanSoftware.Renci.SshNet.SubsystemSession.Disconnected">
            <summary>
            Occurs when the server has disconnected from the session.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.SubsystemSession.Channel">
            <summary>
            Gets the channel associated with this session.
            </summary>
            <value>
            The channel associated with this session.
            </value>
        </member>
        <member name="P:KellermanSoftware.Renci.SshNet.SubsystemSession.IsOpen">
            <summary>
            Gets a value indicating whether this session is open.
            </summary>
            <value>
            <c>true</c> if this session is open; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SubsystemSession.#ctor(KellermanSoftware.Renci.SshNet.ISession,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the SubsystemSession class.
            </summary>
            <param name="session">The session.</param>
            <param name="subsystemName">Name of the subsystem.</param>
            <param name="operationTimeout">The number of milliseconds to wait for a given operation to complete, or -1 to wait indefinitely.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="session" /> or <paramref name="subsystemName" /> is <c>null</c>.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SubsystemSession.Connect">
            <summary>
            Connects the subsystem using a new SSH channel session.
            </summary>
            <exception cref="T:System.InvalidOperationException">The session is already connected.</exception>
            <exception cref="T:System.ObjectDisposedException">The method was called after the session was disposed.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">The channel session could not be opened, or the subsystem could not be executed.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SubsystemSession.Disconnect">
            <summary>
            Disconnects the subsystem channel.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SubsystemSession.SendData(System.Byte[])">
            <summary>
            Sends data to the subsystem.
            </summary>
            <param name="data">The data to be sent.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SubsystemSession.OnChannelOpen">
            <summary>
            Called when channel is open.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SubsystemSession.OnDataReceived(System.Byte[])">
            <summary>
            Called when data is received.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SubsystemSession.RaiseError(System.Exception)">
            <summary>
            Raises the error.
            </summary>
            <param name="error">The error.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SubsystemSession.WaitOnHandle(System.Threading.WaitHandle,System.Int32)">
            <summary>
            Waits a specified time for a given <see cref="T:System.Threading.WaitHandle"/> to get signaled.
            </summary>
            <param name="waitHandle">The handle to wait for.</param>
            <param name="millisecondsTimeout">To number of milliseconds to wait for <paramref name="waitHandle"/> to get signaled, or -1 to wait indefinitely.</param>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">The connection was closed by the server.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">The channel was closed.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshOperationTimeoutException">The handle did not get signaled within the specified timeout.</exception>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SubsystemSession.WaitOne(System.Threading.WaitHandle,System.Int32)">
            <summary>
            Blocks the current thread until the specified <see cref="T:System.Threading.WaitHandle"/> gets signaled, using a
            32-bit signed integer to specify the time interval in milliseconds.
            </summary>
            <param name="waitHandle">The handle to wait for.</param>
            <param name="millisecondsTimeout">To number of milliseconds to wait for <paramref name="waitHandle"/> to get signaled, or -1 to wait indefinitely.</param>
            <returns>
            <c>true</c> if <paramref name="waitHandle"/> received a signal within the specified timeout;
            otherwise, <c>false</c>.
            </returns>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">The connection was closed by the server.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">The channel was closed.</exception>
            <remarks>
            The blocking wait is also interrupted when either the established channel is closed, the current
            session is disconnected or an unexpected <see cref="T:System.Exception"/> occurred while processing a channel
            or session event.
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SubsystemSession.WaitAny(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32)">
            <summary>
            Blocks the current thread until the specified <see cref="T:System.Threading.WaitHandle"/> gets signaled, using a
            32-bit signed integer to specify the time interval in milliseconds.
            </summary>
            <param name="waitHandle1">The first handle to wait for.</param>
            <param name="waitHandle2">The second handle to wait for.</param>
            <param name="millisecondsTimeout">To number of milliseconds to wait for a <see cref="T:System.Threading.WaitHandle"/> to get signaled, or -1 to wait indefinitely.</param>
            <returns>
            <c>0</c> if <paramref name="waitHandle1"/> received a signal within the specified timeout, and <c>1</c>
            if <paramref name="waitHandle2"/> received a signal within the specified timeout.
            </returns>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">The connection was closed by the server.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">The channel was closed.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshOperationTimeoutException">The handle did not get signaled within the specified timeout.</exception>
            <remarks>
            <para>
            The blocking wait is also interrupted when either the established channel is closed, the current
            session is disconnected or an unexpected <see cref="T:System.Exception"/> occurred while processing a channel
            or session event.
            </para>
            <para>
            When both <paramref name="waitHandle1"/> and <paramref name="waitHandle2"/> are signaled during the call,
            then <c>0</c> is returned.
            </para>
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SubsystemSession.WaitAny(System.Threading.WaitHandle[],System.Int32)">
            <summary>
            Waits for any of the elements in the specified array to receive a signal, using a 32-bit signed
            integer to specify the time interval.
            </summary>
            <param name="waitHandles">A <see cref="T:System.Threading.WaitHandle"/> array - constructed using <see cref="M:KellermanSoftware.Renci.SshNet.SubsystemSession.CreateWaitHandleArray(System.Threading.WaitHandle[])"/> - containing the objects to wait for.</param>
            <param name="millisecondsTimeout">To number of milliseconds to wait for a <see cref="T:System.Threading.WaitHandle"/> to get signaled, or -1 to wait indefinitely.</param>
            <returns>
            The array index of the first non-system object that satisfied the wait.
            </returns>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">The connection was closed by the server.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshException">The channel was closed.</exception>
            <exception cref="T:KellermanSoftware.Renci.SshNet.Common.SshOperationTimeoutException">No object satified the wait and a time interval equivalent to <paramref name="millisecondsTimeout"/> has passed.</exception>
            <remarks>
            For the return value, the index of the first non-system object is considered to be zero.
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SubsystemSession.CreateWaitHandleArray(System.Threading.WaitHandle,System.Threading.WaitHandle)">
            <summary>
            Creates a <see cref="T:System.Threading.WaitHandle"/> array that is composed of system objects and the specified
            elements.
            </summary>
            <param name="waitHandle1">The first <see cref="T:System.Threading.WaitHandle"/> to wait for.</param>
            <param name="waitHandle2">The second <see cref="T:System.Threading.WaitHandle"/> to wait for.</param>
            <returns>
            A <see cref="T:System.Threading.WaitHandle"/> array that is composed of system objects and the specified elements.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SubsystemSession.CreateWaitHandleArray(System.Threading.WaitHandle[])">
            <summary>
            Creates a <see cref="T:System.Threading.WaitHandle"/> array that is composed of system objects and the specified
            elements.
            </summary>
            <param name="waitHandles">A <see cref="T:System.Threading.WaitHandle"/> array containing the objects to wait for.</param>
            <returns>
            A <see cref="T:System.Threading.WaitHandle"/> array that is composed of system objects and the specified elements.
            </returns>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SubsystemSession.UnsubscribeFromSessionEvents(KellermanSoftware.Renci.SshNet.ISession)">
            <summary>
            Unsubscribes the current <see cref="T:KellermanSoftware.Renci.SshNet.SubsystemSession"/> from session events.
            </summary>
            <param name="session">The session.</param>
            <remarks>
            Does nothing when <paramref name="session"/> is <c>null</c>.
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SubsystemSession.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SubsystemSession.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:KellermanSoftware.Renci.SshNet.SubsystemSession.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:KellermanSoftware.Renci.SshNet.SubsystemSession" /> class.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Licensing.IniFile">
            <summary>
            Create a New INI file to store or load data
            <BR /><b>Author:</b>  Gregory T. Finzer<BR />
            <b>Date:</b>  10/12/2002
            </summary>
        </member>
        <member name="P:KellermanSoftware.Licensing.IniFile.Path">
            <summary>
            Returns the path to the ini file
            </summary>
        </member>
        <member name="P:KellermanSoftware.Licensing.IniFile.INIPathWritable">
            <summary>
            Returns True if the INI path is writable
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniFile.#ctor(System.String)">
            <summary>
            INIFile Constructor.
            </summary>
            <PARAM name="INIPath">File Path to the INI File</PARAM>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniFile.IniWriteValue(System.String,System.String,System.String)">
            <summary>
            Write Data to the INI File
            </summary>
            <param name="section">Section Name</param>
            <param name="key">Key Name</param>
            <param name="value">Value Name</param>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniFile.CheckINIPath">
            <summary>
            Ensure the directory exists for the 
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniFile.IniReadValue(System.String,System.String)">
            <summary>
            Read Data from an INI File
            </summary>
            <param name="section">Section Name</param>
            <param name="key">Key Name</param>
            <returns>Value</returns>
        </member>
        <member name="T:KellermanSoftware.Licensing.Entry">
            <summary>
            Hold Subscription Entries 
            </summary>
        </member>
        <member name="T:KellermanSoftware.Licensing.IniReaderWriter">
            <summary>
            Fully Managed INI File Reader and Writer without any COM Interop
            See:  http://en.wikipedia.org/wiki/INI_file
            See:  http://msdn.microsoft.com/en-us/library/windows/desktop/ms724348%28v=vs.85%29.aspx
            </summary>
        </member>
        <member name="P:KellermanSoftware.Licensing.IniReaderWriter.FileEncoding">
            <summary>
            Override the file encoding.  The default is Encoding.Default
            </summary>
        </member>
        <member name="P:KellermanSoftware.Licensing.IniReaderWriter.IsProcessEscapeCharactersEnabled">
            <summary>
            If true, escape characters will be processed.  The default is false.
            See http://en.wikipedia.org/wiki/INI_file
            </summary>
        </member>
        <member name="P:KellermanSoftware.Licensing.IniReaderWriter.CommentCharacter">
            <summary>
            The comment character.  By default it is a semicolon
            </summary>
        </member>
        <member name="P:KellermanSoftware.Licensing.IniReaderWriter.Delimiter">
            <summary>
            The delimiter between settings and values.  By default it is a equals sign
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniReaderWriter.GetPrivateProfileString(System.String,System.String,System.String,System.String@,System.Int32,System.String)">
            <summary>
            Managed version of GetPrivateProfileString<br />
            No COM Interop is used<br />
            If the file does not exist or the value is not in the file, the defaultValue is used.<br />
            See:  http://msdn.microsoft.com/en-us/library/windows/desktop/ms724348%28v=vs.85%29.aspx
            </summary>
            <param name="sectionName">The INI Section Name</param>
            <param name="settingName">The INI Setting Name</param>
            <param name="defaultValue">The default value if there is no value</param>
            <param name="returnedString">Output of the string</param>
            <param name="size">The number of buffer characters (not used but here for backward compatibility)</param>
            <param name="filePath">The path to the INI file</param>
            <exception cref="T:System.ArgumentNullException">Occurs when sectionName, settingName or filePath is null</exception>
            <returns>Number of characters returned</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniReaderWriter.GetPrivateProfileString(System.String,System.String,System.String,System.Text.StringBuilder,System.Int32,System.String)">
            <summary>
            Managed version of GetPrivateProfileString<br />
            No COM Interop is used<br />
            If the file does not exist or the value is not in the file, the defaultValue is used.<br />
            See:  http://msdn.microsoft.com/en-us/library/windows/desktop/ms724348%28v=vs.85%29.aspx
            </summary>
            <param name="sectionName">The INI Section Name</param>
            <param name="settingName">The INI Setting Name</param>
            <param name="defaultValue">The default value if there is no value</param>
            <param name="returnedBuffer">StrinbBuilder Output of the string</param>
            <param name="size">The number of buffer characters (not used but here for backward compatibility)</param>
            <param name="filePath">The path to the INI file</param>
            <exception cref="T:System.ArgumentNullException">Occurs when sectionName, settingName or filePath is null</exception>
            <returns>Number of characters returned</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniReaderWriter.WritePrivateProfileString(System.String,System.String,System.String,System.String)">
            <summary>
            Managed version of WritePrivateProfileString<br />
            No COM Interop is used<br />
            If the file does not exist it will be created.  If the section does not exist it will be created.  If the setting already exists it will be updated.  If the setting does not exist, it will be added.<br />
            See:  http://msdn.microsoft.com/en-us/library/windows/desktop/ms724348%28v=vs.85%29.aspx
            </summary>
            <param name="sectionName">The INI Section Name</param>
            <param name="settingName">The INI Setting Name</param>
            <param name="settingValue">The INI Setting Value</param>
            <param name="filePath">The path to the INI file</param>
            <exception cref="T:System.ArgumentNullException">Occurs when sectionName, settingName or filePath is null</exception>
            <returns>True if the setting was set successfully</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniReaderWriter.GetPrivateProfileInt(System.String,System.String,System.Int32,System.String)">
            <summary>
            Managed version of GetPrivateProfileInt<br />
            No COM Interop is used<br />
            If the file does not exist or the value is not in the file, the defaultValue is used.<br />
            See:  http://msdn.microsoft.com/en-us/library/windows/desktop/ms724348%28v=vs.85%29.aspx
            </summary>
            <param name="sectionName">The INI Section Name</param>
            <param name="settingName">The INI Setting Name</param>
            <param name="defaultValue">The default value if there is no value</param>
            <param name="filePath">The path to the INI file</param>
            <exception cref="T:System.ArgumentNullException">Occurs when sectionName, settingName or filePath is null</exception>
            <returns>The integer</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniReaderWriter.GetSectionNames(System.String)">
            <summary>
            Get a list of the sections in an INI file<br />
            No COM Interop is used<br />
            If the file does not exist, no sections will be returned.
            </summary>
            <param name="filePath">The path to the INI file</param>
            <exception cref="T:System.ArgumentNullException">Occurs when filePath is null</exception>
            <returns>A list of the section names</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniReaderWriter.GetSectionValues(System.String,System.String)">
            <summary>
            Get a dictionary of the key value pairs for a section in an INI file<br />
            No COM Interop is used<br />
            If the file does not exist, no items will be returned.
            </summary>
            <param name="sectionName">The section name</param>
            <param name="filePath">The path to the INI file</param>
            <exception cref="T:System.ArgumentNullException">Occurs when sectionName, or filePath is null</exception>
            <returns>A list of the settings and their values</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniReaderWriter.SettingExists(System.String,System.String,System.String)">
            <summary>
            Return true if a setting exists<br />
            No COM Interop is used<br />
            If the file does not exist or the setting does not exist, the value returned will be false.
            </summary>
            <param name="sectionName">The section name</param>
            <param name="settingName">The setting name</param>
            <param name="filePath">The path to the INI File</param>
            <exception cref="T:System.ArgumentNullException">Occurs when sectionName, settingName or filePath is null</exception>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniReaderWriter.GetSetting(System.String,System.String,System.String)">
            <summary>
            Get the value for a setting in a section<br />
            No COM Interop is used<br />
            If the file does not exist or the setting does not exist, the value returned will be null.
            </summary>
            <param name="sectionName">The section name</param>
            <param name="settingName">The setting name</param>
            <param name="filePath">The path to the INI File</param>
            <exception cref="T:System.ArgumentNullException">Occurs when sectionName, settingName or filePath is null</exception>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniReaderWriter.SaveSetting(System.String,System.String,System.String,System.String)">
            <summary>
            Save a value to an INI file<br />
            No COM Interop is used<br />
            If the file does not exist it will be created.  If the section does not exist it will be created.  If the setting already exists it will be updated.  If the setting does not exist, it will be added.<br />
            </summary>
            <param name="sectionName">The section name</param>
            <param name="settingName">The setting name</param>
            <param name="settingValue">The value to set</param>
            <param name="filePath">The path to the INI file</param>
            <exception cref="T:System.ArgumentNullException">Occurs when sectionName, settingName or filePath is null</exception>
            <returns>True if it was saved successfully</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniReaderWriter.DeleteSetting(System.String,System.String,System.String)">
            <summary>
            Delete a setting from an INI file<br />
            No COM Interop is used<br />
            If the file does not exist or the value does not exist, false will be returned.
            </summary>
            <param name="sectionName">The name of the section</param>
            <param name="settingName">The name of the setting</param>
            <param name="filePath">The path to the INI file</param>
            <exception cref="T:System.ArgumentNullException">Occurs when sectionName, settingName or filePath is null</exception>
            <returns>True if the setting was deleted</returns>
        </member>
        <member name="T:KellermanSoftware.Licensing.Encryption">
            <summary>
            This class provides methods Encryption and Decryption using a variety
            of cryptographic algorithms. The methods are overloaded to perform
            encryption/decryption on ordinary texts of string, a MemoryStream
            or a complete file (text or binary).
            </summary>
        </member>
        <member name="F:KellermanSoftware.Licensing.Encryption.alg">
            <summary>
            The variable that will hold the relevant instantiated cryptographic class object.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Licensing.Encryption.provider">
            <summary>
            Enumeration that specifies the cryptographic service provider.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Licensing.Encryption.strKey">
            <summary>
            Serves as password used with salt to generate Key for encryption
            </summary>
        </member>
        <member name="F:KellermanSoftware.Licensing.Encryption.strSalt">
            <summary>
            The salt used for generating Key for encryption
            </summary>
        </member>
        <member name="F:KellermanSoftware.Licensing.Encryption.ivChars">
            <summary>
            The character array from which we set our initialization vector.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.#ctor">
            <summary>
            Default constructor for the Encryption class.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.#ctor(System.String,System.String)">
            <summary>
            Alternate Constructor for the Encryption class.
            </summary>
            <param name="strKey">The password used for generating the Key.</param>
            <param name="strSalt">The Salt to be used in conjunction with 
            the password to generate the actual Key.</param>
        </member>
        <member name="P:KellermanSoftware.Licensing.Encryption.Key">
            <summary>
            Public property for Key
            </summary>
        </member>
        <member name="P:KellermanSoftware.Licensing.Encryption.Salt">
            <summary>
            Public property for Salt
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.GetIV">
            <summary>
            Get an initialization vector for the crypto algorithms.
            TODO: Random IV Generation
            </summary>
            <returns>a byte array that contains the generated initialization vector.</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.GetKey">
            <summary>
            Gets the appropriate key for the cryptographic algorithm being used.
            </summary>
            <returns>a byte array that contains the generated key.</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.InitializeAlgorithm(KellermanSoftware.Licensing.EncryptionProvider)">
            <summary>
            Instantiates the SymmetricAlgorithm object with the appropriate
            cryptographic service provider class.
            </summary>
            <param name="encryptionType">Enumeration that specifies which cryptographic
            algorithm is being used.</param>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.Encrypt(KellermanSoftware.Licensing.EncryptionProvider,System.String)">
            <summary>
            Encrypts a plain string.
            </summary>
            <param name="encryptionType">Specifies what encryption algorithm is to be used.</param>
            <param name="input">The input clear string.</param>
            <returns>A base64-encoded representation of the encrypted string.</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.Encrypt(KellermanSoftware.Licensing.EncryptionProvider,System.IO.MemoryStream)">
            <summary>
            Encrypts a MemoryStream.
            </summary>
            <param name="encryptionType">Specifies what encryption algorithm is to be used.</param>
            <param name="memStream">The input MemoryStream object</param>
            <returns>A base64-encoded MemoryStream object</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.Encrypt(KellermanSoftware.Licensing.EncryptionProvider,System.String,System.String)">
            <summary>
            Encrypts the contents of a text file and outputs them to another file.
            TODO: Convert to Base64
            </summary>
            <param name="encryptionType">Specifies what encryption algorithm is to be used.</param>
            <param name="inputFile">The path to the input file.</param>
            <param name="outputFile">The path to the output file.</param>
            <returns>A boolean that specifies whether the encryption operation was successful or not.</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.Decrypt(KellermanSoftware.Licensing.EncryptionProvider,System.String)">
            <summary>
            Decrypts a base64-encoded string.
            </summary>
            <param name="encryptionType">Specifies what encryption algorithm is to be used.</param>
            <param name="input">The input clear string.</param>
            <returns>The decrypted plain text.</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.Decrypt(KellermanSoftware.Licensing.EncryptionProvider,System.IO.MemoryStream)">
            <summary>
            Decrypts a base64-encoded MemoryStream.
            </summary>
            <param name="encryptionType">Specifies what encryption algorithm is to be used.</param>
            <param name="memStream">A base64-encoded MemoryStream object.</param>
            <returns>Simple MemoryStream object.</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.Decrypt(KellermanSoftware.Licensing.EncryptionProvider,System.String,System.String)">
            <summary>
            Decrypts the contents of a text file and outputs them to another file.
            </summary>
            <param name="encryptionType">Specifies what encryption algorithm is to be used.</param>
            <param name="inputFile">The path to the input file.</param>
            <param name="outputFile">The path to the output file.</param>
            <returns>A boolean that specifies whether the decryption operation was successful or not.</returns>
        </member>
        <member name="P:KellermanSoftware.Licensing.LicensingLibrary.AdditionalInfo">
            <summary>
            Additional information about the success or failure of a public method
            </summary>
        </member>
        <member name="P:KellermanSoftware.Licensing.LicensingLibrary.FailedAttemptsToday">
            <summary>
            The failed attempts at checking a license today
            </summary>
        </member>
        <member name="P:KellermanSoftware.Licensing.LicensingLibrary.TrialExtensions">
            <summary>
            The number of trial extensions for this user
            </summary>
        </member>
        <member name="P:KellermanSoftware.Licensing.LicensingLibrary.TrialDays">
            <summary>
            The number of days for a trial period
            </summary>
        </member>
        <member name="P:KellermanSoftware.Licensing.LicensingLibrary.BetaExpirationDate">
            <summary>
            Returns the maximum date the software can run in beta
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="productCode"></param>
            <param name="productName"></param>
            <param name="website"></param>
            <param name="userName"></param>
            <param name="license"></param>
        </member>
        <member name="P:KellermanSoftware.Licensing.LicensingLibrary.IsService">
            <summary>
            Gets a value indicating whether the application is a windows service.
            </summary>
            <value>
            <c>true</c> if this instance is service; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.ValidateInput">
            <summary>
            Ensure required input
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.UsDateToString(System.DateTime)">
            <summary>
            Convert a DateTime to a US date string
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.UsDateToDate(System.String)">
            <summary>
            Convert a US formatted date to DateTime
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.SetTargetLicense">
            <summary>
            Set the target license for the 
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.SetupVariables">
            <summary>
            A bunch of variable initialization
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.StartTrial">
            <summary>
            This is a new installation so start the trial
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.BetaExpired">
            <summary>
            Returns true if the beta has expired
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.AllKeysBlank">
            <summary>
            Returns true if all the keys are blank
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.SomeKeysBlank">
            <summary>
            Returns true if some of the keys are blank
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetKeys">
            <summary>
            Get all the keys from the registry and the INI file
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetTrialExtensions">
            <summary>
            Get the number of trial extensions
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetFailedAttemptsToday">
            <summary>
            Get the number of failed attempts today
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetUserName">
            <summary>
            Get the saved user name from the registry
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetLicense">
            <summary>
            Get the saved user name from the registry
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetLastRunDate">
            <summary>
            Get the last date the component was run, prevents back dating
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetInstallationDate">
            <summary>
            Get the date the component was installed
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.CombineKey(System.String)">
            <summary>
            Combine the key for the 
            </summary>
            <param name="prefix"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.ReadFromIni(System.String)">
            <summary>
            Read the key from the INI file
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.SaveToRegistryAndIni(System.String,System.String)">
            <summary>
            Save the key and value to the registry and INI file.  
            Use the different encryption key for each.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.SaveToIniFile(System.String,System.String)">
            <summary>
            Save a key to an INI file
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.UpperLetterSpace(System.String)">
            <summary>
            Make the text upper case and return only letters and spaces
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetProductShortName(System.String)">
            <summary>
            Extract product short name from the given product code.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetMajorVersion(System.String)">
            <summary>
            Extract major version from the given product code.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.ExtendTrial(System.String)">
            <summary>
            Trial extensions are good for the current day and the the next day
            </summary>
            <param name="trialExtension"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.TrialMessage">
            <summary>
            User friendly trial days remaining
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.TrialDaysLeft">
            <summary>
            Returns the number of days left in the trial
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.CheckLicense">
            <summary>
            Check to see if it is a valid license OR the user is within the trial period
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.CheckTrial(System.String)">
            <summary>
            Check trial code.
            </summary>
            <param name="trialCode"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.TrialValid">
            <summary>
            Returns true if the trial is valid, false if it is expired, hacked, or backdated
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.Mid(System.Object,System.Int32,System.Int32)">
            <summary>
            Same as VB mid function except it doesn't bomb at all
            </summary>
            <param name="oString">String to parse</param>
            <param name="iStart">Start of string</param>
            <param name="iLength">Length of section</param>
            <returns>Section of string</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.Mid(System.Object,System.Int32)">
            <summary>
            Same as VB mid function except it doesn't bomb at all
            </summary>
            <param name="oString">String to parse</param>
            <param name="iStart">Starting position</param>
            <returns>The string section</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.Asc(System.String)">
            <summary>
            Get the ASCII value for the left most character of the passed string.
            </summary>
            <param name="sInString">The string to parse.</param>
            <returns>ACSCII value of the leftmost character</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.Right(System.Object,System.Int32)">
            <summary>
            Same as VB function but doesn't bomb
            </summary>
            <param name="oString">The string to parse</param>
            <param name="iLength">Starting Right Position</param>
            <returns>String section</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetLastWord(System.String,System.String)">
            <summary>
            Get the last word in a string
            </summary>
            <param name="sSentence"></param>
            <param name="sSeperator"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.NumberOfWords(System.String,System.String)">
            <summary>
            Calculate the number of words in a string
            </summary>
            <param name="sSentence">String to parse</param>
            <param name="sSeperator">Seperator character or string</param>
            <returns>The number of words in the string</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetField(System.String,System.Int32,System.String)">
            <summary>
            Parses sSentence delimited by sSeperator and returns the word specified by iPosition
            </summary>
            <param name="sSentence">The string to parse</param>
            <param name="iPosition">Which word to look for</param>
            <param name="sSeperator">What the words are delmited by</param>
            <returns>"" or the word found</returns>
        </member>
        <member name="T:KellermanSoftware.EncryptionLibrary.CRC32">
             <summary>
             Generate a table for a byte-wise 32-bit CRC calculation on the polynomial:
             x^32+x^26+x^23+x^22+x^16+x^12+x^11+x^10+x^8+x^7+x^5+x^4+x^2+x+1.
            
             Polynomials over GF(2) are represented in binary, one bit per coefficient,
             with the lowest powers in the most significant bit.  Then adding polynomials
             is just exclusive-or, and multiplying a polynomial by x is a right shift by
             one.  If we call the above polynomial p, and represent a byte as the
             polynomial q, also with the lowest power in the most significant bit (so the
             byte 0xb1 is the polynomial x^7+x^3+x+1), then the CRC is (q*x^32) mod p,
             where a mod b means the remainder after dividing a by b.
            
             This calculation is done using the shift-register method of multiplying and
             taking the remainder.  The register is initialized to zero, and for each
             incoming bit, x^32 is added mod p to the register if the bit is a one (where
             x^32 mod p is p+x^32 = x^26+...+1), and the register is multiplied mod p by
             x (which is shifting right by one and adding x^32 mod p if the bit shifted
             out is a one).  We start with the highest power (least significant bit) of
             q and repeat for all eight bits of q.
            
             The table is simply the CRC of all possible eight bit values.  This is all
             the information needed to generate CRC's on data a byte at a time for all
             combinations of CRC register values and incoming bytes.
             </summary>
        </member>
        <member name="P:KellermanSoftware.EncryptionLibrary.CRC32.Value">
            <summary>
            Returns the CRC32 data checksum computed so far.
            </summary>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.CRC32.Reset">
            <summary>
            Resets the CRC32 data checksum as if no update was ever called.
            </summary>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.CRC32.Update(System.Int32)">
            <summary>
            Updates the checksum with the int bval.
            </summary>
            <param name = "bval">
            the byte is taken as the lower 8 bits of bval
            </param>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.CRC32.Update(System.Byte[])">
            <summary>
            Updates the checksum with the bytes taken from the array.
            </summary>
            <param name="buffer">
            buffer an array of bytes
            </param>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.CRC32.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Adds the byte array to the data checksum.
            </summary>
            <param name = "buf">
            the buffer which contains the data
            </param>
            <param name = "off">
            the offset in the buffer where the data starts
            </param>
            <param name = "len">
            the length of the data
            </param>
        </member>
        <member name="T:KellermanSoftware.Common.Util">
            <summary>
            Utility Class
            </summary>
        </member>
        <member name="M:KellermanSoftware.Common.Util.Writable(System.String)">
            <summary>
            Check to see if the program can create, update, and delete in the specified path.
            </summary>
            <param name="path">The path to check.</param>
            <returns>True if the path is writable.</returns>
        </member>
        <member name="M:KellermanSoftware.Common.Util.ExtractFileName(System.String)">
            <summary>
            Extract Filename from a path
            </summary>
            <param name="sFullPath">A fully qualified path ending in a filename</param>
            <returns>The extracted file name</returns>
        </member>
        <member name="M:KellermanSoftware.Common.Util.GetSystemDrive">
            <summary>
            Get the system drive letter
            Example:  c:\
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.Util.StringBetween(System.String,System.String,System.String)">
            <summary>
            Return the string between the two words
            </summary>
            <param name="sentence"></param>
            <param name="fromWord"></param>
            <param name="toWord"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.Util.StringAfter(System.String,System.String)">
            <summary>
            Return the string after the passed word
            </summary>
            <param name="sentence"></param>
            <param name="word"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.Util.StringBefore(System.String,System.String)">
            <summary>
            Return the string before the passed word
            </summary>
            <param name="sentence"></param>
            <param name="word"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.Util.GetCallingAssemblyName">
            <summary>
            Get the calling assembly name of the caller
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.Util.MakeWritable(System.String)">
            <summary>
            Make the file writable if it exists
            </summary>
            <param name="sFile"></param>
        </member>
        <member name="M:KellermanSoftware.Common.Util.GetCurrentDirectory">
            <summary>
            Get the current directory of the executing assembly
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.Util.Right(System.Object,System.Int32)">
            <summary>
            Same as VB function but doesn't bomb
            </summary>
            <param name="oString">The string to parse</param>
            <param name="iLength">Starting Right Position</param>
            <returns>String section</returns>
        </member>
        <member name="M:KellermanSoftware.Common.Util.TakeOffEnd(System.String,System.String)">
            <summary>
            Take a string off the end of another string.  Example:  1,2,3,
            </summary>
            <param name="sIn">The base string</param>
            <param name="sTakeOff">What to take off</param>
            <returns>The resulting string</returns>
        </member>
        <member name="M:KellermanSoftware.Common.Util.GetLastWords(System.String,System.String,System.Int32)">
            <summary>
            Get the last words of a sentence
            </summary>
            <param name="sSentence">Sentence to parse</param>
            <param name="sSeperator">Seperator Character</param>
            <param name="iStartWord">First word to return</param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.Util.GetField(System.String,System.Int32,System.String)">
            <summary>
            Parses sentence delimited by seperator and returns the word specified by the position
            </summary>
            <param name="sentence"></param>
            <param name="position"></param>
            <param name="seperator"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.Util.NumberOfWords(System.String,System.String)">
            <summary>
            Calculate the number of words in a string
            </summary>
            <param name="sSentence">String to parse</param>
            <param name="sSeperator">Seperator character or string</param>
            <returns>The number of words in the string</returns>
        </member>
        <member name="M:KellermanSoftware.Common.Util.ShortToByteArray(System.UInt16)">
            <summary>
            Convert an unsigned short into a byte array
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.Util.cStr(System.Object)">
            <summary>
            Convert any object to a string
            </summary>
            <param name="value">Object to convert</param>
            <returns>A string or string.empty</returns>
        </member>
        <member name="M:KellermanSoftware.Common.Util.cInt(System.Object)">
            <summary>
            Convert the passed object into an integer
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.Util.cDate(System.Object)">
            <summary>
            Convert the passed object into a date or return the default date
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.Util.PathSlash(System.String)">
            <summary>
            Ensure the passed string ends with a directory seperator character unless the string is blank.
            </summary>
            <param name="path">The string to append the backslash to.</param>
            <returns>String with a "/" on the end</returns>
        </member>
        <member name="M:KellermanSoftware.Common.Util.ExtractPath(System.String)">
            <summary>
            Extract the path from a path ending in a filename 
            </summary>
            <param name="fullPath">A fully qualified path ending in a filename</param>
            <returns>The extacted path</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Anssi.AnssiNamedCurves.GetByOid(Org.BouncyCastle2.Asn1.DerObjectIdentifier)">
             return the X9ECParameters object for the named curve represented by
             the passed in object identifier. Null if the curve isn't present.
            
             @param oid an object identifier representing a named curve, if present.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Anssi.AnssiNamedCurves.GetOid(System.String)">
             return the object identifier signified by the passed in name. Null
             if there is no object identifier associated with name.
            
             @return the object identifier associated with name, if present.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Anssi.AnssiNamedCurves.GetName(Org.BouncyCastle2.Asn1.DerObjectIdentifier)">
            return the named curve name represented by the given object identifier.
        </member>
        <member name="P:Org.BouncyCastle2.Asn1.Anssi.AnssiNamedCurves.Names">
            returns an enumeration containing the name strings for curves
            contained in this structure.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Asn1BitStringParser.GetBitStream">
            <summary>Return a <see cref="T:System.IO.Stream"/> representing the contents of the BIT STRING. The final byte, if any,
            may include pad bits. See <see cref="P:Org.BouncyCastle2.Asn1.Asn1BitStringParser.PadBits"/>.</summary>
            <returns>A <see cref="T:System.IO.Stream"/> with its source as the BIT STRING content.</returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Asn1BitStringParser.GetOctetStream">
            <summary>Return a <see cref="T:System.IO.Stream"/> representing the contents of the BIT STRING, where the content is
            expected to be octet-aligned (this will be automatically checked during parsing).</summary>
            <returns>A <see cref="T:System.IO.Stream"/> with its source as the BIT STRING content.</returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="P:Org.BouncyCastle2.Asn1.Asn1BitStringParser.PadBits">
            <summary>Return the number of pad bits, if any, in the final byte, if any, read from
            <see cref="M:Org.BouncyCastle2.Asn1.Asn1BitStringParser.GetBitStream"/>.</summary>
            <remarks>
            This number is in the range zero to seven. That number of the least significant bits of the final byte, if
            any, are not part of the contents and should be ignored. NOTE: Must be called AFTER the stream has been
            fully processed. (Does not need to be called if <see cref="M:Org.BouncyCastle2.Asn1.Asn1BitStringParser.GetOctetStream"/> was used instead of
            <see cref="M:Org.BouncyCastle2.Asn1.Asn1BitStringParser.GetBitStream"/>.
            </remarks>
            <returns>The number of pad bits. In the range zero to seven.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Asn1Encodable.GetDerEncoded">
             Return the DER encoding of the object, null if the DER encoding can not be made.
            
             @return a DER byte array, null otherwise.
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.Asn1EncodableVector">
            Mutable class for building ASN.1 constructed objects such as SETs or SEQUENCEs.
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.Asn1InputStream">
            a general purpose ASN.1 decoder - note: this class differs from the
            others in that it returns null after it has read the last object in
            the stream. If an ASN.1 Null is encountered a Der/BER Null object is
            returned.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Asn1InputStream.#ctor(System.Byte[])">
             Create an ASN1InputStream based on the input byte array. The length of DER objects in
             the stream is automatically limited to the length of the input array.
            
             @param input array containing ASN.1 encoded data.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Asn1InputStream.#ctor(System.IO.Stream,System.Int32)">
             Create an ASN1InputStream where no DER object will be longer than limit.
            
             @param input stream containing ASN.1 encoded data.
             @param limit maximum size of a DER encoded object.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Asn1InputStream.BuildObject(System.Int32,System.Int32,System.Int32)">
            build an object given its tag and the number of bytes to construct it from.
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.Asn1Null">
            A Null object.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Asn1Object.FromByteArray(System.Byte[])">
            <summary>Create a base ASN.1 object from a byte array.</summary>
            <param name="data">The byte array to parse.</param>
            <returns>The base ASN.1 object represented by the byte array.</returns>
            <exception cref="T:System.IO.IOException">
            If there is a problem parsing the data, or parsing an object did not exhaust the available data.
            </exception>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Asn1Object.FromStream(System.IO.Stream)">
            <summary>Read a base ASN.1 object from a stream.</summary>
            <param name="inStr">The stream to parse.</param>
            <returns>The base ASN.1 object represented by the byte array.</returns>
            <exception cref="T:System.IO.IOException">If there is a problem parsing the data.</exception>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Asn1ObjectDescriptor.GetInstance(System.Object)">
             Return an ObjectDescriptor from the passed in object.
            
             @param obj an ASN1ObjectDescriptor or an object that can be converted into one.
             @exception IllegalArgumentException if the object cannot be converted.
             @return an ASN1ObjectDescriptor instance, or null.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Asn1ObjectDescriptor.GetInstance(Org.BouncyCastle2.Asn1.Asn1TaggedObject,System.Boolean)">
             Return an ObjectDescriptor from a tagged object.
            
             @param taggedObject the tagged object holding the object we want.
             @param declaredExplicit true if the object is meant to be explicitly tagged, false otherwise.
             @exception IllegalArgumentException if the tagged object cannot be converted.
             @return an ASN1ObjectDescriptor instance, or null.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Asn1OctetString.GetInstance(System.Object)">
             return an Octet string from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Asn1OctetString.GetInstance(Org.BouncyCastle2.Asn1.Asn1TaggedObject,System.Boolean)">
             return an octet string from a tagged object.
            
             @param taggedObject the tagged object holding the object we want.
             @param declaredExplicit true if the object is meant to be explicitly tagged false otherwise.
             @exception ArgumentException if the tagged object cannot be converted.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Asn1OctetString.#ctor(System.Byte[])">
            @param string the octets making up the octet string.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Asn1OctetStringParser.GetOctetStream">
            <summary>Return the content of the OCTET STRING as a <see cref="T:System.IO.Stream"/>.</summary>
            <returns>A <see cref="T:System.IO.Stream"/> represnting the OCTET STRING's content.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Asn1Sequence.GetInstance(System.Object)">
             return an Asn1Sequence from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Asn1Sequence.GetInstance(Org.BouncyCastle2.Asn1.Asn1TaggedObject,System.Boolean)">
             Return an ASN1 sequence from a tagged object. There is a special
             case here, if an object appears to have been explicitly tagged on
             reading but we were expecting it to be implicitly tagged in the
             normal course of events it indicates that we lost the surrounding
             sequence - so we need to add it back (this will happen if the tagged
             object is a sequence that contains other sequences). If you are
             dealing with implicitly tagged sequences you really <b>should</b>
             be using this method.
            
             @param taggedObject the tagged object.
             @param declaredExplicit true if the object is meant to be explicitly tagged, false otherwise.
             @exception ArgumentException if the tagged object cannot be converted.
        </member>
        <member name="P:Org.BouncyCastle2.Asn1.Asn1Sequence.Item(System.Int32)">
             return the object at the sequence position indicated by index.
            
             @param index the sequence number (starting at zero) of the object
             @return the object at the sequence position indicated by index.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Asn1Set.GetInstance(System.Object)">
             return an ASN1Set from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Asn1Set.GetInstance(Org.BouncyCastle2.Asn1.Asn1TaggedObject,System.Boolean)">
             Return an ASN1 set from a tagged object. There is a special
             case here, if an object appears to have been explicitly tagged on
             reading but we were expecting it to be implicitly tagged in the
             normal course of events it indicates that we lost the surrounding
             set - so we need to add it back (this will happen if the tagged
             object is a sequence that contains other sequences). If you are
             dealing with implicitly tagged sets you really <b>should</b>
             be using this method.
            
             @param taggedObject the tagged object.
             @param declaredExplicit true if the object is meant to be explicitly tagged false otherwise.
             @exception ArgumentException if the tagged object cannot be converted.
        </member>
        <member name="P:Org.BouncyCastle2.Asn1.Asn1Set.Item(System.Int32)">
             return the object at the set position indicated by index.
            
             @param index the set number (starting at zero) of the object
             @return the object at the set position indicated by index.
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.Asn1TaggedObject">
            ASN.1 TaggedObject - in ASN.1 notation this is any object preceded by
            a [n] where n is some number - these are assumed to follow the construction
            rules (as with sequences).
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Asn1TaggedObject.#ctor(System.Boolean,System.Int32,Org.BouncyCastle2.Asn1.Asn1Encodable)">
            @param explicitly true if the object is explicitly tagged.
            @param tagNo the tag number for this object.
            @param obj the tagged object.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Asn1TaggedObject.IsExplicit">
            return whether or not the object may be explicitly tagged.
            <p>
            Note: if the object has been read from an input stream, the only
            time you can be sure if isExplicit is returning the true state of
            affairs is if it returns false. An implicitly tagged object may appear
            to be explicitly tagged, so you need to understand the context under
            which the reading was done as well, see GetObject below.</p>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Asn1TaggedObject.GetContents">
             Return the contents of this object as a byte[]
            
             @return the encoded contents of the object.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Asn1TaggedObject.GetObject">
            return whatever was following the tag.
            <p>
            Note: tagged objects are generally context dependent if you're
            trying to extract a tagged object you should be going via the
            appropriate GetInstance method.</p>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Asn1TaggedObject.GetBaseObject">
            Needed for open types, until we have better type-guided parsing support. Use sparingly for other
            purposes, and prefer {@link #getExplicitBaseTagged()}, {@link #getImplicitBaseTagged(int, int)} or
            {@link #getBaseUniversal(boolean, int)} where possible. Before using, check for matching tag
            {@link #getTagClass() class} and {@link #getTagNo() number}.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Asn1TaggedObject.GetExplicitBaseObject">
            Needed for open types, until we have better type-guided parsing support. Use
            sparingly for other purposes, and prefer {@link #getExplicitBaseTagged()} or
            {@link #getBaseUniversal(boolean, int)} where possible. Before using, check
            for matching tag {@link #getTagClass() class} and {@link #getTagNo() number}.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Asn1TaggedObject.GetObjectParser(System.Int32,System.Boolean)">
            Return the object held in this tagged object as a parser assuming it has
            the type of the passed in tag. If the object doesn't have a parser
            associated with it, the base object is returned.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Asn1TaggedObjectParser.GetObjectParser(System.Int32,System.Boolean)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Asn1TaggedObjectParser.ParseBaseUniversal(System.Boolean,System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Asn1TaggedObjectParser.ParseExplicitBaseObject">
            <summary>Needed for open types, until we have better type-guided parsing support.</summary>
            <remarks>
            Use sparingly for other purposes, and prefer <see cref="M:Org.BouncyCastle2.Asn1.Asn1TaggedObjectParser.ParseExplicitBaseTagged"/> or
            <see cref="M:Org.BouncyCastle2.Asn1.Asn1TaggedObjectParser.ParseBaseUniversal(System.Boolean,System.Int32)"/> where possible. Before using, check for matching tag
            <see cref="P:Org.BouncyCastle2.Asn1.Asn1TaggedObjectParser.TagClass">class</see> and <see cref="P:Org.BouncyCastle2.Asn1.Asn1TaggedObjectParser.TagNo">number</see>.
            </remarks>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Asn1TaggedObjectParser.ParseExplicitBaseTagged">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Asn1TaggedObjectParser.ParseImplicitBaseTagged(System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Asn1UniversalType.FromByteArray(System.Byte[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Asn1Utilities.ParseExplicitBaseTagged(Org.BouncyCastle2.Asn1.Asn1TaggedObjectParser,System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Asn1Utilities.ParseExplicitContextBaseTagged(Org.BouncyCastle2.Asn1.Asn1TaggedObjectParser,System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Asn1Utilities.TryParseExplicitBaseTagged(Org.BouncyCastle2.Asn1.Asn1TaggedObjectParser,System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Asn1Utilities.TryParseExplicitContextBaseTagged(Org.BouncyCastle2.Asn1.Asn1TaggedObjectParser,System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Asn1Utilities.ParseImplicitBaseTagged(Org.BouncyCastle2.Asn1.Asn1TaggedObjectParser,System.Int32,System.Int32,System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Asn1Utilities.ParseImplicitContextBaseTagged(Org.BouncyCastle2.Asn1.Asn1TaggedObjectParser,System.Int32,System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Asn1Utilities.TryParseImplicitBaseTagged(Org.BouncyCastle2.Asn1.Asn1TaggedObjectParser,System.Int32,System.Int32,System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Asn1Utilities.TryParseImplicitContextBaseTagged(Org.BouncyCastle2.Asn1.Asn1TaggedObjectParser,System.Int32,System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Asn1Utilities.ParseBaseUniversal(Org.BouncyCastle2.Asn1.Asn1TaggedObjectParser,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Asn1Utilities.ParseContextBaseUniversal(Org.BouncyCastle2.Asn1.Asn1TaggedObjectParser,System.Int32,System.Boolean,System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Asn1Utilities.TryParseBaseUniversal(Org.BouncyCastle2.Asn1.Asn1TaggedObjectParser,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Asn1Utilities.TryParseContextBaseUniversal(Org.BouncyCastle2.Asn1.Asn1TaggedObjectParser,System.Int32,System.Boolean,System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Asn1Utilities.ParseExplicitBaseObject(Org.BouncyCastle2.Asn1.Asn1TaggedObjectParser,System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Asn1Utilities.ParseExplicitContextBaseObject(Org.BouncyCastle2.Asn1.Asn1TaggedObjectParser,System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Asn1Utilities.TryParseExplicitBaseObject(Org.BouncyCastle2.Asn1.Asn1TaggedObjectParser,System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Asn1Utilities.TryParseExplicitContextBaseObject(Org.BouncyCastle2.Asn1.Asn1TaggedObjectParser,System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.BC.BCObjectIdentifiers.bc">
            iso.org.dod.internet.private.enterprise.legion-of-the-bouncy-castle
            <p>1.3.6.1.4.1.22554</p>
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.BC.BCObjectIdentifiers.bc_pbe">
            pbe(1) algorithms
            <p>1.3.6.1.4.1.22554.1</p>
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.BC.BCObjectIdentifiers.bc_pbe_sha1">
            SHA-1(1)
            <p>1.3.6.1.4.1.22554.1.1</p>
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.BC.BCObjectIdentifiers.bc_pbe_sha256">
            SHA-2.SHA-256; 1.3.6.1.4.1.22554.1.2.1 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.BC.BCObjectIdentifiers.bc_pbe_sha384">
            SHA-2.SHA-384; 1.3.6.1.4.1.22554.1.2.2 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.BC.BCObjectIdentifiers.bc_pbe_sha512">
            SHA-2.SHA-512; 1.3.6.1.4.1.22554.1.2.3 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.BC.BCObjectIdentifiers.bc_pbe_sha224">
            SHA-2.SHA-224; 1.3.6.1.4.1.22554.1.2.4 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.BC.BCObjectIdentifiers.bc_pbe_sha1_pkcs5">
            PKCS-5(1)|PKCS-12(2)
            SHA-1.PKCS5;  1.3.6.1.4.1.22554.1.1.1 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.BC.BCObjectIdentifiers.bc_pbe_sha1_pkcs12">
            SHA-1.PKCS12; 1.3.6.1.4.1.22554.1.1.2 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.BC.BCObjectIdentifiers.bc_pbe_sha256_pkcs5">
            SHA-256.PKCS12; 1.3.6.1.4.1.22554.1.2.1.1 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.BC.BCObjectIdentifiers.bc_pbe_sha256_pkcs12">
            SHA-256.PKCS12; 1.3.6.1.4.1.22554.1.2.1.2 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.BC.BCObjectIdentifiers.bc_pbe_sha1_pkcs12_aes128_cbc">
            AES(1) . (CBC-128(2)|CBC-192(22)|CBC-256(42))
            1.3.6.1.4.1.22554.1.1.2.1.2 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.BC.BCObjectIdentifiers.bc_pbe_sha1_pkcs12_aes192_cbc">
            1.3.6.1.4.1.22554.1.1.2.1.22 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.BC.BCObjectIdentifiers.bc_pbe_sha1_pkcs12_aes256_cbc">
            1.3.6.1.4.1.22554.1.1.2.1.42 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.BC.BCObjectIdentifiers.bc_pbe_sha256_pkcs12_aes128_cbc">
            1.3.6.1.4.1.22554.1.1.2.2.2 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.BC.BCObjectIdentifiers.bc_pbe_sha256_pkcs12_aes192_cbc">
            1.3.6.1.4.1.22554.1.1.2.2.22 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.BC.BCObjectIdentifiers.bc_pbe_sha256_pkcs12_aes256_cbc">
            1.3.6.1.4.1.22554.1.1.2.2.42 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.BC.BCObjectIdentifiers.bc_sig">
            signature(2) algorithms
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.BC.BCObjectIdentifiers.sphincs256">
            Sphincs-256
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.BC.BCObjectIdentifiers.xmss">
            XMSS
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.BC.BCObjectIdentifiers.xmss_mt">
            XMSS^MT
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.BC.BCObjectIdentifiers.bc_exch">
            key_exchange(3) algorithms
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.BC.BCObjectIdentifiers.newHope">
            NewHope
        </member>
        <!-- Badly formed XML comment ignored for member "F:Org.BouncyCastle2.Asn1.BC.BCObjectIdentifiers.bc_ext" -->
        <member name="F:Org.BouncyCastle2.Asn1.BC.BCObjectIdentifiers.bc_kem">
            KEM(4) algorithms
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.BC.BCObjectIdentifiers.pqc_kem_mceliece">
            Classic McEliece
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.BC.LinkedCertificate">
            Extension to tie an alternate certificate to the containing certificate.
            <pre>
                LinkedCertificate := SEQUENCE {
                    digest        DigestInfo,                   -- digest of PQC certificate
                    certLocation  GeneralName,                  -- location of PQC certificate
                    certIssuer    [0] Name OPTIONAL,            -- issuer of PQC cert (if different from current certificate)
                    cACerts       [1] GeneralNames OPTIONAL,    -- CA certificates for PQC cert (one of more locations)
            }
            </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.BerApplicationSpecific.#ctor(System.Int32,Org.BouncyCastle2.Asn1.Asn1Encodable)">
             Create an application specific object with an explicit tag
            
             @param tagNo the tag number for this object.
             @param baseEncodable the object to be contained.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.BerApplicationSpecific.#ctor(System.Boolean,System.Int32,Org.BouncyCastle2.Asn1.Asn1Encodable)">
             Create an application specific object with the tagging style given by the value of explicit.
            
             @param explicit true if the object is explicitly tagged.
             @param tagNo the tag number for this object.
             @param baseEncodable the object to be contained.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.BerApplicationSpecific.#ctor(System.Int32,Org.BouncyCastle2.Asn1.Asn1EncodableVector)">
             Create an application specific object which is marked as constructed
            
             @param tagNo the tag number for this object.
             @param contentsElements the objects making up the application specific object.
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.BerBitStringParser">
            <summary>A parser for indefinite-length BIT STRINGs.</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.BerNull">
            A BER Null object.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.BerOctetString.GetEnumerator">
            return the DER octets that make up this string.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.BerSequence.#ctor">
            create an empty sequence
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.BerSequence.#ctor(Org.BouncyCastle2.Asn1.Asn1Encodable)">
            create a sequence containing one object
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.BerSequence.#ctor(Org.BouncyCastle2.Asn1.Asn1EncodableVector)">
            create a sequence containing a vector of objects.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.BerSet.#ctor">
            create an empty set
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.BerSet.#ctor(Org.BouncyCastle2.Asn1.Asn1Encodable)">
            create a set containing one object
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.BerSet.#ctor(Org.BouncyCastle2.Asn1.Asn1EncodableVector)">
            create a set containing a vector of objects.
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.BerTaggedObject">
            BER TaggedObject - in ASN.1 notation this is any object preceded by
            a [n] where n is some number - these are assumed to follow the construction
            rules (as with sequences).
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.BerTaggedObject.#ctor(System.Int32)">
            create an implicitly tagged object that contains a zero
            length sequence.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.BerTaggedObject.#ctor(System.Int32,Org.BouncyCastle2.Asn1.Asn1Encodable)">
            @param tagNo the tag number for this object.
            @param obj the tagged object.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.BerTaggedObject.#ctor(System.Boolean,System.Int32,Org.BouncyCastle2.Asn1.Asn1Encodable)">
            @param isExplicit true if an explicitly tagged object.
            @param tagNo the tag number for this object.
            @param obj the tagged object.
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.Bsi.BsiObjectIdentifiers">
            <remarks>See https://www.bsi.bund.de/cae/servlet/contentblob/471398/publicationFile/30615/BSI-TR-03111_pdf.pdf</remarks>
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.Bsi.BsiObjectIdentifiers.algorithm">
            0.4.0.127.0.7.1 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.Bsi.BsiObjectIdentifiers.ecka_eg_X963kdf">
            ElGamal Elliptic Curve Key Agreement and Key Derivation according to X963 OID: 0.4.0.127.0.7.1.1.5.1.1 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.Bsi.BsiObjectIdentifiers.ecka_eg_X963kdf_SHA1">
            ElGamal Elliptic Curve Key Agreement and Key Derivation according to X963
            with hash function SHA-1
            OID: 0.4.0.127.0.7.1.1.5.1.1.1 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.Bsi.BsiObjectIdentifiers.ecka_eg_X963kdf_SHA224">
            ElGamal Elliptic Curve Key Agreement and Key Derivation according to X963
            with hash function SHA224
            OID: 0.4.0.127.0.7.1.1.5.1.1.2 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.Bsi.BsiObjectIdentifiers.ecka_eg_X963kdf_SHA256">
            ElGamal Elliptic Curve Key Agreement and Key Derivation according to X963
            with hash function SHA256
            OID: 0.4.0.127.0.7.1.1.5.1.1.3 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.Bsi.BsiObjectIdentifiers.ecka_eg_X963kdf_SHA384">
            ElGamal Elliptic Curve Key Agreement and Key Derivation according to X963
            with hash function SHA384
            OID: 0.4.0.127.0.7.1.1.5.1.1.4 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.Bsi.BsiObjectIdentifiers.ecka_eg_X963kdf_SHA512">
            ElGamal Elliptic Curve Key Agreement and Key Derivation according to X963
            with hash function SHA512
            OID: 0.4.0.127.0.7.1.1.5.1.1.5 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.Bsi.BsiObjectIdentifiers.ecka_eg_X963kdf_RIPEMD160">
            ElGamal Elliptic Curve Key Agreement and Key Derivation according to X963
            with hash function RIPEMD160
            OID: 0.4.0.127.0.7.1.1.5.1.1.6 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.Bsi.BsiObjectIdentifiers.ecka_eg_SessionKDF">
            Key Derivation Function for Session Keys
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cmp.CAKeyUpdAnnContent.ToAsn1Object">
            <pre>
            CAKeyUpdAnnContent ::= SEQUENCE {
                                        oldWithNew   CmpCertificate, -- old pub signed with new priv
                                        newWithOld   CmpCertificate, -- new pub signed with old priv
                                        newWithNew   CmpCertificate  -- new pub signed with new priv
             }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cmp.CertConfirmContent.ToAsn1Object">
            <pre>
            CertConfirmContent ::= SEQUENCE OF CertStatus
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cmp.CertifiedKeyPair.ToAsn1Object">
            <pre>
            CertifiedKeyPair ::= SEQUENCE {
                                             certOrEncCert       CertOrEncCert,
                                             privateKey      [0] EncryptedValue      OPTIONAL,
                                             -- see [CRMF] for comment on encoding
                                             publicationInfo [1] PKIPublicationInfo  OPTIONAL
                  }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cmp.CertOrEncCert.ToAsn1Object">
            <pre>
            CertOrEncCert ::= CHOICE {
                                 certificate     [0] CMPCertificate,
                                 encryptedCert   [1] EncryptedValue
                      }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cmp.CertRepMessage.ToAsn1Object">
            <pre>
            CertRepMessage ::= SEQUENCE {
                                     caPubs       [1] SEQUENCE SIZE (1..MAX) OF CMPCertificate
                                                                                        OPTIONAL,
                                     response         SEQUENCE OF CertResponse
            }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cmp.CertResponse.ToAsn1Object">
            <pre>
            CertResponse ::= SEQUENCE {
                                       certReqId           INTEGER,
                                       -- to match this response with corresponding request (a value
                                       -- of -1 is to be used if certReqId is not specified in the
                                       -- corresponding request)
                                       status              PKIStatusInfo,
                                       certifiedKeyPair    CertifiedKeyPair    OPTIONAL,
                                       rspInfo             OCTET STRING        OPTIONAL
                                       -- analogous to the id-regInfo-utf8Pairs string defined
                                       -- for regInfo in CertReqMsg [CRMF]
                        }
            </pre> 
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cmp.CertStatus.ToAsn1Object">
            <pre>
            CertStatus ::= SEQUENCE {
                              certHash    OCTET STRING,
                              -- the hash of the certificate, using the same hash algorithm
                              -- as is used to create and verify the certificate signature
                              certReqId   INTEGER,
                              -- to match this confirmation with the corresponding req/rep
                              statusInfo  PKIStatusInfo OPTIONAL
            }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cmp.Challenge.ToAsn1Object">
             <pre>
             Challenge ::= SEQUENCE {
                             owf                 AlgorithmIdentifier  OPTIONAL,
            
                             -- MUST be present in the first Challenge; MAY be omitted in
                             -- any subsequent Challenge in POPODecKeyChallContent (if
                             -- omitted, then the owf used in the immediately preceding
                             -- Challenge is to be used).
            
                             witness             OCTET STRING,
                             -- the result of applying the one-way function (owf) to a
                             -- randomly-generated INTEGER, A.  [Note that a different
                             -- INTEGER MUST be used for each Challenge.]
                             challenge           OCTET STRING
                             -- the encryption (under the public key for which the cert.
                             -- request is being made) of Rand, where Rand is specified as
                             --   Rand ::= SEQUENCE {
                             --      int      INTEGER,
                             --       - the randomly-generated INTEGER A (above)
                             --      sender   GeneralName
                             --       - the sender's name (as included in PKIHeader)
                             --   }
                  }
             </pre>
             @return a basic ASN.1 object representation.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cmp.CmpCertificate.#ctor(Org.BouncyCastle2.Asn1.X509.AttributeCertificate)">
            Note: the addition of attribute certificates is a BC extension.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cmp.CmpCertificate.ToAsn1Object">
             <pre>
             CMPCertificate ::= CHOICE {
                        x509v3PKCert        Certificate
                        x509v2AttrCert      [1] AttributeCertificate
              }
             </pre>
             Note: the addition of attribute certificates is a BC extension.
            
             @return a basic ASN.1 object representation.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cmp.CrlAnnContent.ToAsn1Object">
            <pre>
            CrlAnnContent ::= SEQUENCE OF CertificateList
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cmp.ErrorMsgContent.ToAsn1Object">
            <pre>
            ErrorMsgContent ::= SEQUENCE {
                                   pKIStatusInfo          PKIStatusInfo,
                                   errorCode              INTEGER           OPTIONAL,
                                   -- implementation-specific error codes
                                   errorDetails           PKIFreeText       OPTIONAL
                                   -- implementation-specific error details
            }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cmp.GenMsgContent.ToAsn1Object">
            <pre>
            GenMsgContent ::= SEQUENCE OF InfoTypeAndValue
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cmp.GenRepContent.ToAsn1Object">
            <pre>
            GenRepContent ::= SEQUENCE OF InfoTypeAndValue
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.Cmp.InfoTypeAndValue">
             Example InfoTypeAndValue contents include, but are not limited
             to, the following (un-comment in this ASN.1 module and use as
             appropriate for a given environment):
             <pre>
               id-it-caProtEncCert    OBJECT IDENTIFIER ::= {id-it 1}
                  CAProtEncCertValue      ::= CMPCertificate
               id-it-signKeyPairTypes OBJECT IDENTIFIER ::= {id-it 2}
                 SignKeyPairTypesValue   ::= SEQUENCE OF AlgorithmIdentifier
               id-it-encKeyPairTypes  OBJECT IDENTIFIER ::= {id-it 3}
                 EncKeyPairTypesValue    ::= SEQUENCE OF AlgorithmIdentifier
               id-it-preferredSymmAlg OBJECT IDENTIFIER ::= {id-it 4}
                  PreferredSymmAlgValue   ::= AlgorithmIdentifier
               id-it-caKeyUpdateInfo  OBJECT IDENTIFIER ::= {id-it 5}
                  CAKeyUpdateInfoValue    ::= CAKeyUpdAnnContent
               id-it-currentCRL       OBJECT IDENTIFIER ::= {id-it 6}
                  CurrentCRLValue         ::= CertificateList
               id-it-unsupportedOIDs  OBJECT IDENTIFIER ::= {id-it 7}
                  UnsupportedOIDsValue    ::= SEQUENCE OF OBJECT IDENTIFIER
               id-it-keyPairParamReq  OBJECT IDENTIFIER ::= {id-it 10}
                  KeyPairParamReqValue    ::= OBJECT IDENTIFIER
               id-it-keyPairParamRep  OBJECT IDENTIFIER ::= {id-it 11}
                  KeyPairParamRepValue    ::= AlgorithmIdentifer
               id-it-revPassphrase    OBJECT IDENTIFIER ::= {id-it 12}
                  RevPassphraseValue      ::= EncryptedValue
               id-it-implicitConfirm  OBJECT IDENTIFIER ::= {id-it 13}
                  ImplicitConfirmValue    ::= NULL
               id-it-confirmWaitTime  OBJECT IDENTIFIER ::= {id-it 14}
                  ConfirmWaitTimeValue    ::= GeneralizedTime
               id-it-origPKIMessage   OBJECT IDENTIFIER ::= {id-it 15}
                  OrigPKIMessageValue     ::= PKIMessages
               id-it-suppLangTags     OBJECT IDENTIFIER ::= {id-it 16}
                  SuppLangTagsValue       ::= SEQUENCE OF UTF8String
            
             where
            
               id-pkix OBJECT IDENTIFIER ::= {
                  iso(1) identified-organization(3)
                  dod(6) internet(1) security(5) mechanisms(5) pkix(7)}
             and
                  id-it   OBJECT IDENTIFIER ::= {id-pkix 4}
             </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cmp.InfoTypeAndValue.ToAsn1Object">
            <pre>
            InfoTypeAndValue ::= SEQUENCE {
                                    infoType               OBJECT IDENTIFIER,
                                    infoValue              ANY DEFINED BY infoType  OPTIONAL
            }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cmp.KeyRecRepContent.ToAsn1Object">
            <pre>
            KeyRecRepContent ::= SEQUENCE {
                                    status                  PKIStatusInfo,
                                    newSigCert          [0] CMPCertificate OPTIONAL,
                                    caCerts             [1] SEQUENCE SIZE (1..MAX) OF
                                                                      CMPCertificate OPTIONAL,
                                    keyPairHist         [2] SEQUENCE SIZE (1..MAX) OF
                                                                      CertifiedKeyPair OPTIONAL
                         }
            </pre> 
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cmp.OobCertHash.ToAsn1Object">
            <pre>
            OobCertHash ::= SEQUENCE {
                                 hashAlg     [0] AlgorithmIdentifier     OPTIONAL,
                                 certId      [1] CertId                  OPTIONAL,
                                 hashVal         BIT STRING
                                 -- hashVal is calculated over the Der encoding of the
                                 -- self-signed certificate with the identifier certID.
                  }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cmp.PbmParameter.ToAsn1Object">
            <pre>
             PbmParameter ::= SEQUENCE {
                                   salt                OCTET STRING,
                                   -- note:  implementations MAY wish to limit acceptable sizes
                                   -- of this string to values appropriate for their environment
                                   -- in order to reduce the risk of denial-of-service attacks
                                   owf                 AlgorithmIdentifier,
                                   -- AlgId for a One-Way Function (SHA-1 recommended)
                                   iterationCount      INTEGER,
                                   -- number of times the OWF is applied
                                   -- note:  implementations MAY wish to limit acceptable sizes
                                   -- of this integer to values appropriate for their environment
                                   -- in order to reduce the risk of denial-of-service attacks
                                   mac                 AlgorithmIdentifier
                                   -- the MAC AlgId (e.g., DES-MAC, Triple-DES-MAC [PKCS11],
               }   -- or HMAC [RFC2104, RFC2202])
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cmp.PkiBody.#ctor(System.Int32,Org.BouncyCastle2.Asn1.Asn1Encodable)">
            Creates a new PkiBody.
            @param type one of the TYPE_* constants
            @param content message content
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cmp.PkiBody.ToAsn1Object">
            <pre>
            PkiBody ::= CHOICE {       -- message-specific body elements
                   ir       [0]  CertReqMessages,        --Initialization Request
                   ip       [1]  CertRepMessage,         --Initialization Response
                   cr       [2]  CertReqMessages,        --Certification Request
                   cp       [3]  CertRepMessage,         --Certification Response
                   p10cr    [4]  CertificationRequest,   --imported from [PKCS10]
                   popdecc  [5]  POPODecKeyChallContent, --pop Challenge
                   popdecr  [6]  POPODecKeyRespContent,  --pop Response
                   kur      [7]  CertReqMessages,        --Key Update Request
                   kup      [8]  CertRepMessage,         --Key Update Response
                   krr      [9]  CertReqMessages,        --Key Recovery Request
                   krp      [10] KeyRecRepContent,       --Key Recovery Response
                   rr       [11] RevReqContent,          --Revocation Request
                   rp       [12] RevRepContent,          --Revocation Response
                   ccr      [13] CertReqMessages,        --Cross-Cert. Request
                   ccp      [14] CertRepMessage,         --Cross-Cert. Response
                   ckuann   [15] CAKeyUpdAnnContent,     --CA Key Update Ann.
                   cann     [16] CertAnnContent,         --Certificate Ann.
                   rann     [17] RevAnnContent,          --Revocation Ann.
                   crlann   [18] CRLAnnContent,          --CRL Announcement
                   pkiconf  [19] PKIConfirmContent,      --Confirmation
                   nested   [20] NestedMessageContent,   --Nested Message
                   genm     [21] GenMsgContent,          --General Message
                   genp     [22] GenRepContent,          --General Response
                   error    [23] ErrorMsgContent,        --Error Message
                   certConf [24] CertConfirmContent,     --Certificate confirm
                   pollReq  [25] PollReqContent,         --Polling request
                   pollRep  [26] PollRepContent          --Polling response
            }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cmp.PkiConfirmContent.ToAsn1Object">
            <pre>
            PkiConfirmContent ::= NULL
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.Cmp.PkiFailureInfo">
            <pre>
            PKIFailureInfo ::= BIT STRING {
            badAlg               (0),
              -- unrecognized or unsupported Algorithm Identifier
            badMessageCheck      (1), -- integrity check failed (e.g., signature did not verify)
            badRequest           (2),
              -- transaction not permitted or supported
            badTime              (3), -- messageTime was not sufficiently close to the system time, as defined by local policy
            badCertId            (4), -- no certificate could be found matching the provided criteria
            badDataFormat        (5),
              -- the data submitted has the wrong format
            wrongAuthority       (6), -- the authority indicated in the request is different from the one creating the response token
            incorrectData        (7), -- the requester's data is incorrect (for notary services)
            missingTimeStamp     (8), -- when the timestamp is missing but should be there (by policy)
            badPOP               (9)  -- the proof-of-possession failed
            certRevoked         (10),
            certConfirmed       (11),
            wrongIntegrity      (12),
            badRecipientNonce   (13), 
            timeNotAvailable    (14),
              -- the TSA's time source is not available
            unacceptedPolicy    (15),
              -- the requested TSA policy is not supported by the TSA
            unacceptedExtension (16),
              -- the requested extension is not supported by the TSA
            addInfoNotAvailable (17)
              -- the additional information requested could not be understood
              -- or is not available
            badSenderNonce      (18),
            badCertTemplate     (19),
            signerNotTrusted    (20),
            transactionIdInUse  (21),
            unsupportedVersion  (22),
            notAuthorized       (23),
            systemUnavail       (24),    
            systemFailure       (25),
              -- the request cannot be handled due to system failure
            duplicateCertReq    (26) 
            </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cmp.PkiFailureInfo.#ctor(System.Int32)">
            Basic constructor.
        </member>
        <member name="P:Org.BouncyCastle2.Asn1.Cmp.PkiFreeText.Size">
             Return the number of string elements present.
            
             @return number of elements present.
        </member>
        <member name="P:Org.BouncyCastle2.Asn1.Cmp.PkiFreeText.Item(System.Int32)">
             Return the UTF8STRING at index.
            
             @param index index of the string of interest
             @return the string at index.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cmp.PkiFreeText.ToAsn1Object">
            <pre>
            PkiFreeText ::= SEQUENCE SIZE (1..MAX) OF UTF8String
            </pre>
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.Cmp.PkiHeader.NULL_NAME">
            Value for a "null" recipient or sender.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cmp.PkiHeader.ToAsn1Object">
            <pre>
             PkiHeader ::= SEQUENCE {
                       pvno                INTEGER     { cmp1999(1), cmp2000(2) },
                       sender              GeneralName,
                       -- identifies the sender
                       recipient           GeneralName,
                       -- identifies the intended recipient
                       messageTime     [0] GeneralizedTime         OPTIONAL,
                       -- time of production of this message (used when sender
                       -- believes that the transport will be "suitable"; i.e.,
                       -- that the time will still be meaningful upon receipt)
                       protectionAlg   [1] AlgorithmIdentifier     OPTIONAL,
                       -- algorithm used for calculation of protection bits
                       senderKID       [2] KeyIdentifier           OPTIONAL,
                       recipKID        [3] KeyIdentifier           OPTIONAL,
                       -- to identify specific keys used for protection
                       transactionID   [4] OCTET STRING            OPTIONAL,
                       -- identifies the transaction; i.e., this will be the same in
                       -- corresponding request, response, certConf, and PKIConf
                       -- messages
                       senderNonce     [5] OCTET STRING            OPTIONAL,
                       recipNonce      [6] OCTET STRING            OPTIONAL,
                       -- nonces used to provide replay protection, senderNonce
                       -- is inserted by the creator of this message; recipNonce
                       -- is a nonce previously inserted in a related message by
                       -- the intended recipient of this message
                       freeText        [7] PKIFreeText             OPTIONAL,
                       -- this may be used to indicate context-specific instructions
                       -- (this field is intended for human consumption)
                       generalInfo     [8] SEQUENCE SIZE (1..MAX) OF
                                            InfoTypeAndValue     OPTIONAL
                       -- this may be used to convey context-specific information
                       -- (this field not primarily intended for human consumption)
            }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cmp.PkiHeaderBuilder.Build">
            <pre>
             PKIHeader ::= SEQUENCE {
                       pvno                INTEGER     { cmp1999(1), cmp2000(2) },
                       sender              GeneralName,
                       -- identifies the sender
                       recipient           GeneralName,
                       -- identifies the intended recipient
                       messageTime     [0] GeneralizedTime         OPTIONAL,
                       -- time of production of this message (used when sender
                       -- believes that the transport will be "suitable"; i.e.,
                       -- that the time will still be meaningful upon receipt)
                       protectionAlg   [1] AlgorithmIdentifier     OPTIONAL,
                       -- algorithm used for calculation of protection bits
                       senderKID       [2] KeyIdentifier           OPTIONAL,
                       recipKID        [3] KeyIdentifier           OPTIONAL,
                       -- to identify specific keys used for protection
                       transactionID   [4] OCTET STRING            OPTIONAL,
                       -- identifies the transaction; i.e., this will be the same in
                       -- corresponding request, response, certConf, and PKIConf
                       -- messages
                       senderNonce     [5] OCTET STRING            OPTIONAL,
                       recipNonce      [6] OCTET STRING            OPTIONAL,
                       -- nonces used to provide replay protection, senderNonce
                       -- is inserted by the creator of this message; recipNonce
                       -- is a nonce previously inserted in a related message by
                       -- the intended recipient of this message
                       freeText        [7] PKIFreeText             OPTIONAL,
                       -- this may be used to indicate context-specific instructions
                       -- (this field is intended for human consumption)
                       generalInfo     [8] SEQUENCE SIZE (1..MAX) OF
                                            InfoTypeAndValue     OPTIONAL
                       -- this may be used to convey context-specific information
                       -- (this field not primarily intended for human consumption)
            }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cmp.PkiMessage.#ctor(Org.BouncyCastle2.Asn1.Cmp.PkiHeader,Org.BouncyCastle2.Asn1.Cmp.PkiBody,Org.BouncyCastle2.Asn1.DerBitString,Org.BouncyCastle2.Asn1.Cmp.CmpCertificate[])">
             Creates a new PkiMessage.
            
             @param header message header
             @param body message body
             @param protection message protection (may be null)
             @param extraCerts extra certificates (may be null)
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cmp.PkiMessage.ToAsn1Object">
            <pre>
            PkiMessage ::= SEQUENCE {
                             header           PKIHeader,
                             body             PKIBody,
                             protection   [0] PKIProtection OPTIONAL,
                             extraCerts   [1] SEQUENCE SIZE (1..MAX) OF CMPCertificate
                                                                                OPTIONAL
            }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cmp.PkiMessages.ToAsn1Object">
            <pre>
            PkiMessages ::= SEQUENCE SIZE (1..MAX) OF PkiMessage
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cmp.PkiStatusInfo.#ctor(System.Int32)">
            @param status
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cmp.PkiStatusInfo.#ctor(System.Int32,Org.BouncyCastle2.Asn1.Cmp.PkiFreeText)">
            @param status
            @param statusString
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cmp.PkiStatusInfo.ToAsn1Object">
             <pre>
             PkiStatusInfo ::= SEQUENCE {
                 status        PKIStatus,                (INTEGER)
                 statusString  PkiFreeText     OPTIONAL,
                 failInfo      PkiFailureInfo  OPTIONAL  (BIT STRING)
             }
            
             PKIStatus:
               granted                (0), -- you got exactly what you asked for
               grantedWithMods        (1), -- you got something like what you asked for
               rejection              (2), -- you don't get it, more information elsewhere in the message
               waiting                (3), -- the request body part has not yet been processed, expect to hear more later
               revocationWarning      (4), -- this message contains a warning that a revocation is imminent
               revocationNotification (5), -- notification that a revocation has occurred
               keyUpdateWarning       (6)  -- update already done for the oldCertId specified in CertReqMsg
            
             PkiFailureInfo:
               badAlg           (0), -- unrecognized or unsupported Algorithm Identifier
               badMessageCheck  (1), -- integrity check failed (e.g., signature did not verify)
               badRequest       (2), -- transaction not permitted or supported
               badTime          (3), -- messageTime was not sufficiently close to the system time, as defined by local policy
               badCertId        (4), -- no certificate could be found matching the provided criteria
               badDataFormat    (5), -- the data submitted has the wrong format
               wrongAuthority   (6), -- the authority indicated in the request is different from the one creating the response token
               incorrectData    (7), -- the requester's data is incorrect (for notary services)
               missingTimeStamp (8), -- when the timestamp is missing but should be there (by policy)
               badPOP           (9)  -- the proof-of-possession failed
            
             </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cmp.PollRepContent.ToAsn1Object">
            <pre>
            PollRepContent ::= SEQUENCE OF SEQUENCE {
                    certReqId              INTEGER,
                    checkAfter             INTEGER,  -- time in seconds
                    reason                 PKIFreeText OPTIONAL
                }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cmp.PollReqContent.ToAsn1Object">
            <pre>
            PollReqContent ::= SEQUENCE OF SEQUENCE {
                                   certReqId              INTEGER
            }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cmp.PopoDecKeyChallContent.ToAsn1Object">
            <pre>
            PopoDecKeyChallContent ::= SEQUENCE OF Challenge
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cmp.PopoDecKeyRespContent.ToAsn1Object">
            <pre>
            PopoDecKeyRespContent ::= SEQUENCE OF INTEGER
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cmp.ProtectedPart.ToAsn1Object">
            <pre>
            ProtectedPart ::= SEQUENCE {
                               header    PKIHeader,
                               body      PKIBody
            }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cmp.RevAnnContent.ToAsn1Object">
            <pre>
            RevAnnContent ::= SEQUENCE {
                  status              PKIStatus,
                  certId              CertId,
                  willBeRevokedAt     GeneralizedTime,
                  badSinceDate        GeneralizedTime,
                  crlDetails          Extensions  OPTIONAL
                   -- extra CRL details (e.g., crl number, reason, location, etc.)
            }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cmp.RevDetails.ToAsn1Object">
            <pre>
            RevDetails ::= SEQUENCE {
                             certDetails         CertTemplate,
                              -- allows requester to specify as much as they can about
                              -- the cert. for which revocation is requested
                              -- (e.g., for cases in which serialNumber is not available)
                              crlEntryDetails     Extensions       OPTIONAL
                              -- requested crlEntryExtensions
                        }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cmp.RevRepContent.ToAsn1Object">
            <pre>
            RevRepContent ::= SEQUENCE {
                   status       SEQUENCE SIZE (1..MAX) OF PKIStatusInfo,
                   -- in same order as was sent in RevReqContent
                   revCerts [0] SEQUENCE SIZE (1..MAX) OF CertId OPTIONAL,
                   -- IDs for which revocation was requested
                   -- (same order as status)
                   crls     [1] SEQUENCE SIZE (1..MAX) OF CertificateList OPTIONAL
                   -- the resulting CRLs (there may be more than one)
              }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cmp.RevReqContent.ToAsn1Object">
            <pre>
            RevReqContent ::= SEQUENCE OF RevDetails
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.Attribute.GetInstance(System.Object)">
             return an Attribute object from the given object.
            
             @param o the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.Attribute.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            Attribute ::= SEQUENCE {
                attrType OBJECT IDENTIFIER,
                attrValues SET OF AttributeValue
            }
            </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.Attributes.ToAsn1Object">
            <pre>
            Attributes ::=
              SET SIZE(1..MAX) OF Attribute -- according to RFC 5652
            </pre>
            @return
        </member>
        <member name="P:Org.BouncyCastle2.Asn1.Cms.AttributeTable.Item(Org.BouncyCastle2.Asn1.DerObjectIdentifier)">
            <summary>Return the first attribute matching the given OBJECT IDENTIFIER</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.AttributeTable.GetAll(Org.BouncyCastle2.Asn1.DerObjectIdentifier)">
             Return all the attributes matching the OBJECT IDENTIFIER oid. The vector will be
             empty if there are no attributes of the required type present.
            
             @param oid type of attribute required.
             @return a vector of all the attributes found of type oid.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.AttributeTable.Add(Org.BouncyCastle2.Asn1.DerObjectIdentifier,Org.BouncyCastle2.Asn1.Asn1Encodable)">
             Return a new table with the passed in attribute added.
            
             @param attrType
             @param attrValue
             @return
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.AuthenticatedData.GetInstance(Org.BouncyCastle2.Asn1.Asn1TaggedObject,System.Boolean)">
             return an AuthenticatedData object from a tagged object.
            
             @param obj      the tagged object holding the object we want.
             @param isExplicit true if the object is meant to be explicitly
                             tagged false otherwise.
             @throws ArgumentException if the object held by the
                                              tagged object cannot be converted.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.AuthenticatedData.GetInstance(System.Object)">
             return an AuthenticatedData object from the given object.
            
             @param obj the object we want converted.
             @throws ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.AuthenticatedData.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <pre>
             AuthenticatedData ::= SEQUENCE {
                   version CMSVersion,
                   originatorInfo [0] IMPLICIT OriginatorInfo OPTIONAL,
                   recipientInfos RecipientInfos,
                   macAlgorithm MessageAuthenticationCodeAlgorithm,
                   digestAlgorithm [1] DigestAlgorithmIdentifier OPTIONAL,
                   encapContentInfo EncapsulatedContentInfo,
                   authAttrs [2] IMPLICIT AuthAttributes OPTIONAL,
                   mac MessageAuthenticationCode,
                   unauthAttrs [3] IMPLICIT UnauthAttributes OPTIONAL }
            
             AuthAttributes ::= SET SIZE (1..MAX) OF Attribute
            
             UnauthAttributes ::= SET SIZE (1..MAX) OF Attribute
            
             MessageAuthenticationCode ::= OCTET STRING
             </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.AuthEnvelopedData.GetInstance(Org.BouncyCastle2.Asn1.Asn1TaggedObject,System.Boolean)">
             return an AuthEnvelopedData object from a tagged object.
            
             @param obj      the tagged object holding the object we want.
             @param isExplicit true if the object is meant to be explicitly
                             tagged false otherwise.
             @throws ArgumentException if the object held by the
                                              tagged object cannot be converted.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.AuthEnvelopedData.GetInstance(System.Object)">
             return an AuthEnvelopedData object from the given object.
            
             @param obj the object we want converted.
             @throws ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.AuthEnvelopedData.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            AuthEnvelopedData ::= SEQUENCE {
              version CMSVersion,
              originatorInfo [0] IMPLICIT OriginatorInfo OPTIONAL,
              recipientInfos RecipientInfos,
              authEncryptedContentInfo EncryptedContentInfo,
              authAttrs [1] IMPLICIT AuthAttributes OPTIONAL,
              mac MessageAuthenticationCode,
              unauthAttrs [2] IMPLICIT UnauthAttributes OPTIONAL }
            </pre>
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.Cms.CmsObjectIdentifiers.id_ri">
            The other Revocation Info arc
            id-ri OBJECT IDENTIFIER ::= { iso(1) identified-organization(3)
                                              dod(6) internet(1) security(5) mechanisms(5) pkix(7) ri(16) }
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.Cms.CompressedData">
            RFC 3274 - CMS Compressed Data.
            <pre>
            CompressedData ::= Sequence {
             version CMSVersion,
             compressionAlgorithm CompressionAlgorithmIdentifier,
             encapContentInfo EncapsulatedContentInfo
            }
            </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.CompressedData.GetInstance(Org.BouncyCastle2.Asn1.Asn1TaggedObject,System.Boolean)">
             return a CompressedData object from a tagged object.
            
             @param ato the tagged object holding the object we want.
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the object held by the
                      tagged object cannot be converted.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.CompressedData.GetInstance(System.Object)">
             return a CompressedData object from the given object.
            
             @param _obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.ContentInfo.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            ContentInfo ::= Sequence {
                     contentType ContentType,
                     content
                     [0] EXPLICIT ANY DEFINED BY contentType OPTIONAL }
            </pre>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.Cms.ContentInfoParser">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            ContentInfo ::= SEQUENCE {
                     contentType ContentType,
                     content
                     [0] EXPLICIT ANY DEFINED BY contentType OPTIONAL }
            </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.Ecc.MQVuserKeyingMaterial.GetInstance(Org.BouncyCastle2.Asn1.Asn1TaggedObject,System.Boolean)">
             return an AuthEnvelopedData object from a tagged object.
            
             @param obj      the tagged object holding the object we want.
             @param isExplicit true if the object is meant to be explicitly
                             tagged false otherwise.
             @throws ArgumentException if the object held by the
                                              tagged object cannot be converted.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.Ecc.MQVuserKeyingMaterial.GetInstance(System.Object)">
             return an AuthEnvelopedData object from the given object.
            
             @param obj the object we want converted.
             @throws ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.Ecc.MQVuserKeyingMaterial.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            MQVuserKeyingMaterial ::= SEQUENCE {
              ephemeralPublicKey OriginatorPublicKey,
              addedukm [0] EXPLICIT UserKeyingMaterial OPTIONAL  }
            </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.EncryptedContentInfo.GetInstance(System.Object)">
             return an EncryptedContentInfo object from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.EncryptedContentInfo.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            EncryptedContentInfo ::= Sequence {
                contentType ContentType,
                contentEncryptionAlgorithm ContentEncryptionAlgorithmIdentifier,
                encryptedContent [0] IMPLICIT EncryptedContent OPTIONAL
            }
            </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.EncryptedData.ToAsn1Object">
            <pre>
                  EncryptedData ::= SEQUENCE {
                                version CMSVersion,
                                encryptedContentInfo EncryptedContentInfo,
                                unprotectedAttrs [1] IMPLICIT UnprotectedAttributes OPTIONAL }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.EnvelopedData.GetInstance(Org.BouncyCastle2.Asn1.Asn1TaggedObject,System.Boolean)">
             return an EnvelopedData object from a tagged object.
            
             @param obj the tagged object holding the object we want.
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the object held by the
                      tagged object cannot be converted.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.EnvelopedData.GetInstance(System.Object)">
             return an EnvelopedData object from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.EnvelopedData.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            EnvelopedData ::= Sequence {
                version CMSVersion,
                originatorInfo [0] IMPLICIT OriginatorInfo OPTIONAL,
                recipientInfos RecipientInfos,
                encryptedContentInfo EncryptedContentInfo,
                unprotectedAttrs [1] IMPLICIT UnprotectedAttributes OPTIONAL
            }
            </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.KekIdentifier.GetInstance(Org.BouncyCastle2.Asn1.Asn1TaggedObject,System.Boolean)">
             return a KekIdentifier object from a tagged object.
            
             @param obj the tagged object holding the object we want.
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the object held by the
                      tagged object cannot be converted.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.KekIdentifier.GetInstance(System.Object)">
             return a KekIdentifier object from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.KekIdentifier.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            KekIdentifier ::= Sequence {
                keyIdentifier OCTET STRING,
                date GeneralizedTime OPTIONAL,
                other OtherKeyAttribute OPTIONAL
            }
            </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.KekRecipientInfo.GetInstance(Org.BouncyCastle2.Asn1.Asn1TaggedObject,System.Boolean)">
             return a KekRecipientInfo object from a tagged object.
            
             @param obj the tagged object holding the object we want.
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the object held by the
                      tagged object cannot be converted.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.KekRecipientInfo.GetInstance(System.Object)">
             return a KekRecipientInfo object from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.KekRecipientInfo.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            KekRecipientInfo ::= Sequence {
                version CMSVersion,  -- always set to 4
                kekID KekIdentifier,
                keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,
                encryptedKey EncryptedKey
            }
            </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.KeyAgreeRecipientIdentifier.GetInstance(Org.BouncyCastle2.Asn1.Asn1TaggedObject,System.Boolean)">
             return an KeyAgreeRecipientIdentifier object from a tagged object.
            
             @param obj the tagged object holding the object we want.
             @param isExplicit true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the object held by the
                      tagged object cannot be converted.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.KeyAgreeRecipientIdentifier.GetInstance(System.Object)">
             return an KeyAgreeRecipientIdentifier object from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.KeyAgreeRecipientIdentifier.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            KeyAgreeRecipientIdentifier ::= CHOICE {
                issuerAndSerialNumber IssuerAndSerialNumber,
                rKeyId [0] IMPLICIT RecipientKeyIdentifier
            }
            </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.KeyAgreeRecipientInfo.GetInstance(Org.BouncyCastle2.Asn1.Asn1TaggedObject,System.Boolean)">
             return a KeyAgreeRecipientInfo object from a tagged object.
            
             @param obj the tagged object holding the object we want.
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the object held by the
                      tagged object cannot be converted.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.KeyAgreeRecipientInfo.GetInstance(System.Object)">
             return a KeyAgreeRecipientInfo object from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.KeyAgreeRecipientInfo.ToAsn1Object">
                     * Produce an object suitable for an Asn1OutputStream.
                     * <pre>
                     * KeyAgreeRecipientInfo ::= Sequence {
                     *     version CMSVersion,  -- always set to 3
                     *     originator [0] EXPLICIT OriginatorIdentifierOrKey,
                     *     ukm [1] EXPLICIT UserKeyingMaterial OPTIONAL,
                     *     keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,
                     *     recipientEncryptedKeys RecipientEncryptedKeys
                     * }
            		 *
            		 * UserKeyingMaterial ::= OCTET STRING
                     * </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.KeyTransRecipientInfo.GetInstance(System.Object)">
             return a KeyTransRecipientInfo object from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.KeyTransRecipientInfo.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            KeyTransRecipientInfo ::= Sequence {
                version CMSVersion,  -- always set to 0 or 2
                rid RecipientIdentifier,
                keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,
                encryptedKey EncryptedKey
            }
            </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.MetaData.ToAsn1Object">
            <pre>
            MetaData ::= SEQUENCE {
              hashProtected        BOOLEAN,
              fileName             UTF8String OPTIONAL,
              mediaType            IA5String OPTIONAL,
              otherMetaData        Attributes OPTIONAL
            }
            </pre>
            @return
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.OriginatorIdentifierOrKey.GetInstance(Org.BouncyCastle2.Asn1.Asn1TaggedObject,System.Boolean)">
             return an OriginatorIdentifierOrKey object from a tagged object.
            
             @param o the tagged object holding the object we want.
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the object held by the
                      tagged object cannot be converted.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.OriginatorIdentifierOrKey.GetInstance(System.Object)">
             return an OriginatorIdentifierOrKey object from the given object.
            
             @param o the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.OriginatorIdentifierOrKey.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <pre>
             OriginatorIdentifierOrKey ::= CHOICE {
                 issuerAndSerialNumber IssuerAndSerialNumber,
                 subjectKeyIdentifier [0] SubjectKeyIdentifier,
                 originatorKey [1] OriginatorPublicKey
             }
            
             SubjectKeyIdentifier ::= OCTET STRING
             </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.OriginatorInfo.GetInstance(Org.BouncyCastle2.Asn1.Asn1TaggedObject,System.Boolean)">
             return an OriginatorInfo object from a tagged object.
            
             @param obj the tagged object holding the object we want.
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the object held by the
                      tagged object cannot be converted.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.OriginatorInfo.GetInstance(System.Object)">
             return an OriginatorInfo object from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.OriginatorInfo.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            OriginatorInfo ::= Sequence {
                certs [0] IMPLICIT CertificateSet OPTIONAL,
                crls [1] IMPLICIT CertificateRevocationLists OPTIONAL
            }
            </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.OriginatorPublicKey.GetInstance(Org.BouncyCastle2.Asn1.Asn1TaggedObject,System.Boolean)">
             return an OriginatorPublicKey object from a tagged object.
            
             @param obj the tagged object holding the object we want.
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the object held by the
                      tagged object cannot be converted.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.OriginatorPublicKey.GetInstance(System.Object)">
             return an OriginatorPublicKey object from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.OriginatorPublicKey.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            OriginatorPublicKey ::= Sequence {
                algorithm AlgorithmIdentifier,
                publicKey BIT STRING
            }
            </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.OtherKeyAttribute.GetInstance(System.Object)">
             return an OtherKeyAttribute object from the given object.
            
             @param o the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.OtherKeyAttribute.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            OtherKeyAttribute ::= Sequence {
                keyAttrId OBJECT IDENTIFIER,
                keyAttr ANY DEFINED BY keyAttrId OPTIONAL
            }
            </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.OtherRecipientInfo.GetInstance(Org.BouncyCastle2.Asn1.Asn1TaggedObject,System.Boolean)">
             return a OtherRecipientInfo object from a tagged object.
            
             @param obj the tagged object holding the object we want.
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the object held by the
                      tagged object cannot be converted.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.OtherRecipientInfo.GetInstance(System.Object)">
             return a OtherRecipientInfo object from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.OtherRecipientInfo.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            OtherRecipientInfo ::= Sequence {
               oriType OBJECT IDENTIFIER,
               oriValue ANY DEFINED BY oriType }
            </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.OtherRevocationInfoFormat.GetInstance(Org.BouncyCastle2.Asn1.Asn1TaggedObject,System.Boolean)">
             return a OtherRevocationInfoFormat object from a tagged object.
            
             @param obj the tagged object holding the object we want.
             @param explicit true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception IllegalArgumentException if the object held by the
                      tagged object cannot be converted.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.OtherRevocationInfoFormat.GetInstance(System.Object)">
             return a OtherRevocationInfoFormat object from the given object.
            
             @param obj the object we want converted.
             @exception IllegalArgumentException if the object cannot be converted.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.OtherRevocationInfoFormat.ToAsn1Object">
            Produce an object suitable for an ASN1OutputStream.
            <pre>
            OtherRevocationInfoFormat ::= SEQUENCE {
                 otherRevInfoFormat OBJECT IDENTIFIER,
                 otherRevInfo ANY DEFINED BY otherRevInfoFormat }
            </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.PasswordRecipientInfo.GetInstance(Org.BouncyCastle2.Asn1.Asn1TaggedObject,System.Boolean)">
             return a PasswordRecipientInfo object from a tagged object.
            
             @param obj the tagged object holding the object we want.
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the object held by the
                      tagged object cannot be converted.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.PasswordRecipientInfo.GetInstance(System.Object)">
             return a PasswordRecipientInfo object from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.PasswordRecipientInfo.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            PasswordRecipientInfo ::= Sequence {
              version CMSVersion,   -- Always set to 0
              keyDerivationAlgorithm [0] KeyDerivationAlgorithmIdentifier
                                        OPTIONAL,
             keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,
             encryptedKey EncryptedKey }
            </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.RecipientEncryptedKey.GetInstance(Org.BouncyCastle2.Asn1.Asn1TaggedObject,System.Boolean)">
             return an RecipientEncryptedKey object from a tagged object.
            
             @param obj the tagged object holding the object we want.
             @param isExplicit true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the object held by the
                      tagged object cannot be converted.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.RecipientEncryptedKey.GetInstance(System.Object)">
             return a RecipientEncryptedKey object from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.RecipientEncryptedKey.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            RecipientEncryptedKey ::= SEQUENCE {
                rid KeyAgreeRecipientIdentifier,
                encryptedKey EncryptedKey
            }
            </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.RecipientIdentifier.GetInstance(System.Object)">
             return a RecipientIdentifier object from the given object.
            
             @param o the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.RecipientIdentifier.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <pre>
             RecipientIdentifier ::= CHOICE {
                 issuerAndSerialNumber IssuerAndSerialNumber,
                 subjectKeyIdentifier [0] SubjectKeyIdentifier
             }
            
             SubjectKeyIdentifier ::= OCTET STRING
             </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.RecipientInfo.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            RecipientInfo ::= CHOICE {
                ktri KeyTransRecipientInfo,
                kari [1] KeyAgreeRecipientInfo,
                kekri [2] KekRecipientInfo,
                pwri [3] PasswordRecipientInfo,
                ori [4] OtherRecipientInfo }
            </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.RecipientKeyIdentifier.GetInstance(Org.BouncyCastle2.Asn1.Asn1TaggedObject,System.Boolean)">
             return a RecipientKeyIdentifier object from a tagged object.
            
             @param _ato the tagged object holding the object we want.
             @param _explicit true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the object held by the
                      tagged object cannot be converted.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.RecipientKeyIdentifier.GetInstance(System.Object)">
             return a RecipientKeyIdentifier object from the given object.
            
             @param _obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.RecipientKeyIdentifier.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <pre>
             RecipientKeyIdentifier ::= Sequence {
                 subjectKeyIdentifier SubjectKeyIdentifier,
                 date GeneralizedTime OPTIONAL,
                 other OtherKeyAttribute OPTIONAL
             }
            
             SubjectKeyIdentifier ::= OCTET STRING
             </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.ScvpReqRes.ToAsn1Object">
            <pre>
               ScvpReqRes ::= SEQUENCE {
               request  [0] EXPLICIT ContentInfo OPTIONAL,
               response     ContentInfo }
            </pre>
            @return  the ASN.1 primitive representation.
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.Cms.SignedData">
            a signed data object.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.SignedData.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            SignedData ::= Sequence {
                version CMSVersion,
                digestAlgorithms DigestAlgorithmIdentifiers,
                encapContentInfo EncapsulatedContentInfo,
                certificates [0] IMPLICIT CertificateSet OPTIONAL,
                crls [1] IMPLICIT CertificateRevocationLists OPTIONAL,
                signerInfos SignerInfos
              }
            </pre>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.Cms.SignedDataParser">
            <pre>
            SignedData ::= SEQUENCE {
                version CMSVersion,
                digestAlgorithms DigestAlgorithmIdentifiers,
                encapContentInfo EncapsulatedContentInfo,
                certificates [0] IMPLICIT CertificateSet OPTIONAL,
                crls [1] IMPLICIT CertificateRevocationLists OPTIONAL,
                signerInfos SignerInfos
              }
            </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.SignerIdentifier.GetInstance(System.Object)">
             return a SignerIdentifier object from the given object.
            
             @param o the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.SignerIdentifier.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <pre>
             SignerIdentifier ::= CHOICE {
                 issuerAndSerialNumber IssuerAndSerialNumber,
                 subjectKeyIdentifier [0] SubjectKeyIdentifier
             }
            
             SubjectKeyIdentifier ::= OCTET STRING
             </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.SignerInfo.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <pre>
              SignerInfo ::= Sequence {
                  version Version,
                  SignerIdentifier sid,
                  digestAlgorithm DigestAlgorithmIdentifier,
                  authenticatedAttributes [0] IMPLICIT Attributes OPTIONAL,
                  digestEncryptionAlgorithm DigestEncryptionAlgorithmIdentifier,
                  encryptedDigest EncryptedDigest,
                  unauthenticatedAttributes [1] IMPLICIT Attributes OPTIONAL
              }
            
              EncryptedDigest ::= OCTET STRING
            
              DigestAlgorithmIdentifier ::= AlgorithmIdentifier
            
              DigestEncryptionAlgorithmIdentifier ::= AlgorithmIdentifier
             </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.Time.#ctor(System.DateTime)">
            creates a time object from a given date - if the date is between 1950
            and 2049 a UTCTime object is Generated, otherwise a GeneralizedTime
            is used.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.Time.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            Time ::= CHOICE {
                        utcTime        UTCTime,
                        generalTime    GeneralizedTime }
            </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.TimeStampAndCrl.ToAsn1Object">
            <pre>
            TimeStampAndCRL ::= SEQUENCE {
                timeStamp   TimeStampToken,          -- according to RFC 3161
                crl         CertificateList OPTIONAL -- according to RFC 5280
             }
            </pre>
            @return
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.TimeStampedData.ToAsn1Object">
            <pre>
            TimeStampedData ::= SEQUENCE {
              version              INTEGER { v1(1) },
              dataUri              IA5String OPTIONAL,
              metaData             MetaData OPTIONAL,
              content              OCTET STRING OPTIONAL,
              temporalEvidence     Evidence
            }
            </pre>
            @return
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Cms.TimeStampTokenEvidence.ToAsn1Object">
            <pre>
            TimeStampTokenEvidence ::=
               SEQUENCE SIZE(1..MAX) OF TimeStampAndCrl
            </pre>
            @return
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Crmf.AttributeTypeAndValue.ToAsn1Object">
            <pre>
            AttributeTypeAndValue ::= SEQUENCE {
                      type         OBJECT IDENTIFIER,
                      value        ANY DEFINED BY type }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Crmf.CertId.ToAsn1Object">
            <pre>
            CertId ::= SEQUENCE {
                            issuer           GeneralName,
                            serialNumber     INTEGER }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Crmf.CertReqMessages.ToAsn1Object">
            <pre>
            CertReqMessages ::= SEQUENCE SIZE (1..MAX) OF CertReqMsg
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Crmf.CertReqMsg.#ctor(Org.BouncyCastle2.Asn1.Crmf.CertRequest,Org.BouncyCastle2.Asn1.Crmf.ProofOfPossession,Org.BouncyCastle2.Asn1.Crmf.AttributeTypeAndValue[])">
            Creates a new CertReqMsg.
            @param certReq CertRequest
            @param popo may be null
            @param regInfo may be null
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Crmf.CertReqMsg.ToAsn1Object">
            <pre>
            CertReqMsg ::= SEQUENCE {
                               certReq   CertRequest,
                               pop       ProofOfPossession  OPTIONAL,
                               -- content depends upon key type
                               regInfo   SEQUENCE SIZE(1..MAX) OF AttributeTypeAndValue OPTIONAL }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Crmf.CertRequest.ToAsn1Object">
            <pre>
            CertRequest ::= SEQUENCE {
                                 certReqId     INTEGER,          -- ID for matching request and reply
                                 certTemplate  CertTemplate,  -- Selected fields of cert to be issued
                                 controls      Controls OPTIONAL }   -- Attributes affecting issuance
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Crmf.CertTemplate.ToAsn1Object">
            <pre>
             CertTemplate ::= SEQUENCE {
                 version      [0] Version               OPTIONAL,
                 serialNumber [1] INTEGER               OPTIONAL,
                 signingAlg   [2] AlgorithmIdentifier   OPTIONAL,
                 issuer       [3] Name                  OPTIONAL,
                 validity     [4] OptionalValidity      OPTIONAL,
                 subject      [5] Name                  OPTIONAL,
                 publicKey    [6] SubjectPublicKeyInfo  OPTIONAL,
                 issuerUID    [7] UniqueIdentifier      OPTIONAL,
                 subjectUID   [8] UniqueIdentifier      OPTIONAL,
                 extensions   [9] Extensions            OPTIONAL }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Crmf.CertTemplateBuilder.SetVersion(System.Int32)">
            Sets the X.509 version. Note: for X509v3, use 2 here. 
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Crmf.CertTemplateBuilder.SetIssuerUID(Org.BouncyCastle2.Asn1.DerBitString)">
            Sets the issuer unique ID (deprecated in X.509v3) 
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Crmf.CertTemplateBuilder.SetSubjectUID(Org.BouncyCastle2.Asn1.DerBitString)">
            Sets the subject unique ID (deprecated in X.509v3) 
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Crmf.CertTemplateBuilder.Build">
            <pre>
             CertTemplate ::= SEQUENCE {
                 version      [0] Version               OPTIONAL,
                 serialNumber [1] INTEGER               OPTIONAL,
                 signingAlg   [2] AlgorithmIdentifier   OPTIONAL,
                 issuer       [3] Name                  OPTIONAL,
                 validity     [4] OptionalValidity      OPTIONAL,
                 subject      [5] Name                  OPTIONAL,
                 publicKey    [6] SubjectPublicKeyInfo  OPTIONAL,
                 issuerUID    [7] UniqueIdentifier      OPTIONAL,
                 subjectUID   [8] UniqueIdentifier      OPTIONAL,
                 extensions   [9] Extensions            OPTIONAL }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Crmf.Controls.ToAsn1Object">
            <pre>
            Controls  ::= SEQUENCE SIZE(1..MAX) OF AttributeTypeAndValue
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Crmf.EncKeyWithID.ToAsn1Object">
            <pre>
            EncKeyWithID ::= SEQUENCE {
                 privateKey           PrivateKeyInfo,
                 identifier CHOICE {
                    string               UTF8String,
                    generalName          GeneralName
                } OPTIONAL
            }
            </pre>
            @return
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Crmf.EncryptedKey.ToAsn1Object">
            <pre>
               EncryptedKey ::= CHOICE {
                   encryptedValue        EncryptedValue, -- deprecated
                   envelopedData     [0] EnvelopedData }
                   -- The encrypted private key MUST be placed in the envelopedData
                   -- encryptedContentInfo encryptedContent OCTET STRING.
            </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Crmf.EncryptedValue.ToAsn1Object">
            <pre>
            EncryptedValue ::= SEQUENCE {
                                intendedAlg   [0] AlgorithmIdentifier  OPTIONAL,
                                -- the intended algorithm for which the value will be used
                                symmAlg       [1] AlgorithmIdentifier  OPTIONAL,
                                -- the symmetric algorithm used to encrypt the value
                                encSymmKey    [2] BIT STRING           OPTIONAL,
                                -- the (encrypted) symmetric key used to encrypt the value
                                keyAlg        [3] AlgorithmIdentifier  OPTIONAL,
                                -- algorithm used to encrypt the symmetric key
                                valueHint     [4] OCTET STRING         OPTIONAL,
                                -- a brief description or identifier of the encValue content
                                -- (may be meaningful only to the sending entity, and used only
                                -- if EncryptedValue might be re-examined by the sending entity
                                -- in the future)
                                encValue       BIT STRING }
                                -- the encrypted value itself
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Crmf.OptionalValidity.ToAsn1Object">
            <pre>
            OptionalValidity ::= SEQUENCE {
                                   notBefore  [0] Time OPTIONAL,
                                   notAfter   [1] Time OPTIONAL } --at least one MUST be present
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Crmf.PkiArchiveOptions.ToAsn1Object">
            <pre>
             PkiArchiveOptions ::= CHOICE {
                 encryptedPrivKey     [0] EncryptedKey,
                 -- the actual value of the private key
                 keyGenParameters     [1] KeyGenParameters,
                 -- parameters which allow the private key to be re-generated
                 archiveRemGenPrivKey [2] BOOLEAN }
                 -- set to TRUE if sender wishes receiver to archive the private
                 -- key of a key pair that the receiver generates in response to
                 -- this request; set to FALSE if no archival is desired.
            </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Crmf.PkiPublicationInfo.ToAsn1Object">
            <pre>
            PkiPublicationInfo ::= SEQUENCE {
                             action     INTEGER {
                                            dontPublish (0),
                                            pleasePublish (1) },
                             pubInfos  SEQUENCE SIZE (1..MAX) OF SinglePubInfo OPTIONAL }
            -- pubInfos MUST NOT be present if action is "dontPublish"
            -- (if action is "pleasePublish" and pubInfos is omitted,
            -- "dontCare" is assumed)
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.Crmf.PKMacValue">
            Password-based MAC value for use with POPOSigningKeyInput.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Crmf.PKMacValue.#ctor(Org.BouncyCastle2.Asn1.Cmp.PbmParameter,Org.BouncyCastle2.Asn1.DerBitString)">
            Creates a new PKMACValue.
            @param params parameters for password-based MAC
            @param value MAC of the DER-encoded SubjectPublicKeyInfo
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Crmf.PKMacValue.#ctor(Org.BouncyCastle2.Asn1.X509.AlgorithmIdentifier,Org.BouncyCastle2.Asn1.DerBitString)">
            Creates a new PKMACValue.
            @param aid CMPObjectIdentifiers.passwordBasedMAC, with PBMParameter
            @param value MAC of the DER-encoded SubjectPublicKeyInfo
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Crmf.PKMacValue.ToAsn1Object">
            <pre>
            PKMACValue ::= SEQUENCE {
                 algId  AlgorithmIdentifier,
                 -- algorithm value shall be PasswordBasedMac 1.2.840.113533.7.66.13
                 -- parameter value is PBMParameter
                 value  BIT STRING }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Crmf.PopoPrivKey.ToAsn1Object">
            <pre>
            PopoPrivKey ::= CHOICE {
                   thisMessage       [0] BIT STRING,         -- Deprecated
                    -- possession is proven in this message (which contains the private
                    -- key itself (encrypted for the CA))
                   subsequentMessage [1] SubsequentMessage,
                    -- possession will be proven in a subsequent message
                   dhMAC             [2] BIT STRING,         -- Deprecated
                   agreeMAC          [3] PKMACValue,
                   encryptedKey      [4] EnvelopedData }
            </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Crmf.PopoSigningKey.#ctor(Org.BouncyCastle2.Asn1.Crmf.PopoSigningKeyInput,Org.BouncyCastle2.Asn1.X509.AlgorithmIdentifier,Org.BouncyCastle2.Asn1.DerBitString)">
            Creates a new Proof of Possession object for a signing key.
            @param poposkIn the PopoSigningKeyInput structure, or null if the
                CertTemplate includes both subject and publicKey values.
            @param aid the AlgorithmIdentifier used to sign the proof of possession.
            @param signature a signature over the DER-encoded value of poposkIn,
                or the DER-encoded value of certReq if poposkIn is null.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Crmf.PopoSigningKey.ToAsn1Object">
            <pre>
            PopoSigningKey ::= SEQUENCE {
                                 poposkInput           [0] PopoSigningKeyInput OPTIONAL,
                                 algorithmIdentifier   AlgorithmIdentifier,
                                 signature             BIT STRING }
             -- The signature (using "algorithmIdentifier") is on the
             -- DER-encoded value of poposkInput.  NOTE: If the CertReqMsg
             -- certReq CertTemplate contains the subject and publicKey values,
             -- then poposkInput MUST be omitted and the signature MUST be
             -- computed on the DER-encoded value of CertReqMsg certReq.  If
             -- the CertReqMsg certReq CertTemplate does not contain the public
             -- key and subject values, then poposkInput MUST be present and
             -- MUST be signed.  This strategy ensures that the public key is
             -- not present in both the poposkInput and CertReqMsg certReq
             -- CertTemplate fields.
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Crmf.PopoSigningKeyInput.#ctor(Org.BouncyCastle2.Asn1.X509.GeneralName,Org.BouncyCastle2.Asn1.X509.SubjectPublicKeyInfo)">
            Creates a new PopoSigningKeyInput with sender name as authInfo. 
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Crmf.PopoSigningKeyInput.#ctor(Org.BouncyCastle2.Asn1.Crmf.PKMacValue,Org.BouncyCastle2.Asn1.X509.SubjectPublicKeyInfo)">
            Creates a new PopoSigningKeyInput using password-based MAC. 
        </member>
        <member name="P:Org.BouncyCastle2.Asn1.Crmf.PopoSigningKeyInput.Sender">
            Returns the sender field, or null if authInfo is publicKeyMac 
        </member>
        <member name="P:Org.BouncyCastle2.Asn1.Crmf.PopoSigningKeyInput.PublicKeyMac">
            Returns the publicKeyMac field, or null if authInfo is sender 
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Crmf.PopoSigningKeyInput.ToAsn1Object">
            <pre>
            PopoSigningKeyInput ::= SEQUENCE {
                   authInfo             CHOICE {
                                            sender              [0] GeneralName,
                                            -- used only if an authenticated identity has been
                                            -- established for the sender (e.g., a DN from a
                                            -- previously-issued and currently-valid certificate
                                            publicKeyMac        PKMacValue },
                                            -- used if no authenticated GeneralName currently exists for
                                            -- the sender; publicKeyMac contains a password-based MAC
                                            -- on the DER-encoded value of publicKey
                   publicKey           SubjectPublicKeyInfo }  -- from CertTemplate
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Crmf.ProofOfPossession.#ctor">
            Creates a ProofOfPossession with type raVerified. 
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Crmf.ProofOfPossession.#ctor(Org.BouncyCastle2.Asn1.Crmf.PopoSigningKey)">
            Creates a ProofOfPossession for a signing key. 
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Crmf.ProofOfPossession.#ctor(System.Int32,Org.BouncyCastle2.Asn1.Crmf.PopoPrivKey)">
            Creates a ProofOfPossession for key encipherment or agreement.
            @param type one of TYPE_KEY_ENCIPHERMENT or TYPE_KEY_AGREEMENT
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Crmf.ProofOfPossession.ToAsn1Object">
            <pre>
            ProofOfPossession ::= CHOICE {
                                      raVerified        [0] NULL,
                                      -- used if the RA has already verified that the requester is in
                                      -- possession of the private key
                                      signature         [1] PopoSigningKey,
                                      keyEncipherment   [2] PopoPrivKey,
                                      keyAgreement      [3] PopoPrivKey }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Crmf.SinglePubInfo.ToAsn1Object">
            <pre>
            SinglePubInfo ::= SEQUENCE {
                   pubMethod    INTEGER {
                      dontCare    (0),
                      x500        (1),
                      web         (2),
                      ldap        (3) },
                  pubLocation  GeneralName OPTIONAL }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.CryptoPro.ECGost3410NamedCurves">
            <summary>
            Table of the available named parameters for GOST 3410-2001 / 2012.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.CryptoPro.ECGost3410NamedCurves.GetName(Org.BouncyCastle2.Asn1.DerObjectIdentifier)">
            return the named curve name represented by the given object identifier.
        </member>
        <member name="P:Org.BouncyCastle2.Asn1.CryptoPro.ECGost3410NamedCurves.Names">
            returns an enumeration containing the name strings for curves
            contained in this structure.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.CryptoPro.Gost28147Parameters.ToAsn1Object">
             <pre>
             Gost28147-89-Parameters ::=
                           SEQUENCE {
                                   iv                   Gost28147-89-IV,
                                   encryptionParamSet   OBJECT IDENTIFIER
                            }
            
               Gost28147-89-IV ::= OCTET STRING (SIZE (8))
             </pre>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.CryptoPro.Gost3410NamedParameters">
            table of the available named parameters for GOST 3410-94.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.CryptoPro.Gost3410NamedParameters.GetByOid(Org.BouncyCastle2.Asn1.DerObjectIdentifier)">
             return the GOST3410ParamSetParameters object for the given OID, null if it
             isn't present.
            
             @param oid an object identifier representing a named parameters, if present.
        </member>
        <member name="P:Org.BouncyCastle2.Asn1.CryptoPro.Gost3410NamedParameters.Names">
            returns an enumeration containing the name strings for parameters
            contained in this structure.
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.DerApplicationSpecific">
            Base class for an application specific object
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.DerApplicationSpecific.#ctor(System.Int32,System.Byte[])">
             Create an application specific object from the passed in data. This will assume
             the data does not represent a constructed object.
            
             @param tagNo the tag number for this object.
             @param contentsOctets the encoding of the object's body.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.DerApplicationSpecific.#ctor(System.Int32,Org.BouncyCastle2.Asn1.Asn1Encodable)">
             Create an application specific object with a tagging of explicit/constructed.
            
             @param tag the tag number for this object.
             @param object the object to be contained.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.DerApplicationSpecific.#ctor(System.Boolean,System.Int32,Org.BouncyCastle2.Asn1.Asn1Encodable)">
             Create an application specific object with the tagging style given by the value of explicit.
            
             @param explicit true if the object is explicitly tagged.
             @param tagNo the tag number for this object.
             @param baseEncodable the object to be contained.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.DerApplicationSpecific.#ctor(System.Int32,Org.BouncyCastle2.Asn1.Asn1EncodableVector)">
             Create an application specific object which is marked as constructed
            
             @param tagNo the tag number for this object.
             @param contentsElements   the objects making up the application specific object.
        </member>
        <member name="P:Org.BouncyCastle2.Asn1.DerApplicationSpecific.TaggedObject">
            DerApplicationSpecific uses an internal Asn1TaggedObject for the
            implementation, and will soon be deprecated in favour of using
            Asn1TaggedObject with a tag class of {@link Asn1Tags#Application}. This method
            lets you get the internal Asn1TaggedObject so that client code can begin the
            migration.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.DerBitString.GetInstance(System.Object)">
             return a Bit string from the passed in object
            
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.DerBitString.GetInstance(Org.BouncyCastle2.Asn1.Asn1TaggedObject,System.Boolean)">
             return a Bit string from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the tagged object cannot
                           be converted.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.DerBitString.#ctor(System.Byte[],System.Int32)">
            @param data the octets making up the bit string.
            @param padBits the number of extra bits at the end of the string.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.DerBitString.GetOctets">
             Return the octets contained in this BIT STRING, checking that this BIT STRING really
             does represent an octet aligned string. Only use this method when the standard you are
             following dictates that the BIT STRING will be octet aligned.
            
             @return a copy of the octet aligned data.
        </member>
        <member name="P:Org.BouncyCastle2.Asn1.DerBitString.IntValue">
            @return the value of the bit string as an int (truncating if necessary)
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.DerBmpString">
            Der BMPString object.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.DerBmpString.GetInstance(System.Object)">
             return a BMP string from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.DerBmpString.GetInstance(Org.BouncyCastle2.Asn1.Asn1TaggedObject,System.Boolean)">
             return a BMP string from a tagged object.
            
             @param taggedObject the tagged object holding the object we want
             @param declaredExplicit true if the object is meant to be explicitly tagged false otherwise.
             @exception ArgumentException if the tagged object cannot be converted.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.DerBmpString.#ctor(System.String)">
            basic constructor
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.DerBoolean.GetInstance(System.Object)">
             return a bool from the passed in object.
            
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.DerBoolean.GetInstance(Org.BouncyCastle2.Asn1.Asn1TaggedObject,System.Boolean)">
             return a Boolean from a tagged object.
            
             @param taggedObject the tagged object holding the object we want
             @param declaredExplicit true if the object is meant to be explicitly tagged false otherwise.
             @exception ArgumentException if the tagged object cannot be converted.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.DerEnumerated.GetInstance(System.Object)">
             return an integer from the passed in object
            
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.DerEnumerated.GetInstance(Org.BouncyCastle2.Asn1.Asn1TaggedObject,System.Boolean)">
             return an Enumerated from a tagged object.
            
             @param taggedObject the tagged object holding the object we want
             @param declaredExplicit true if the object is meant to be explicitly tagged false otherwise.
             @exception ArgumentException if the tagged object cannot be converted.
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.DerExternal">
            Class representing the DER-type External
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.DerExternal.#ctor(Org.BouncyCastle2.Asn1.DerObjectIdentifier,Org.BouncyCastle2.Asn1.DerInteger,Org.BouncyCastle2.Asn1.Asn1ObjectDescriptor,Org.BouncyCastle2.Asn1.DerTaggedObject)">
            Creates a new instance of DerExternal
            See X.690 for more informations about the meaning of these parameters
            @param directReference The direct reference or <code>null</code> if not set.
            @param indirectReference The indirect reference or <code>null</code> if not set.
            @param dataValueDescriptor The data value descriptor or <code>null</code> if not set.
            @param externalData The external data in its encoded form.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.DerExternal.#ctor(Org.BouncyCastle2.Asn1.DerObjectIdentifier,Org.BouncyCastle2.Asn1.DerInteger,Org.BouncyCastle2.Asn1.Asn1ObjectDescriptor,System.Int32,Org.BouncyCastle2.Asn1.Asn1Object)">
            Creates a new instance of DerExternal.
            See X.690 for more informations about the meaning of these parameters
            @param directReference The direct reference or <code>null</code> if not set.
            @param indirectReference The indirect reference or <code>null</code> if not set.
            @param dataValueDescriptor The data value descriptor or <code>null</code> if not set.
            @param encoding The encoding to be used for the external data
            @param externalData The external data
        </member>
        <member name="P:Org.BouncyCastle2.Asn1.DerExternal.Encoding">
            The encoding of the content. Valid values are
            <ul>
            <li><code>0</code> single-ASN1-type</li>
            <li><code>1</code> OCTET STRING</li>
            <li><code>2</code> BIT STRING</li>
            </ul>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.DerGeneralizedTime">
            Generalized time object.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.DerGeneralizedTime.GetInstance(System.Object)">
             return a generalized time from the passed in object
            
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.DerGeneralizedTime.GetInstance(Org.BouncyCastle2.Asn1.Asn1TaggedObject,System.Boolean)">
             return a generalized Time object from a tagged object.
            
             @param taggedObject the tagged object holding the object we want
             @param declaredExplicit true if the object is meant to be explicitly tagged false otherwise.
             @exception ArgumentException if the tagged object cannot be converted.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.DerGeneralizedTime.#ctor(System.String)">
             The correct format for this is YYYYMMDDHHMMSS[.f]Z, or without the Z
             for local time, or Z+-HHMM on the end, for difference between local
             time and UTC time. The fractional second amount f must consist of at
             least one number with trailing zeroes removed.
            
             @param time the time string.
             @exception ArgumentException if string is an illegal format.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.DerGeneralizedTime.#ctor(System.DateTime)">
            base constructor from a local time object
        </member>
        <member name="P:Org.BouncyCastle2.Asn1.DerGeneralizedTime.TimeString">
            Return the time.
            @return The time string as it appeared in the encoded object.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.DerGeneralizedTime.GetTime">
            return the time - always in the form of
             YYYYMMDDhhmmssGMT(+hh:mm|-hh:mm).
            <p>
            Normally in a certificate we would expect "Z" rather than "GMT",
            however adding the "GMT" means we can just use:
            <pre>
                dateF = new SimpleDateFormat("yyyyMMddHHmmssz");
            </pre>
            To read in the time and Get a date which is compatible with our local
            time zone.</p>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.DerGraphicString.GetInstance(System.Object)">
             return a Graphic String from the passed in object
            
             @param obj a DerGraphicString or an object that can be converted into one.
             @exception IllegalArgumentException if the object cannot be converted.
             @return a DerGraphicString instance, or null.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.DerGraphicString.GetInstance(Org.BouncyCastle2.Asn1.Asn1TaggedObject,System.Boolean)">
             return a Graphic String from a tagged object.
            
             @param taggedObject the tagged object holding the object we want
             @param declaredExplicit true if the object is meant to be explicitly tagged false otherwise.
             @exception IllegalArgumentException if the tagged object cannot be converted.
             @return a DerGraphicString instance, or null.
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.DerIA5String">
            IA5String object - this is an Ascii string.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.DerIA5String.GetInstance(System.Object)">
             return an IA5 string from the passed in object
            
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.DerIA5String.GetInstance(Org.BouncyCastle2.Asn1.Asn1TaggedObject,System.Boolean)">
             return an IA5 string from a tagged object.
            
             @param taggedObject the tagged object holding the object we want
             @param declaredExplicit true if the object is meant to be explicitly tagged false otherwise.
             @exception ArgumentException if the tagged object cannot be converted.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.DerIA5String.#ctor(System.String,System.Boolean)">
             Constructor with optional validation.
            
             @param string the base string to wrap.
             @param validate whether or not to check the string.
             @throws ArgumentException if validate is true and the string
             contains characters that should not be in an IA5String.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.DerIA5String.IsIA5String(System.String)">
             return true if the passed in String can be represented without
             loss as an IA5String, false otherwise.
            
             @return true if in printable set, false otherwise.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.DerInteger.GetInstance(System.Object)">
             return an integer from the passed in object
            
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.DerInteger.GetInstance(Org.BouncyCastle2.Asn1.Asn1TaggedObject,System.Boolean)">
             return an Integer from a tagged object.
            
             @param taggedObject the tagged object holding the object we want
             @param declaredExplicit true if the object is meant to be explicitly tagged false otherwise.
             @exception ArgumentException if the tagged object cannot  be converted.
        </member>
        <member name="P:Org.BouncyCastle2.Asn1.DerInteger.PositiveValue">
            in some cases positive values Get crammed into a space,
            that's not quite big enough...
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.DerInteger.IsMalformed(System.Byte[])">
             Apply the correct validation for an INTEGER primitive following the BER rules.
            
             @param bytes The raw encoding of the integer.
             @return true if the (in)put fails this validation.
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.DerNull">
            A Null object.
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.DerNumericString">
            Der NumericString object - this is an ascii string of characters {0,1,2,3,4,5,6,7,8,9, }.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.DerNumericString.GetInstance(System.Object)">
             return a numeric string from the passed in object
            
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.DerNumericString.GetInstance(Org.BouncyCastle2.Asn1.Asn1TaggedObject,System.Boolean)">
             return a numeric string from a tagged object.
            
             @param taggedObject the tagged object holding the object we want
             @param declaredExplicit true if the object is meant to be explicitly tagged false otherwise.
             @exception ArgumentException if the tagged object cannot be converted.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.DerNumericString.#ctor(System.String,System.Boolean)">
             Constructor with optional validation.
            
             @param string the base string to wrap.
             @param validate whether or not to check the string.
             @throws ArgumentException if validate is true and the string
             contains characters that should not be in a NumericString.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.DerNumericString.IsNumericString(System.String)">
             Return true if the string can be represented as a NumericString ('0'..'9', ' ')
            
             @param str string to validate.
             @return true if numeric, fale otherwise.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.DerObjectIdentifier.GetInstance(System.Object)">
             return an OID from the passed in object
            
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.DerObjectIdentifier.On(Org.BouncyCastle2.Asn1.DerObjectIdentifier)">
            Return  true if this oid is an extension of the passed in branch, stem.
            @param stem the arc or branch that is a possible parent.
            @return  true if the branch is on the passed in stem, false otherwise.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.DerOctetString.#ctor(System.Byte[])">
            <param name="contents">The octets making up the octet string.</param>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.DerPrintableString">
            Der PrintableString object.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.DerPrintableString.GetInstance(System.Object)">
             return a printable string from the passed in object.
            
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.DerPrintableString.GetInstance(Org.BouncyCastle2.Asn1.Asn1TaggedObject,System.Boolean)">
             return a printable string from a tagged object.
            
             @param taggedObject the tagged object holding the object we want
             @param declaredExplicit true if the object is meant to be explicitly tagged false otherwise.
             @exception ArgumentException if the tagged object cannot be converted.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.DerPrintableString.#ctor(System.String,System.Boolean)">
             Constructor with optional validation.
            
             @param string the base string to wrap.
             @param validate whether or not to check the string.
             @throws ArgumentException if validate is true and the string
             contains characters that should not be in a PrintableString.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.DerPrintableString.IsPrintableString(System.String)">
             return true if the passed in String can be represented without
             loss as a PrintableString, false otherwise.
            
             @return true if in printable set, false otherwise.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.DerSequence.#ctor">
            create an empty sequence
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.DerSequence.#ctor(Org.BouncyCastle2.Asn1.Asn1Encodable)">
            create a sequence containing one object
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.DerSequence.#ctor(Org.BouncyCastle2.Asn1.Asn1EncodableVector)">
            create a sequence containing a vector of objects.
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.DerSet">
            A Der encoded set object
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.DerSet.#ctor">
            create an empty set
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.DerSet.#ctor(Org.BouncyCastle2.Asn1.Asn1Encodable)">
            @param obj - a single object that makes up the set.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.DerSet.#ctor(Org.BouncyCastle2.Asn1.Asn1EncodableVector)">
            @param v - a vector of objects making up the set.
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.DerT61String">
            Der T61String (also the teletex string) - 8-bit characters
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.DerT61String.GetInstance(System.Object)">
             return a T61 string from the passed in object.
            
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.DerT61String.GetInstance(Org.BouncyCastle2.Asn1.Asn1TaggedObject,System.Boolean)">
             return a T61 string from a tagged object.
            
             @param taggedObject the tagged object holding the object we want
             @param declaredExplicit true if the object is meant to be explicitly tagged false otherwise.
             @exception ArgumentException if the tagged object cannot be converted.
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.DerTaggedObject">
            DER TaggedObject - in ASN.1 notation this is any object preceded by
            a [n] where n is some number - these are assumed to follow the construction
            rules (as with sequences).
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.DerTaggedObject.#ctor(System.Int32)">
            create an implicitly tagged object that contains a zero
            length sequence.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.DerTaggedObject.#ctor(System.Boolean,System.Int32,Org.BouncyCastle2.Asn1.Asn1Encodable)">
            @param isExplicit true if an explicitly tagged object.
            @param tagNo the tag number for this object.
            @param obj the tagged object.
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.DerUniversalString">
            UniversalString object.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.DerUniversalString.GetInstance(System.Object)">
             return a universal string from the passed in object.
            
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.DerUniversalString.GetInstance(Org.BouncyCastle2.Asn1.Asn1TaggedObject,System.Boolean)">
             return a universal string from a tagged object.
            
             @param taggedObject the tagged object holding the object we want
             @param declaredExplicit true if the object is meant to be explicitly tagged false otherwise.
             @exception ArgumentException if the tagged object cannot be converted.
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.DerUtcTime">
            UTC time object.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.DerUtcTime.GetInstance(System.Object)">
             return a UTC Time from the passed in object.
            
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.DerUtcTime.GetInstance(Org.BouncyCastle2.Asn1.Asn1TaggedObject,System.Boolean)">
             return a UTC Time from a tagged object.
            
             @param taggedObject the tagged object holding the object we want
             @param declaredExplicit true if the object is meant to be explicitly tagged false otherwise.
             @exception ArgumentException if the tagged object cannot be converted.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.DerUtcTime.#ctor(System.String)">
            The correct format for this is YYMMDDHHMMSSZ (it used to be that seconds were
            never encoded. When you're creating one of these objects from scratch, that's
            what you want to use, otherwise we'll try to deal with whatever Gets read from
            the input stream... (this is why the input format is different from the GetTime()
            method output).
            <p>
            @param time the time string.</p>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.DerUtcTime.#ctor(System.DateTime)">
            base constructor from a DateTime object
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.DerUtcTime.ToDateTime">
             return the time as a date based on whatever a 2 digit year will return. For
             standardised processing use ToAdjustedDateTime().
            
             @return the resulting date
             @exception ParseException if the date string cannot be parsed.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.DerUtcTime.ToAdjustedDateTime">
             return the time as an adjusted date
             in the range of 1950 - 2049.
            
             @return a date in the range of 1950 to 2049.
             @exception ParseException if the date string cannot be parsed.
        </member>
        <member name="P:Org.BouncyCastle2.Asn1.DerUtcTime.TimeString">
            return the time - always in the form of
             YYMMDDhhmmssGMT(+hh:mm|-hh:mm).
            <p>
            Normally in a certificate we would expect "Z" rather than "GMT",
            however adding the "GMT" means we can just use:
            <pre>
                dateF = new SimpleDateFormat("yyMMddHHmmssz");
            </pre>
            To read in the time and Get a date which is compatible with our local
            time zone.</p>
            <p>
            <b>Note:</b> In some cases, due to the local date processing, this
            may lead to unexpected results. If you want to stick the normal
            convention of 1950 to 2049 use the GetAdjustedTime() method.</p>
        </member>
        <member name="P:Org.BouncyCastle2.Asn1.DerUtcTime.AdjustedTimeString">
            <summary>
            Return a time string as an adjusted date with a 4 digit year.
            This goes in the range of 1950 - 2049.
            </summary>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.DerUtf8String">
            Der UTF8String object.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.DerUtf8String.GetInstance(System.Object)">
             return an UTF8 string from the passed in object.
            
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.DerUtf8String.GetInstance(Org.BouncyCastle2.Asn1.Asn1TaggedObject,System.Boolean)">
             return a UTF8 string from a tagged object.
            
             @param taggedObject the tagged object holding the object we want
             @param declaredExplicit true if the object is meant to be explicitly tagged false otherwise.
             @exception ArgumentException if the tagged object cannot be converted.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.DerVideotexString.GetInstance(System.Object)">
             return a videotex string from the passed in object
            
             @param obj a DERVideotexString or an object that can be converted into one.
             @exception IllegalArgumentException if the object cannot be converted.
             @return a DERVideotexString instance, or null.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.DerVideotexString.GetInstance(Org.BouncyCastle2.Asn1.Asn1TaggedObject,System.Boolean)">
             return a videotex string from a tagged object.
            
             @param taggedObject the tagged object holding the object we want
             @param declaredExplicit true if the object is meant to be explicitly tagged false otherwise.
             @exception IllegalArgumentException if the tagged object cannot be converted.
             @return a DERVideotexString instance, or null.
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.DerVisibleString">
            VisibleString object.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.DerVisibleString.GetInstance(System.Object)">
             return a visible string from the passed in object.
            
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.DerVisibleString.GetInstance(Org.BouncyCastle2.Asn1.Asn1TaggedObject,System.Boolean)">
             return a visible string from a tagged object.
            
             @param taggedObject the tagged object holding the object we want
             @param declaredExplicit true if the object is meant to be explicitly tagged false otherwise.
             @exception ArgumentException if the tagged object cannot be converted.
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.DLBitString">
            <summary>A Definite length BIT STRING</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.DLBitStringParser">
            <summary>Parser for a DL encoded BIT STRING.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.DLSequence.#ctor">
            create an empty sequence
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.DLSequence.#ctor(Org.BouncyCastle2.Asn1.Asn1Encodable)">
            create a sequence containing one object
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.DLSequence.#ctor(Org.BouncyCastle2.Asn1.Asn1EncodableVector)">
            create a sequence containing a vector of objects.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.DLSet.#ctor">
            create an empty set
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.DLSet.#ctor(Org.BouncyCastle2.Asn1.Asn1Encodable)">
            create a set containing one object
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.DLSet.#ctor(Org.BouncyCastle2.Asn1.Asn1EncodableVector)">
            create a set containing a vector of objects.
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.DLTaggedObjectParser">
            Parser for definite-length tagged objects.
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.EdEC.EdECObjectIdentifiers">
            Edwards Elliptic Curve Object Identifiers (RFC 8410)
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.Esf.CertificateValues">
            <remarks>
            RFC 3126: 4.3.1 Certificate Values Attribute Definition
            <code>
            CertificateValues ::= SEQUENCE OF Certificate
            </code>
            </remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Esf.CommitmentTypeIndication.ToAsn1Object">
            <pre>
            CommitmentTypeIndication ::= SEQUENCE {
                 commitmentTypeId   CommitmentTypeIdentifier,
                 commitmentTypeQualifier   SEQUENCE SIZE (1..MAX) OF
                         CommitmentTypeQualifier OPTIONAL }
            </pre>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.Esf.CommitmentTypeQualifier">
             Commitment type qualifiers, used in the Commitment-Type-Indication attribute (RFC3126).
            
             <pre>
               CommitmentTypeQualifier ::= SEQUENCE {
                   commitmentTypeIdentifier  CommitmentTypeIdentifier,
                   qualifier          ANY DEFINED BY commitmentTypeIdentifier OPTIONAL }
             </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Esf.CommitmentTypeQualifier.#ctor(Org.BouncyCastle2.Asn1.DerObjectIdentifier)">
             Creates a new <code>CommitmentTypeQualifier</code> instance.
            
             @param commitmentTypeIdentifier a <code>CommitmentTypeIdentifier</code> value
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Esf.CommitmentTypeQualifier.#ctor(Org.BouncyCastle2.Asn1.DerObjectIdentifier,Org.BouncyCastle2.Asn1.Asn1Encodable)">
             Creates a new <code>CommitmentTypeQualifier</code> instance.
            
             @param commitmentTypeIdentifier a <code>CommitmentTypeIdentifier</code> value
             @param qualifier the qualifier, defined by the above field.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Esf.CommitmentTypeQualifier.#ctor(Org.BouncyCastle2.Asn1.Asn1Sequence)">
             Creates a new <code>CommitmentTypeQualifier</code> instance.
            
             @param as <code>CommitmentTypeQualifier</code> structure
             encoded as an Asn1Sequence.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Esf.CommitmentTypeQualifier.ToAsn1Object">
             Returns a DER-encodable representation of this instance.
            
             @return a <code>Asn1Object</code> value
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.Esf.CompleteCertificateRefs">
            <remarks>
            RFC 3126: 4.2.1 Complete Certificate Refs Attribute Definition
            <code>
            CompleteCertificateRefs ::= SEQUENCE OF OtherCertID
            </code>
            </remarks>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.Esf.CompleteRevocationRefs">
            <remarks>
            RFC 3126: 4.2.2 Complete Revocation Refs Attribute Definition
            <code>
            CompleteRevocationRefs ::= SEQUENCE OF CrlOcspRef
            </code>
            </remarks>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.Esf.CrlIdentifier">
            <remarks>
            RFC 3126: 4.2.2 Complete Revocation Refs Attribute Definition
            <code>
            CrlIdentifier ::= SEQUENCE 
            {
            	crlissuer		Name,
            	crlIssuedTime	UTCTime,
            	crlNumber		INTEGER OPTIONAL
            }
            </code>
            </remarks>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.Esf.CrlListID">
            <remarks>
            RFC 3126: 4.2.2 Complete Revocation Refs Attribute Definition
            <code>
            CRLListID ::= SEQUENCE 
            {
            	crls	SEQUENCE OF CrlValidatedID
            }
            </code>
            </remarks>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.Esf.CrlOcspRef">
            <remarks>
            RFC 3126: 4.2.2 Complete Revocation Refs Attribute Definition
            <code>
            CrlOcspRef ::= SEQUENCE {
            	crlids		[0] CRLListID		OPTIONAL,
            	ocspids		[1] OcspListID		OPTIONAL,
            	otherRev	[2] OtherRevRefs	OPTIONAL
            }
            </code>
            </remarks>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.Esf.CrlValidatedID">
            <remarks>
            RFC 3126: 4.2.2 Complete Revocation Refs Attribute Definition
            <code>
            CrlValidatedID ::= SEQUENCE {
            	crlHash			OtherHash,
            	crlIdentifier	CrlIdentifier OPTIONAL}
            </code>
            </remarks>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.Esf.OcspIdentifier">
            <remarks>
            RFC 3126: 4.2.2 Complete Revocation Refs Attribute Definition
            <code>
            OcspIdentifier ::= SEQUENCE {
            	ocspResponderID		ResponderID,
            		-- As in OCSP response data
            	producedAt			GeneralizedTime
            		-- As in OCSP response data
            }
            </code>
            </remarks>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.Esf.OcspListID">
            <remarks>
            RFC 3126: 4.2.2 Complete Revocation Refs Attribute Definition
            <code>
            OcspListID ::=  SEQUENCE {
            	ocspResponses	SEQUENCE OF OcspResponsesID
            }
            </code>
            </remarks>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.Esf.OcspResponsesID">
            <remarks>
            RFC 3126: 4.2.2 Complete Revocation Refs Attribute Definition
            <code>
            OcspResponsesID ::= SEQUENCE {
            	ocspIdentifier	OcspIdentifier,
            	ocspRepHash		OtherHash OPTIONAL
            }
            </code>
            </remarks>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.Esf.OtherCertID">
            <remarks>
            <code>
            OtherCertID ::= SEQUENCE {
            	otherCertHash	OtherHash,
            	issuerSerial	IssuerSerial OPTIONAL
            }
            </code>
            </remarks>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.Esf.OtherHash">
            <remarks>
            <code>
            OtherHash ::= CHOICE {
            	sha1Hash	OtherHashValue, -- This contains a SHA-1 hash
            	otherHash	OtherHashAlgAndValue
            }
            
            OtherHashValue ::= OCTET STRING
            </code>
            </remarks>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.Esf.OtherHashAlgAndValue">
            <summary>
            Summary description for OtherHashAlgAndValue.
            </summary>
            <remarks>
            <code>
            OtherHashAlgAndValue ::= SEQUENCE {
            	hashAlgorithm	AlgorithmIdentifier,
            	hashValue		OtherHashValue
            }
            
            OtherHashValue ::= OCTET STRING
            </code>
            </remarks>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.Esf.OtherRevRefs">
             <remarks>
             RFC 3126: 4.2.2 Complete Revocation Refs Attribute Definition
             <code>
             OtherRevRefs ::= SEQUENCE 
             {
            		otherRevRefType      OtherRevRefType,
            		otherRevRefs         ANY DEFINED BY otherRevRefType
             }
            
             OtherRevRefType ::= OBJECT IDENTIFIER
             </code>
             </remarks>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.Esf.OtherRevVals">
             <remarks>
             RFC 3126: 4.3.2 Revocation Values Attribute Definition
             <code>
             OtherRevVals ::= SEQUENCE 
             {
            		otherRevValType      OtherRevValType,
            		otherRevVals         ANY DEFINED BY otherRevValType
             }
            
             OtherRevValType ::= OBJECT IDENTIFIER
             </code>
             </remarks>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.Esf.OtherSigningCertificate">
            <remarks>
            <code>
            OtherSigningCertificate ::= SEQUENCE {
            	certs		SEQUENCE OF OtherCertID,
            	policies	SEQUENCE OF PolicyInformation OPTIONAL
            }
            </code>
            </remarks>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.Esf.RevocationValues">
            <remarks>
            RFC 5126: 6.3.4.  revocation-values Attribute Definition
            <code>
            RevocationValues ::=  SEQUENCE {
            	crlVals			[0] SEQUENCE OF CertificateList     OPTIONAL,
            	ocspVals		[1] SEQUENCE OF BasicOCSPResponse   OPTIONAL,
            	otherRevVals	[2] OtherRevVals OPTIONAL
            }
            </code>
            </remarks>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.Esf.SignaturePolicyId">
            <remarks>
            <code>
            SignaturePolicyId ::= SEQUENCE {
            	sigPolicyIdentifier		SigPolicyId,
            	sigPolicyHash			SigPolicyHash,
            	sigPolicyQualifiers		SEQUENCE SIZE (1..MAX) OF SigPolicyQualifierInfo OPTIONAL
            }
            
            SigPolicyId ::= OBJECT IDENTIFIER
            
            SigPolicyHash ::= OtherHashAlgAndValue
            </code>
            </remarks>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.Esf.SignaturePolicyIdentifier">
            <remarks>
            <code>
            SignaturePolicyIdentifier ::= CHOICE {
            	SignaturePolicyId		SignaturePolicyId,
            	SignaturePolicyImplied	SignaturePolicyImplied
            }
            
            SignaturePolicyImplied ::= NULL
            </code>
            </remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Esf.SignerAttribute.ToAsn1Object">
            
             <pre>
              SignerAttribute ::= SEQUENCE OF CHOICE {
                  claimedAttributes   [0] ClaimedAttributes,
                  certifiedAttributes [1] CertifiedAttributes }
            
              ClaimedAttributes ::= SEQUENCE OF Attribute
              CertifiedAttributes ::= AttributeCertificate -- as defined in RFC 3281: see clause 4.1.
             </pre>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.Esf.SignerLocation">
             Signer-Location attribute (RFC3126).
            
             <pre>
               SignerLocation ::= SEQUENCE {
                   countryName        [0] DirectoryString OPTIONAL,
                   localityName       [1] DirectoryString OPTIONAL,
                   postalAddress      [2] PostalAddress OPTIONAL }
            
               PostalAddress ::= SEQUENCE SIZE(1..6) OF DirectoryString
             </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Esf.SignerLocation.ToAsn1Object">
             <pre>
               SignerLocation ::= SEQUENCE {
                   countryName        [0] DirectoryString OPTIONAL,
                   localityName       [1] DirectoryString OPTIONAL,
                   postalAddress      [2] PostalAddress OPTIONAL }
            
               PostalAddress ::= SEQUENCE SIZE(1..6) OF DirectoryString
            
               DirectoryString ::= CHOICE {
                     teletexString           TeletexString (SIZE (1..MAX)),
                     printableString         PrintableString (SIZE (1..MAX)),
                     universalString         UniversalString (SIZE (1..MAX)),
                     utf8String              UTF8String (SIZE (1.. MAX)),
                     bmpString               BMPString (SIZE (1..MAX)) }
             </pre>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.Esf.SigPolicyQualifierInfo">
            <remarks>
            <code>
            SigPolicyQualifierInfo ::= SEQUENCE {
            	sigPolicyQualifierId  SigPolicyQualifierId,
            	sigQualifier          ANY DEFINED BY sigPolicyQualifierId
            }
            
            SigPolicyQualifierId ::= OBJECT IDENTIFIER
            </code>
            </remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Ess.ContentHints.#ctor(Org.BouncyCastle2.Asn1.Asn1Sequence)">
            constructor
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Ess.ContentHints.ToAsn1Object">
            <pre>
            ContentHints ::= SEQUENCE {
              contentDescription UTF8String (SIZE (1..MAX)) OPTIONAL,
              contentType ContentType }
            </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Ess.ContentIdentifier.#ctor(Org.BouncyCastle2.Asn1.Asn1OctetString)">
            Create from OCTET STRING whose octets represent the identifier.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Ess.ContentIdentifier.#ctor(System.Byte[])">
            Create from byte array representing the identifier.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Ess.ContentIdentifier.ToAsn1Object">
            The definition of ContentIdentifier is
            <pre>
            ContentIdentifier ::=  OCTET STRING
            </pre>
            id-aa-contentIdentifier OBJECT IDENTIFIER ::= { iso(1)
             member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs9(9)
             smime(16) id-aa(2) 7 }
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Ess.EssCertID.#ctor(Org.BouncyCastle2.Asn1.Asn1Sequence)">
            constructor
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Ess.EssCertID.ToAsn1Object">
            <pre>
            EssCertID ::= SEQUENCE {
                certHash Hash,
                issuerSerial IssuerSerial OPTIONAL }
            </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Ess.EssCertIDv2.ToAsn1Object">
             <pre>
             EssCertIDv2 ::=  SEQUENCE {
                 hashAlgorithm     AlgorithmIdentifier
                          DEFAULT {algorithm id-sha256},
                 certHash          Hash,
                 issuerSerial      IssuerSerial OPTIONAL
             }
            
             Hash ::= OCTET STRING
            
             IssuerSerial ::= SEQUENCE {
                 issuer         GeneralNames,
                 serialNumber   CertificateSerialNumber
             }
             </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Ess.OtherCertID.#ctor(Org.BouncyCastle2.Asn1.Asn1Sequence)">
            constructor
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Ess.OtherCertID.ToAsn1Object">
             <pre>
             OtherCertID ::= SEQUENCE {
                 otherCertHash    OtherHash,
                 issuerSerial     IssuerSerial OPTIONAL }
            
             OtherHash ::= CHOICE {
                 sha1Hash     OCTET STRING,
                 otherHash    OtherHashAlgAndValue }
            
             OtherHashAlgAndValue ::= SEQUENCE {
                 hashAlgorithm    AlgorithmIdentifier,
                 hashValue        OCTET STRING }
            
             </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Ess.OtherSigningCertificate.#ctor(Org.BouncyCastle2.Asn1.Asn1Sequence)">
            constructors
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Ess.OtherSigningCertificate.ToAsn1Object">
            The definition of OtherSigningCertificate is
            <pre>
            OtherSigningCertificate ::=  SEQUENCE {
                 certs        SEQUENCE OF OtherCertID,
                 policies     SEQUENCE OF PolicyInformation OPTIONAL
            }
            </pre>
            id-aa-ets-otherSigCert OBJECT IDENTIFIER ::= { iso(1)
             member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs9(9)
             smime(16) id-aa(2) 19 }
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Ess.SigningCertificate.#ctor(Org.BouncyCastle2.Asn1.Asn1Sequence)">
            constructors
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Ess.SigningCertificate.ToAsn1Object">
            The definition of SigningCertificate is
            <pre>
            SigningCertificate ::=  SEQUENCE {
                 certs        SEQUENCE OF EssCertID,
                 policies     SEQUENCE OF PolicyInformation OPTIONAL
            }
            </pre>
            id-aa-signingCertificate OBJECT IDENTIFIER ::= { iso(1)
             member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs9(9)
             smime(16) id-aa(2) 12 }
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Ess.SigningCertificateV2.ToAsn1Object">
            The definition of SigningCertificateV2 is
            <pre>
            SigningCertificateV2 ::=  SEQUENCE {
                 certs        SEQUENCE OF EssCertIDv2,
                 policies     SEQUENCE OF PolicyInformation OPTIONAL
            }
            </pre>
            id-aa-signingCertificateV2 OBJECT IDENTIFIER ::= { iso(1)
               member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs9(9)
               smime(16) id-aa(2) 47 }
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.GM.GMNamedCurves.GetByOid(Org.BouncyCastle2.Asn1.DerObjectIdentifier)">
             return the X9ECParameters object for the named curve represented by
             the passed in object identifier. Null if the curve isn't present.
            
             @param oid an object identifier representing a named curve, if present.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.GM.GMNamedCurves.GetOid(System.String)">
             return the object identifier signified by the passed in name. Null
             if there is no object identifier associated with name.
            
             @return the object identifier associated with name, if present.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.GM.GMNamedCurves.GetName(Org.BouncyCastle2.Asn1.DerObjectIdentifier)">
            return the named curve name represented by the given object identifier.
        </member>
        <member name="P:Org.BouncyCastle2.Asn1.GM.GMNamedCurves.Names">
            returns an enumeration containing the name strings for curves
            contained in this structure.
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.Gnu.GnuObjectIdentifiers.EllipticCurve">
            1.3.6.1.4.1.11591.15 - ellipticCurve 
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.IAsn1Choice">
            Marker interface for CHOICE objects - if you implement this in a roll-your-own
            object, any attempt to tag the object implicitly will convert the tag to an
            explicit one as the encoding rules require.
            <p>
            If you use this interface your class should also implement the getInstance
            pattern which takes a tag object and the tagging mode used. 
            </p>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.IAsn1String">
            basic interface for Der string objects.
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.Icao.CscaMasterList">
             The CscaMasterList object. This object can be wrapped in a
             CMSSignedData to be published in LDAP.
            
             <pre>
             CscaMasterList ::= SEQUENCE {
               version                CscaMasterListVersion,
               certList               SET OF Certificate }
               
             CscaMasterListVersion :: INTEGER {v0(0)}
             </pre>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.Icao.DataGroupHash">
             The DataGroupHash object.
             <pre>
             DataGroupHash  ::=  SEQUENCE {
                  dataGroupNumber         DataGroupNumber,
                  dataGroupHashValue     OCTET STRING }
            
             DataGroupNumber ::= INTEGER {
                     dataGroup1    (1),
                     dataGroup1    (2),
                     dataGroup1    (3),
                     dataGroup1    (4),
                     dataGroup1    (5),
                     dataGroup1    (6),
                     dataGroup1    (7),
                     dataGroup1    (8),
                     dataGroup1    (9),
                     dataGroup1    (10),
                     dataGroup1    (11),
                     dataGroup1    (12),
                     dataGroup1    (13),
                     dataGroup1    (14),
                     dataGroup1    (15),
                     dataGroup1    (16) }
            
             </pre>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.Icao.LdsSecurityObject">
             The LDSSecurityObject object (V1.8).
             <pre>
             LDSSecurityObject ::= SEQUENCE {
               version                LDSSecurityObjectVersion,
               hashAlgorithm          DigestAlgorithmIdentifier,
               dataGroupHashValues    SEQUENCE SIZE (2..ub-DataGroups) OF DataHashGroup,
               ldsVersionInfo         LDSVersionInfo OPTIONAL
                 -- if present, version MUST be v1 }
            
             DigestAlgorithmIdentifier ::= AlgorithmIdentifier,
            
             LDSSecurityObjectVersion :: INTEGER {V0(0)}
             </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Icao.LdsVersionInfo.ToAsn1Object">
            <pre>
            LDSVersionInfo ::= SEQUENCE {
               ldsVersion PRINTABLE STRING
               unicodeVersion PRINTABLE STRING
             }
            </pre>
            @return
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttCPAccredited">
            The id-isismtt-cp-accredited OID indicates that the certificate is a
            qualified certificate according to Directive 1999/93/EC of the European
            Parliament and of the Council of 13 December 1999 on a Community
            Framework for Electronic Signatures, which additionally conforms the
            special requirements of the SigG and has been issued by an accredited CA.
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATDateOfCertGen">
             Certificate extensionDate of certificate generation
             
             <pre>
            		DateOfCertGenSyntax ::= GeneralizedTime
             </pre>
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATProcuration">
            Attribute to indicate that the certificate holder may sign in the name of
            a third person. May also be used as extension in a certificate.
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATAdmission">
            Attribute to indicate admissions to certain professions. May be used as
            attribute in attribute certificate or as extension in a certificate
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATMonetaryLimit">
            Monetary limit for transactions. The QcEuMonetaryLimit QC statement MUST
            be used in new certificates in place of the extension/attribute
            MonetaryLimit since January 1, 2004. For the sake of backward
            compatibility with certificates already in use, SigG conforming
            components MUST support MonetaryLimit (as well as QcEuLimitValue).
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATDeclarationOfMajority">
            A declaration of majority. May be used as attribute in attribute
            certificate or as extension in a certificate
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATIccsn">
             
             Serial number of the smart card containing the corresponding private key
             
             <pre>
            		ICCSNSyntax ::= OCTET STRING (SIZE(8..20))
             </pre>
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATPKReference">
             
             Reference for a file of a smartcard that stores the public key of this
             certificate and that is used as �security anchor�.
             
             <pre>
            		PKReferenceSyntax ::= OCTET STRING (SIZE(20))
             </pre>
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATRestriction">
             Some other restriction regarding the usage of this certificate. May be
             used as attribute in attribute certificate or as extension in a
             certificate.
             
             <pre>
            		RestrictionSyntax ::= DirectoryString (SIZE(1..1024))
             </pre>
             
             @see Org.BouncyCastle2.Asn1.IsisMtt.X509.Restriction
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATRetrieveIfAllowed">
             
             (Single)Request extension: Clients may include this extension in a
             (single) Request to request the responder to send the certificate in the
             response message along with the status information. Besides the LDAP
             service, this extension provides another mechanism for the distribution
             of certificates, which MAY optionally be provided by certificate
             repositories.
             
             <pre>
            		RetrieveIfAllowed ::= BOOLEAN
             </pre>
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATRequestedCertificate">
            SingleOCSPResponse extension: The certificate requested by the client by
            inserting the RetrieveIfAllowed extension in the request, will be
            returned in this extension.
            
            @see Org.BouncyCastle2.Asn1.IsisMtt.Ocsp.RequestedCertificate
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATNamingAuthorities">
            Base ObjectIdentifier for naming authorities
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATCertInDirSince">
             SingleOCSPResponse extension: Date, when certificate has been published
             in the directory and status information has become available. Currently,
             accrediting authorities enforce that SigG-conforming OCSP servers include
             this extension in the responses.
             
             <pre>
            		CertInDirSince ::= GeneralizedTime
             </pre>
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATCertHash">
             Hash of a certificate in OCSP.
            
             @see Org.BouncyCastle2.Asn1.IsisMtt.Ocsp.CertHash
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATNameAtBirth">
             <pre>
            		NameAtBirth ::= DirectoryString(SIZE(1..64)
             </pre>
             
             Used in
             {@link Org.BouncyCastle2.Asn1.X509.SubjectDirectoryAttributes SubjectDirectoryAttributes}
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATAdditionalInformation">
            Some other information of non-restrictive nature regarding the usage of
            this certificate. May be used as attribute in atribute certificate or as
            extension in a certificate.
            
            <pre>
                          AdditionalInformationSyntax ::= DirectoryString (SIZE(1..2048))
            </pre>
            
            @see Org.BouncyCastle2.Asn1.IsisMtt.X509.AdditionalInformationSyntax
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATLiabilityLimitationFlag">
             Indicates that an attribute certificate exists, which limits the
             usability of this public key certificate. Whenever verifying a signature
             with the help of this certificate, the content of the corresponding
             attribute certificate should be concerned. This extension MUST be
             included in a PKC, if a corresponding attribute certificate (having the
             PKC as base certificate) contains some attribute that restricts the
             usability of the PKC too. Attribute certificates with restricting content
             MUST always be included in the signed document.
             
             <pre>
            		LiabilityLimitationFlagSyntax ::= BOOLEAN
             </pre>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.IsisMtt.Ocsp.CertHash">
            ISIS-MTT PROFILE: The responder may include this extension in a response to
            send the hash of the requested certificate to the responder. This hash is
            cryptographically bound to the certificate and serves as evidence that the
            certificate is known to the responder (i.e. it has been issued and is present
            in the directory). Hence, this extension is a means to provide a positive
            statement of availability as described in T8.[8]. As explained in T13.[1],
            clients may rely on this information to be able to validate signatures after
            the expiry of the corresponding certificate. Hence, clients MUST support this
            extension. If a positive statement of availability is to be delivered, this
            extension syntax and OID MUST be used.
            <p/>
            <p/>
            <pre>
                CertHash ::= SEQUENCE {
                  hashAlgorithm AlgorithmIdentifier,
                  certificateHash OCTET STRING
                }
            </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.IsisMtt.Ocsp.CertHash.#ctor(Org.BouncyCastle2.Asn1.Asn1Sequence)">
             Constructor from Asn1Sequence.
             <p/>
             The sequence is of type CertHash:
             <p/>
             <pre>
                 CertHash ::= SEQUENCE {
                   hashAlgorithm AlgorithmIdentifier,
                   certificateHash OCTET STRING
                 }
             </pre>
            
             @param seq The ASN.1 sequence.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.IsisMtt.Ocsp.CertHash.#ctor(Org.BouncyCastle2.Asn1.X509.AlgorithmIdentifier,System.Byte[])">
             Constructor from a given details.
            
             @param hashAlgorithm   The hash algorithm identifier.
             @param certificateHash The hash of the whole DER encoding of the certificate.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.IsisMtt.Ocsp.CertHash.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <p/>
             Returns:
             <p/>
             <pre>
                 CertHash ::= SEQUENCE {
                   hashAlgorithm AlgorithmIdentifier,
                   certificateHash OCTET STRING
                 }
             </pre>
            
             @return an Asn1Object
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.IsisMtt.Ocsp.RequestedCertificate">
            ISIS-MTT-Optional: The certificate requested by the client by inserting the
            RetrieveIfAllowed extension in the request, will be returned in this
            extension.
            <p/>
            ISIS-MTT-SigG: The signature act allows publishing certificates only then,
            when the certificate owner gives his isExplicit permission. Accordingly, there
            may be �nondownloadable� certificates, about which the responder must provide
            status information, but MUST NOT include them in the response. Clients may
            get therefore the following three kind of answers on a single request
            including the RetrieveIfAllowed extension:
            <ul>
            <li> a) the responder supports the extension and is allowed to publish the
            certificate: RequestedCertificate returned including the requested
            certificate</li>
            <li>b) the responder supports the extension but is NOT allowed to publish
            the certificate: RequestedCertificate returned including an empty OCTET
            STRING</li>
            <li>c) the responder does not support the extension: RequestedCertificate is
            not included in the response</li>
            </ul>
            Clients requesting RetrieveIfAllowed MUST be able to handle these cases. If
            any of the OCTET STRING options is used, it MUST contain the DER encoding of
            the requested certificate.
            <p/>
            <pre>
                       RequestedCertificate ::= CHOICE {
                         Certificate Certificate,
                         publicKeyCertificate [0] EXPLICIT OCTET STRING,
                         attributeCertificate [1] EXPLICIT OCTET STRING
                       }
            </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.IsisMtt.Ocsp.RequestedCertificate.#ctor(Org.BouncyCastle2.Asn1.X509.X509CertificateStructure)">
             Constructor from a given details.
             <p/>
             Only one parameter can be given. All other must be <code>null</code>.
            
             @param certificate Given as Certificate
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.IsisMtt.Ocsp.RequestedCertificate.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <p/>
             Returns:
             <p/>
             <pre>
                        RequestedCertificate ::= CHOICE {
                          Certificate Certificate,
                          publicKeyCertificate [0] EXPLICIT OCTET STRING,
                          attributeCertificate [1] EXPLICIT OCTET STRING
                        }
             </pre>
            
             @return an Asn1Object
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.IsisMtt.X509.AdditionalInformationSyntax">
            Some other information of non-restrictive nature regarding the usage of this
            certificate.
            
            <pre>
               AdditionalInformationSyntax ::= DirectoryString (SIZE(1..2048))
            </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.IsisMtt.X509.AdditionalInformationSyntax.#ctor(System.String)">
             Constructor from a given details.
            
             @param information The describtion of the information.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.IsisMtt.X509.AdditionalInformationSyntax.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <p/>
             Returns:
             <p/>
             <pre>
               AdditionalInformationSyntax ::= DirectoryString (SIZE(1..2048))
             </pre>
            
             @return an Asn1Object
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.IsisMtt.X509.Admissions">
             An Admissions structure.
             <p/>
             <pre>
                        Admissions ::= SEQUENCE
                        {
                          admissionAuthority [0] EXPLICIT GeneralName OPTIONAL
                          namingAuthority [1] EXPLICIT NamingAuthority OPTIONAL
                          professionInfos SEQUENCE OF ProfessionInfo
                        }
             <p/>
             </pre>
            
             @see Org.BouncyCastle2.Asn1.IsisMtt.X509.AdmissionSyntax
             @see Org.BouncyCastle2.Asn1.IsisMtt.X509.ProfessionInfo
             @see Org.BouncyCastle2.Asn1.IsisMtt.X509.NamingAuthority
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.IsisMtt.X509.Admissions.#ctor(Org.BouncyCastle2.Asn1.Asn1Sequence)">
             Constructor from Asn1Sequence.
             <p/>
             The sequence is of type ProcurationSyntax:
             <p/>
             <pre>
                        Admissions ::= SEQUENCE
                        {
                          admissionAuthority [0] EXPLICIT GeneralName OPTIONAL
                          namingAuthority [1] EXPLICIT NamingAuthority OPTIONAL
                          professionInfos SEQUENCE OF ProfessionInfo
                        }
             </pre>
            
             @param seq The ASN.1 sequence.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.IsisMtt.X509.Admissions.#ctor(Org.BouncyCastle2.Asn1.X509.GeneralName,Org.BouncyCastle2.Asn1.IsisMtt.X509.NamingAuthority,Org.BouncyCastle2.Asn1.IsisMtt.X509.ProfessionInfo[])">
             Constructor from a given details.
             <p/>
             Parameter <code>professionInfos</code> is mandatory.
            
             @param admissionAuthority The admission authority.
             @param namingAuthority    The naming authority.
             @param professionInfos    The profession infos.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.IsisMtt.X509.Admissions.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <p/>
             Returns:
             <p/>
             <pre>
                   Admissions ::= SEQUENCE
                   {
                     admissionAuthority [0] EXPLICIT GeneralName OPTIONAL
                     namingAuthority [1] EXPLICIT NamingAuthority OPTIONAL
                     professionInfos SEQUENCE OF ProfessionInfo
                   }
             <p/>
             </pre>
            
             @return an Asn1Object
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.IsisMtt.X509.AdmissionSyntax">
             Attribute to indicate admissions to certain professions.
             <p/>
             <pre>
                 AdmissionSyntax ::= SEQUENCE
                 {
                   admissionAuthority GeneralName OPTIONAL,
                   contentsOfAdmissions SEQUENCE OF Admissions
                 }
             <p/>
                 Admissions ::= SEQUENCE
                 {
                   admissionAuthority [0] EXPLICIT GeneralName OPTIONAL
                   namingAuthority [1] EXPLICIT NamingAuthority OPTIONAL
                   professionInfos SEQUENCE OF ProfessionInfo
                 }
             <p/>
                 NamingAuthority ::= SEQUENCE
                 {
                   namingAuthorityId OBJECT IDENTIFIER OPTIONAL,
                   namingAuthorityUrl IA5String OPTIONAL,
                   namingAuthorityText DirectoryString(SIZE(1..128)) OPTIONAL
                 }
             <p/>
                 ProfessionInfo ::= SEQUENCE
                 {
                   namingAuthority [0] EXPLICIT NamingAuthority OPTIONAL,
                   professionItems SEQUENCE OF DirectoryString (SIZE(1..128)),
                   professionOIDs SEQUENCE OF OBJECT IDENTIFIER OPTIONAL,
                   registrationNumber PrintableString(SIZE(1..128)) OPTIONAL,
                   addProfessionInfo OCTET STRING OPTIONAL
                 }
             </pre>
             <p/>
             <p/>
             ISIS-MTT PROFILE: The relatively complex structure of AdmissionSyntax
             supports the following concepts and requirements:
             <ul>
             <li> External institutions (e.g. professional associations, chambers, unions,
             administrative bodies, companies, etc.), which are responsible for granting
             and verifying professional admissions, are indicated by means of the data
             field admissionAuthority. An admission authority is indicated by a
             GeneralName object. Here an X.501 directory name (distinguished name) can be
             indicated in the field directoryName, a URL address can be indicated in the
             field uniformResourceIdentifier, and an object identifier can be indicated in
             the field registeredId.</li>
             <li> The names of authorities which are responsible for the administration of
             title registers are indicated in the data field namingAuthority. The name of
             the authority can be identified by an object identifier in the field
             namingAuthorityId, by means of a text string in the field
             namingAuthorityText, by means of a URL address in the field
             namingAuthorityUrl, or by a combination of them. For example, the text string
             can contain the name of the authority, the country and the name of the title
             register. The URL-option refers to a web page which contains lists with
             officially registered professions (text and possibly OID) as well as
             further information on these professions. Object identifiers for the
             component namingAuthorityId are grouped under the OID-branch
             id-isis-at-namingAuthorities and must be applied for.</li>
             <li>See http://www.teletrust.de/anwend.asp?Id=30200&amp;Sprache=E_&amp;HomePG=0
             for an application form and http://www.teletrust.de/links.asp?id=30220,11
             for an overview of registered naming authorities.</li>
             <li> By means of the data type ProfessionInfo certain professions,
             specializations, disciplines, fields of activity, etc. are identified. A
             profession is represented by one or more text strings, resp. profession OIDs
             in the fields professionItems and professionOIDs and by a registration number
             in the field registrationNumber. An indication in text form must always be
             present, whereas the other indications are optional. The component
             addProfessionInfo may contain additional applicationspecific information in
             DER-encoded form.</li>
             </ul>
             <p/>
             By means of different namingAuthority-OIDs or profession OIDs hierarchies of
             professions, specializations, disciplines, fields of activity, etc. can be
             expressed. The issuing admission authority should always be indicated (field
             admissionAuthority), whenever a registration number is presented. Still,
             information on admissions can be given without indicating an admission or a
             naming authority by the exclusive use of the component professionItems. In
             this case the certification authority is responsible for the verification of
             the admission information.
             <p/>
             <p/>
             <p/>
             This attribute is single-valued. Still, several admissions can be captured in
             the sequence structure of the component contentsOfAdmissions of
             AdmissionSyntax or in the component professionInfos of Admissions. The
             component admissionAuthority of AdmissionSyntax serves as default value for
             the component admissionAuthority of Admissions. Within the latter component
             the default value can be overwritten, in case that another authority is
             responsible. The component namingAuthority of Admissions serves as a default
             value for the component namingAuthority of ProfessionInfo. Within the latter
             component the default value can be overwritten, in case that another naming
             authority needs to be recorded.
             <p/>
             The length of the string objects is limited to 128 characters. It is
             recommended to indicate a namingAuthorityURL in all issued attribute
             certificates. If a namingAuthorityURL is indicated, the field professionItems
             of ProfessionInfo should contain only registered titles. If the field
             professionOIDs exists, it has to contain the OIDs of the professions listed
             in professionItems in the same order. In general, the field professionInfos
             should contain only one entry, unless the admissions that are to be listed
             are logically connected (e.g. they have been issued under the same admission
             number).
            
             @see Org.BouncyCastle2.Asn1.IsisMtt.X509.Admissions
             @see Org.BouncyCastle2.Asn1.IsisMtt.X509.ProfessionInfo
             @see Org.BouncyCastle2.Asn1.IsisMtt.X509.NamingAuthority
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.IsisMtt.X509.AdmissionSyntax.#ctor(Org.BouncyCastle2.Asn1.Asn1Sequence)">
             Constructor from Asn1Sequence.
             <p/>
             The sequence is of type ProcurationSyntax:
             <p/>
             <pre>
                 AdmissionSyntax ::= SEQUENCE
                 {
                   admissionAuthority GeneralName OPTIONAL,
                   contentsOfAdmissions SEQUENCE OF Admissions
                 }
             <p/>
                 Admissions ::= SEQUENCE
                 {
                   admissionAuthority [0] EXPLICIT GeneralName OPTIONAL
                   namingAuthority [1] EXPLICIT NamingAuthority OPTIONAL
                   professionInfos SEQUENCE OF ProfessionInfo
                 }
             <p/>
                 NamingAuthority ::= SEQUENCE
                 {
                   namingAuthorityId OBJECT IDENTIFIER OPTIONAL,
                   namingAuthorityUrl IA5String OPTIONAL,
                   namingAuthorityText DirectoryString(SIZE(1..128)) OPTIONAL
                 }
             <p/>
                 ProfessionInfo ::= SEQUENCE
                 {
                   namingAuthority [0] EXPLICIT NamingAuthority OPTIONAL,
                   professionItems SEQUENCE OF DirectoryString (SIZE(1..128)),
                   professionOIDs SEQUENCE OF OBJECT IDENTIFIER OPTIONAL,
                   registrationNumber PrintableString(SIZE(1..128)) OPTIONAL,
                   addProfessionInfo OCTET STRING OPTIONAL
                 }
             </pre>
            
             @param seq The ASN.1 sequence.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.IsisMtt.X509.AdmissionSyntax.#ctor(Org.BouncyCastle2.Asn1.X509.GeneralName,Org.BouncyCastle2.Asn1.Asn1Sequence)">
             Constructor from given details.
            
             @param admissionAuthority   The admission authority.
             @param contentsOfAdmissions The admissions.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.IsisMtt.X509.AdmissionSyntax.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <p/>
             Returns:
             <p/>
             <pre>
                 AdmissionSyntax ::= SEQUENCE
                 {
                   admissionAuthority GeneralName OPTIONAL,
                   contentsOfAdmissions SEQUENCE OF Admissions
                 }
             <p/>
                 Admissions ::= SEQUENCE
                 {
                   admissionAuthority [0] EXPLICIT GeneralName OPTIONAL
                   namingAuthority [1] EXPLICIT NamingAuthority OPTIONAL
                   professionInfos SEQUENCE OF ProfessionInfo
                 }
             <p/>
                 NamingAuthority ::= SEQUENCE
                 {
                   namingAuthorityId OBJECT IDENTIFIER OPTIONAL,
                   namingAuthorityUrl IA5String OPTIONAL,
                   namingAuthorityText DirectoryString(SIZE(1..128)) OPTIONAL
                 }
             <p/>
                 ProfessionInfo ::= SEQUENCE
                 {
                   namingAuthority [0] EXPLICIT NamingAuthority OPTIONAL,
                   professionItems SEQUENCE OF DirectoryString (SIZE(1..128)),
                   professionOIDs SEQUENCE OF OBJECT IDENTIFIER OPTIONAL,
                   registrationNumber PrintableString(SIZE(1..128)) OPTIONAL,
                   addProfessionInfo OCTET STRING OPTIONAL
                 }
             </pre>
            
             @return an Asn1Object
        </member>
        <member name="P:Org.BouncyCastle2.Asn1.IsisMtt.X509.AdmissionSyntax.AdmissionAuthority">
            @return Returns the admissionAuthority if present, null otherwise.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.IsisMtt.X509.AdmissionSyntax.GetContentsOfAdmissions">
            @return Returns the contentsOfAdmissions.
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.IsisMtt.X509.DeclarationOfMajority">
            A declaration of majority.
            <p/>
            <pre>
                      DeclarationOfMajoritySyntax ::= CHOICE
                      {
                        notYoungerThan [0] IMPLICIT INTEGER,
                        fullAgeAtCountry [1] IMPLICIT SEQUENCE
                        {
                          fullAge BOOLEAN DEFAULT TRUE,
                          country PrintableString (SIZE(2))
                        }
                        dateOfBirth [2] IMPLICIT GeneralizedTime
                      }
            </pre>
            <p/>
            fullAgeAtCountry indicates the majority of the owner with respect to the laws
            of a specific country.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.IsisMtt.X509.DeclarationOfMajority.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <p/>
             Returns:
             <p/>
             <pre>
                       DeclarationOfMajoritySyntax ::= CHOICE
                       {
                         notYoungerThan [0] IMPLICIT INTEGER,
                         fullAgeAtCountry [1] IMPLICIT SEQUENCE
                         {
                           fullAge BOOLEAN DEFAULT TRUE,
                           country PrintableString (SIZE(2))
                         }
                         dateOfBirth [2] IMPLICIT GeneralizedTime
                       }
             </pre>
            
             @return an Asn1Object
        </member>
        <member name="P:Org.BouncyCastle2.Asn1.IsisMtt.X509.DeclarationOfMajority.NotYoungerThan">
            @return notYoungerThan if that's what we are, -1 otherwise
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.IsisMtt.X509.MonetaryLimit">
            Monetary limit for transactions. The QcEuMonetaryLimit QC statement MUST be
            used in new certificates in place of the extension/attribute MonetaryLimit
            since January 1, 2004. For the sake of backward compatibility with
            certificates already in use, components SHOULD support MonetaryLimit (as well
            as QcEuLimitValue).
            <p/>
            Indicates a monetary limit within which the certificate holder is authorized
            to act. (This value DOES NOT express a limit on the liability of the
            certification authority).
            <p/>
            <pre>
               MonetaryLimitSyntax ::= SEQUENCE
               {
                 currency PrintableString (SIZE(3)),
                 amount INTEGER,
                 exponent INTEGER
               }
            </pre>
            <p/>
            currency must be the ISO code.
            <p/>
            value = amount�10*exponent
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.IsisMtt.X509.MonetaryLimit.#ctor(System.String,System.Int32,System.Int32)">
             Constructor from a given details.
             <p/>
             <p/>
             value = amount�10^exponent
            
             @param currency The currency. Must be the ISO code.
             @param amount   The amount
             @param exponent The exponent
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.IsisMtt.X509.MonetaryLimit.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <p/>
             Returns:
             <p/>
             <pre>
                MonetaryLimitSyntax ::= SEQUENCE
                {
                  currency PrintableString (SIZE(3)),
                  amount INTEGER,
                  exponent INTEGER
                }
             </pre>
            
             @return an Asn1Object
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.IsisMtt.X509.NamingAuthority">
            Names of authorities which are responsible for the administration of title
            registers.
            
            <pre>
                        NamingAuthority ::= SEQUENCE 
                        {
                          namingAuthorityID OBJECT IDENTIFIER OPTIONAL,
                          namingAuthorityUrl IA5String OPTIONAL,
                          namingAuthorityText DirectoryString(SIZE(1..128)) OPTIONAL
                        }
            </pre>
            @see Org.BouncyCastle2.Asn1.IsisMtt.X509.AdmissionSyntax
            
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.IsisMtt.X509.NamingAuthority.IdIsisMttATNamingAuthoritiesRechtWirtschaftSteuern">
            Profession OIDs should always be defined under the OID branch of the
            responsible naming authority. At the time of this writing, the work group
            �Recht, Wirtschaft, Steuern� (�Law, Economy, Taxes�) is registered as the
            first naming authority under the OID id-isismtt-at-namingAuthorities.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.IsisMtt.X509.NamingAuthority.#ctor(Org.BouncyCastle2.Asn1.Asn1Sequence)">
             Constructor from Asn1Sequence.
             <p/>
             <p/>
             <pre>
                         NamingAuthority ::= SEQUENCE
                         {
                           namingAuthorityID OBJECT IDENTIFIER OPTIONAL,
                           namingAuthorityUrl IA5String OPTIONAL,
                           namingAuthorityText DirectoryString(SIZE(1..128)) OPTIONAL
                         }
             </pre>
            
             @param seq The ASN.1 sequence.
        </member>
        <member name="P:Org.BouncyCastle2.Asn1.IsisMtt.X509.NamingAuthority.NamingAuthorityID">
            @return Returns the namingAuthorityID.
        </member>
        <member name="P:Org.BouncyCastle2.Asn1.IsisMtt.X509.NamingAuthority.NamingAuthorityText">
            @return Returns the namingAuthorityText.
        </member>
        <member name="P:Org.BouncyCastle2.Asn1.IsisMtt.X509.NamingAuthority.NamingAuthorityUrl">
            @return Returns the namingAuthorityUrl.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.IsisMtt.X509.NamingAuthority.#ctor(Org.BouncyCastle2.Asn1.DerObjectIdentifier,System.String,Org.BouncyCastle2.Asn1.X500.DirectoryString)">
             Constructor from given details.
             <p/>
             All parameters can be combined.
            
             @param namingAuthorityID   ObjectIdentifier for naming authority.
             @param namingAuthorityUrl  URL for naming authority.
             @param namingAuthorityText Textual representation of naming authority.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.IsisMtt.X509.NamingAuthority.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <p/>
             Returns:
             <p/>
             <pre>
                         NamingAuthority ::= SEQUENCE
                         {
                           namingAuthorityID OBJECT IDENTIFIER OPTIONAL,
                           namingAuthorityUrl IA5String OPTIONAL,
                           namingAuthorityText DirectoryString(SIZE(1..128)) OPTIONAL
                         }
             </pre>
            
             @return an Asn1Object
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.IsisMtt.X509.ProcurationSyntax">
            Attribute to indicate that the certificate holder may sign in the name of a
            third person.
            <p>
            ISIS-MTT PROFILE: The corresponding ProcurationSyntax contains either the
            name of the person who is represented (subcomponent thirdPerson) or a
            reference to his/her base certificate (in the component signingFor,
            subcomponent certRef), furthermore the optional components country and
            typeSubstitution to indicate the country whose laws apply, and respectively
            the type of procuration (e.g. manager, procuration, custody).
            </p>
            <p>
            ISIS-MTT PROFILE: The GeneralName MUST be of type directoryName and MAY only
            contain: - RFC3039 attributes, except pseudonym (countryName, commonName,
            surname, givenName, serialNumber, organizationName, organizationalUnitName,
            stateOrProvincename, localityName, postalAddress) and - SubjectDirectoryName
            attributes (title, dateOfBirth, placeOfBirth, gender, countryOfCitizenship,
            countryOfResidence and NameAtBirth).
            </p>
            <pre>
                          ProcurationSyntax ::= SEQUENCE {
                            country [1] EXPLICIT PrintableString(SIZE(2)) OPTIONAL,
                            typeOfSubstitution [2] EXPLICIT DirectoryString (SIZE(1..128)) OPTIONAL,
                            signingFor [3] EXPLICIT SigningFor 
                          }
                          
                          SigningFor ::= CHOICE 
                          { 
                            thirdPerson GeneralName,
                            certRef IssuerSerial 
                          }
            </pre>
            
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.IsisMtt.X509.ProcurationSyntax.#ctor(Org.BouncyCastle2.Asn1.Asn1Sequence)">
             Constructor from Asn1Sequence.
             <p/>
             The sequence is of type ProcurationSyntax:
             <p/>
             <pre>
                           ProcurationSyntax ::= SEQUENCE {
                             country [1] EXPLICIT PrintableString(SIZE(2)) OPTIONAL,
                             typeOfSubstitution [2] EXPLICIT DirectoryString (SIZE(1..128)) OPTIONAL,
                             signingFor [3] EXPLICIT SigningFor
                           }
             <p/>
                           SigningFor ::= CHOICE
                           {
                             thirdPerson GeneralName,
                             certRef IssuerSerial
                           }
             </pre>
            
             @param seq The ASN.1 sequence.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.IsisMtt.X509.ProcurationSyntax.#ctor(System.String,Org.BouncyCastle2.Asn1.X500.DirectoryString,Org.BouncyCastle2.Asn1.X509.IssuerSerial)">
             Constructor from a given details.
             <p/>
             <p/>
             Either <code>generalName</code> or <code>certRef</code> MUST be
             <code>null</code>.
            
             @param country            The country code whose laws apply.
             @param typeOfSubstitution The type of procuration.
             @param certRef            Reference to certificate of the person who is represented.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.IsisMtt.X509.ProcurationSyntax.#ctor(System.String,Org.BouncyCastle2.Asn1.X500.DirectoryString,Org.BouncyCastle2.Asn1.X509.GeneralName)">
             Constructor from a given details.
             <p/>
             <p/>
             Either <code>generalName</code> or <code>certRef</code> MUST be
             <code>null</code>.
            
             @param country            The country code whose laws apply.
             @param typeOfSubstitution The type of procuration.
             @param thirdPerson        The GeneralName of the person who is represented.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.IsisMtt.X509.ProcurationSyntax.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <p/>
             Returns:
             <p/>
             <pre>
                           ProcurationSyntax ::= SEQUENCE {
                             country [1] EXPLICIT PrintableString(SIZE(2)) OPTIONAL,
                             typeOfSubstitution [2] EXPLICIT DirectoryString (SIZE(1..128)) OPTIONAL,
                             signingFor [3] EXPLICIT SigningFor
                           }
             <p/>
                           SigningFor ::= CHOICE
                           {
                             thirdPerson GeneralName,
                             certRef IssuerSerial
                           }
             </pre>
            
             @return an Asn1Object
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.IsisMtt.X509.ProfessionInfo">
            Professions, specializations, disciplines, fields of activity, etc.
            
            <pre>
                          ProfessionInfo ::= SEQUENCE 
                          {
                            namingAuthority [0] EXPLICIT NamingAuthority OPTIONAL,
                            professionItems SEQUENCE OF DirectoryString (SIZE(1..128)),
                            professionOids SEQUENCE OF OBJECT IDENTIFIER OPTIONAL,
                            registrationNumber PrintableString(SIZE(1..128)) OPTIONAL,
                            addProfessionInfo OCTET STRING OPTIONAL 
                          }
            </pre>
            
            @see Org.BouncyCastle2.Asn1.IsisMtt.X509.AdmissionSyntax
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.IsisMtt.X509.ProfessionInfo.Rechtsanwltin">
            Rechtsanw�ltin
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.IsisMtt.X509.ProfessionInfo.Rechtsanwalt">
            Rechtsanwalt
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.IsisMtt.X509.ProfessionInfo.Rechtsbeistand">
            Rechtsbeistand
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.IsisMtt.X509.ProfessionInfo.Steuerberaterin">
            Steuerberaterin
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.IsisMtt.X509.ProfessionInfo.Steuerberater">
            Steuerberater
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.IsisMtt.X509.ProfessionInfo.Steuerbevollmchtigte">
            Steuerbevollm�chtigte
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.IsisMtt.X509.ProfessionInfo.Steuerbevollmchtigter">
            Steuerbevollm�chtigter
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.IsisMtt.X509.ProfessionInfo.Notarin">
            Notarin
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.IsisMtt.X509.ProfessionInfo.Notar">
            Notar
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.IsisMtt.X509.ProfessionInfo.Notarvertreterin">
            Notarvertreterin
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.IsisMtt.X509.ProfessionInfo.Notarvertreter">
            Notarvertreter
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.IsisMtt.X509.ProfessionInfo.Notariatsverwalterin">
            Notariatsverwalterin
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.IsisMtt.X509.ProfessionInfo.Notariatsverwalter">
            Notariatsverwalter
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.IsisMtt.X509.ProfessionInfo.Wirtschaftsprferin">
            Wirtschaftspr�ferin
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.IsisMtt.X509.ProfessionInfo.Wirtschaftsprfer">
            Wirtschaftspr�fer
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.IsisMtt.X509.ProfessionInfo.VereidigteBuchprferin">
            Vereidigte Buchpr�ferin
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.IsisMtt.X509.ProfessionInfo.VereidigterBuchprfer">
            Vereidigter Buchpr�fer
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.IsisMtt.X509.ProfessionInfo.Patentanwltin">
            Patentanw�ltin
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.IsisMtt.X509.ProfessionInfo.Patentanwalt">
            Patentanwalt
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.IsisMtt.X509.ProfessionInfo.#ctor(Org.BouncyCastle2.Asn1.Asn1Sequence)">
             Constructor from Asn1Sequence.
             <p/>
             <p/>
             <pre>
                           ProfessionInfo ::= SEQUENCE
                           {
                             namingAuthority [0] EXPLICIT NamingAuthority OPTIONAL,
                             professionItems SEQUENCE OF DirectoryString (SIZE(1..128)),
                             professionOids SEQUENCE OF OBJECT IDENTIFIER OPTIONAL,
                             registrationNumber PrintableString(SIZE(1..128)) OPTIONAL,
                             addProfessionInfo OCTET STRING OPTIONAL
                           }
             </pre>
            
             @param seq The ASN.1 sequence.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.IsisMtt.X509.ProfessionInfo.#ctor(Org.BouncyCastle2.Asn1.IsisMtt.X509.NamingAuthority,Org.BouncyCastle2.Asn1.X500.DirectoryString[],Org.BouncyCastle2.Asn1.DerObjectIdentifier[],System.String,Org.BouncyCastle2.Asn1.Asn1OctetString)">
             Constructor from given details.
             <p/>
             <code>professionItems</code> is mandatory, all other parameters are
             optional.
            
             @param namingAuthority    The naming authority.
             @param professionItems    Directory strings of the profession.
             @param professionOids     DERObjectIdentfier objects for the
                                       profession.
             @param registrationNumber Registration number.
             @param addProfessionInfo  Additional infos in encoded form.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.IsisMtt.X509.ProfessionInfo.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <p/>
             Returns:
             <p/>
             <pre>
                           ProfessionInfo ::= SEQUENCE
                           {
                             namingAuthority [0] EXPLICIT NamingAuthority OPTIONAL,
                             professionItems SEQUENCE OF DirectoryString (SIZE(1..128)),
                             professionOids SEQUENCE OF OBJECT IDENTIFIER OPTIONAL,
                             registrationNumber PrintableString(SIZE(1..128)) OPTIONAL,
                             addProfessionInfo OCTET STRING OPTIONAL
                           }
             </pre>
            
             @return an Asn1Object
        </member>
        <member name="P:Org.BouncyCastle2.Asn1.IsisMtt.X509.ProfessionInfo.AddProfessionInfo">
            @return Returns the addProfessionInfo.
        </member>
        <member name="P:Org.BouncyCastle2.Asn1.IsisMtt.X509.ProfessionInfo.NamingAuthority">
            @return Returns the namingAuthority.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.IsisMtt.X509.ProfessionInfo.GetProfessionItems">
            @return Returns the professionItems.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.IsisMtt.X509.ProfessionInfo.GetProfessionOids">
            @return Returns the professionOids.
        </member>
        <member name="P:Org.BouncyCastle2.Asn1.IsisMtt.X509.ProfessionInfo.RegistrationNumber">
            @return Returns the registrationNumber.
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.IsisMtt.X509.Restriction">
            Some other restriction regarding the usage of this certificate.
            <p/>
            <pre>
             RestrictionSyntax ::= DirectoryString (SIZE(1..1024))
            </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.IsisMtt.X509.Restriction.#ctor(Org.BouncyCastle2.Asn1.X500.DirectoryString)">
             Constructor from DirectoryString.
             <p/>
             The DirectoryString is of type RestrictionSyntax:
             <p/>
             <pre>
                  RestrictionSyntax ::= DirectoryString (SIZE(1..1024))
             </pre>
            
             @param restriction A IAsn1String.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.IsisMtt.X509.Restriction.#ctor(System.String)">
             Constructor from a given details.
            
             @param restriction The description of the restriction.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.IsisMtt.X509.Restriction.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <p/>
             Returns:
             <p/>
             <pre>
                  RestrictionSyntax ::= DirectoryString (SIZE(1..1024))
             <p/>
             </pre>
            
             @return an Asn1Object
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Misc.Cast5CbcParameters.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            cast5CBCParameters ::= Sequence {
                                      iv         OCTET STRING DEFAULT 0,
                                             -- Initialization vector
                                      keyLength  Integer
                                             -- Key length, in bits
                                 }
            </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Misc.IdeaCbcPar.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            IDEA-CBCPar ::= Sequence {
                                 iv    OCTET STRING OPTIONAL -- exactly 8 octets
                             }
            </pre>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.Misc.NetscapeCertType">
            The NetscapeCertType object.
            <pre>
               NetscapeCertType ::= BIT STRING {
                    SSLClient               (0),
                    SSLServer               (1),
                    S/MIME                  (2),
                    Object Signing          (3),
                    Reserved                (4),
                    SSL CA                  (5),
                    S/MIME CA               (6),
                    Object Signing CA       (7) }
            </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Misc.NetscapeCertType.#ctor(System.Int32)">
             Basic constructor.
            
             @param usage - the bitwise OR of the Key Usage flags giving the
             allowed uses for the key.
             e.g. (X509NetscapeCertType.sslCA | X509NetscapeCertType.smimeCA)
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.Mozilla.PublicKeyAndChallenge">
             This is designed to parse
             the PublicKeyAndChallenge created by the KEYGEN tag included by
             Mozilla based browsers.
              <pre>
              PublicKeyAndChallenge ::= SEQUENCE {
                spki SubjectPublicKeyInfo,
                challenge IA5STRING
              }
            
              </pre>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.Nist.KMacWithShake128Params">
            <summary>
            KMACwithSHAKE128-params ::= SEQUENCE {
                kMACOutputLength     INTEGER DEFAULT 256, -- Output length in bits
                customizationString  OCTET STRING DEFAULT ''H
            } 
            </summary>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.Nist.KMacWithShake256Params">
            <summary>
            KMACwithSHAKE256-params ::= SEQUENCE {
                kMACOutputLength     INTEGER DEFAULT 512, -- Output length in bits
                customizationString  OCTET STRING DEFAULT ''H
            } 
            </summary>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.Nist.NistNamedCurves">
            Utility class for fetching curves using their NIST names as published in FIPS-PUB 186-3
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Nist.NistNamedCurves.GetByOid(Org.BouncyCastle2.Asn1.DerObjectIdentifier)">
             return the X9ECParameters object for the named curve represented by
             the passed in object identifier. Null if the curve isn't present.
            
             @param oid an object identifier representing a named curve, if present.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Nist.NistNamedCurves.GetOid(System.String)">
             return the object identifier signified by the passed in name. Null
             if there is no object identifier associated with name.
            
             @return the object identifier associated with name, if present.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Nist.NistNamedCurves.GetName(Org.BouncyCastle2.Asn1.DerObjectIdentifier)">
            return the named curve name represented by the given object identifier.
        </member>
        <member name="P:Org.BouncyCastle2.Asn1.Nist.NistNamedCurves.Names">
            returns an enumeration containing the name strings for curves
            contained in this structure.
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.Nist.NistObjectIdentifiers.IdDsaWithSha3_224">
            2.16.840.1.101.3.4.3.5 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.Nist.NistObjectIdentifiers.IdDsaWithSha3_256">
            2.16.840.1.101.3.4.3.6 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.Nist.NistObjectIdentifiers.IdDsaWithSha3_384">
            2.16.840.1.101.3.4.3.7 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.Nist.NistObjectIdentifiers.IdDsaWithSha3_512">
            2.16.840.1.101.3.4.3.8 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.Nist.NistObjectIdentifiers.IdEcdsaWithSha3_224">
            2.16.840.1.101.3.4.3.9 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.Nist.NistObjectIdentifiers.IdEcdsaWithSha3_256">
            2.16.840.1.101.3.4.3.10 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.Nist.NistObjectIdentifiers.IdEcdsaWithSha3_384">
            2.16.840.1.101.3.4.3.11 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.Nist.NistObjectIdentifiers.IdEcdsaWithSha3_512">
            2.16.840.1.101.3.4.3.12 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.Nist.NistObjectIdentifiers.IdRsassaPkcs1V15WithSha3_224">
            2.16.840.1.101.3.4.3.9 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.Nist.NistObjectIdentifiers.IdRsassaPkcs1V15WithSha3_256">
            2.16.840.1.101.3.4.3.10 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.Nist.NistObjectIdentifiers.IdRsassaPkcs1V15WithSha3_384">
            2.16.840.1.101.3.4.3.11 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.Nist.NistObjectIdentifiers.IdRsassaPkcs1V15WithSha3_512">
            2.16.840.1.101.3.4.3.12 
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.Ntt.NttObjectIdentifiers">
            <summary>From RFC 3657</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Ocsp.BasicOcspResponse.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            BasicOcspResponse       ::= Sequence {
                 tbsResponseData      ResponseData,
                 signatureAlgorithm   AlgorithmIdentifier,
                 signature            BIT STRING,
                 certs                [0] EXPLICIT Sequence OF Certificate OPTIONAL }
            </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Ocsp.CertID.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            CertID          ::=     Sequence {
                hashAlgorithm       AlgorithmIdentifier,
                issuerNameHash      OCTET STRING, -- Hash of Issuer's DN
                issuerKeyHash       OCTET STRING, -- Hash of Issuers public key
                serialNumber        CertificateSerialNumber }
            </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Ocsp.CertStatus.#ctor">
            create a CertStatus object with a tag of zero.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Ocsp.CertStatus.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
             CertStatus ::= CHOICE {
                             good        [0]     IMPLICIT Null,
                             revoked     [1]     IMPLICIT RevokedInfo,
                             unknown     [2]     IMPLICIT UnknownInfo }
            </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Ocsp.OcspRequest.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            OcspRequest     ::=     Sequence {
                tbsRequest                  TBSRequest,
                optionalSignature   [0]     EXPLICIT Signature OPTIONAL }
            </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Ocsp.OcspResponse.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            OcspResponse ::= Sequence {
                responseStatus         OcspResponseStatus,
                responseBytes          [0] EXPLICIT ResponseBytes OPTIONAL }
            </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Ocsp.OcspResponseStatus.#ctor(System.Int32)">
            The OcspResponseStatus enumeration.
            <pre>
            OcspResponseStatus ::= Enumerated {
                successful            (0),  --Response has valid confirmations
                malformedRequest      (1),  --Illegal confirmation request
                internalError         (2),  --Internal error in issuer
                tryLater              (3),  --Try again later
                                            --(4) is not used
                sigRequired           (5),  --Must sign the request
                unauthorized          (6)   --Request unauthorized
            }
            </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Ocsp.Request.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            Request         ::=     Sequence {
                reqCert                     CertID,
                singleRequestExtensions     [0] EXPLICIT Extensions OPTIONAL }
            </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Ocsp.ResponderID.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            ResponderID ::= CHOICE {
                 byName          [1] Name,
                 byKey           [2] KeyHash }
            </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Ocsp.ResponseBytes.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            ResponseBytes ::=       Sequence {
                responseType   OBJECT IDENTIFIER,
                response       OCTET STRING }
            </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Ocsp.ResponseData.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            ResponseData ::= Sequence {
                version              [0] EXPLICIT Version DEFAULT v1,
                responderID              ResponderID,
                producedAt               GeneralizedTime,
                responses                Sequence OF SingleResponse,
                responseExtensions   [1] EXPLICIT Extensions OPTIONAL }
            </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Ocsp.RevokedInfo.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            RevokedInfo ::= Sequence {
                 revocationTime              GeneralizedTime,
                 revocationReason    [0]     EXPLICIT CRLReason OPTIONAL }
            </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Ocsp.ServiceLocator.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            ServiceLocator ::= Sequence {
                issuer    Name,
                locator   AuthorityInfoAccessSyntax OPTIONAL }
            </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Ocsp.Signature.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            Signature       ::=     Sequence {
                signatureAlgorithm      AlgorithmIdentifier,
                signature               BIT STRING,
                certs               [0] EXPLICIT Sequence OF Certificate OPTIONAL}
            </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Ocsp.SingleResponse.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
             SingleResponse ::= Sequence {
                     certID                       CertID,
                     certStatus                   CertStatus,
                     thisUpdate                   GeneralizedTime,
                     nextUpdate         [0]       EXPLICIT GeneralizedTime OPTIONAL,
                     singleExtensions   [1]       EXPLICIT Extensions OPTIONAL }
            </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Ocsp.TbsRequest.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            TBSRequest      ::=     Sequence {
                version             [0]     EXPLICIT Version DEFAULT v1,
                requestorName       [1]     EXPLICIT GeneralName OPTIONAL,
                requestList                 Sequence OF Request,
                requestExtensions   [2]     EXPLICIT Extensions OPTIONAL }
            </pre>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.OidTokenizer">
            class for breaking up an Oid into it's component tokens, ala
            java.util.StringTokenizer. We need this class as some of the
            lightweight Java environment don't support classes like
            StringTokenizer.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Pkcs.AttributePkcs.GetInstance(System.Object)">
             return an Attribute object from the given object.
            
             @param o the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Pkcs.AttributePkcs.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            Attr ::= Sequence {
                attrType OBJECT IDENTIFIER,
                attrValues Set OF AttributeValue
            }
            </pre>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.Pkcs.CertificationRequest">
            Pkcs10 Certfication request object.
            <pre>
            CertificationRequest ::= Sequence {
              certificationRequestInfo  CertificationRequestInfo,
              signatureAlgorithm        AlgorithmIdentifier{{ SignatureAlgorithms }},
              signature                 BIT STRING
            }
            </pre>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.Pkcs.CertificationRequestInfo">
             Pkcs10 CertificationRequestInfo object.
             <pre>
              CertificationRequestInfo ::= Sequence {
               version             Integer { v1(0) } (v1,...),
               subject             Name,
               subjectPKInfo   SubjectPublicKeyInfo{{ PKInfoAlgorithms }},
               attributes          [0] Attributes{{ CRIAttributes }}
              }
            
              Attributes { ATTRIBUTE:IOSet } ::= Set OF Attr{{ IOSet }}
            
              Attr { ATTRIBUTE:IOSet } ::= Sequence {
                type    ATTRIBUTE.&amp;id({IOSet}),
                values  Set SIZE(1..MAX) OF ATTRIBUTE.&amp;Type({IOSet}{\@type})
              }
             </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Pkcs.ContentInfo.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            ContentInfo ::= Sequence {
                     contentType ContentType,
                     content
                     [0] EXPLICIT ANY DEFINED BY contentType OPTIONAL }
            </pre>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.Pkcs.EncryptedData">
             The EncryptedData object.
             <pre>
                  EncryptedData ::= Sequence {
                       version Version,
                       encryptedContentInfo EncryptedContentInfo
                  }
            
            
                  EncryptedContentInfo ::= Sequence {
                      contentType ContentType,
                      contentEncryptionAlgorithm  ContentEncryptionAlgorithmIdentifier,
                      encryptedContent [0] IMPLICIT EncryptedContent OPTIONAL
                }
            
                EncryptedContent ::= OCTET STRING
             </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Pkcs.EncryptedPrivateKeyInfo.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <pre>
             EncryptedPrivateKeyInfo ::= Sequence {
                  encryptionAlgorithm AlgorithmIdentifier {{KeyEncryptionAlgorithms}},
                  encryptedData EncryptedData
             }
            
             EncryptedData ::= OCTET STRING
            
             KeyEncryptionAlgorithms ALGORITHM-IDENTIFIER ::= {
                      ... -- For local profiles
             }
             </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Pkcs.MacData.ToAsn1Object">
            <pre>
            MacData ::= SEQUENCE {
                mac      DigestInfo,
                macSalt  OCTET STRING,
                iterations INTEGER DEFAULT 1
                -- Note: The default is for historic reasons and its use is deprecated. A
                -- higher value, like 1024 is recommended.
            </pre>
            @return the basic DERObject construction.
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.Pkcs.Pfx">
            the infamous Pfx from Pkcs12
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.Pkcs.PkcsObjectIdentifiers.Sha512_224WithRSAEncryption">
            PKCS#1: 1.2.840.113549.1.1.15 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.Pkcs.PkcsObjectIdentifiers.Sha512_256WithRSAEncryption">
            PKCS#1: 1.2.840.113549.1.1.16 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.Pkcs.PkcsObjectIdentifiers.IdAlgAeadChaCha20Poly1305">
             <pre>
             id-alg-AEADChaCha20Poly1305 OBJECT IDENTIFIER ::=
             { iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1)
                pkcs9(9) smime(16) alg(3) 18 }
            
             AEADChaCha20Poly1305Nonce ::= OCTET STRING (SIZE(12))
             </pre>
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.Pkcs.PkcsObjectIdentifiers.IdAADecryptKeyID">
            PKCS#9: 1.2.840.113549.1.9.16.2.37 - <a href="https://tools.ietf.org/html/rfc4108#section-2.2.5">RFC 4108</a> 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.Pkcs.PkcsObjectIdentifiers.IdAAImplCryptoAlgs">
            PKCS#9: 1.2.840.113549.1.9.16.2.38 - <a href="https://tools.ietf.org/html/rfc4108#section-2.2.6">RFC 4108</a> 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.Pkcs.PkcsObjectIdentifiers.IdAAAsymmDecryptKeyID">
            PKCS#9: 1.2.840.113549.1.9.16.2.54 <a href="https://tools.ietf.org/html/rfc7030">RFC7030</a>
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.Pkcs.PkcsObjectIdentifiers.IdAAImplCompressAlgs">
            PKCS#9: 1.2.840.113549.1.9.16.2.43   <a href="https://tools.ietf.org/html/rfc7030">RFC7030</a>
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.Pkcs.PkcsObjectIdentifiers.IdAACommunityIdentifiers">
            PKCS#9: 1.2.840.113549.1.9.16.2.40   <a href="https://tools.ietf.org/html/rfc7030">RFC7030</a>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.Pkcs.PrivateKeyInfo">
              RFC 5958
            
              <pre>
              [IMPLICIT TAGS]
            
              OneAsymmetricKey ::= SEQUENCE {
                  version                   Version,
                  privateKeyAlgorithm       PrivateKeyAlgorithmIdentifier,
                  privateKey                PrivateKey,
                  attributes            [0] Attributes OPTIONAL,
                  ...,
                  [[2: publicKey        [1] PublicKey OPTIONAL ]],
                  ...
              }
            
              PrivateKeyInfo ::= OneAsymmetricKey
            
              Version ::= INTEGER { v1(0), v2(1) } (v1, ..., v2)
            
              PrivateKeyAlgorithmIdentifier ::= AlgorithmIdentifier
                                                 { PUBLIC-KEY,
                                                   { PrivateKeyAlgorithms } }
            
              PrivateKey ::= OCTET STRING
                                 -- Content varies based on type of key.  The
                                 -- algorithm identifier dictates the format of
                                 -- the key.
            
              PublicKey ::= BIT STRING
                                 -- Content varies based on type of key.  The
                                 -- algorithm identifier dictates the format of
                                 -- the key.
            
              Attributes ::= SET OF Attribute { { OneAsymmetricKeyAttributes } }
              </pre>
        </member>
        <member name="P:Org.BouncyCastle2.Asn1.Pkcs.PrivateKeyInfo.HasPublicKey">
            <summary>Return true if a public key is present, false otherwise.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Pkcs.PrivateKeyInfo.ParsePublicKey">
            <summary>For when the public key is an ASN.1 encoding.</summary>
        </member>
        <member name="P:Org.BouncyCastle2.Asn1.Pkcs.PrivateKeyInfo.PublicKeyData">
            <summary>Return the public key as a raw bit string.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Pkcs.RsaesOaepParameters.#ctor">
            The default version
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Pkcs.RsaesOaepParameters.ToAsn1Object">
             <pre>
              RSAES-OAEP-params ::= SEQUENCE {
                 hashAlgorithm      [0] OAEP-PSSDigestAlgorithms     DEFAULT sha1,
                 maskGenAlgorithm   [1] PKCS1MGFAlgorithms  DEFAULT mgf1SHA1,
                 pSourceAlgorithm   [2] PKCS1PSourceAlgorithms  DEFAULT pSpecifiedEmpty
               }
            
               OAEP-PSSDigestAlgorithms    ALGORITHM-IDENTIFIER ::= {
                 { OID id-sha1 PARAMETERS NULL   }|
                 { OID id-sha256 PARAMETERS NULL }|
                 { OID id-sha384 PARAMETERS NULL }|
                 { OID id-sha512 PARAMETERS NULL },
                 ...  -- Allows for future expansion --
               }
               PKCS1MGFAlgorithms    ALGORITHM-IDENTIFIER ::= {
                 { OID id-mgf1 PARAMETERS OAEP-PSSDigestAlgorithms },
                ...  -- Allows for future expansion --
               }
               PKCS1PSourceAlgorithms    ALGORITHM-IDENTIFIER ::= {
                 { OID id-pSpecified PARAMETERS OCTET STRING },
                 ...  -- Allows for future expansion --
              }
             </pre>
             @return the asn1 primitive representing the parameters.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Pkcs.RsaPrivateKeyStructure.ToAsn1Object">
             This outputs the key in Pkcs1v2 format.
             <pre>
                  RsaPrivateKey ::= Sequence {
                                      version Version,
                                      modulus Integer, -- n
                                      publicExponent Integer, -- e
                                      privateExponent Integer, -- d
                                      prime1 Integer, -- p
                                      prime2 Integer, -- q
                                      exponent1 Integer, -- d mod (p-1)
                                      exponent2 Integer, -- d mod (q-1)
                                      coefficient Integer -- (inverse of q) mod p
                                  }
            
                  Version ::= Integer
             </pre>
             <p>This routine is written to output Pkcs1 version 0, private keys.</p>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Pkcs.RsassaPssParameters.#ctor">
            The default version
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Pkcs.RsassaPssParameters.ToAsn1Object">
             <pre>
             RSASSA-PSS-params ::= SEQUENCE {
               hashAlgorithm      [0] OAEP-PSSDigestAlgorithms  DEFAULT sha1,
                maskGenAlgorithm   [1] PKCS1MGFAlgorithms  DEFAULT mgf1SHA1,
                saltLength         [2] INTEGER  DEFAULT 20,
                trailerField       [3] TrailerField  DEFAULT trailerFieldBC
              }
            
             OAEP-PSSDigestAlgorithms    ALGORITHM-IDENTIFIER ::= {
                { OID id-sha1 PARAMETERS NULL   }|
                { OID id-sha256 PARAMETERS NULL }|
                { OID id-sha384 PARAMETERS NULL }|
                { OID id-sha512 PARAMETERS NULL },
                ...  -- Allows for future expansion --
             }
            
             PKCS1MGFAlgorithms    ALGORITHM-IDENTIFIER ::= {
               { OID id-mgf1 PARAMETERS OAEP-PSSDigestAlgorithms },
                ...  -- Allows for future expansion --
             }
            
             TrailerField ::= INTEGER { trailerFieldBC(1) }
             </pre>
             @return the asn1 primitive representing the parameters.
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.Pkcs.SignedData">
            a Pkcs#7 signed data object.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Pkcs.SignedData.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
             SignedData ::= Sequence {
                 version Version,
                 digestAlgorithms DigestAlgorithmIdentifiers,
                 contentInfo ContentInfo,
                 certificates
                     [0] IMPLICIT ExtendedCertificatesAndCertificates
                              OPTIONAL,
                 crls
                     [1] IMPLICIT CertificateRevocationLists OPTIONAL,
                 signerInfos SignerInfos }
            </pre>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.Pkcs.SignerInfo">
            a Pkcs#7 signer info object.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Pkcs.SignerInfo.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <pre>
              SignerInfo ::= Sequence {
                  version Version,
                  issuerAndSerialNumber IssuerAndSerialNumber,
                  digestAlgorithm DigestAlgorithmIdentifier,
                  authenticatedAttributes [0] IMPLICIT Attributes OPTIONAL,
                  digestEncryptionAlgorithm DigestEncryptionAlgorithmIdentifier,
                  encryptedDigest EncryptedDigest,
                  unauthenticatedAttributes [1] IMPLICIT Attributes OPTIONAL
              }
            
              EncryptedDigest ::= OCTET STRING
            
              DigestAlgorithmIdentifier ::= AlgorithmIdentifier
            
              DigestEncryptionAlgorithmIdentifier ::= AlgorithmIdentifier
             </pre>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.Sec.ECPrivateKeyStructure">
            the elliptic curve private key object from SEC 1
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Sec.ECPrivateKeyStructure.ToAsn1Object">
            ECPrivateKey ::= SEQUENCE {
                version INTEGER { ecPrivkeyVer1(1) } (ecPrivkeyVer1),
                privateKey OCTET STRING,
                parameters [0] Parameters OPTIONAL,
                publicKey [1] BIT STRING OPTIONAL }
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Sec.SecNamedCurves.GetByOid(Org.BouncyCastle2.Asn1.DerObjectIdentifier)">
             return the X9ECParameters object for the named curve represented by
             the passed in object identifier. Null if the curve isn't present.
            
             @param oid an object identifier representing a named curve, if present.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Sec.SecNamedCurves.GetOid(System.String)">
             return the object identifier signified by the passed in name. Null
             if there is no object identifier associated with name.
            
             @return the object identifier associated with name, if present.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Sec.SecNamedCurves.GetName(Org.BouncyCastle2.Asn1.DerObjectIdentifier)">
            return the named curve name represented by the given object identifier.
        </member>
        <member name="P:Org.BouncyCastle2.Asn1.Sec.SecNamedCurves.Names">
            returns an enumeration containing the name strings for curves
            contained in this structure.
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.Sec.SecObjectIdentifiers.EllipticCurve">
            EllipticCurve OBJECT IDENTIFIER ::= {
                  iso(1) identified-organization(3) certicom(132) curve(0)
            }
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.Smime.SmimeCapabilities">
            Handler class for dealing with S/MIME Capabilities
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.Smime.SmimeCapabilities.PreferSignedData">
            general preferences
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.Smime.SmimeCapabilities.Aes256Cbc">
            encryption algorithms preferences
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Smime.SmimeCapabilities.GetInstance(System.Object)">
             return an Attr object from the given object.
            
             @param o the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Smime.SmimeCapabilities.GetCapabilitiesForOid(Org.BouncyCastle2.Asn1.DerObjectIdentifier)">
            returns an ArrayList with 0 or more objects of all the capabilities
            matching the passed in capability Oid. If the Oid passed is null the
            entire set is returned.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Smime.SmimeCapabilities.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            SMIMECapabilities ::= Sequence OF SMIMECapability
            </pre>
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.Smime.SmimeCapability.PreferSignedData">
            general preferences
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.Smime.SmimeCapability.DesCbc">
            encryption algorithms preferences
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Smime.SmimeCapability.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            SMIMECapability ::= Sequence {
                capabilityID OBJECT IDENTIFIER,
                parameters ANY DEFINED BY capabilityID OPTIONAL
            }
            </pre>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.TeleTrust.TeleTrusTNamedCurves">
            elliptic curves defined in "ECC Brainpool Standard Curves and Curve Generation"
            http://www.ecc-brainpool.org/download/draft_pkix_additional_ecc_dp.txt
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.TeleTrust.TeleTrusTNamedCurves.GetByOid(Org.BouncyCastle2.Asn1.DerObjectIdentifier)">
             return the X9ECParameters object for the named curve represented by
             the passed in object identifier. Null if the curve isn't present.
            
             @param oid an object identifier representing a named curve, if present.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.TeleTrust.TeleTrusTNamedCurves.GetOid(System.String)">
             return the object identifier signified by the passed in name. Null
             if there is no object identifier associated with name.
            
             @return the object identifier associated with name, if present.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.TeleTrust.TeleTrusTNamedCurves.GetName(Org.BouncyCastle2.Asn1.DerObjectIdentifier)">
            return the named curve name represented by the given object identifier.
        </member>
        <member name="P:Org.BouncyCastle2.Asn1.TeleTrust.TeleTrusTNamedCurves.Names">
            returns an enumeration containing the name strings for curves
            contained in this structure.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Tsp.Accuracy.ToAsn1Object">
            <pre>
            Accuracy ::= SEQUENCE {
                        seconds        INTEGER              OPTIONAL,
                        millis     [0] INTEGER  (1..999)    OPTIONAL,
                        micros     [1] INTEGER  (1..999)    OPTIONAL
                        }
            </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Tsp.MessageImprint.ToAsn1Object">
            <pre>
               MessageImprint ::= SEQUENCE  {
                  hashAlgorithm                AlgorithmIdentifier,
                  hashedMessage                OCTET STRING  }
            </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Tsp.TimeStampReq.ToAsn1Object">
            <pre>
            TimeStampReq ::= SEQUENCE  {
             version                      INTEGER  { v1(1) },
             messageImprint               MessageImprint,
               --a hash algorithm OID and the hash value of the data to be
               --time-stamped
             reqPolicy             TSAPolicyId              OPTIONAL,
             nonce                 INTEGER                  OPTIONAL,
             certReq               BOOLEAN                  DEFAULT FALSE,
             extensions            [0] IMPLICIT Extensions  OPTIONAL
            }
            </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Tsp.TimeStampResp.ToAsn1Object">
            <pre>
            TimeStampResp ::= SEQUENCE  {
              status                  PkiStatusInfo,
              timeStampToken          TimeStampToken     OPTIONAL  }
            </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Tsp.TstInfo.ToAsn1Object">
             <pre>
            
                 TstInfo ::= SEQUENCE  {
                    version                      INTEGER  { v1(1) },
                    policy                       TSAPolicyId,
                    messageImprint               MessageImprint,
                      -- MUST have the same value as the similar field in
                      -- TimeStampReq
                    serialNumber                 INTEGER,
                     -- Time-Stamping users MUST be ready to accommodate integers
                     -- up to 160 bits.
                    genTime                      GeneralizedTime,
                    accuracy                     Accuracy                 OPTIONAL,
                    ordering                     BOOLEAN             DEFAULT FALSE,
                    nonce                        INTEGER                  OPTIONAL,
                      -- MUST be present if the similar field was present
                      -- in TimeStampReq.  In that case it MUST have the same value.
                    tsa                          [0] GeneralName          OPTIONAL,
                    extensions                   [1] IMPLICIT Extensions   OPTIONAL  }
            
             </pre>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Org.BouncyCastle2.Asn1.UA.UAObjectIdentifiers" -->
        <member name="F:Org.BouncyCastle2.Asn1.UA.UAObjectIdentifiers.UaOid">
            Base OID: 1.2.804.2.1.1.1 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.UA.UAObjectIdentifiers.dstu4145le">
            DSTU4145 Little Endian presentation.  OID: 1.2.804.2.1.1.1.1.3.1.1 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.UA.UAObjectIdentifiers.dstu4145be">
            DSTU4145 Big Endian presentation.  OID: 1.2.804.2.1.1.1.1.3.1.1.1 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.UA.UAObjectIdentifiers.dstu7564digest_256">
            DSTU7564 256-bit digest presentation. 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.UA.UAObjectIdentifiers.dstu7564digest_384">
            DSTU7564 384-bit digest presentation. 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.UA.UAObjectIdentifiers.dstu7564digest_512">
            DSTU7564 512-bit digest presentation. 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.UA.UAObjectIdentifiers.dstu7564mac_256">
            DSTU7564 256-bit mac presentation. 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.UA.UAObjectIdentifiers.dstu7564mac_384">
            DSTU7564 384-bit mac presentation. 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.UA.UAObjectIdentifiers.dstu7564mac_512">
            DSTU7564 512-bit mac presentation. 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.UA.UAObjectIdentifiers.dstu7624ecb_128">
            DSTU7624 in ECB mode with 128 bit block/key presentation 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.UA.UAObjectIdentifiers.dstu7624ecb_256">
            DSTU7624 in ECB mode with 256 bit block/key presentation 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.UA.UAObjectIdentifiers.dstu7624ecb_512">
            DSTU7624 in ECB mode with 512 bit block/key presentation 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.UA.UAObjectIdentifiers.dstu7624ctr_128">
            DSTU7624 in CTR mode with 128 bit block/key presentation 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.UA.UAObjectIdentifiers.dstu7624ctr_256">
            DSTU7624 in CTR mode with 256 bit block/key presentation 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.UA.UAObjectIdentifiers.dstu7624ctr_512">
            DSTU7624 in CTR mode with 512 bit block/key presentation 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.UA.UAObjectIdentifiers.dstu7624cfb_128">
            DSTU7624 in CFB mode with 128 bit block/key presentation 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.UA.UAObjectIdentifiers.dstu7624cfb_256">
            DSTU7624 in CFB mode with 256 bit block/key presentation 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.UA.UAObjectIdentifiers.dstu7624cfb_512">
            DSTU7624 in CFB mode with 512 bit block/key presentation 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.UA.UAObjectIdentifiers.dstu7624cmac_128">
            DSTU7624 in MAC mode with 128 bit block/key presentation 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.UA.UAObjectIdentifiers.dstu7624cmac_256">
            DSTU7624 in MAC mode with 256 bit block/key presentation 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.UA.UAObjectIdentifiers.dstu7624cmac_512">
            DSTU7624 in MAC mode with 512 bit block/key presentation 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.UA.UAObjectIdentifiers.dstu7624cbc_128">
            DSTU7624 in CBC mode with 128 bit block/key presentation 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.UA.UAObjectIdentifiers.dstu7624cbc_256">
            DSTU7624 in CBC mode with 256 bit block/key presentation 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.UA.UAObjectIdentifiers.dstu7624cbc_512">
            DSTU7624 in CBC mode with 512 bit block/key presentation 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.UA.UAObjectIdentifiers.dstu7624ofb_128">
            DSTU7624 in OFB mode with 128 bit block/key presentation 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.UA.UAObjectIdentifiers.dstu7624ofb_256">
            DSTU7624 in OFB mode with 256 bit block/key presentation 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.UA.UAObjectIdentifiers.dstu7624ofb_512">
            DSTU7624 in OFB mode with 512 bit block/key presentation 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.UA.UAObjectIdentifiers.dstu7624gmac_128">
            DSTU7624 in GMAC (GCM witout encryption) mode with 128 bit block/key presentation 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.UA.UAObjectIdentifiers.dstu7624gmac_256">
            DSTU7624 in GMAC (GCM witout encryption) mode with 256 bit block/key presentation 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.UA.UAObjectIdentifiers.dstu7624gmac_512">
            DSTU7624 in GMAC (GCM witout encryption) mode with 512 bit block/key presentation 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.UA.UAObjectIdentifiers.dstu7624ccm_128">
            DSTU7624 in CCM mode with 128 bit block/key presentation 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.UA.UAObjectIdentifiers.dstu7624ccm_256">
            DSTU7624 in CCM mode with 256 bit block/key presentation 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.UA.UAObjectIdentifiers.dstu7624ccm_512">
            DSTU7624 in CCM mode with 512 bit block/key presentation 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.UA.UAObjectIdentifiers.dstu7624xts_128">
            DSTU7624 in XTS mode with 128 bit block/key presentation 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.UA.UAObjectIdentifiers.dstu7624xts_256">
            DSTU7624 in XTS mode with 256 bit block/key presentation 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.UA.UAObjectIdentifiers.dstu7624xts_512">
            DSTU7624 in XTS mode with 512 bit block/key presentation 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.UA.UAObjectIdentifiers.dstu7624kw_128">
            DSTU7624 in key wrap (KW) mode with 128 bit block/key presentation 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.UA.UAObjectIdentifiers.dstu7624kw_256">
            DSTU7624 in key wrap (KW) mode with 256 bit block/key presentation 
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.UA.UAObjectIdentifiers.dstu7624kw_512">
            DSTU7624 in key wrap (KW) mode with 512 bit block/key presentation 
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Utilities.Asn1Dump.AsString(System.String,System.Boolean,Org.BouncyCastle2.Asn1.Asn1Object,System.Text.StringBuilder)">
             dump a Der object as a formatted string with indentation
            
             @param obj the Asn1Object to be dumped out.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Utilities.Asn1Dump.DumpAsString(Org.BouncyCastle2.Asn1.Asn1Encodable)">
             dump out a DER object as a formatted string, in non-verbose mode
            
             @param obj the Asn1Encodable to be dumped out.
             @return  the resulting string.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.Utilities.Asn1Dump.DumpAsString(Org.BouncyCastle2.Asn1.Asn1Encodable,System.Boolean)">
             Dump out the object as a string
            
             @param obj the Asn1Encodable to be dumped out.
             @param verbose  if true, dump out the contents of octet and bit strings.
             @return  the resulting string.
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.X500.AttributeTypeAndValue">
            Holding class for the AttributeTypeAndValue structures that make up an RDN.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X500.AttributeTypeAndValue.ToAsn1Object">
            <pre>
            AttributeTypeAndValue ::= SEQUENCE {
                      type         OBJECT IDENTIFIER,
                      value        ANY DEFINED BY type }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X500.DirectoryString.ToAsn1Object">
            <pre>
             DirectoryString ::= CHOICE {
               teletexString               TeletexString (SIZE (1..MAX)),
               printableString             PrintableString (SIZE (1..MAX)),
               universalString             UniversalString (SIZE (1..MAX)),
               utf8String                  UTF8String (SIZE (1..MAX)),
               bmpString                   BMPString (SIZE (1..MAX))  }
            </pre>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.X500.Rdn">
            Holding class for a single Relative Distinguished Name (RDN).
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X500.Rdn.#ctor(Org.BouncyCastle2.Asn1.DerObjectIdentifier,Org.BouncyCastle2.Asn1.Asn1Encodable)">
             Create a single valued RDN.
            
             @param oid RDN type.
             @param value RDN value.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X500.Rdn.#ctor(Org.BouncyCastle2.Asn1.X500.AttributeTypeAndValue[])">
             Create a multi-valued RDN.
            
             @param aAndVs attribute type/value pairs making up the RDN
        </member>
        <member name="P:Org.BouncyCastle2.Asn1.X500.Rdn.Count">
             Return the number of AttributeTypeAndValue objects in this RDN,
            
             @return size of RDN, greater than 1 if multi-valued.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X500.Rdn.ToAsn1Object">
                     * <pre>
                     * RelativeDistinguishedName ::=
                     *                     SET OF AttributeTypeAndValue
            
                     * AttributeTypeAndValue ::= SEQUENCE {
                     *        type     AttributeType,
                     *        value    AttributeValue }
                     * </pre>
                     * @return this object as its ASN1Primitive type
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.X509.AccessDescription">
            The AccessDescription object.
            <pre>
            AccessDescription  ::=  SEQUENCE {
                  accessMethod          OBJECT IDENTIFIER,
                  accessLocation        GeneralName  }
            </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.AccessDescription.#ctor(Org.BouncyCastle2.Asn1.DerObjectIdentifier,Org.BouncyCastle2.Asn1.X509.GeneralName)">
            create an AccessDescription with the oid and location provided.
        </member>
        <member name="P:Org.BouncyCastle2.Asn1.X509.AccessDescription.AccessMethod">
            
             @return the access method.
        </member>
        <member name="P:Org.BouncyCastle2.Asn1.X509.AccessDescription.AccessLocation">
            
             @return the access location
        </member>
        <member name="P:Org.BouncyCastle2.Asn1.X509.AlgorithmIdentifier.Algorithm">
            <summary>
            Return the OID in the Algorithm entry of this identifier.
            </summary>
        </member>
        <member name="P:Org.BouncyCastle2.Asn1.X509.AlgorithmIdentifier.Parameters">
            <summary>
            Return the parameters structure in the Parameters entry of this identifier.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.AlgorithmIdentifier.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
                 AlgorithmIdentifier ::= Sequence {
                                       algorithm OBJECT IDENTIFIER,
                                       parameters ANY DEFINED BY algorithm OPTIONAL }
            </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.AttCertIssuer.#ctor(Org.BouncyCastle2.Asn1.X509.GeneralNames)">
            <summary>
            Don't use this one if you are trying to be RFC 3281 compliant.
            Use it for v1 attribute certificates only.
            </summary>
            <param name="names">Our GeneralNames structure</param>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.AttCertIssuer.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
             AttCertIssuer ::= CHOICE {
                  v1Form   GeneralNames,  -- MUST NOT be used in this
                                          -- profile
                  v2Form   [0] V2Form     -- v2 only
             }
            </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.AttCertValidityPeriod.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
             AttCertValidityPeriod  ::= Sequence {
                  notBeforeTime  GeneralizedTime,
                  notAfterTime   GeneralizedTime
             }
            </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.AttributeX509.GetInstance(System.Object)">
             return an Attr object from the given object.
            
             @param o the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.AttributeX509.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            Attr ::= Sequence {
                attrType OBJECT IDENTIFIER,
                attrValues Set OF AttributeValue
            }
            </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.AttributeCertificate.GetInstance(System.Object)">
            @param obj
            @return
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.AttributeCertificate.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
             AttributeCertificate ::= Sequence {
                  acinfo               AttributeCertificateInfo,
                  signatureAlgorithm   AlgorithmIdentifier,
                  signatureValue       BIT STRING
             }
            </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.AttributeCertificateInfo.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <pre>
              AttributeCertificateInfo ::= Sequence {
                   version              AttCertVersion -- version is v2,
                   holder               Holder,
                   issuer               AttCertIssuer,
                   signature            AlgorithmIdentifier,
                   serialNumber         CertificateSerialNumber,
                   attrCertValidityPeriod   AttCertValidityPeriod,
                   attributes           Sequence OF Attr,
                   issuerUniqueID       UniqueIdentifier OPTIONAL,
                   extensions           Extensions OPTIONAL
              }
            
              AttCertVersion ::= Integer { v2(1) }
             </pre>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.X509.AuthorityInformationAccess">
             The AuthorityInformationAccess object.
             <pre>
             id-pe-authorityInfoAccess OBJECT IDENTIFIER ::= { id-pe 1 }
            
             AuthorityInfoAccessSyntax  ::=
                  Sequence SIZE (1..MAX) OF AccessDescription
             AccessDescription  ::=  Sequence {
                   accessMethod          OBJECT IDENTIFIER,
                   accessLocation        GeneralName  }
            
             id-ad OBJECT IDENTIFIER ::= { id-pkix 48 }
             id-ad-caIssuers OBJECT IDENTIFIER ::= { id-ad 2 }
             id-ad-ocsp OBJECT IDENTIFIER ::= { id-ad 1 }
             </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.AuthorityInformationAccess.#ctor(Org.BouncyCastle2.Asn1.DerObjectIdentifier,Org.BouncyCastle2.Asn1.X509.GeneralName)">
            create an AuthorityInformationAccess with the oid and location provided.
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.X509.AuthorityKeyIdentifier">
             The AuthorityKeyIdentifier object.
             <pre>
             id-ce-authorityKeyIdentifier OBJECT IDENTIFIER ::=  { id-ce 35 }
            
               AuthorityKeyIdentifier ::= Sequence {
                  keyIdentifier             [0] IMPLICIT KeyIdentifier           OPTIONAL,
                  authorityCertIssuer       [1] IMPLICIT GeneralNames            OPTIONAL,
                  authorityCertSerialNumber [2] IMPLICIT CertificateSerialNumber OPTIONAL  }
            
               KeyIdentifier ::= OCTET STRING
             </pre>
            
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.AuthorityKeyIdentifier.#ctor(Org.BouncyCastle2.Asn1.X509.SubjectPublicKeyInfo)">
                     *
                     * Calulates the keyidentifier using a SHA1 hash over the BIT STRING
                     * from SubjectPublicKeyInfo as defined in RFC2459.
                     *
                     * Example of making a AuthorityKeyIdentifier:
                     * <pre>
            	     *   SubjectPublicKeyInfo apki = new SubjectPublicKeyInfo((ASN1Sequence)new ASN1InputStream(
            		 *       publicKey.getEncoded()).readObject());
                     *   AuthorityKeyIdentifier aki = new AuthorityKeyIdentifier(apki);
                     * </pre>
                     *
                     *
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.AuthorityKeyIdentifier.#ctor(Org.BouncyCastle2.Asn1.X509.SubjectPublicKeyInfo,Org.BouncyCastle2.Asn1.X509.GeneralNames,Org.BouncyCastle2.Math.BigInteger)">
            create an AuthorityKeyIdentifier with the GeneralNames tag and
            the serial number provided as well.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.AuthorityKeyIdentifier.#ctor(Org.BouncyCastle2.Asn1.X509.GeneralNames,Org.BouncyCastle2.Math.BigInteger)">
            create an AuthorityKeyIdentifier with the GeneralNames tag and
            the serial number provided.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.AuthorityKeyIdentifier.#ctor(System.Byte[])">
            create an AuthorityKeyIdentifier with a precomputed key identifier
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.AuthorityKeyIdentifier.#ctor(System.Byte[],Org.BouncyCastle2.Asn1.X509.GeneralNames,Org.BouncyCastle2.Math.BigInteger)">
            create an AuthorityKeyIdentifier with a precomupted key identifier
            and the GeneralNames tag and the serial number provided as well.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.AuthorityKeyIdentifier.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.BasicConstraints.#ctor(System.Int32)">
             create a cA=true object for the given path length constraint.
            
             @param pathLenConstraint
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.BasicConstraints.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            BasicConstraints := Sequence {
               cA                  Boolean DEFAULT FALSE,
               pathLenConstraint   Integer (0..MAX) OPTIONAL
            }
            </pre>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.X509.CertificateList">
             PKIX RFC-2459
            
             The X.509 v2 CRL syntax is as follows.  For signature calculation,
             the data that is to be signed is ASN.1 Der encoded.
            
             <pre>
             CertificateList  ::=  Sequence  {
                  tbsCertList          TbsCertList,
                  signatureAlgorithm   AlgorithmIdentifier,
                  signatureValue       BIT STRING  }
             </pre>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.X509.CertificatePair">
             This class helps to support crossCerfificatePairs in a LDAP directory
             according RFC 2587
            
             <pre>
                 crossCertificatePairATTRIBUTE::={
                   WITH SYNTAX   CertificatePair
                   EQUALITY MATCHING RULE certificatePairExactMatch
                   ID joint-iso-ccitt(2) ds(5) attributeType(4) crossCertificatePair(40)}
             </pre>
            
             <blockquote> The forward elements of the crossCertificatePair attribute of a
             CA's directory entry shall be used to store all, except self-issued
             certificates issued to this CA. Optionally, the reverse elements of the
             crossCertificatePair attribute, of a CA's directory entry may contain a
             subset of certificates issued by this CA to other CAs. When both the forward
             and the reverse elements are present in a single attribute value, issuer name
             in one certificate shall match the subject name in the other and vice versa,
             and the subject public key in one certificate shall be capable of verifying
             the digital signature on the other certificate and vice versa.
            
             When a reverse element is present, the forward element value and the reverse
             element value need not be stored in the same attribute value; in other words,
             they can be stored in either a single attribute value or two attribute
             values. </blockquote>
            
             <pre>
                   CertificatePair ::= SEQUENCE {
                     forward		[0]	Certificate OPTIONAL,
                     reverse		[1]	Certificate OPTIONAL,
                     -- at least one of the pair shall be present -- }
             </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.CertificatePair.#ctor(Org.BouncyCastle2.Asn1.Asn1Sequence)">
             Constructor from Asn1Sequence.
             <p/>
             The sequence is of type CertificatePair:
             <p/>
             <pre>
                   CertificatePair ::= SEQUENCE {
                     forward		[0]	Certificate OPTIONAL,
                     reverse		[1]	Certificate OPTIONAL,
                     -- at least one of the pair shall be present -- }
             </pre>
            
             @param seq The ASN.1 sequence.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.CertificatePair.#ctor(Org.BouncyCastle2.Asn1.X509.X509CertificateStructure,Org.BouncyCastle2.Asn1.X509.X509CertificateStructure)">
             Constructor from a given details.
            
             @param forward Certificates issued to this CA.
             @param reverse Certificates issued by this CA to other CAs.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.CertificatePair.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <p/>
             Returns:
             <p/>
             <pre>
                   CertificatePair ::= SEQUENCE {
                     forward		[0]	Certificate OPTIONAL,
                     reverse		[1]	Certificate OPTIONAL,
                     -- at least one of the pair shall be present -- }
             </pre>
            
             @return a DERObject
        </member>
        <member name="P:Org.BouncyCastle2.Asn1.X509.CertificatePair.Forward">
            @return Returns the forward.
        </member>
        <member name="P:Org.BouncyCastle2.Asn1.X509.CertificatePair.Reverse">
            @return Returns the reverse.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.CertificatePolicies.#ctor(Org.BouncyCastle2.Asn1.X509.PolicyInformation)">
            Construct a CertificatePolicies object containing one PolicyInformation.
            
            @param name the name to be contained.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.CertificatePolicies.ToAsn1Object">
            Produce an object suitable for an ASN1OutputStream.
            <pre>
            CertificatePolicies ::= SEQUENCE SIZE {1..MAX} OF PolicyInformation
            </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.CrlDistPoint.GetDistributionPoints">
             Return the distribution points making up the sequence.
            
             @return DistributionPoint[]
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.CrlDistPoint.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            CrlDistPoint ::= Sequence SIZE {1..MAX} OF DistributionPoint
            </pre>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.X509.CrlNumber">
            The CRLNumber object.
            <pre>
            CRLNumber::= Integer(0..MAX)
            </pre>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.X509.CrlReason">
            The CRLReason enumeration.
            <pre>
            CRLReason ::= Enumerated {
             unspecified             (0),
             keyCompromise           (1),
             cACompromise            (2),
             affiliationChanged      (3),
             superseded              (4),
             cessationOfOperation    (5),
             certificateHold         (6),
             removeFromCRL           (8),
             privilegeWithdrawn      (9),
             aACompromise           (10)
            }
            </pre>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.X509.DigestInfo">
            The DigestInfo object.
            <pre>
            DigestInfo::=Sequence{
                     digestAlgorithm  AlgorithmIdentifier,
                     digest OCTET STRING }
            </pre>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.X509.DisplayText">
             <code>DisplayText</code> class, used in
             <code>CertificatePolicies</code> X509 V3 extensions (in policy qualifiers).
            
             <p>It stores a string in a chosen encoding.
             <pre>
             DisplayText ::= CHOICE {
                  ia5String        IA5String      (SIZE (1..200)),
                  visibleString    VisibleString  (SIZE (1..200)),
                  bmpString        BMPString      (SIZE (1..200)),
                  utf8String       UTF8String     (SIZE (1..200)) }
             </pre></p>
             @see PolicyQualifierInfo
             @see PolicyInformation
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.DisplayText.ContentTypeIA5String">
             Constant corresponding to ia5String encoding.
            
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.DisplayText.ContentTypeBmpString">
             Constant corresponding to bmpString encoding.
            
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.DisplayText.ContentTypeUtf8String">
             Constant corresponding to utf8String encoding.
            
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.DisplayText.ContentTypeVisibleString">
             Constant corresponding to visibleString encoding.
            
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.DisplayText.DisplayTextMaximumSize">
             Describe constant <code>DisplayTextMaximumSize</code> here.
            
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.DisplayText.#ctor(System.Int32,System.String)">
             Creates a new <code>DisplayText</code> instance.
            
             @param type the desired encoding type for the text.
             @param text the text to store. Strings longer than 200
             characters are truncated.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.DisplayText.#ctor(System.String)">
             Creates a new <code>DisplayText</code> instance.
            
             @param text the text to encapsulate. Strings longer than 200
             characters are truncated.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.DisplayText.#ctor(Org.BouncyCastle2.Asn1.IAsn1String)">
             Creates a new <code>DisplayText</code> instance.
             <p>Useful when reading back a <code>DisplayText</code> class
             from it's Asn1Encodable form.</p>
            
             @param contents an <code>Asn1Encodable</code> instance.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.DisplayText.GetString">
             Returns the stored <code>string</code> object.
            
             @return the stored text as a <code>string</code>.
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.X509.DistributionPoint">
            The DistributionPoint object.
            <pre>
            DistributionPoint ::= Sequence {
                 distributionPoint [0] DistributionPointName OPTIONAL,
                 reasons           [1] ReasonFlags OPTIONAL,
                 cRLIssuer         [2] GeneralNames OPTIONAL
            }
            </pre>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.X509.DistributionPointName">
            The DistributionPointName object.
            <pre>
            DistributionPointName ::= CHOICE {
                fullName                 [0] GeneralNames,
                nameRelativeToCRLIssuer  [1] RDN
            }
            </pre>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.X509.ExtendedKeyUsage">
            The extendedKeyUsage object.
            <pre>
                 extendedKeyUsage ::= Sequence SIZE (1..MAX) OF KeyPurposeId
            </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.ExtendedKeyUsage.GetAllUsages">
            Returns all extended key usages.
            The returned ArrayList contains DerObjectIdentifier instances.
            @return An ArrayList with all key purposes.
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.X509.GeneralName">
             The GeneralName object.
             <pre>
             GeneralName ::= CHOICE {
                  otherName                       [0]     OtherName,
                  rfc822Name                      [1]     IA5String,
                  dNSName                         [2]     IA5String,
                  x400Address                     [3]     ORAddress,
                  directoryName                   [4]     Name,
                  ediPartyName                    [5]     EDIPartyName,
                  uniformResourceIdentifier       [6]     IA5String,
                  iPAddress                       [7]     OCTET STRING,
                  registeredID                    [8]     OBJECT IDENTIFIER}
            
             OtherName ::= Sequence {
                  type-id    OBJECT IDENTIFIER,
                  value      [0] EXPLICIT ANY DEFINED BY type-id }
            
             EDIPartyName ::= Sequence {
                  nameAssigner            [0]     DirectoryString OPTIONAL,
                  partyName               [1]     DirectoryString }
             </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.GeneralName.#ctor(Org.BouncyCastle2.Asn1.Asn1Object,System.Int32)">
             When the subjectAltName extension contains an Internet mail address,
             the address MUST be included as an rfc822Name. The format of an
             rfc822Name is an "addr-spec" as defined in RFC 822 [RFC 822].
            
             When the subjectAltName extension contains a domain name service
             label, the domain name MUST be stored in the dNSName (an IA5String).
             The name MUST be in the "preferred name syntax," as specified by RFC
             1034 [RFC 1034].
            
             When the subjectAltName extension contains a URI, the name MUST be
             stored in the uniformResourceIdentifier (an IA5String). The name MUST
             be a non-relative URL, and MUST follow the URL syntax and encoding
             rules specified in [RFC 1738].  The name must include both a scheme
             (e.g., "http" or "ftp") and a scheme-specific-part.  The scheme-
             specific-part must include a fully qualified domain name or IP
             address as the host.
            
             When the subjectAltName extension contains a iPAddress, the address
             MUST be stored in the octet string in "network byte order," as
             specified in RFC 791 [RFC 791]. The least significant bit (LSB) of
             each octet is the LSB of the corresponding byte in the network
             address. For IP Version 4, as specified in RFC 791, the octet string
             MUST contain exactly four octets.  For IP Version 6, as specified in
             RFC 1883, the octet string MUST contain exactly sixteen octets [RFC
             1883].
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.GeneralName.#ctor(System.Int32,System.String)">
             Create a GeneralName for the given tag from the passed in string.
             <p>
             This constructor can handle:
             <ul>
             <li>rfc822Name</li>
             <li>iPAddress</li>
             <li>directoryName</li>
             <li>dNSName</li>
             <li>uniformResourceIdentifier</li>
             <li>registeredID</li>
             </ul>
             For x400Address, otherName and ediPartyName there is no common string
             format defined.
             </p><p>
             Note: A directory name can be encoded in different ways into a byte
             representation. Be aware of this if the byte representation is used for
             comparing results.
             </p>
            
             @param tag tag number
             @param name string representation of name
             @throws ArgumentException if the string encoding is not correct or
                         not supported.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.GeneralNames.#ctor(Org.BouncyCastle2.Asn1.X509.GeneralName)">
            <summary>Construct a GeneralNames object containing one GeneralName.</summary>
            <param name="name">The name to be contained.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.GeneralNames.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            GeneralNames ::= Sequence SIZE {1..MAX} OF GeneralName
            </pre>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.X509.GeneralSubtree">
             Class for containing a restriction object subtrees in NameConstraints. See
             RFC 3280.
            
             <pre>
            
                   GeneralSubtree ::= SEQUENCE
                   {
                     baseName                    GeneralName,
                     minimum         [0]     BaseDistance DEFAULT 0,
                     maximum         [1]     BaseDistance OPTIONAL
                   }
             </pre>
            
             @see org.BouncyCastle2.asn1.x509.NameConstraints
            
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.GeneralSubtree.#ctor(Org.BouncyCastle2.Asn1.X509.GeneralName,Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger)">
             Constructor from a given details.
            
             According RFC 3280, the minimum and maximum fields are not used with any
             name forms, thus minimum MUST be zero, and maximum MUST be absent.
             <p>
             If minimum is <code>null</code>, zero is assumed, if
             maximum is <code>null</code>, maximum is absent.</p>
            
             @param baseName
                        A restriction.
             @param minimum
                        Minimum
            
             @param maximum
                        Maximum
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.GeneralSubtree.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
            
             Returns:
            
             <pre>
                   GeneralSubtree ::= SEQUENCE
                   {
                     baseName                    GeneralName,
                     minimum         [0]     BaseDistance DEFAULT 0,
                     maximum         [1]     BaseDistance OPTIONAL
                   }
             </pre>
            
             @return a DERObject
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.X509.Holder">
            The Holder object.
            <p>
            For an v2 attribute certificate this is:
            
            <pre>
                       Holder ::= SEQUENCE {
                             baseCertificateID   [0] IssuerSerial OPTIONAL,
                                      -- the issuer and serial number of
                                      -- the holder's Public Key Certificate
                             entityName          [1] GeneralNames OPTIONAL,
                                      -- the name of the claimant or role
                             objectDigestInfo    [2] ObjectDigestInfo OPTIONAL
                                      -- used to directly authenticate the holder,
                                      -- for example, an executable
                       }
            </pre>
            </p>
            <p>
            For an v1 attribute certificate this is:
            
            <pre>
                    subject CHOICE {
                     baseCertificateID [0] EXPLICIT IssuerSerial,
                     -- associated with a Public Key Certificate
                     subjectName [1] EXPLICIT GeneralNames },
                     -- associated with a name
            </pre>
            </p>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.Holder.#ctor(Org.BouncyCastle2.Asn1.Asn1TaggedObject)">
            Constructor for a holder for an v1 attribute certificate.
            
            @param tagObj The ASN.1 tagged holder object.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.Holder.#ctor(Org.BouncyCastle2.Asn1.Asn1Sequence)">
            Constructor for a holder for an v2 attribute certificate. *
            
            @param seq The ASN.1 sequence.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.Holder.#ctor(Org.BouncyCastle2.Asn1.X509.IssuerSerial,System.Int32)">
            Constructs a holder from a IssuerSerial.
            @param baseCertificateID The IssuerSerial.
            @param version The version of the attribute certificate. 
        </member>
        <member name="P:Org.BouncyCastle2.Asn1.X509.Holder.Version">
            Returns 1 for v2 attribute certificates or 0 for v1 attribute
            certificates. 
            @return The version of the attribute certificate.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.Holder.#ctor(Org.BouncyCastle2.Asn1.X509.GeneralNames)">
            Constructs a holder with an entityName for v2 attribute certificates or
            with a subjectName for v1 attribute certificates.
            
            @param entityName The entity or subject name.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.Holder.#ctor(Org.BouncyCastle2.Asn1.X509.GeneralNames,System.Int32)">
            Constructs a holder with an entityName for v2 attribute certificates or
            with a subjectName for v1 attribute certificates.
            
            @param entityName The entity or subject name.
            @param version The version of the attribute certificate. 
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.Holder.#ctor(Org.BouncyCastle2.Asn1.X509.ObjectDigestInfo)">
            Constructs a holder from an object digest info.
            
            @param objectDigestInfo The object digest info object.
        </member>
        <member name="P:Org.BouncyCastle2.Asn1.X509.Holder.EntityName">
            Returns the entityName for an v2 attribute certificate or the subjectName
            for an v1 attribute certificate.
            
            @return The entityname or subjectname.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.Holder.ToAsn1Object">
            The Holder object.
            <pre>
             Holder ::= Sequence {
                   baseCertificateID   [0] IssuerSerial OPTIONAL,
                            -- the issuer and serial number of
                            -- the holder's Public Key Certificate
                   entityName          [1] GeneralNames OPTIONAL,
                            -- the name of the claimant or role
                   objectDigestInfo    [2] ObjectDigestInfo OPTIONAL
                            -- used to directly authenticate the holder,
                            -- for example, an executable
             }
            </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.IssuerSerial.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
             IssuerSerial  ::=  Sequence {
                  issuer         GeneralNames,
                  serial         CertificateSerialNumber,
                  issuerUid      UniqueIdentifier OPTIONAL
             }
            </pre>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.X509.IssuingDistributionPoint">
            <pre>
            IssuingDistributionPoint ::= SEQUENCE { 
              distributionPoint          [0] DistributionPointName OPTIONAL, 
              onlyContainsUserCerts      [1] BOOLEAN DEFAULT FALSE, 
              onlyContainsCACerts        [2] BOOLEAN DEFAULT FALSE, 
              onlySomeReasons            [3] ReasonFlags OPTIONAL, 
              indirectCRL                [4] BOOLEAN DEFAULT FALSE,
              onlyContainsAttributeCerts [5] BOOLEAN DEFAULT FALSE }
            </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.IssuingDistributionPoint.#ctor(Org.BouncyCastle2.Asn1.X509.DistributionPointName,System.Boolean,System.Boolean,Org.BouncyCastle2.Asn1.X509.ReasonFlags,System.Boolean,System.Boolean)">
            Constructor from given details.
            
            @param distributionPoint
                       May contain an URI as pointer to most current CRL.
            @param onlyContainsUserCerts Covers revocation information for end certificates.
            @param onlyContainsCACerts Covers revocation information for CA certificates.
            
            @param onlySomeReasons
                       Which revocation reasons does this point cover.
            @param indirectCRL
                       If <code>true</code> then the CRL contains revocation
                       information about certificates ssued by other CAs.
            @param onlyContainsAttributeCerts Covers revocation information for attribute certificates.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.IssuingDistributionPoint.#ctor(Org.BouncyCastle2.Asn1.Asn1Sequence)">
            Constructor from Asn1Sequence
        </member>
        <member name="P:Org.BouncyCastle2.Asn1.X509.IssuingDistributionPoint.DistributionPoint">
            @return Returns the distributionPoint.
        </member>
        <member name="P:Org.BouncyCastle2.Asn1.X509.IssuingDistributionPoint.OnlySomeReasons">
            @return Returns the onlySomeReasons.
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.X509.KeyPurposeID">
            The KeyPurposeID object.
            <pre>
                KeyPurposeID ::= OBJECT IDENTIFIER
            </pre>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.X509.KeyUsage">
             The KeyUsage object.
             <pre>
                id-ce-keyUsage OBJECT IDENTIFIER ::=  { id-ce 15 }
            
                KeyUsage ::= BIT STRING {
                     digitalSignature        (0),
                     nonRepudiation          (1),
                     keyEncipherment         (2),
                     dataEncipherment        (3),
                     keyAgreement            (4),
                     keyCertSign             (5),
                     cRLSign                 (6),
                     encipherOnly            (7),
                     decipherOnly            (8) }
             </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.KeyUsage.#ctor(System.Int32)">
             Basic constructor.
            
             @param usage - the bitwise OR of the Key Usage flags giving the
             allowed uses for the key.
             e.g. (KeyUsage.keyEncipherment | KeyUsage.dataEncipherment)
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.NameConstraints.#ctor(System.Collections.IList,System.Collections.IList)">
             Constructor from a given details.
            
             <p>permitted and excluded are Vectors of GeneralSubtree objects.</p>
            
             @param permitted Permitted subtrees
             @param excluded Excluded subtrees
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.X509.NoticeReference">
             <code>NoticeReference</code> class, used in
             <code>CertificatePolicies</code> X509 V3 extensions
             (in policy qualifiers).
            
             <pre>
              NoticeReference ::= Sequence {
                  organization     DisplayText,
                  noticeNumbers    Sequence OF Integer }
            
             </pre>
            
             @see PolicyQualifierInfo
             @see PolicyInformation
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.NoticeReference.#ctor(System.String,System.Collections.IList)">
             Creates a new <code>NoticeReference</code> instance.
            
             @param organization a <code>String</code> value
             @param numbers a <code>Vector</code> value
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.NoticeReference.#ctor(System.String,Org.BouncyCastle2.Asn1.Asn1EncodableVector)">
             Creates a new <code>NoticeReference</code> instance.
            
             @param organization a <code>String</code> value
             @param noticeNumbers an <code>ASN1EncodableVector</code> value
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.NoticeReference.#ctor(Org.BouncyCastle2.Asn1.X509.DisplayText,Org.BouncyCastle2.Asn1.Asn1EncodableVector)">
             Creates a new <code>NoticeReference</code> instance.
            
             @param organization displayText
             @param noticeNumbers an <code>ASN1EncodableVector</code> value
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.NoticeReference.#ctor(Org.BouncyCastle2.Asn1.Asn1Sequence)">
             Creates a new <code>NoticeReference</code> instance.
             <p>Useful for reconstructing a <code>NoticeReference</code>
             instance from its encodable/encoded form.</p>
            
             @param as an <code>Asn1Sequence</code> value obtained from either
             calling @{link ToAsn1Object()} for a <code>NoticeReference</code>
             instance or from parsing it from a Der-encoded stream.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.NoticeReference.ToAsn1Object">
             Describe <code>ToAsn1Object</code> method here.
            
             @return a <code>Asn1Object</code> value
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.X509.ObjectDigestInfo">
            ObjectDigestInfo ASN.1 structure used in v2 attribute certificates.
            
            <pre>
             
               ObjectDigestInfo ::= SEQUENCE {
                    digestedObjectType  ENUMERATED {
                            publicKey            (0),
                            publicKeyCert        (1),
                            otherObjectTypes     (2) },
                                    -- otherObjectTypes MUST NOT
                                    -- be used in this profile
                    otherObjectTypeID   OBJECT IDENTIFIER OPTIONAL,
                    digestAlgorithm     AlgorithmIdentifier,
                    objectDigest        BIT STRING
               }
              
            </pre>
            
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.ObjectDigestInfo.PublicKey">
            The public key is hashed.
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.ObjectDigestInfo.PublicKeyCert">
            The public key certificate is hashed.
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.ObjectDigestInfo.OtherObjectDigest">
            An other object is hashed.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.ObjectDigestInfo.#ctor(System.Int32,System.String,Org.BouncyCastle2.Asn1.X509.AlgorithmIdentifier,System.Byte[])">
            Constructor from given details.
            <p>
            If <code>digestedObjectType</code> is not {@link #publicKeyCert} or
            {@link #publicKey} <code>otherObjectTypeID</code> must be given,
            otherwise it is ignored.</p>
            
            @param digestedObjectType The digest object type.
            @param otherObjectTypeID The object type ID for
                       <code>otherObjectDigest</code>.
            @param digestAlgorithm The algorithm identifier for the hash.
            @param objectDigest The hash value.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.ObjectDigestInfo.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            
            <pre>
             
               ObjectDigestInfo ::= SEQUENCE {
                    digestedObjectType  ENUMERATED {
                            publicKey            (0),
                            publicKeyCert        (1),
                            otherObjectTypes     (2) },
                                    -- otherObjectTypes MUST NOT
                                    -- be used in this profile
                    otherObjectTypeID   OBJECT IDENTIFIER OPTIONAL,
                    digestAlgorithm     AlgorithmIdentifier,
                    objectDigest        BIT STRING
               }
              
            </pre>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.X509.OtherName">
            The OtherName object.
            <pre>
            OtherName ::= SEQUENCE {
                 type-id    OBJECT IDENTIFIER,
                 value      [0] EXPLICIT ANY DEFINED BY type-id }
            </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.OtherName.GetInstance(System.Object)">
            OtherName factory method.
            @param obj the object used to construct an instance of <code>
            OtherName</code>. It must be an instance of <code>OtherName
            </code> or <code>ASN1Sequence</code>.
            @return the instance of <code>OtherName</code> built from the
            supplied object.
            @throws java.lang.IllegalArgumentException if the object passed
            to the factory is not an instance of <code>OtherName</code> or something that
            can be converted into an appropriate <code>ASN1Sequence</code>.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.OtherName.#ctor(Org.BouncyCastle2.Asn1.DerObjectIdentifier,Org.BouncyCastle2.Asn1.Asn1Encodable)">
            Base constructor.
            @param typeID the type of the other name.
            @param value the ANY object that represents the value.
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.X509.PolicyQualifierID">
             PolicyQualifierId, used in the CertificatePolicies
             X509V3 extension.
            
             <pre>
                id-qt          OBJECT IDENTIFIER ::=  { id-pkix 2 }
                id-qt-cps      OBJECT IDENTIFIER ::=  { id-qt 1 }
                id-qt-unotice  OBJECT IDENTIFIER ::=  { id-qt 2 }
              PolicyQualifierId ::=
                   OBJECT IDENTIFIER ( id-qt-cps | id-qt-unotice )
             </pre>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.X509.PolicyQualifierInfo">
             Policy qualifiers, used in the X509V3 CertificatePolicies
             extension.
            
             <pre>
               PolicyQualifierInfo ::= Sequence {
                   policyQualifierId  PolicyQualifierId,
                   qualifier          ANY DEFINED BY policyQualifierId }
             </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.PolicyQualifierInfo.#ctor(Org.BouncyCastle2.Asn1.DerObjectIdentifier,Org.BouncyCastle2.Asn1.Asn1Encodable)">
             Creates a new <code>PolicyQualifierInfo</code> instance.
            
             @param policyQualifierId a <code>PolicyQualifierId</code> value
             @param qualifier the qualifier, defined by the above field.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.PolicyQualifierInfo.#ctor(System.String)">
             Creates a new <code>PolicyQualifierInfo</code> containing a
             cPSuri qualifier.
            
             @param cps the CPS (certification practice statement) uri as a
             <code>string</code>.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.PolicyQualifierInfo.#ctor(Org.BouncyCastle2.Asn1.Asn1Sequence)">
             Creates a new <code>PolicyQualifierInfo</code> instance.
            
             @param as <code>PolicyQualifierInfo</code> X509 structure
             encoded as an Asn1Sequence.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.PolicyQualifierInfo.ToAsn1Object">
             Returns a Der-encodable representation of this instance.
            
             @return a <code>Asn1Object</code> value
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.X509.PrivateKeyUsagePeriod">
            <remarks>
            <pre>
            PrivateKeyUsagePeriod ::= SEQUENCE
            {
            notBefore       [0]     GeneralizedTime OPTIONAL,
            notAfter        [1]     GeneralizedTime OPTIONAL }
            </pre>
            </remarks>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.X509.Qualified.BiometricData">
            The BiometricData object.
            <pre>
            BiometricData  ::=  SEQUENCE {
                  typeOfBiometricData  TypeOfBiometricData,
                  hashAlgorithm        AlgorithmIdentifier,
                  biometricDataHash    OCTET STRING,
                  sourceDataUri        IA5String OPTIONAL  }
            </pre>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.X509.Qualified.Iso4217CurrencyCode">
            The Iso4217CurrencyCode object.
            <pre>
            Iso4217CurrencyCode  ::=  CHOICE {
                  alphabetic              PrintableString (SIZE 3), --Recommended
                  numeric              INTEGER (1..999) }
            -- Alphabetic or numeric currency code as defined in ISO 4217
            -- It is recommended that the Alphabetic form is used
            </pre>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.X509.Qualified.MonetaryValue">
            The MonetaryValue object.
            <pre>
            MonetaryValue  ::=  SEQUENCE {
                  currency              Iso4217CurrencyCode,
                  amount               INTEGER,
                  exponent             INTEGER }
            -- value = amount * 10^exponent
            </pre>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.X509.Qualified.QCStatement">
            The QCStatement object.
            <pre>
            QCStatement ::= SEQUENCE {
              statementId        OBJECT IDENTIFIER,
              statementInfo      ANY DEFINED BY statementId OPTIONAL}
            </pre>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.X509.Qualified.SemanticsInformation">
             The SemanticsInformation object.
             <pre>
                   SemanticsInformation ::= SEQUENCE {
                     semanticsIdentifier        OBJECT IDENTIFIER   OPTIONAL,
                     nameRegistrationAuthorities NameRegistrationAuthorities
                                                                     OPTIONAL }
                     (WITH COMPONENTS {..., semanticsIdentifier PRESENT}|
                      WITH COMPONENTS {..., nameRegistrationAuthorities PRESENT})
            
                 NameRegistrationAuthorities ::=  SEQUENCE SIZE (1..MAX) OF
                     GeneralName
             </pre>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.X509.Qualified.TypeOfBiometricData">
             The TypeOfBiometricData object.
             <pre>
             TypeOfBiometricData ::= CHOICE {
               predefinedBiometricType   PredefinedBiometricType,
               biometricDataOid          OBJECT IDENTIFIER }
            
             PredefinedBiometricType ::= INTEGER {
               picture(0),handwritten-signature(1)}
               (picture|handwritten-signature)
             </pre>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.X509.ReasonFlags">
            The ReasonFlags object.
            <pre>
            ReasonFlags ::= BIT STRING {
               unused(0),
               keyCompromise(1),
               cACompromise(2),
               affiliationChanged(3),
               superseded(4),
               cessationOfOperation(5),
               certficateHold(6)
            }
            </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.ReasonFlags.#ctor(System.Int32)">
            @param reasons - the bitwise OR of the Key Reason flags giving the
            allowed uses for the key.
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.X509.RoleSyntax">
             Implementation of the RoleSyntax object as specified by the RFC3281.
            
             <pre>
             RoleSyntax ::= SEQUENCE {
                             roleAuthority  [0] GeneralNames OPTIONAL,
                             roleName       [1] GeneralName
                       }
             </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.RoleSyntax.GetInstance(System.Object)">
            RoleSyntax factory method.
            @param obj the object used to construct an instance of <code>
            RoleSyntax</code>. It must be an instance of <code>RoleSyntax
            </code> or <code>Asn1Sequence</code>.
            @return the instance of <code>RoleSyntax</code> built from the
            supplied object.
            @throws java.lang.ArgumentException if the object passed
            to the factory is not an instance of <code>RoleSyntax</code> or
            <code>Asn1Sequence</code>.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.RoleSyntax.#ctor(Org.BouncyCastle2.Asn1.X509.GeneralNames,Org.BouncyCastle2.Asn1.X509.GeneralName)">
            Constructor.
            @param roleAuthority the role authority of this RoleSyntax.
            @param roleName    the role name of this RoleSyntax.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.RoleSyntax.#ctor(Org.BouncyCastle2.Asn1.X509.GeneralName)">
            Constructor. Invoking this constructor is the same as invoking
            <code>new RoleSyntax(null, roleName)</code>.
            @param roleName    the role name of this RoleSyntax.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.RoleSyntax.#ctor(System.String)">
            Utility constructor. Takes a <code>string</code> argument representing
            the role name, builds a <code>GeneralName</code> to hold the role name
            and calls the constructor that takes a <code>GeneralName</code>.
            @param roleName
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.RoleSyntax.#ctor(Org.BouncyCastle2.Asn1.Asn1Sequence)">
            Constructor that builds an instance of <code>RoleSyntax</code> by
            extracting the encoded elements from the <code>Asn1Sequence</code>
            object supplied.
            @param seq    an instance of <code>Asn1Sequence</code> that holds
            the encoded elements used to build this <code>RoleSyntax</code>.
        </member>
        <member name="P:Org.BouncyCastle2.Asn1.X509.RoleSyntax.RoleAuthority">
            Gets the role authority of this RoleSyntax.
            @return    an instance of <code>GeneralNames</code> holding the
            role authority of this RoleSyntax.
        </member>
        <member name="P:Org.BouncyCastle2.Asn1.X509.RoleSyntax.RoleName">
            Gets the role name of this RoleSyntax.
            @return    an instance of <code>GeneralName</code> holding the
            role name of this RoleSyntax.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.RoleSyntax.GetRoleNameAsString">
            Gets the role name as a <code>java.lang.string</code> object.
            @return    the role name of this RoleSyntax represented as a
            <code>string</code> object.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.RoleSyntax.GetRoleAuthorityAsString">
            Gets the role authority as a <code>string[]</code> object.
            @return the role authority of this RoleSyntax represented as a
            <code>string[]</code> array.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.RoleSyntax.ToAsn1Object">
             Implementation of the method <code>ToAsn1Object</code> as
             required by the superclass <code>ASN1Encodable</code>.
            
             <pre>
             RoleSyntax ::= SEQUENCE {
                             roleAuthority  [0] GeneralNames OPTIONAL,
                             roleName       [1] GeneralName
                       }
             </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.RsaPublicKeyStructure.ToAsn1Object">
            This outputs the key in Pkcs1v2 format.
            <pre>
                 RSAPublicKey ::= Sequence {
                                     modulus Integer, -- n
                                     publicExponent Integer, -- e
                                 }
            </pre>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.X509.SigI.NameOrPseudonym">
            Structure for a name or pseudonym.
            
            <pre>
                  NameOrPseudonym ::= CHOICE {
                	   surAndGivenName SEQUENCE {
                	     surName DirectoryString,
                	     givenName SEQUENCE OF DirectoryString 
                    },
                	   pseudonym DirectoryString 
                  }
            </pre>
            
            @see org.BouncyCastle2.asn1.x509.sigi.PersonalData
            
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.SigI.NameOrPseudonym.#ctor(Org.BouncyCastle2.Asn1.X500.DirectoryString)">
            Constructor from DERString.
            <p/>
            The sequence is of type NameOrPseudonym:
            <p/>
            <pre>
                  NameOrPseudonym ::= CHOICE {
                	   surAndGivenName SEQUENCE {
                	     surName DirectoryString,
                	     givenName SEQUENCE OF DirectoryString
                    },
                	   pseudonym DirectoryString
                  }
            </pre>
            @param pseudonym pseudonym value to use.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.SigI.NameOrPseudonym.#ctor(Org.BouncyCastle2.Asn1.Asn1Sequence)">
             Constructor from Asn1Sequence.
             <p/>
             The sequence is of type NameOrPseudonym:
             <p/>
             <pre>
                   NameOrPseudonym ::= CHOICE {
                 	   surAndGivenName SEQUENCE {
                 	     surName DirectoryString,
                 	     givenName SEQUENCE OF DirectoryString
                     },
                 	   pseudonym DirectoryString
                   }
             </pre>
            
             @param seq The ASN.1 sequence.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.SigI.NameOrPseudonym.#ctor(System.String)">
             Constructor from a given details.
            
             @param pseudonym The pseudonym.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.SigI.NameOrPseudonym.#ctor(Org.BouncyCastle2.Asn1.X500.DirectoryString,Org.BouncyCastle2.Asn1.Asn1Sequence)">
             Constructor from a given details.
            
             @param surname   The surname.
             @param givenName A sequence of directory strings making up the givenName
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.SigI.NameOrPseudonym.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <p/>
             Returns:
             <p/>
             <pre>
                   NameOrPseudonym ::= CHOICE {
                 	   surAndGivenName SEQUENCE {
                 	     surName DirectoryString,
                 	     givenName SEQUENCE OF DirectoryString
                     },
                 	   pseudonym DirectoryString
                   }
             </pre>
            
             @return an Asn1Object
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.X509.SigI.PersonalData">
             Contains personal data for the otherName field in the subjectAltNames
             extension.
             <p/>
             <pre>
                 PersonalData ::= SEQUENCE {
                   nameOrPseudonym NameOrPseudonym,
                   nameDistinguisher [0] INTEGER OPTIONAL,
                   dateOfBirth [1] GeneralizedTime OPTIONAL,
                   placeOfBirth [2] DirectoryString OPTIONAL,
                   gender [3] PrintableString OPTIONAL,
                   postalAddress [4] DirectoryString OPTIONAL
                   }
             </pre>
            
             @see org.BouncyCastle2.asn1.x509.sigi.NameOrPseudonym
             @see org.BouncyCastle2.asn1.x509.sigi.SigIObjectIdentifiers
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.SigI.PersonalData.#ctor(Org.BouncyCastle2.Asn1.Asn1Sequence)">
             Constructor from Asn1Sequence.
             <p/>
             The sequence is of type NameOrPseudonym:
             <p/>
             <pre>
                 PersonalData ::= SEQUENCE {
                   nameOrPseudonym NameOrPseudonym,
                   nameDistinguisher [0] INTEGER OPTIONAL,
                   dateOfBirth [1] GeneralizedTime OPTIONAL,
                   placeOfBirth [2] DirectoryString OPTIONAL,
                   gender [3] PrintableString OPTIONAL,
                   postalAddress [4] DirectoryString OPTIONAL
                   }
             </pre>
            
             @param seq The ASN.1 sequence.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.SigI.PersonalData.#ctor(Org.BouncyCastle2.Asn1.X509.SigI.NameOrPseudonym,Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Asn1.DerGeneralizedTime,Org.BouncyCastle2.Asn1.X500.DirectoryString,System.String,Org.BouncyCastle2.Asn1.X500.DirectoryString)">
             Constructor from a given details.
            
             @param nameOrPseudonym  Name or pseudonym.
             @param nameDistinguisher Name distinguisher.
             @param dateOfBirth      Date of birth.
             @param placeOfBirth     Place of birth.
             @param gender           Gender.
             @param postalAddress    Postal Address.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.SigI.PersonalData.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <p/>
             Returns:
             <p/>
             <pre>
                 PersonalData ::= SEQUENCE {
                   nameOrPseudonym NameOrPseudonym,
                   nameDistinguisher [0] INTEGER OPTIONAL,
                   dateOfBirth [1] GeneralizedTime OPTIONAL,
                   placeOfBirth [2] DirectoryString OPTIONAL,
                   gender [3] PrintableString OPTIONAL,
                   postalAddress [4] DirectoryString OPTIONAL
                   }
             </pre>
            
             @return an Asn1Object
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.X509.SubjectDirectoryAttributes">
             This extension may contain further X.500 attributes of the subject. See also
             RFC 3039.
            
             <pre>
                 SubjectDirectoryAttributes ::= Attributes
                 Attributes ::= SEQUENCE SIZE (1..MAX) OF Attribute
                 Attribute ::= SEQUENCE
                 {
                   type AttributeType
                   values SET OF AttributeValue
                 }
            
                 AttributeType ::= OBJECT IDENTIFIER
                 AttributeValue ::= ANY DEFINED BY AttributeType
             </pre>
            
             @see org.BouncyCastle2.asn1.x509.X509Name for AttributeType ObjectIdentifiers.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.SubjectDirectoryAttributes.#ctor(Org.BouncyCastle2.Asn1.Asn1Sequence)">
             Constructor from Asn1Sequence.
            
             The sequence is of type SubjectDirectoryAttributes:
            
             <pre>
                  SubjectDirectoryAttributes ::= Attributes
                  Attributes ::= SEQUENCE SIZE (1..MAX) OF Attribute
                  Attribute ::= SEQUENCE
                  {
                    type AttributeType
                    values SET OF AttributeValue
                  }
            
                  AttributeType ::= OBJECT IDENTIFIER
                  AttributeValue ::= ANY DEFINED BY AttributeType
             </pre>
            
             @param seq
                        The ASN.1 sequence.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.SubjectDirectoryAttributes.#ctor(System.Collections.IList)">
             Constructor from an ArrayList of attributes.
            
             The ArrayList consists of attributes of type {@link Attribute Attribute}
            
             @param attributes The attributes.
            
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.SubjectDirectoryAttributes.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
            
             Returns:
            
             <pre>
                  SubjectDirectoryAttributes ::= Attributes
                  Attributes ::= SEQUENCE SIZE (1..MAX) OF Attribute
                  Attribute ::= SEQUENCE
                  {
                    type AttributeType
                    values SET OF AttributeValue
                  }
            
                  AttributeType ::= OBJECT IDENTIFIER
                  AttributeValue ::= ANY DEFINED BY AttributeType
             </pre>
            
             @return a DERObject
        </member>
        <member name="P:Org.BouncyCastle2.Asn1.X509.SubjectDirectoryAttributes.Attributes">
            @return Returns the attributes.
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.X509.SubjectKeyIdentifier">
            The SubjectKeyIdentifier object.
            <pre>
            SubjectKeyIdentifier::= OCTET STRING
            </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.SubjectKeyIdentifier.#ctor(Org.BouncyCastle2.Asn1.X509.SubjectPublicKeyInfo)">
             Calculates the keyIdentifier using a SHA1 hash over the BIT STRING
             from SubjectPublicKeyInfo as defined in RFC3280.
            
             @param spki the subject public key info.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.SubjectKeyIdentifier.CreateSha1KeyIdentifier(Org.BouncyCastle2.Asn1.X509.SubjectPublicKeyInfo)">
            Return a RFC 3280 type 1 key identifier. As in:
            <pre>
            (1) The keyIdentifier is composed of the 160-bit SHA-1 hash of the
            value of the BIT STRING subjectPublicKey (excluding the tag,
            length, and number of unused bits).
            </pre>
            @param keyInfo the key info object containing the subjectPublicKey field.
            @return the key identifier.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.SubjectKeyIdentifier.CreateTruncatedSha1KeyIdentifier(Org.BouncyCastle2.Asn1.X509.SubjectPublicKeyInfo)">
            Return a RFC 3280 type 2 key identifier. As in:
            <pre>
            (2) The keyIdentifier is composed of a four bit type field with
            the value 0100 followed by the least significant 60 bits of the
            SHA-1 hash of the value of the BIT STRING subjectPublicKey.
            </pre>
            @param keyInfo the key info object containing the subjectPublicKey field.
            @return the key identifier.
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.X509.SubjectPublicKeyInfo">
            The object that contains the public key stored in a certficate.
            <p>
            The GetEncoded() method in the public keys in the JCE produces a DER
            encoded one of these.</p>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.SubjectPublicKeyInfo.ParsePublicKey">
             for when the public key is an encoded object - if the bitstring
             can't be decoded this routine raises an IOException.
            
             @exception IOException - if the bit string doesn't represent a Der
             encoded object.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.SubjectPublicKeyInfo.GetPublicKey">
             for when the public key is an encoded object - if the bitstring
             can't be decoded this routine raises an IOException.
            
             @exception IOException - if the bit string doesn't represent a Der
             encoded object.
        </member>
        <member name="P:Org.BouncyCastle2.Asn1.X509.SubjectPublicKeyInfo.PublicKeyData">
            for when the public key is raw bits...
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.SubjectPublicKeyInfo.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            SubjectPublicKeyInfo ::= Sequence {
                                     algorithm AlgorithmIdentifier,
                                     publicKey BIT STRING }
            </pre>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.X509.Target">
            Target structure used in target information extension for attribute
            certificates from RFC 3281.
            
            <pre>
                Target  ::= CHOICE {
                  targetName          [0] GeneralName,
                  targetGroup         [1] GeneralName,
                  targetCert          [2] TargetCert
                }
            </pre>
            
            <p>
            The targetCert field is currently not supported and must not be used
            according to RFC 3281.</p>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.Target.GetInstance(System.Object)">
            Creates an instance of a Target from the given object.
            <p>
            <code>obj</code> can be a Target or a {@link Asn1TaggedObject}</p>
            
            @param obj The object.
            @return A Target instance.
            @throws ArgumentException if the given object cannot be
                        interpreted as Target.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.Target.#ctor(Org.BouncyCastle2.Asn1.Asn1TaggedObject)">
            Constructor from Asn1TaggedObject.
            
            @param tagObj The tagged object.
            @throws ArgumentException if the encoding is wrong.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.Target.#ctor(Org.BouncyCastle2.Asn1.X509.Target.Choice,Org.BouncyCastle2.Asn1.X509.GeneralName)">
             Constructor from given details.
             <p>
             Exactly one of the parameters must be not <code>null</code>.</p>
            
             @param type the choice type to apply to the name.
             @param name the general name.
             @throws ArgumentException if type is invalid.
        </member>
        <member name="P:Org.BouncyCastle2.Asn1.X509.Target.TargetGroup">
            @return Returns the targetGroup.
        </member>
        <member name="P:Org.BouncyCastle2.Asn1.X509.Target.TargetName">
            @return Returns the targetName.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.Target.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            
            Returns:
            
            <pre>
                Target  ::= CHOICE {
                  targetName          [0] GeneralName,
                  targetGroup         [1] GeneralName,
                  targetCert          [2] TargetCert
                }
            </pre>
            
            @return an Asn1Object
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.X509.TargetInformation">
            Target information extension for attributes certificates according to RFC
            3281.
            
            <pre>
                      SEQUENCE OF Targets
            </pre>
            
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.TargetInformation.GetInstance(System.Object)">
            Creates an instance of a TargetInformation from the given object.
            <p>
            <code>obj</code> can be a TargetInformation or a {@link Asn1Sequence}</p>
            
            @param obj The object.
            @return A TargetInformation instance.
            @throws ArgumentException if the given object cannot be interpreted as TargetInformation.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.TargetInformation.#ctor(Org.BouncyCastle2.Asn1.Asn1Sequence)">
            Constructor from a Asn1Sequence.
            
            @param seq The Asn1Sequence.
            @throws ArgumentException if the sequence does not contain
                        correctly encoded Targets elements.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.TargetInformation.GetTargetsObjects">
            Returns the targets in this target information extension.
            <p>
            The ArrayList is cloned before it is returned.</p>
            
            @return Returns the targets.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.TargetInformation.#ctor(Org.BouncyCastle2.Asn1.X509.Targets)">
            Constructs a target information from a single targets element. 
            According to RFC 3281 only one targets element must be produced.
            
            @param targets A Targets instance.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.TargetInformation.#ctor(Org.BouncyCastle2.Asn1.X509.Target[])">
             According to RFC 3281 only one targets element must be produced. If
             multiple targets are given they must be merged in
             into one targets element.
            
             @param targets An array with {@link Targets}.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.TargetInformation.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            
            Returns:
            
            <pre>
                     SEQUENCE OF Targets
            </pre>
            
            <p>
            According to RFC 3281 only one targets element must be produced. If
            multiple targets are given in the constructor they are merged into one
            targets element. If this was produced from a
            {@link Org.BouncyCastle2.Asn1.Asn1Sequence} the encoding is kept.</p>
            
            @return an Asn1Object
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.X509.Targets">
            Targets structure used in target information extension for attribute
            certificates from RFC 3281.
            
            <pre>
                       Targets ::= SEQUENCE OF Target
                      
                       Target  ::= CHOICE {
                         targetName          [0] GeneralName,
                         targetGroup         [1] GeneralName,
                         targetCert          [2] TargetCert
                       }
                      
                       TargetCert  ::= SEQUENCE {
                         targetCertificate    IssuerSerial,
                         targetName           GeneralName OPTIONAL,
                         certDigestInfo       ObjectDigestInfo OPTIONAL
                       }
            </pre>
            
            @see org.BouncyCastle2.asn1.x509.Target
            @see org.BouncyCastle2.asn1.x509.TargetInformation
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.Targets.GetInstance(System.Object)">
            Creates an instance of a Targets from the given object.
            <p>
            <code>obj</code> can be a Targets or a {@link Asn1Sequence}</p>
            
            @param obj The object.
            @return A Targets instance.
            @throws ArgumentException if the given object cannot be interpreted as Target.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.Targets.#ctor(Org.BouncyCastle2.Asn1.Asn1Sequence)">
            Constructor from Asn1Sequence.
            
            @param targets The ASN.1 SEQUENCE.
            @throws ArgumentException if the contents of the sequence are
                        invalid.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.Targets.#ctor(Org.BouncyCastle2.Asn1.X509.Target[])">
            Constructor from given targets.
            <p>
            The ArrayList is copied.</p>
            
            @param targets An <code>ArrayList</code> of {@link Target}s.
            @see Target
            @throws ArgumentException if the ArrayList contains not only Targets.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.Targets.GetTargets">
            Returns the targets in an <code>ArrayList</code>.
            <p>
            The ArrayList is cloned before it is returned.</p>
            
            @return Returns the targets.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.Targets.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            
            Returns:
            
            <pre>
                       Targets ::= SEQUENCE OF Target
            </pre>
            
            @return an Asn1Object
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.X509.TbsCertificateStructure">
            The TbsCertificate object.
            <pre>
            TbsCertificate ::= Sequence {
                 version          [ 0 ]  Version DEFAULT v1(0),
                 serialNumber            CertificateSerialNumber,
                 signature               AlgorithmIdentifier,
                 issuer                  Name,
                 validity                Validity,
                 subject                 Name,
                 subjectPublicKeyInfo    SubjectPublicKeyInfo,
                 issuerUniqueID    [ 1 ] IMPLICIT UniqueIdentifier OPTIONAL,
                 subjectUniqueID   [ 2 ] IMPLICIT UniqueIdentifier OPTIONAL,
                 extensions        [ 3 ] Extensions OPTIONAL
                 }
            </pre>
            <p>
            Note: issuerUniqueID and subjectUniqueID are both deprecated by the IETF. This class
            will parse them, but you really shouldn't be creating new ones.</p>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.X509.TbsCertificateList">
            PKIX RFC-2459 - TbsCertList object.
            <pre>
            TbsCertList  ::=  Sequence  {
                 version                 Version OPTIONAL,
                                              -- if present, shall be v2
                 signature               AlgorithmIdentifier,
                 issuer                  Name,
                 thisUpdate              Time,
                 nextUpdate              Time OPTIONAL,
                 revokedCertificates     Sequence OF Sequence  {
                      userCertificate         CertificateSerialNumber,
                      revocationDate          Time,
                      crlEntryExtensions      Extensions OPTIONAL
                                                    -- if present, shall be v2
                                           }  OPTIONAL,
                 crlExtensions           [0]  EXPLICIT Extensions OPTIONAL
                                                    -- if present, shall be v2
                                           }
            </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.Time.#ctor(System.DateTime)">
            creates a time object from a given date - if the date is between 1950
            and 2049 a UTCTime object is Generated, otherwise a GeneralizedTime
            is used.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.Time.ToDateTime">
            <summary>
            Return our time as DateTime.
            </summary>
            <returns>A date time.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.Time.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            Time ::= CHOICE {
                        utcTime        UTCTime,
                        generalTime    GeneralizedTime }
            </pre>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.X509.UserNotice">
             <code>UserNotice</code> class, used in
             <code>CertificatePolicies</code> X509 extensions (in policy
             qualifiers).
             <pre>
             UserNotice ::= Sequence {
                  noticeRef        NoticeReference OPTIONAL,
                  explicitText     DisplayText OPTIONAL}
            
             </pre>
            
             @see PolicyQualifierId
             @see PolicyInformation
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.UserNotice.#ctor(Org.BouncyCastle2.Asn1.X509.NoticeReference,Org.BouncyCastle2.Asn1.X509.DisplayText)">
             Creates a new <code>UserNotice</code> instance.
            
             @param noticeRef a <code>NoticeReference</code> value
             @param explicitText a <code>DisplayText</code> value
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.UserNotice.#ctor(Org.BouncyCastle2.Asn1.X509.NoticeReference,System.String)">
             Creates a new <code>UserNotice</code> instance.
            
             @param noticeRef a <code>NoticeReference</code> value
             @param str the explicitText field as a string.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.UserNotice.#ctor(Org.BouncyCastle2.Asn1.Asn1Sequence)">
             Creates a new <code>UserNotice</code> instance.
             <p>Useful from reconstructing a <code>UserNotice</code> instance
             from its encodable/encoded form.
            
             @param as an <code>ASN1Sequence</code> value obtained from either
             calling @{link toASN1Object()} for a <code>UserNotice</code>
             instance or from parsing it from a DER-encoded stream.</p>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.V2Form.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
             V2Form ::= Sequence {
                  issuerName            GeneralNames  OPTIONAL,
                  baseCertificateID     [0] IssuerSerial  OPTIONAL,
                  objectDigestInfo      [1] ObjectDigestInfo  OPTIONAL
                    -- issuerName MUST be present in this profile
                    -- baseCertificateID and objectDigestInfo MUST NOT
                    -- be present in this profile
             }
            </pre>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.X509.X509CertificateStructure">
            an X509Certificate structure.
            <pre>
             Certificate ::= Sequence {
                 tbsCertificate          TbsCertificate,
                 signatureAlgorithm      AlgorithmIdentifier,
                 signature               BIT STRING
             }
            </pre>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.X509.X509DefaultEntryConverter">
            The default converter for X509 DN entries when going from their
            string value to ASN.1 strings.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.X509DefaultEntryConverter.GetConvertedValue(Org.BouncyCastle2.Asn1.DerObjectIdentifier,System.String)">
             Apply default conversion for the given value depending on the oid
             and the character range of the value.
            
             @param oid the object identifier for the DN entry
             @param value the value associated with it
             @return the ASN.1 equivalent for the string value.
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.X509.X509Extension">
            an object for the elements in the X.509 V3 extension block.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.X509Extension.ConvertValueToObject(Org.BouncyCastle2.Asn1.X509.X509Extension)">
            <sumary>Convert the value of the passed in extension to an object.</sumary>
            <param name="ext">The extension to parse.</param>
            <returns>The object the value string contains.</returns>
            <exception cref="T:System.ArgumentException">If conversion is not possible.</exception>
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.X509Extensions.SubjectDirectoryAttributes">
            Subject Directory Attributes
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.X509Extensions.SubjectKeyIdentifier">
            Subject Key Identifier
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.X509Extensions.KeyUsage">
            Key Usage
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.X509Extensions.PrivateKeyUsagePeriod">
            Private Key Usage Period
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.X509Extensions.SubjectAlternativeName">
            Subject Alternative Name
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.X509Extensions.IssuerAlternativeName">
            Issuer Alternative Name
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.X509Extensions.BasicConstraints">
            Basic Constraints
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.X509Extensions.CrlNumber">
            CRL Number
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.X509Extensions.ReasonCode">
            Reason code
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.X509Extensions.InstructionCode">
            Hold Instruction Code
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.X509Extensions.InvalidityDate">
            Invalidity Date
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.X509Extensions.DeltaCrlIndicator">
            Delta CRL indicator
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.X509Extensions.IssuingDistributionPoint">
            Issuing Distribution Point
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.X509Extensions.CertificateIssuer">
            Certificate Issuer
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.X509Extensions.NameConstraints">
            Name Constraints
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.X509Extensions.CrlDistributionPoints">
            CRL Distribution Points
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.X509Extensions.CertificatePolicies">
            Certificate Policies
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.X509Extensions.PolicyMappings">
            Policy Mappings
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.X509Extensions.AuthorityKeyIdentifier">
            Authority Key Identifier
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.X509Extensions.PolicyConstraints">
            Policy Constraints
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.X509Extensions.ExtendedKeyUsage">
            Extended Key Usage
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.X509Extensions.FreshestCrl">
            Freshest CRL
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.X509Extensions.InhibitAnyPolicy">
            Inhibit Any Policy
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.X509Extensions.AuthorityInfoAccess">
            Authority Info Access
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.X509Extensions.SubjectInfoAccess">
            Subject Info Access
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.X509Extensions.LogoType">
            Logo Type
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.X509Extensions.BiometricInfo">
            BiometricInfo
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.X509Extensions.QCStatements">
            QCStatements
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.X509Extensions.AuditIdentity">
            Audit identity extension in attribute certificates.
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.X509Extensions.NoRevAvail">
            NoRevAvail extension in attribute certificates.
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.X509Extensions.TargetInformation">
            TargetInformation extension in attribute certificates.
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.X509Extensions.ExpiredCertsOnCrl">
            Expired Certificates on CRL extension
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.X509Extensions.#ctor(Org.BouncyCastle2.Asn1.Asn1Sequence)">
             Constructor from Asn1Sequence.
            
             the extensions are a list of constructed sequences, either with (Oid, OctetString) or (Oid, Boolean, OctetString)
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.X509Extensions.#ctor(System.Collections.IDictionary)">
            constructor from a table of extensions.
            <p>
            it's is assumed the table contains Oid/string pairs.</p>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.X509Extensions.#ctor(System.Collections.IList,System.Collections.IDictionary)">
            Constructor from a table of extensions with ordering.
            <p>
            It's is assumed the table contains Oid/string pairs.</p>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.X509Extensions.#ctor(System.Collections.IList,System.Collections.IList)">
             Constructor from two vectors
            
             @param objectIDs an ArrayList of the object identifiers.
             @param values an ArrayList of the extension values.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.X509Extensions.#ctor(System.Collections.Hashtable)">
            constructor from a table of extensions.
            <p>
            it's is assumed the table contains Oid/string pairs.</p>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.X509Extensions.#ctor(System.Collections.ArrayList,System.Collections.Hashtable)">
            Constructor from a table of extensions with ordering.
            <p>
            It's is assumed the table contains Oid/string pairs.</p>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.X509Extensions.#ctor(System.Collections.ArrayList,System.Collections.ArrayList)">
             Constructor from two vectors
            
             @param objectIDs an ArrayList of the object identifiers.
             @param values an ArrayList of the extension values.
        </member>
        <member name="P:Org.BouncyCastle2.Asn1.X509.X509Extensions.ExtensionOids">
            return an Enumeration of the extension field's object ids.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.X509Extensions.GetExtension(Org.BouncyCastle2.Asn1.DerObjectIdentifier)">
             return the extension represented by the object identifier
             passed in.
            
             @return the extension if it's present, null otherwise.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.X509Extensions.GetExtensionParsedValue(Org.BouncyCastle2.Asn1.DerObjectIdentifier)">
             return the parsed value of the extension represented by the object identifier
             passed in.
            
             @return the parsed value of the extension if it's present, null otherwise.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.X509Extensions.ToAsn1Object">
             <pre>
                 Extensions        ::=   SEQUENCE SIZE (1..MAX) OF Extension
            
                 Extension         ::=   SEQUENCE {
                    extnId            EXTENSION.&amp;id ({ExtensionSet}),
                    critical          BOOLEAN DEFAULT FALSE,
                    extnValue         OCTET STRING }
             </pre>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.X509.X509ExtensionsGenerator">
            <remarks>Generator for X.509 extensions</remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.X509ExtensionsGenerator.Reset">
            <summary>Reset the generator</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.X509ExtensionsGenerator.AddExtension(Org.BouncyCastle2.Asn1.DerObjectIdentifier,System.Boolean,Org.BouncyCastle2.Asn1.Asn1Encodable)">
            <summary>
            Add an extension with the given oid and the passed in value to be included
            in the OCTET STRING associated with the extension.
            </summary>
            <param name="oid">OID for the extension.</param>
            <param name="critical">True if critical, false otherwise.</param>
            <param name="extValue">The ASN.1 object to be included in the extension.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.X509ExtensionsGenerator.AddExtension(Org.BouncyCastle2.Asn1.DerObjectIdentifier,System.Boolean,System.Byte[])">
            <summary>
            Add an extension with the given oid and the passed in byte array to be wrapped
            in the OCTET STRING associated with the extension.
            </summary>
            <param name="oid">OID for the extension.</param>
            <param name="critical">True if critical, false otherwise.</param>
            <param name="extValue">The byte array to be wrapped.</param>
        </member>
        <member name="P:Org.BouncyCastle2.Asn1.X509.X509ExtensionsGenerator.IsEmpty">
            <summary>Return true if there are no extension present in this generator.</summary>
            <returns>True if empty, false otherwise</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.X509ExtensionsGenerator.Generate">
            <summary>Generate an X509Extensions object based on the current state of the generator.</summary>
            <returns>An <c>X509Extensions</c> object</returns>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.X509.X509Name">
             <pre>
                 RDNSequence ::= SEQUENCE OF RelativeDistinguishedName
            
                 RelativeDistinguishedName ::= SET SIZE (1..MAX) OF AttributeTypeAndValue
            
                 AttributeTypeAndValue ::= SEQUENCE {
                                               type  OBJECT IDENTIFIER,
                                               value ANY }
             </pre>
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.X509Name.C">
            country code - StringType(SIZE(2))
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.X509Name.O">
            organization - StringType(SIZE(1..64))
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.X509Name.OU">
            organizational unit name - StringType(SIZE(1..64))
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.X509Name.T">
            Title
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.X509Name.CN">
            common name - StringType(SIZE(1..64))
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.X509Name.Street">
            street - StringType(SIZE(1..64))
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.X509Name.SerialNumber">
            device serial number name - StringType(SIZE(1..64))
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.X509Name.L">
            locality name - StringType(SIZE(1..64))
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.X509Name.ST">
            state, or province name - StringType(SIZE(1..64))
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.X509Name.Surname">
            Naming attributes of type X520name
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.X509Name.BusinessCategory">
            businessCategory - DirectoryString(SIZE(1..128)
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.X509Name.PostalCode">
            postalCode - DirectoryString(SIZE(1..40)
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.X509Name.DnQualifier">
            dnQualifier - DirectoryString(SIZE(1..64)
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.X509Name.Pseudonym">
            RFC 3039 Pseudonym - DirectoryString(SIZE(1..64)
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.X509Name.DateOfBirth">
            RFC 3039 DateOfBirth - GeneralizedTime - YYYYMMDD000000Z
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.X509Name.PlaceOfBirth">
            RFC 3039 PlaceOfBirth - DirectoryString(SIZE(1..128)
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.X509Name.Gender">
            RFC 3039 DateOfBirth - PrintableString (SIZE(1)) -- "M", "F", "m" or "f"
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.X509Name.CountryOfCitizenship">
            RFC 3039 CountryOfCitizenship - PrintableString (SIZE (2)) -- ISO 3166
            codes only
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.X509Name.CountryOfResidence">
            RFC 3039 CountryOfCitizenship - PrintableString (SIZE (2)) -- ISO 3166
            codes only
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.X509Name.NameAtBirth">
            ISIS-MTT NameAtBirth - DirectoryString(SIZE(1..64)
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.X509Name.PostalAddress">
            RFC 3039 PostalAddress - SEQUENCE SIZE (1..6) OF
            DirectoryString(SIZE(1..30))
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.X509Name.DmdName">
            RFC 2256 dmdName
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.X509Name.TelephoneNumber">
            id-at-telephoneNumber
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.X509Name.OrganizationIdentifier">
            id-at-organizationIdentifier
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.X509Name.Name">
            id-at-name
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.X509Name.EmailAddress">
            Email address (RSA PKCS#9 extension) - IA5String.
            <p>Note: if you're trying to be ultra orthodox, don't use this! It shouldn't be in here.</p>
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.X509Name.UnstructuredName">
            more from PKCS#9
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.X509Name.E">
            email address in Verisign certificates
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.X509Name.UID">
            LDAP User id.
        </member>
        <member name="P:Org.BouncyCastle2.Asn1.X509.X509Name.DefaultReverse">
            determines whether or not strings should be processed and printed
            from back to front.
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.X509Name.DefaultSymbols">
            default look up table translating OID values into their common symbols following
            the convention in RFC 2253 with a few extras
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.X509Name.RFC2253Symbols">
            look up table translating OID values into their common symbols following the convention in RFC 2253
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.X509Name.RFC1779Symbols">
             look up table translating OID values into their common symbols following the convention in RFC 1779
            
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X509.X509Name.DefaultLookup">
            look up table translating common symbols into their OIDS.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.X509Name.GetInstance(Org.BouncyCastle2.Asn1.Asn1TaggedObject,System.Boolean)">
             Return a X509Name based on the passed in tagged object.
            
             @param obj tag object holding name.
             @param explicitly true if explicitly tagged false otherwise.
             @return the X509Name
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.X509Name.#ctor(Org.BouncyCastle2.Asn1.Asn1Sequence)">
             Constructor from Asn1Sequence
            
             the principal will be a list of constructed sets, each containing an (OID, string) pair.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.X509Name.#ctor(System.Collections.IList,System.Collections.IDictionary)">
            Constructor from a table of attributes with ordering.
            <p>
            it's is assumed the table contains OID/string pairs, and the contents
            of the table are copied into an internal table as part of the
            construction process. The ordering ArrayList should contain the OIDs
            in the order they are meant to be encoded or printed in ToString.</p>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.X509Name.#ctor(System.Collections.IList,System.Collections.IDictionary,Org.BouncyCastle2.Asn1.X509.X509NameEntryConverter)">
            Constructor from a table of attributes with ordering.
            <p>
            it's is assumed the table contains OID/string pairs, and the contents
            of the table are copied into an internal table as part of the
            construction process. The ordering ArrayList should contain the OIDs
            in the order they are meant to be encoded or printed in ToString.</p>
            <p>
            The passed in converter will be used to convert the strings into their
            ASN.1 counterparts.</p>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.X509Name.#ctor(System.Collections.IList,System.Collections.IList)">
            Takes two vectors one of the oids and the other of the values.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.X509Name.#ctor(System.Collections.IList,System.Collections.IList,Org.BouncyCastle2.Asn1.X509.X509NameEntryConverter)">
            Takes two vectors one of the oids and the other of the values.
            <p>
            The passed in converter will be used to convert the strings into their
            ASN.1 counterparts.</p>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.X509Name.#ctor(System.String)">
            Takes an X509 dir name as a string of the format "C=AU, ST=Victoria", or
            some such, converting it into an ordered set of name attributes.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.X509Name.#ctor(System.String,Org.BouncyCastle2.Asn1.X509.X509NameEntryConverter)">
            Takes an X509 dir name as a string of the format "C=AU, ST=Victoria", or
            some such, converting it into an ordered set of name attributes with each
            string value being converted to its associated ASN.1 type using the passed
            in converter.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.X509Name.#ctor(System.Boolean,System.String)">
            Takes an X509 dir name as a string of the format "C=AU, ST=Victoria", or
            some such, converting it into an ordered set of name attributes. If reverse
            is true, create the encoded version of the sequence starting from the
            last element in the string.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.X509Name.#ctor(System.Boolean,System.String,Org.BouncyCastle2.Asn1.X509.X509NameEntryConverter)">
            Takes an X509 dir name as a string of the format "C=AU, ST=Victoria", or
            some such, converting it into an ordered set of name attributes with each
            string value being converted to its associated ASN.1 type using the passed
            in converter. If reverse is true the ASN.1 sequence representing the DN will
            be built by starting at the end of the string, rather than the start.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.X509Name.#ctor(System.Boolean,System.Collections.IDictionary,System.String)">
            Takes an X509 dir name as a string of the format "C=AU, ST=Victoria", or
            some such, converting it into an ordered set of name attributes. lookUp
            should provide a table of lookups, indexed by lowercase only strings and
            yielding a DerObjectIdentifier, other than that OID. and numeric oids
            will be processed automatically.
            <br/>
            If reverse is true, create the encoded version of the sequence
            starting from the last element in the string.
            @param reverse true if we should start scanning from the end (RFC 2553).
            @param lookUp table of names and their oids.
            @param dirName the X.500 string to be parsed.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.X509Name.#ctor(System.Boolean,System.Collections.IDictionary,System.String,Org.BouncyCastle2.Asn1.X509.X509NameEntryConverter)">
            Takes an X509 dir name as a string of the format "C=AU, ST=Victoria", or
            some such, converting it into an ordered set of name attributes. lookUp
            should provide a table of lookups, indexed by lowercase only strings and
            yielding a DerObjectIdentifier, other than that OID. and numeric oids
            will be processed automatically. The passed in converter is used to convert the
            string values to the right of each equals sign to their ASN.1 counterparts.
            <br/>
            @param reverse true if we should start scanning from the end, false otherwise.
            @param lookUp table of names and oids.
            @param dirName the string dirName
            @param converter the converter to convert string values into their ASN.1 equivalents
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.X509Name.GetOidList">
            return an IList of the oids in the name, in the order they were found.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.X509Name.GetValueList">
            return an IList of the values found in the name, in the order they
            were found.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.X509Name.GetValueList(Org.BouncyCastle2.Asn1.DerObjectIdentifier)">
            return an IList of the values found in the name, in the order they
            were found, with the DN label corresponding to passed in oid.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.X509Name.Equivalent(Org.BouncyCastle2.Asn1.X509.X509Name,System.Boolean)">
            <param name="other">The X509Name object to test equivalency against.</param>
            <param name="inOrder">If true, the order of elements must be the same,
            as well as the values associated with each element.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.X509Name.Equivalent(Org.BouncyCastle2.Asn1.X509.X509Name)">
            test for equivalence - note: case is ignored.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.X509Name.ToString(System.Boolean,System.Collections.IDictionary)">
             convert the structure to a string - if reverse is true the
             oids and values are listed out starting with the last element
             in the sequence (ala RFC 2253), otherwise the string will begin
             with the first element of the structure. If no string definition
             for the oid is found in oidSymbols the string value of the oid is
             added. Two standard symbol tables are provided DefaultSymbols, and
             RFC2253Symbols as part of this class.
            
             @param reverse if true start at the end of the sequence and work back.
             @param oidSymbols look up table strings for oids.
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.X509.X509NameEntryConverter">
                 * It turns out that the number of standard ways the fields in a DN should be
                 * encoded into their ASN.1 counterparts is rapidly approaching the
                 * number of machines on the internet. By default the X509Name class
                 * will produce UTF8Strings in line with the current recommendations (RFC 3280).
                 * <p>
                 * An example of an encoder look like below:
                 * <pre>
                 * internal class X509DirEntryConverter
                 *     : X509NameEntryConverter
                 * {
                 *     public Asn1Object GetConvertedValue(
                 *         DerObjectIdentifier  oid,
                 *         string               value)
                 *     {
                 *         if (str.Length() != 0 &amp;&amp; str.charAt(0) == '#')
                 *         {
                 *             return ConvertHexEncoded(str, 1);
                 *         }
                 *         if (oid.Equals(EmailAddress))
                 *         {
                 *             return new DerIA5String(str);
                 *         }
                 *         else if (CanBePrintable(str))
                 *         {
                 *             return new DerPrintableString(str);
                 *         }
                 *         else if (CanBeUTF8(str))
                 *         {
                 *             return new DerUtf8String(str);
                 *         }
                 *         else
                 *         {
                 *             return new DerBmpString(str);
                 *         }
                 *     }
                 * }
            	 * </pre>
            	 * </p>
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.X509NameEntryConverter.ConvertHexEncoded(System.String,System.Int32)">
             Convert an inline encoded hex string rendition of an ASN.1
             object back into its corresponding ASN.1 object.
            
             @param str the hex encoded object
             @param off the index at which the encoding starts
             @return the decoded object
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.X509NameEntryConverter.CanBePrintable(System.String)">
            return true if the passed in string can be represented without
            loss as a PrintableString, false otherwise.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X509.X509NameEntryConverter.GetConvertedValue(Org.BouncyCastle2.Asn1.DerObjectIdentifier,System.String)">
             Convert the passed in string value into the appropriate ASN.1
             encoded object.
            
             @param oid the oid associated with the value in the DN.
             @param value the value of the particular DN component.
             @return the ASN.1 equivalent for the value.
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.X509.X509NameTokenizer">
            class for breaking up an X500 Name into it's component tokens, ala
            java.util.StringTokenizer. We need this class as some of the
            lightweight Java environment don't support classes like
            StringTokenizer.
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.X9.ECNamedCurveTable">
            A general class that reads all X9.62 style EC curve tables.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X9.ECNamedCurveTable.GetByName(System.String)">
             return a X9ECParameters object representing the passed in named
             curve. The routine returns null if the curve is not present.
            
             @param name the name of the curve requested
             @return an X9ECParameters object or null if the curve is not available.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X9.ECNamedCurveTable.GetOid(System.String)">
             return the object identifier signified by the passed in name. Null
             if there is no object identifier associated with name.
            
             @return the object identifier associated with name, if present.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X9.ECNamedCurveTable.GetByOid(Org.BouncyCastle2.Asn1.DerObjectIdentifier)">
             return a X9ECParameters object representing the passed in named
             curve.
            
             @param oid the object id of the curve requested
             @return an X9ECParameters object or null if the curve is not available.
        </member>
        <member name="P:Org.BouncyCastle2.Asn1.X9.ECNamedCurveTable.Names">
             return an enumeration of the names of the available curves.
            
             @return an enumeration of the names of the available curves.
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.X9.KeySpecificInfo">
            ASN.1 def for Diffie-Hellman key exchange KeySpecificInfo structure. See
            RFC 2631, or X9.42, for further details.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X9.KeySpecificInfo.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
             KeySpecificInfo ::= Sequence {
                 algorithm OBJECT IDENTIFIER,
                 counter OCTET STRING SIZE (4..4)
             }
            </pre>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.X9.OtherInfo">
            ANS.1 def for Diffie-Hellman key exchange OtherInfo structure. See
            RFC 2631, or X9.42, for further details.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X9.OtherInfo.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
             OtherInfo ::= Sequence {
                 keyInfo KeySpecificInfo,
                 partyAInfo [0] OCTET STRING OPTIONAL,
                 suppPubInfo [2] OCTET STRING
             }
            </pre>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.X9.X962NamedCurves">
            table of the current named curves defined in X.962 EC-DSA.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X9.X962NamedCurves.GetByOid(Org.BouncyCastle2.Asn1.DerObjectIdentifier)">
             return the X9ECParameters object for the named curve represented by
             the passed in object identifier. Null if the curve isn't present.
            
             @param oid an object identifier representing a named curve, if present.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X9.X962NamedCurves.GetOid(System.String)">
             return the object identifier signified by the passed in name. Null
             if there is no object identifier associated with name.
            
             @return the object identifier associated with name, if present.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X9.X962NamedCurves.GetName(Org.BouncyCastle2.Asn1.DerObjectIdentifier)">
            return the named curve name represented by the given object identifier.
        </member>
        <member name="P:Org.BouncyCastle2.Asn1.X9.X962NamedCurves.Names">
            returns an enumeration containing the name strings for curves
            contained in this structure.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X9.X962Parameters.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            Parameters ::= CHOICE {
               ecParameters ECParameters,
               namedCurve   CURVES.&amp;id({CurveNames}),
               implicitlyCA Null
            }
            </pre>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.X9.X9Curve">
            ASN.1 def for Elliptic-Curve Curve structure. See
            X9.62, for further details.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X9.X9Curve.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
             Curve ::= Sequence {
                 a               FieldElement,
                 b               FieldElement,
                 seed            BIT STRING      OPTIONAL
             }
            </pre>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.X9.X9ECParameters">
            ASN.1 def for Elliptic-Curve ECParameters structure. See
            X9.62, for further details.
        </member>
        <member name="P:Org.BouncyCastle2.Asn1.X9.X9ECParameters.CurveEntry">
             Return the ASN.1 entry representing the Curve.
            
             @return the X9Curve for the curve in these parameters.
        </member>
        <member name="P:Org.BouncyCastle2.Asn1.X9.X9ECParameters.FieldIDEntry">
             Return the ASN.1 entry representing the FieldID.
            
             @return the X9FieldID for the FieldID in these parameters.
        </member>
        <member name="P:Org.BouncyCastle2.Asn1.X9.X9ECParameters.BaseEntry">
             Return the ASN.1 entry representing the base point G.
            
             @return the X9ECPoint for the base point in these parameters.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X9.X9ECParameters.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
             ECParameters ::= Sequence {
                 version         Integer { ecpVer1(1) } (ecpVer1),
                 fieldID         FieldID {{FieldTypes}},
                 curve           X9Curve,
                 base            X9ECPoint,
                 order           Integer,
                 cofactor        Integer OPTIONAL
             }
            </pre>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.X9.X9ECPoint">
            class for describing an ECPoint as a Der object.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X9.X9ECPoint.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
             ECPoint ::= OCTET STRING
            </pre>
            <p>
            Octet string produced using ECPoint.GetEncoded().</p>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.X9.X9FieldElement">
            Class for processing an ECFieldElement as a DER object.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X9.X9FieldElement.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
             FieldElement ::= OCTET STRING
            </pre>
            <p>
            <ol>
            <li> if <i>q</i> is an odd prime then the field element is
            processed as an Integer and converted to an octet string
            according to x 9.62 4.3.1.</li>
            <li> if <i>q</i> is 2<sup>m</sup> then the bit string
            contained in the field element is converted into an octet
            string with the same ordering padded at the front if necessary.
            </li>
            </ol>
            </p>
        </member>
        <member name="T:Org.BouncyCastle2.Asn1.X9.X9FieldID">
            ASN.1 def for Elliptic-Curve Field ID structure. See
            X9.62, for further details.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X9.X9FieldID.#ctor(Org.BouncyCastle2.Math.BigInteger)">
            Constructor for elliptic curves over prime fields
            <code>F<sub>2</sub></code>.
            @param primeP The prime <code>p</code> defining the prime field.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X9.X9FieldID.#ctor(System.Int32,System.Int32)">
            Constructor for elliptic curves over binary fields
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param m  The exponent <code>m</code> of
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param k1 The integer <code>k1</code> where <code>x<sup>m</sup> +
            x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X9.X9FieldID.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            Constructor for elliptic curves over binary fields
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param m  The exponent <code>m</code> of
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param k1 The integer <code>k1</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.
            @param k2 The integer <code>k2</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.
            @param k3 The integer <code>k3</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>..
        </member>
        <member name="M:Org.BouncyCastle2.Asn1.X9.X9FieldID.ToAsn1Object">
            Produce a Der encoding of the following structure.
            <pre>
             FieldID ::= Sequence {
                 fieldType       FIELD-ID.&amp;id({IOSet}),
                 parameters      FIELD-ID.&amp;Type({IOSet}{&#64;fieldType})
             }
            </pre>
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X9.X9ObjectIdentifiers.IdDsaWithSha1">
            id-dsa-with-sha1 OBJECT IDENTIFIER ::=  { iso(1) member-body(2)
                  us(840) x9-57 (10040) x9cm(4) 3 }
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X9.X9ObjectIdentifiers.X9x63Scheme">
            X9.63
        </member>
        <member name="F:Org.BouncyCastle2.Asn1.X9.X9ObjectIdentifiers.ansi_x9_42">
            X9.42
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.ArmoredInputStream">
             reader for Base64 armored objects - read the headers and then start returning
             bytes when the data is reached. An IOException is thrown if the CRC check
             is detected and fails.
             <p>
             By default a missing CRC will not cause an exception. To force CRC detection use:
             <pre>
                 ArmoredInputStream aIn = ...
            
                 aIn.setDetectMissingCRC(true);
             </pre>
             </p>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.ArmoredInputStream.Decode(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[])">
             decode the base 64 encoded input data.
            
             @return the offset the data starts in out.
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.ArmoredInputStream.#ctor(System.IO.Stream)">
             Create a stream for reading a PGP armoured message, parsing up to a header
             and then reading the data that follows.
            
             @param input
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.ArmoredInputStream.#ctor(System.IO.Stream,System.Boolean)">
             Create an armoured input stream which will assume the data starts
             straight away, or parse for headers first depending on the value of
             hasHeaders.
            
             @param input
             @param hasHeaders true if headers are to be looked for, false otherwise.
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.ArmoredInputStream.IsClearText">
            @return true if we are inside the clear text section of a PGP
            signed message.
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.ArmoredInputStream.IsEndOfStream">
            @return true if the stream is actually at end of file.
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.ArmoredInputStream.GetArmorHeaderLine">
            Return the armor header line (if there is one)
            @return the armor header line, null if none present.
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.ArmoredInputStream.GetArmorHeaders">
            Return the armor headers (the lines after the armor header line),
            @return an array of armor headers, null if there aren't any.
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.ArmoredInputStream.Read(System.Byte[],System.Int32,System.Int32)">
             Reads up to <code>len</code> bytes of data from the input stream into
             an array of bytes.  An attempt is made to read as many as
             <code>len</code> bytes, but a smaller number may be read.
             The number of bytes actually read is returned as an integer.
            
             The first byte read is stored into element <code>b[off]</code>, the
             next one into <code>b[off+1]</code>, and so on. The number of bytes read
             is, at most, equal to <code>len</code>.
            
             NOTE: We need to override the custom behavior of Java's {@link InputStream#read(byte[], int, int)},
             as the upstream method silently swallows {@link IOException IOExceptions}.
             This would cause CRC checksum errors to go unnoticed.
            
             @see <a href="https://github.com/bcgit/bc-java/issues/998">Related BC bug report</a>
             @param b byte array
             @param off offset at which we start writing data to the array
             @param len number of bytes we write into the array
             @return total number of bytes read into the buffer
            
             @throws IOException if an exception happens AT ANY POINT
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.ArmoredInputStream.SetDetectMissingCrc(System.Boolean)">
             Change how the stream should react if it encounters missing CRC checksum.
             The default value is false (ignore missing CRC checksums). If the behavior is set to true,
             an {@link IOException} will be thrown if a missing CRC checksum is encountered.
            
             @param detectMissing ignore missing CRC sums
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.Attr.ImageAttrib">
            <remarks>Basic type for a image attribute packet.</remarks>
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.BcpgInputStream">
            <remarks>Reader for PGP objects.</remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.BcpgInputStream.NextPacketTag">
            <summary>Returns the next packet tag in the stream.</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.BcpgInputStream.PartialInputStream">
            <summary>
            A stream that overlays our input stream, allowing the user to only read a segment of it.
            NB: dataLength will be negative if the segment length is in the upper range above 2**31.
            </summary>
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.BcpgObject">
            <remarks>Base class for a PGP object.</remarks>
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.BcpgOutputStream">
            <remarks>Basic output stream.</remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.BcpgOutputStream.#ctor(System.IO.Stream)">
            <summary>Create a stream representing a general packet.</summary>
            <param name="outStr">Output stream to write to.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.BcpgOutputStream.#ctor(System.IO.Stream,Org.BouncyCastle2.Bcpg.PacketTag)">
            <summary>Create a stream representing an old style partial object.</summary>
            <param name="outStr">Output stream to write to.</param>
            <param name="tag">The packet tag for the object.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.BcpgOutputStream.#ctor(System.IO.Stream,Org.BouncyCastle2.Bcpg.PacketTag,System.Int64,System.Boolean)">
            <summary>Create a stream representing a general packet.</summary>
            <param name="outStr">Output stream to write to.</param>
            <param name="tag">Packet tag.</param>
            <param name="length">Size of chunks making up the packet.</param>
            <param name="oldFormat">If true, the header is written out in old format.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.BcpgOutputStream.#ctor(System.IO.Stream,Org.BouncyCastle2.Bcpg.PacketTag,System.Int64)">
            <summary>Create a new style partial input stream buffered into chunks.</summary>
            <param name="outStr">Output stream to write to.</param>
            <param name="tag">Packet tag.</param>
            <param name="length">Size of chunks making up the packet.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.BcpgOutputStream.#ctor(System.IO.Stream,Org.BouncyCastle2.Bcpg.PacketTag,System.Byte[])">
            <summary>Create a new style partial input stream buffered into chunks.</summary>
            <param name="outStr">Output stream to write to.</param>
            <param name="tag">Packet tag.</param>
            <param name="buffer">Buffer to use for collecting chunks.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.BcpgOutputStream.Flush">
            <summary>Flush the underlying stream.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.BcpgOutputStream.Finish">
            <summary>Finish writing out the current packet without closing the underlying stream.</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.CompressedDataPacket">
            <remarks>Generic compressed data object.</remarks>
        </member>
        <member name="P:Org.BouncyCastle2.Bcpg.CompressedDataPacket.Algorithm">
            <summary>The algorithm tag value.</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.CompressionAlgorithmTag">
            <remarks>Basic tags for compression algorithms.</remarks>
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.ContainedPacket">
            <remarks>Basic type for a PGP packet.</remarks>
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.DsaPublicBcpgKey">
            <remarks>Base class for a DSA public key.</remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.DsaPublicBcpgKey.#ctor(Org.BouncyCastle2.Bcpg.BcpgInputStream)">
            <param name="bcpgIn">The stream to read the packet from.</param>
        </member>
        <member name="P:Org.BouncyCastle2.Bcpg.DsaPublicBcpgKey.Format">
            <summary>The format, as a string, always "PGP".</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.DsaPublicBcpgKey.GetEncoded">
            <summary>Return the standard PGP encoding of the key.</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.DsaSecretBcpgKey">
            <remarks>Base class for a DSA secret key.</remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.DsaSecretBcpgKey.#ctor(Org.BouncyCastle2.Bcpg.BcpgInputStream)">
            @param in
        </member>
        <member name="P:Org.BouncyCastle2.Bcpg.DsaSecretBcpgKey.Format">
            <summary>The format, as a string, always "PGP".</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.DsaSecretBcpgKey.GetEncoded">
            <summary>Return the standard PGP encoding of the key.</summary>
        </member>
        <member name="P:Org.BouncyCastle2.Bcpg.DsaSecretBcpgKey.X">
            @return x
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.ECDHPublicBcpgKey">
            <remarks>Base class for an ECDH Public Key.</remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.ECDHPublicBcpgKey.#ctor(Org.BouncyCastle2.Bcpg.BcpgInputStream)">
            <param name="bcpgIn">The stream to read the packet from.</param>
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.ECDsaPublicBcpgKey">
            <remarks>Base class for an ECDSA Public Key.</remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.ECDsaPublicBcpgKey.#ctor(Org.BouncyCastle2.Bcpg.BcpgInputStream)">
            <param name="bcpgIn">The stream to read the packet from.</param>
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.ECPublicBcpgKey">
            <remarks>Base class for an EC Public Key.</remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.ECPublicBcpgKey.#ctor(Org.BouncyCastle2.Bcpg.BcpgInputStream)">
            <param name="bcpgIn">The stream to read the packet from.</param>
        </member>
        <member name="P:Org.BouncyCastle2.Bcpg.ECPublicBcpgKey.Format">
            <summary>The format, as a string, always "PGP".</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.ECPublicBcpgKey.GetEncoded">
            <summary>Return the standard PGP encoding of the key.</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.ECSecretBcpgKey">
            <remarks>Base class for an EC Secret Key.</remarks>
        </member>
        <member name="P:Org.BouncyCastle2.Bcpg.ECSecretBcpgKey.Format">
            <summary>The format, as a string, always "PGP".</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.ECSecretBcpgKey.GetEncoded">
            <summary>Return the standard PGP encoding of the key.</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.ElGamalPublicBcpgKey">
            <remarks>Base class for an ElGamal public key.</remarks>
        </member>
        <member name="P:Org.BouncyCastle2.Bcpg.ElGamalPublicBcpgKey.Format">
            <summary>The format, as a string, always "PGP".</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.ElGamalPublicBcpgKey.GetEncoded">
            <summary>Return the standard PGP encoding of the key.</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.ElGamalSecretBcpgKey">
            <remarks>Base class for an ElGamal secret key.</remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.ElGamalSecretBcpgKey.#ctor(Org.BouncyCastle2.Bcpg.BcpgInputStream)">
            @param in
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.ElGamalSecretBcpgKey.#ctor(Org.BouncyCastle2.Math.BigInteger)">
            @param x
        </member>
        <member name="P:Org.BouncyCastle2.Bcpg.ElGamalSecretBcpgKey.Format">
            <summary>The format, as a string, always "PGP".</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.ElGamalSecretBcpgKey.GetEncoded">
            <summary>Return the standard PGP encoding of the key.</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.ExperimentalPacket">
            <remarks>Basic packet for an experimental packet.</remarks>
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.HashAlgorithmTag">
            <remarks>Basic tags for hash algorithms.</remarks>
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.IBcpgKey">
            <remarks>Base interface for a PGP key.</remarks>
        </member>
        <member name="P:Org.BouncyCastle2.Bcpg.IBcpgKey.Format">
            <summary>
            The base format for this key - in the case of the symmetric keys it will generally
            be raw indicating that the key is just a straight byte representation, for an asymmetric
            key the format will be PGP, indicating the key is a string of MPIs encoded in PGP format.
            </summary>
            <returns>"RAW" or "PGP".</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.InputStreamPacket.GetInputStream">
            <summary>Note: you can only read from this once...</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.LiteralDataPacket">
            <remarks>Generic literal data packet.</remarks>
        </member>
        <member name="P:Org.BouncyCastle2.Bcpg.LiteralDataPacket.Format">
            <summary>The format tag value.</summary>
        </member>
        <member name="P:Org.BouncyCastle2.Bcpg.LiteralDataPacket.ModificationTime">
            <summary>The modification time of the file in milli-seconds (since Jan 1, 1970 UTC)</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.MarkerPacket">
            <remarks>Basic type for a marker packet.</remarks>
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.ModDetectionCodePacket">
            <remarks>Basic packet for a modification detection code packet.</remarks>
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.MPInteger">
            <remarks>A multiple precision integer</remarks>
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.OnePassSignaturePacket">
            <remarks>Generic signature object</remarks>
        </member>
        <member name="P:Org.BouncyCastle2.Bcpg.OnePassSignaturePacket.KeyAlgorithm">
            <summary>The encryption algorithm tag.</summary>
        </member>
        <member name="P:Org.BouncyCastle2.Bcpg.OnePassSignaturePacket.HashAlgorithm">
            <summary>The hash algorithm tag.</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.PacketTag">
            <remarks>Basic PGP packet tag types.</remarks>
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.PublicKeyAlgorithmTag">
            <remarks>Public Key Algorithm tag numbers.</remarks>
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.PublicKeyEncSessionPacket">
            <remarks>Basic packet for a PGP public key.</remarks>
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.PublicKeyPacket">
            <remarks>Basic packet for a PGP public key.</remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.PublicKeyPacket.#ctor(Org.BouncyCastle2.Bcpg.PublicKeyAlgorithmTag,System.DateTime,Org.BouncyCastle2.Bcpg.IBcpgKey)">
            <summary>Construct a version 4 public key packet.</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.PublicSubkeyPacket">
            <remarks>Basic packet for a PGP public subkey</remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.PublicSubkeyPacket.#ctor(Org.BouncyCastle2.Bcpg.PublicKeyAlgorithmTag,System.DateTime,Org.BouncyCastle2.Bcpg.IBcpgKey)">
            <summary>Construct a version 4 public subkey packet.</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.RsaPublicBcpgKey">
            <remarks>Base class for an RSA public key.</remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.RsaPublicBcpgKey.#ctor(Org.BouncyCastle2.Bcpg.BcpgInputStream)">
            <summary>Construct an RSA public key from the passed in stream.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.RsaPublicBcpgKey.#ctor(Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger)">
            <param name="n">The modulus.</param>
            <param name="e">The public exponent.</param>
        </member>
        <member name="P:Org.BouncyCastle2.Bcpg.RsaPublicBcpgKey.Format">
            <summary>The format, as a string, always "PGP".</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.RsaPublicBcpgKey.GetEncoded">
            <summary>Return the standard PGP encoding of the key.</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.RsaSecretBcpgKey">
            <remarks>Base class for an RSA secret (or priate) key.</remarks>
        </member>
        <member name="P:Org.BouncyCastle2.Bcpg.RsaSecretBcpgKey.Format">
            <summary>The format, as a string, always "PGP".</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.RsaSecretBcpgKey.GetEncoded">
            <summary>Return the standard PGP encoding of the key.</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.S2k">
            <remarks>The string to key specifier class.</remarks>
        </member>
        <member name="P:Org.BouncyCastle2.Bcpg.S2k.HashAlgorithm">
            <summary>The hash algorithm.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.S2k.GetIV">
            <summary>The IV for the key generation algorithm.</summary>
        </member>
        <member name="P:Org.BouncyCastle2.Bcpg.S2k.IterationCount">
            <summary>The iteration count</summary>
        </member>
        <member name="P:Org.BouncyCastle2.Bcpg.S2k.ProtectionMode">
            <summary>The protection mode - only if GnuDummyS2K</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.SecretKeyPacket">
            <remarks>Basic packet for a PGP secret key.</remarks>
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.SecretSubkeyPacket">
            <remarks>Basic packet for a PGP secret key.</remarks>
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.SignaturePacket">
            <remarks>Generic signature packet.</remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.SignaturePacket.#ctor(System.Int32,System.Int64,Org.BouncyCastle2.Bcpg.PublicKeyAlgorithmTag,Org.BouncyCastle2.Bcpg.HashAlgorithmTag,Org.BouncyCastle2.Bcpg.SignatureSubpacket[],Org.BouncyCastle2.Bcpg.SignatureSubpacket[],System.Byte[],Org.BouncyCastle2.Bcpg.MPInteger[])">
             Generate a version 4 signature packet.
            
             @param signatureType
             @param keyAlgorithm
             @param hashAlgorithm
             @param hashedData
             @param unhashedData
             @param fingerprint
             @param signature
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.SignaturePacket.#ctor(System.Int32,System.Int32,System.Int64,Org.BouncyCastle2.Bcpg.PublicKeyAlgorithmTag,Org.BouncyCastle2.Bcpg.HashAlgorithmTag,System.Int64,System.Byte[],Org.BouncyCastle2.Bcpg.MPInteger[])">
             Generate a version 2/3 signature packet.
            
             @param signatureType
             @param keyAlgorithm
             @param hashAlgorithm
             @param fingerprint
             @param signature
        </member>
        <member name="P:Org.BouncyCastle2.Bcpg.SignaturePacket.KeyId">
            return the keyId
            @return the keyId that created the signature.
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.SignaturePacket.GetSignatureTrailer">
             return the signature trailer that must be included with the data
             to reconstruct the signature
            
             @return byte[]
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.SignaturePacket.GetSignature">
            		* return the signature as a set of integers - note this is normalised to be the
                    * ASN.1 encoding of what appears in the signature packet.
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.SignaturePacket.GetSignatureBytes">
            Return the byte encoding of the signature section.
            @return uninterpreted signature bytes.
        </member>
        <member name="P:Org.BouncyCastle2.Bcpg.SignaturePacket.CreationTime">
            <summary>Return the creation time in milliseconds since 1 Jan., 1970 UTC.</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.SignatureSubpacket">
            <remarks>Basic type for a PGP Signature sub-packet.</remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.SignatureSubpacket.GetData">
            <summary>Return the generic data making up the packet.</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.SignatureSubpacketsParser">
            reader for signature sub-packets
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.SignatureSubpacketTag">
            Basic PGP signature sub-packet tag types.
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.Sig.EmbeddedSignature">
            Packet embedded signature
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.Sig.Exportable">
            packet giving signature creation time.
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.Sig.Features">
            packet giving signature expiration time.
        </member>
        <member name="F:Org.BouncyCastle2.Bcpg.Sig.Features.FEATURE_MODIFICATION_DETECTION">
            Identifier for the Modification Detection (packets 18 and 19) 
        </member>
        <member name="F:Org.BouncyCastle2.Bcpg.Sig.Features.FEATURE_AEAD_ENCRYPTED_DATA">
            Identifier for the AEAD Encrypted Data Packet (packet 20) and version 5
                     Symmetric-Key Encrypted Session Key Packets (packet 3) 
        </member>
        <member name="F:Org.BouncyCastle2.Bcpg.Sig.Features.FEATURE_VERSION_5_PUBLIC_KEY">
            Identifier for the Version 5 Public-Key Packet format and corresponding new
                       fingerprint format 
        </member>
        <member name="P:Org.BouncyCastle2.Bcpg.Sig.Features.SupportsModificationDetection">
            Returns if modification detection is supported.
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.Sig.Features.SupportsFeature(System.Byte)">
            Returns if a particular feature is supported.
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.Sig.IssuerKeyId">
            packet giving signature creation time.
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.Sig.KeyExpirationTime">
            packet giving time after creation at which the key expires.
        </member>
        <member name="P:Org.BouncyCastle2.Bcpg.Sig.KeyExpirationTime.Time">
             Return the number of seconds after creation time a key is valid for.
            
             @return second count for key validity.
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.Sig.KeyFlags">
            Packet holding the key flag values.
        </member>
        <member name="P:Org.BouncyCastle2.Bcpg.Sig.KeyFlags.Flags">
            <summary>
            Return the flag values contained in the first 4 octets (note: at the moment
            the standard only uses the first one).
            </summary>
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.Sig.NotationData">
            Class provided a NotationData object according to
            RFC2440, Chapter 5.2.3.15. Notation Data
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.Sig.PreferredAlgorithms">
            packet giving signature creation time.
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.Sig.PrimaryUserId">
            packet giving whether or not the signature is signed using the primary user ID for the key.
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.Sig.Revocable">
            packet giving whether or not is revocable.
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.Sig.SignatureCreationTime">
            packet giving signature creation time.
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.Sig.SignatureExpirationTime">
            packet giving signature expiration time.
        </member>
        <member name="P:Org.BouncyCastle2.Bcpg.Sig.SignatureExpirationTime.Time">
            return time in seconds before signature expires after creation time.
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.Sig.SignerUserId">
            packet giving the User ID of the signer.
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.Sig.TrustSignature">
            packet giving trust.
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.RevocationKey">
            <summary>
            Represents revocation key OpenPGP signature sub packet.
            </summary>
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.RevocationReason">
            <summary>
            Represents revocation reason OpenPGP signature sub packet.
            </summary>
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.SymmetricEncDataPacket">
            <remarks>Basic type for a symmetric key encrypted packet.</remarks>
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.SymmetricKeyAlgorithmTag">
            Basic tags for symmetric key algorithms
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.SymmetricKeyEncSessionPacket">
            Basic type for a symmetric encrypted session key packet
        </member>
        <member name="P:Org.BouncyCastle2.Bcpg.SymmetricKeyEncSessionPacket.EncAlgorithm">
            @return int
        </member>
        <member name="P:Org.BouncyCastle2.Bcpg.SymmetricKeyEncSessionPacket.S2k">
            @return S2k
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.SymmetricKeyEncSessionPacket.GetSecKeyData">
            @return byte[]
        </member>
        <member name="P:Org.BouncyCastle2.Bcpg.SymmetricKeyEncSessionPacket.Version">
            @return int
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.TrustPacket">
            <summary>Basic type for a trust packet.</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.UserAttributePacket">
            Basic type for a user attribute packet.
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.UserAttributeSubpacket">
            Basic type for a user attribute sub-packet.
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.UserAttributeSubpacket.GetData">
            return the generic data making up the packet.
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.UserAttributeSubpacketsParser">
            reader for user attribute sub-packets
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.UserAttributeSubpacketTag">
            Basic PGP user attribute sub-packet tag types.
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.UserIdPacket">
            Basic type for a user ID packet.
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.OpenPgp.PgpCompressedData">
            <remarks>Compressed data objects</remarks>
        </member>
        <member name="P:Org.BouncyCastle2.Bcpg.OpenPgp.PgpCompressedData.Algorithm">
            <summary>The algorithm used for compression</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpCompressedData.GetInputStream">
            <summary>Get the raw input stream contained in the object.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpCompressedData.GetDataStream">
            <summary>Return an uncompressed input stream which allows reading of the compressed data.</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.OpenPgp.PgpDataValidationException">
            <remarks>
            Thrown if the IV at the start of a data stream indicates the wrong key is being used.
            </remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpEncryptedData.GetInputStream">
            <summary>Return the raw input stream for the data stream.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpEncryptedData.IsIntegrityProtected">
            <summary>Return true if the message is integrity protected.</summary>
            <returns>True, if there is a modification detection code namespace associated
            with this stream.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpEncryptedData.Verify">
            <summary>Note: This can only be called after the message has been read.</summary>
            <returns>True, if the message verifies, false otherwise</returns>
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.OpenPgp.PgpEncryptedDataList">
            <remarks>A holder for a list of PGP encryption method packets.</remarks>
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.OpenPgp.PgpException">
            <remarks>Generic exception class for PGP encoding/decoding problems.</remarks>
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.OpenPgp.PgpKeyPair">
            <remarks>
            General class to handle JCA key pairs and convert them into OpenPGP ones.
            <p>
            A word for the unwary, the KeyId for an OpenPGP public key is calculated from
            a hash that includes the time of creation, if you pass a different date to the
            constructor below with the same public private key pair the KeyIs will not be the
            same as for previous generations of the key, so ideally you only want to do
            this once.
            </p>
            </remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpKeyPair.#ctor(Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKey,Org.BouncyCastle2.Bcpg.OpenPgp.PgpPrivateKey)">
            <summary>Create a key pair from a PgpPrivateKey and a PgpPublicKey.</summary>
            <param name="pub">The public key.</param>
            <param name="priv">The private key.</param>
        </member>
        <member name="P:Org.BouncyCastle2.Bcpg.OpenPgp.PgpKeyPair.KeyId">
            <summary>The keyId associated with this key pair.</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.OpenPgp.PgpKeyValidationException">
            <remarks>
            Thrown if the key checksum is invalid.
            </remarks>
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.OpenPgp.PgpLiteralData">
            <summary>Class for processing literal data objects.</summary>
        </member>
        <member name="F:Org.BouncyCastle2.Bcpg.OpenPgp.PgpLiteralData.Console">
            <summary>The special name indicating a "for your eyes only" packet.</summary>
        </member>
        <member name="P:Org.BouncyCastle2.Bcpg.OpenPgp.PgpLiteralData.Format">
            <summary>The format of the data stream - Binary or Text</summary>
        </member>
        <member name="P:Org.BouncyCastle2.Bcpg.OpenPgp.PgpLiteralData.FileName">
            <summary>The file name that's associated with the data stream.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpLiteralData.GetRawFileName">
            Return the file name as an unintrepreted byte array.
        </member>
        <member name="P:Org.BouncyCastle2.Bcpg.OpenPgp.PgpLiteralData.ModificationTime">
            <summary>The modification time for the file.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpLiteralData.GetInputStream">
            <summary>The raw input stream for the data stream.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpLiteralData.GetDataStream">
            <summary>The input stream representing the data stream.</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.OpenPgp.PgpLiteralDataGenerator">
            <remarks>Class for producing literal data packets.</remarks>
        </member>
        <member name="F:Org.BouncyCastle2.Bcpg.OpenPgp.PgpLiteralDataGenerator.Console">
            <summary>The special name indicating a "for your eyes only" packet.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpLiteralDataGenerator.#ctor(System.Boolean)">
            <summary>
            Generates literal data objects in the old format.
            This is important if you need compatibility with PGP 2.6.x.
            </summary>
            <param name="oldFormat">If true, uses old format.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpLiteralDataGenerator.Open(System.IO.Stream,System.Char,System.String,System.Int64,System.DateTime)">
            <summary>
            <p>
            Open a literal data packet, returning a stream to store the data inside the packet.
            </p>
            <p>
            The stream created can be closed off by either calling Close()
            on the stream or Close() on the generator. Closing the returned
            stream does not close off the Stream parameter <c>outStr</c>.
            </p>
            </summary>
            <param name="outStr">The stream we want the packet in.</param>
            <param name="format">The format we are using.</param>
            <param name="name">The name of the 'file'.</param>
            <param name="length">The length of the data we will write.</param>
            <param name="modificationTime">The time of last modification we want stored.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpLiteralDataGenerator.Open(System.IO.Stream,System.Char,System.String,System.DateTime,System.Byte[])">
            <summary>
            <p>
            Open a literal data packet, returning a stream to store the data inside the packet,
            as an indefinite length stream. The stream is written out as a series of partial
            packets with a chunk size determined by the size of the passed in buffer.
            </p>
            <p>
            The stream created can be closed off by either calling Close()
            on the stream or Close() on the generator. Closing the returned
            stream does not close off the Stream parameter <c>outStr</c>.
            </p>
            <p>
            <b>Note</b>: if the buffer is not a power of 2 in length only the largest power of 2
            bytes worth of the buffer will be used.</p>
            </summary>
            <param name="outStr">The stream we want the packet in.</param>
            <param name="format">The format we are using.</param>
            <param name="name">The name of the 'file'.</param>
            <param name="modificationTime">The time of last modification we want stored.</param>
            <param name="buffer">The buffer to use for collecting data to put into chunks.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpLiteralDataGenerator.Open(System.IO.Stream,System.Char,System.IO.FileInfo)">
            <summary>
            <p>
            Open a literal data packet for the passed in <c>FileInfo</c> object, returning
            an output stream for saving the file contents.
            </p>
            <p>
            The stream created can be closed off by either calling Close()
            on the stream or Close() on the generator. Closing the returned
            stream does not close off the Stream parameter <c>outStr</c>.
            </p>
            </summary>
            <param name="outStr">The stream we want the packet in.</param>
            <param name="format">The format we are using.</param>
            <param name="file">The <c>FileInfo</c> object containg the packet details.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpLiteralDataGenerator.Close">
            <summary>
            Close the literal data packet - this is equivalent to calling Close()
            on the stream returned by the Open() method.
            </summary>
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.OpenPgp.PgpMarker">
            <remarks>
            A PGP marker packet - in general these should be ignored other than where
            the idea is to preserve the original input stream.
            </remarks>
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.OpenPgp.PgpObjectFactory">
            <remarks>
            General class for reading a PGP object stream.
            <p>
            Note: if this class finds a PgpPublicKey or a PgpSecretKey it
            will create a PgpPublicKeyRing, or a PgpSecretKeyRing for each
            key found. If all you are trying to do is read a key ring file use
            either PgpPublicKeyRingBundle or PgpSecretKeyRingBundle.</p>
            </remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpObjectFactory.NextPgpObject">
            <summary>Return the next object in the stream, or null if the end is reached.</summary>
            <exception cref="T:System.IO.IOException">On a parse error</exception>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpObjectFactory.AllPgpObjects">
            <summary>
            Return all available objects in a list.
            </summary>
            <returns>An <c>IList</c> containing all objects from this factory, in order.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpObjectFactory.FilterPgpObjects(System.Type)">
            <summary>
            Read all available objects, returning only those that are assignable to the specified type.
            </summary>
            <param name="type">The type of objects to return. All other objects are ignored.</param>
            <returns>An <c>IList</c> containing the filtered objects from this factory, in order.</returns>
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.OpenPgp.PgpOnePassSignature">
            <remarks>A one pass signature object.</remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpOnePassSignature.InitVerify(Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKey)">
            <summary>Initialise the signature object for verification.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpOnePassSignature.Verify(Org.BouncyCastle2.Bcpg.OpenPgp.PgpSignature)">
            <summary>Verify the calculated signature against the passed in PgpSignature.</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.OpenPgp.PgpOnePassSignatureList">
            <remarks>Holder for a list of PgpOnePassSignature objects.</remarks>
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.OpenPgp.PgpPad">
            <remarks>Padding functions.</remarks>
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.OpenPgp.PgpPbeEncryptedData">
            <remarks>A password based encryption object.</remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpPbeEncryptedData.GetInputStream">
            <summary>Return the raw input stream for the data stream.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpPbeEncryptedData.GetDataStream(System.Char[])">
            <summary>Return the decrypted input stream, using the passed in passphrase.</summary>
            <remarks>
            Conversion of the passphrase characters to bytes is performed using Convert.ToByte(), which is
            the historical behaviour of the library (1.7 and earlier).
            </remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpPbeEncryptedData.GetDataStreamUtf8(System.Char[])">
            <summary>Return the decrypted input stream, using the passed in passphrase.</summary>
            <remarks>
            The passphrase is encoded to bytes using UTF8 (Encoding.UTF8.GetBytes).
            </remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpPbeEncryptedData.GetDataStreamRaw(System.Byte[])">
            <summary>Return the decrypted input stream, using the passed in passphrase.</summary>
            <remarks>
            Allows the caller to handle the encoding of the passphrase to bytes.
            </remarks>
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.OpenPgp.PgpPrivateKey">
            <remarks>General class to contain a private key for use with other OpenPGP objects.</remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpPrivateKey.#ctor(System.Int64,Org.BouncyCastle2.Bcpg.PublicKeyPacket,Org.BouncyCastle2.Crypto.AsymmetricKeyParameter)">
            <summary>
            Create a PgpPrivateKey from a keyID, the associated public data packet, and a regular private key.
            </summary>
            <param name="keyID">ID of the corresponding public key.</param>
            <param name="publicKeyPacket">the public key data packet to be associated with this private key.</param>
            <param name="privateKey">the private key data packet to be associated with this private key.</param>
        </member>
        <member name="P:Org.BouncyCastle2.Bcpg.OpenPgp.PgpPrivateKey.KeyId">
            <summary>The keyId associated with the contained private key.</summary>
        </member>
        <member name="P:Org.BouncyCastle2.Bcpg.OpenPgp.PgpPrivateKey.PublicKeyPacket">
            <summary>The public key packet associated with this private key, if available.</summary>
        </member>
        <member name="P:Org.BouncyCastle2.Bcpg.OpenPgp.PgpPrivateKey.Key">
            <summary>The contained private key.</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKey">
            <remarks>General class to handle a PGP public key object.</remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKey.#ctor(Org.BouncyCastle2.Bcpg.PublicKeyAlgorithmTag,Org.BouncyCastle2.Crypto.AsymmetricKeyParameter,System.DateTime)">
            <summary>
            Create a PgpPublicKey from the passed in lightweight one.
            </summary>
            <remarks>
            Note: the time passed in affects the value of the key's keyId, so you probably only want
            to do this once for a lightweight key, or make sure you keep track of the time you used.
            </remarks>
            <param name="algorithm">Asymmetric algorithm type representing the public key.</param>
            <param name="pubKey">Actual public key to associate.</param>
            <param name="time">Date of creation.</param>
            <exception cref="T:System.ArgumentException">If <c>pubKey</c> is not public.</exception>
            <exception cref="T:Org.BouncyCastle2.Bcpg.OpenPgp.PgpException">On key creation problem.</exception>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKey.#ctor(Org.BouncyCastle2.Bcpg.PublicKeyPacket,Org.BouncyCastle2.Bcpg.TrustPacket,System.Collections.IList)">
            <summary>Constructor for a sub-key.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKey.#ctor(Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKey)">
            <summary>Copy constructor.</summary>
            <param name="pubKey">The public key to copy.</param>
        </member>
        <member name="P:Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKey.Version">
            <summary>The version of this key.</summary>
        </member>
        <member name="P:Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKey.CreationTime">
            <summary>The creation time of this key.</summary>
        </member>
        <member name="P:Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKey.ValidDays">
            <summary>The number of valid days from creation time - zero means no expiry.</summary>
            <remarks>WARNING: This method will return 1 for keys with version > 3 that expire in less than 1 day</remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKey.GetTrustData">
            <summary>Return the trust data associated with the public key, if present.</summary>
            <returns>A byte array with trust data, null otherwise.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKey.GetValidSeconds">
            <summary>The number of valid seconds from creation time - zero means no expiry.</summary>
        </member>
        <member name="P:Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKey.KeyId">
            <summary>The keyId associated with the public key.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKey.GetFingerprint">
            <summary>The fingerprint of the key</summary>
        </member>
        <member name="P:Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKey.IsEncryptionKey">
            <summary>
            Check if this key has an algorithm type that makes it suitable to use for encryption.
            </summary>
            <remarks>
            Note: with version 4 keys KeyFlags subpackets should also be considered when present for
            determining the preferred use of the key.
            </remarks>
            <returns>
            <c>true</c> if this key algorithm is suitable for encryption.
            </returns>
        </member>
        <member name="P:Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKey.IsMasterKey">
            <summary>True, if this could be a master key.</summary>
        </member>
        <member name="P:Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKey.Algorithm">
            <summary>The algorithm code associated with the public key.</summary>
        </member>
        <member name="P:Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKey.BitStrength">
            <summary>The strength of the key in bits.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKey.GetKey">
            <summary>The public key contained in the object.</summary>
            <returns>A lightweight public key.</returns>
            <exception cref="T:Org.BouncyCastle2.Bcpg.OpenPgp.PgpException">If the key algorithm is not recognised.</exception>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKey.GetUserIds">
            <summary>Allows enumeration of any user IDs associated with the key.</summary>
            <returns>An <c>IEnumerable</c> of <c>string</c> objects.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKey.GetUserAttributes">
            <summary>Allows enumeration of any user attribute vectors associated with the key.</summary>
            <returns>An <c>IEnumerable</c> of <c>PgpUserAttributeSubpacketVector</c> objects.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKey.GetSignaturesForId(System.String)">
            <summary>Allows enumeration of any signatures associated with the passed in id.</summary>
            <param name="id">The ID to be matched.</param>
            <returns>An <c>IEnumerable</c> of <c>PgpSignature</c> objects.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKey.GetSignaturesForUserAttribute(Org.BouncyCastle2.Bcpg.OpenPgp.PgpUserAttributeSubpacketVector)">
            <summary>Allows enumeration of signatures associated with the passed in user attributes.</summary>
            <param name="userAttributes">The vector of user attributes to be matched.</param>
            <returns>An <c>IEnumerable</c> of <c>PgpSignature</c> objects.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKey.GetSignaturesOfType(System.Int32)">
            <summary>Allows enumeration of signatures of the passed in type that are on this key.</summary>
            <param name="signatureType">The type of the signature to be returned.</param>
            <returns>An <c>IEnumerable</c> of <c>PgpSignature</c> objects.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKey.GetSignatures">
            <summary>Allows enumeration of all signatures/certifications associated with this key.</summary>
            <returns>An <c>IEnumerable</c> with all signatures/certifications.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKey.GetKeySignatures">
             Return all signatures/certifications directly associated with this key (ie, not to a user id).
            
             @return an iterator (possibly empty) with all signatures/certifications.
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKey.IsRevoked">
            <summary>Check whether this (sub)key has a revocation signature on it.</summary>
            <returns>True, if this (sub)key has been revoked.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKey.AddCertification(Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKey,System.String,Org.BouncyCastle2.Bcpg.OpenPgp.PgpSignature)">
            <summary>Add a certification for an id to the given public key.</summary>
            <param name="key">The key the certification is to be added to.</param>
            <param name="id">The ID the certification is associated with.</param>
            <param name="certification">The new certification.</param>
            <returns>The re-certified key.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKey.AddCertification(Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKey,Org.BouncyCastle2.Bcpg.OpenPgp.PgpUserAttributeSubpacketVector,Org.BouncyCastle2.Bcpg.OpenPgp.PgpSignature)">
            <summary>Add a certification for the given UserAttributeSubpackets to the given public key.</summary>
            <param name="key">The key the certification is to be added to.</param>
            <param name="userAttributes">The attributes the certification is associated with.</param>
            <param name="certification">The new certification.</param>
            <returns>The re-certified key.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKey.RemoveCertification(Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKey,Org.BouncyCastle2.Bcpg.OpenPgp.PgpUserAttributeSubpacketVector)">
            <summary>
            Remove any certifications associated with a user attribute subpacket on a key.
            </summary>
            <param name="key">The key the certifications are to be removed from.</param>
            <param name="userAttributes">The attributes to be removed.</param>
            <returns>
            The re-certified key, or null if the user attribute subpacket was not found on the key.
            </returns>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKey.RemoveCertification(Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKey,System.String)">
            <summary>Remove any certifications associated with a given ID on a key.</summary>
            <param name="key">The key the certifications are to be removed from.</param>
            <param name="id">The ID that is to be removed.</param>
            <returns>The re-certified key, or null if the ID was not found on the key.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKey.RemoveCertification(Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKey,System.String,Org.BouncyCastle2.Bcpg.OpenPgp.PgpSignature)">
            <summary>Remove a certification associated with a given ID on a key.</summary>
            <param name="key">The key the certifications are to be removed from.</param>
            <param name="id">The ID that the certfication is to be removed from.</param>
            <param name="certification">The certfication to be removed.</param>
            <returns>The re-certified key, or null if the certification was not found.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKey.RemoveCertification(Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKey,Org.BouncyCastle2.Bcpg.OpenPgp.PgpUserAttributeSubpacketVector,Org.BouncyCastle2.Bcpg.OpenPgp.PgpSignature)">
            <summary>Remove a certification associated with a given user attributes on a key.</summary>
            <param name="key">The key the certifications are to be removed from.</param>
            <param name="userAttributes">The user attributes that the certfication is to be removed from.</param>
            <param name="certification">The certification to be removed.</param>
            <returns>The re-certified key, or null if the certification was not found.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKey.AddCertification(Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKey,Org.BouncyCastle2.Bcpg.OpenPgp.PgpSignature)">
            <summary>Add a revocation or some other key certification to a key.</summary>
            <param name="key">The key the revocation is to be added to.</param>
            <param name="certification">The key signature to be added.</param>
            <returns>The new changed public key object.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKey.RemoveCertification(Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKey,Org.BouncyCastle2.Bcpg.OpenPgp.PgpSignature)">
            <summary>Remove a certification from the key.</summary>
            <param name="key">The key the certifications are to be removed from.</param>
            <param name="certification">The certfication to be removed.</param>
            <returns>The modified key, null if the certification was not found.</returns>
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKeyEncryptedData">
            <remarks>A public key encrypted data object.</remarks>
        </member>
        <member name="P:Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKeyEncryptedData.KeyId">
            <summary>The key ID for the key used to encrypt the data.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKeyEncryptedData.GetSymmetricAlgorithm(Org.BouncyCastle2.Bcpg.OpenPgp.PgpPrivateKey)">
            <summary>
            Return the algorithm code for the symmetric algorithm used to encrypt the data.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKeyEncryptedData.GetDataStream(Org.BouncyCastle2.Bcpg.OpenPgp.PgpPrivateKey)">
            <summary>Return the decrypted data stream for the packet.</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKeyRing">
            <remarks>
            Class to hold a single master public key and its subkeys.
            <p>
            Often PGP keyring files consist of multiple master keys, if you are trying to process
            or construct one of these you should use the <c>PgpPublicKeyRingBundle</c> class.
            </p>
            </remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKeyRing.GetPublicKey">
            <summary>Return the first public key in the ring.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKeyRing.GetPublicKey(System.Int64)">
            <summary>Return the public key referred to by the passed in key ID if it is present.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKeyRing.GetPublicKeys">
            <summary>Allows enumeration of all the public keys.</summary>
            <returns>An <c>IEnumerable</c> of <c>PgpPublicKey</c> objects.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKeyRing.InsertPublicKey(Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKeyRing,Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKey)">
            <summary>
            Returns a new key ring with the public key passed in either added or
            replacing an existing one.
            </summary>
            <param name="pubRing">The public key ring to be modified.</param>
            <param name="pubKey">The public key to be inserted.</param>
            <returns>A new <c>PgpPublicKeyRing</c></returns>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKeyRing.RemovePublicKey(Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKeyRing,Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKey)">
            <summary>Returns a new key ring with the public key passed in removed from the key ring.</summary>
            <param name="pubRing">The public key ring to be modified.</param>
            <param name="pubKey">The public key to be removed.</param>
            <returns>A new <c>PgpPublicKeyRing</c>, or null if pubKey is not found.</returns>
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKeyRingBundle">
            <remarks>
            Often a PGP key ring file is made up of a succession of master/sub-key key rings.
            If you want to read an entire public key file in one hit this is the class for you.
            </remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKeyRingBundle.#ctor(System.IO.Stream)">
            <summary>Build a PgpPublicKeyRingBundle from the passed in input stream.</summary>
            <param name="inputStream">Input stream containing data.</param>
            <exception cref="T:System.IO.IOException">If a problem parsing the stream occurs.</exception>
            <exception cref="T:Org.BouncyCastle2.Bcpg.OpenPgp.PgpException">If an object is encountered which isn't a PgpPublicKeyRing.</exception>
        </member>
        <member name="P:Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKeyRingBundle.Count">
            <summary>Return the number of key rings in this collection.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKeyRingBundle.GetKeyRings">
            <summary>Allow enumeration of the public key rings making up this collection.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKeyRingBundle.GetKeyRings(System.String)">
            <summary>Allow enumeration of the key rings associated with the passed in userId.</summary>
            <param name="userId">The user ID to be matched.</param>
            <returns>An <c>IEnumerable</c> of key rings which matched (possibly none).</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKeyRingBundle.GetKeyRings(System.String,System.Boolean)">
            <summary>Allow enumeration of the key rings associated with the passed in userId.</summary>
            <param name="userId">The user ID to be matched.</param>
            <param name="matchPartial">If true, userId need only be a substring of an actual ID string to match.</param>
            <returns>An <c>IEnumerable</c> of key rings which matched (possibly none).</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKeyRingBundle.GetKeyRings(System.String,System.Boolean,System.Boolean)">
            <summary>Allow enumeration of the key rings associated with the passed in userId.</summary>
            <param name="userId">The user ID to be matched.</param>
            <param name="matchPartial">If true, userId need only be a substring of an actual ID string to match.</param>
            <param name="ignoreCase">If true, case is ignored in user ID comparisons.</param>
            <returns>An <c>IEnumerable</c> of key rings which matched (possibly none).</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKeyRingBundle.GetPublicKey(System.Int64)">
            <summary>Return the PGP public key associated with the given key id.</summary>
            <param name="keyId">The ID of the public key to return.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKeyRingBundle.GetPublicKeyRing(System.Int64)">
            <summary>Return the public key ring which contains the key referred to by keyId</summary>
            <param name="keyId">key ID to match against</param>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKeyRingBundle.Contains(System.Int64)">
            <summary>
            Return true if a key matching the passed in key ID is present, false otherwise.
            </summary>
            <param name="keyID">key ID to look for.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKeyRingBundle.AddPublicKeyRing(Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKeyRingBundle,Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKeyRing)">
            <summary>
            Return a new bundle containing the contents of the passed in bundle and
            the passed in public key ring.
            </summary>
            <param name="bundle">The <c>PgpPublicKeyRingBundle</c> the key ring is to be added to.</param>
            <param name="publicKeyRing">The key ring to be added.</param>
            <returns>A new <c>PgpPublicKeyRingBundle</c> merging the current one with the passed in key ring.</returns>
            <exception cref="T:System.ArgumentException">If the keyId for the passed in key ring is already present.</exception>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKeyRingBundle.RemovePublicKeyRing(Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKeyRingBundle,Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKeyRing)">
            <summary>
            Return a new bundle containing the contents of the passed in bundle with
            the passed in public key ring removed.
            </summary>
            <param name="bundle">The <c>PgpPublicKeyRingBundle</c> the key ring is to be removed from.</param>
            <param name="publicKeyRing">The key ring to be removed.</param>
            <returns>A new <c>PgpPublicKeyRingBundle</c> not containing the passed in key ring.</returns>
            <exception cref="T:System.ArgumentException">If the keyId for the passed in key ring is not present.</exception>
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSecretKey">
            <remarks>General class to handle a PGP secret key object.</remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSecretKey.#ctor(System.Int32,Org.BouncyCastle2.Bcpg.OpenPgp.PgpKeyPair,System.String,Org.BouncyCastle2.Bcpg.SymmetricKeyAlgorithmTag,System.Char[],Org.BouncyCastle2.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Org.BouncyCastle2.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Org.BouncyCastle2.Security.SecureRandom)">
            <remarks>
            Conversion of the passphrase characters to bytes is performed using Convert.ToByte(), which is
            the historical behaviour of the library (1.7 and earlier).
            </remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSecretKey.#ctor(System.Int32,Org.BouncyCastle2.Bcpg.OpenPgp.PgpKeyPair,System.String,Org.BouncyCastle2.Bcpg.SymmetricKeyAlgorithmTag,System.Char[],System.Boolean,Org.BouncyCastle2.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Org.BouncyCastle2.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Org.BouncyCastle2.Security.SecureRandom)">
            <remarks>
            Conversion of the passphrase characters to bytes is performed using Convert.ToByte(), which is
            the historical behaviour of the library (1.7 and earlier).
            </remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSecretKey.#ctor(System.Int32,Org.BouncyCastle2.Bcpg.OpenPgp.PgpKeyPair,System.String,Org.BouncyCastle2.Bcpg.SymmetricKeyAlgorithmTag,System.Boolean,System.Char[],System.Boolean,Org.BouncyCastle2.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Org.BouncyCastle2.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Org.BouncyCastle2.Security.SecureRandom)">
            <remarks>
            If utf8PassPhrase is true, conversion of the passphrase to bytes uses Encoding.UTF8.GetBytes(), otherwise the conversion
            is performed using Convert.ToByte(), which is the historical behaviour of the library (1.7 and earlier).
            </remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSecretKey.#ctor(System.Int32,Org.BouncyCastle2.Bcpg.OpenPgp.PgpKeyPair,System.String,Org.BouncyCastle2.Bcpg.SymmetricKeyAlgorithmTag,System.Byte[],System.Boolean,Org.BouncyCastle2.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Org.BouncyCastle2.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Org.BouncyCastle2.Security.SecureRandom)">
            <remarks>
            Allows the caller to handle the encoding of the passphrase to bytes.
            </remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSecretKey.#ctor(System.Int32,Org.BouncyCastle2.Bcpg.OpenPgp.PgpKeyPair,System.String,Org.BouncyCastle2.Bcpg.SymmetricKeyAlgorithmTag,Org.BouncyCastle2.Bcpg.HashAlgorithmTag,System.Char[],System.Boolean,Org.BouncyCastle2.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Org.BouncyCastle2.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Org.BouncyCastle2.Security.SecureRandom)">
            <remarks>
            Conversion of the passphrase characters to bytes is performed using Convert.ToByte(), which is
            the historical behaviour of the library (1.7 and earlier).
            </remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSecretKey.#ctor(System.Int32,Org.BouncyCastle2.Bcpg.OpenPgp.PgpKeyPair,System.String,Org.BouncyCastle2.Bcpg.SymmetricKeyAlgorithmTag,Org.BouncyCastle2.Bcpg.HashAlgorithmTag,System.Boolean,System.Char[],System.Boolean,Org.BouncyCastle2.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Org.BouncyCastle2.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Org.BouncyCastle2.Security.SecureRandom)">
            <remarks>
            If utf8PassPhrase is true, conversion of the passphrase to bytes uses Encoding.UTF8.GetBytes(), otherwise the conversion
            is performed using Convert.ToByte(), which is the historical behaviour of the library (1.7 and earlier).
            </remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSecretKey.#ctor(System.Int32,Org.BouncyCastle2.Bcpg.OpenPgp.PgpKeyPair,System.String,Org.BouncyCastle2.Bcpg.SymmetricKeyAlgorithmTag,Org.BouncyCastle2.Bcpg.HashAlgorithmTag,System.Byte[],System.Boolean,Org.BouncyCastle2.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Org.BouncyCastle2.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Org.BouncyCastle2.Security.SecureRandom)">
            <remarks>
            Allows the caller to handle the encoding of the passphrase to bytes.
            </remarks>
        </member>
        <member name="P:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSecretKey.IsSigningKey">
            <summary>
            Check if this key has an algorithm type that makes it suitable to use for signing.
            </summary>
            <remarks>
            Note: with version 4 keys KeyFlags subpackets should also be considered when present for
            determining the preferred use of the key.
            </remarks>
            <returns>
            <c>true</c> if this key algorithm is suitable for use with signing.
            </returns>
        </member>
        <member name="P:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSecretKey.IsMasterKey">
            <summary>True, if this is a master key.</summary>
        </member>
        <member name="P:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSecretKey.IsPrivateKeyEmpty">
            <summary>Detect if the Secret Key's Private Key is empty or not</summary>
        </member>
        <member name="P:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSecretKey.KeyEncryptionAlgorithm">
            <summary>The algorithm the key is encrypted with.</summary>
        </member>
        <member name="P:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSecretKey.KeyId">
            <summary>The key ID of the public key associated with this key.</summary>
        </member>
        <member name="P:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSecretKey.S2kUsage">
            <summary>Return the S2K usage associated with this key.</summary>
        </member>
        <member name="P:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSecretKey.S2k">
            <summary>Return the S2K used to process this key.</summary>
        </member>
        <member name="P:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSecretKey.PublicKey">
            <summary>The public key associated with this key.</summary>
        </member>
        <member name="P:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSecretKey.UserIds">
            <summary>Allows enumeration of any user IDs associated with the key.</summary>
            <returns>An <c>IEnumerable</c> of <c>string</c> objects.</returns>
        </member>
        <member name="P:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSecretKey.UserAttributes">
            <summary>Allows enumeration of any user attribute vectors associated with the key.</summary>
            <returns>An <c>IEnumerable</c> of <c>string</c> objects.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSecretKey.ExtractPrivateKey(System.Char[])">
            <summary>Extract a <c>PgpPrivateKey</c> from this secret key's encrypted contents.</summary>
            <remarks>
            Conversion of the passphrase characters to bytes is performed using Convert.ToByte(), which is
            the historical behaviour of the library (1.7 and earlier).
            </remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSecretKey.ExtractPrivateKeyUtf8(System.Char[])">
            <summary>Extract a <c>PgpPrivateKey</c> from this secret key's encrypted contents.</summary>
            <remarks>
            The passphrase is encoded to bytes using UTF8 (Encoding.UTF8.GetBytes).
            </remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSecretKey.ExtractPrivateKeyRaw(System.Byte[])">
            <summary>Extract a <c>PgpPrivateKey</c> from this secret key's encrypted contents.</summary>
            <remarks>
            Allows the caller to handle the encoding of the passphrase to bytes.
            </remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSecretKey.CopyWithNewPassword(Org.BouncyCastle2.Bcpg.OpenPgp.PgpSecretKey,System.Char[],System.Char[],Org.BouncyCastle2.Bcpg.SymmetricKeyAlgorithmTag,Org.BouncyCastle2.Security.SecureRandom)">
            <summary>
            Return a copy of the passed in secret key, encrypted using a new password
            and the passed in algorithm.
            </summary>
            <remarks>
            Conversion of the passphrase characters to bytes is performed using Convert.ToByte(), which is
            the historical behaviour of the library (1.7 and earlier).
            </remarks>
            <param name="key">The PgpSecretKey to be copied.</param>
            <param name="oldPassPhrase">The current password for the key.</param>
            <param name="newPassPhrase">The new password for the key.</param>
            <param name="newEncAlgorithm">The algorithm to be used for the encryption.</param>
            <param name="rand">Source of randomness.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSecretKey.CopyWithNewPasswordUtf8(Org.BouncyCastle2.Bcpg.OpenPgp.PgpSecretKey,System.Char[],System.Char[],Org.BouncyCastle2.Bcpg.SymmetricKeyAlgorithmTag,Org.BouncyCastle2.Security.SecureRandom)">
            <summary>
            Return a copy of the passed in secret key, encrypted using a new password
            and the passed in algorithm.
            </summary>
            <remarks>
            The passphrase is encoded to bytes using UTF8 (Encoding.UTF8.GetBytes).
            </remarks>
            <param name="key">The PgpSecretKey to be copied.</param>
            <param name="oldPassPhrase">The current password for the key.</param>
            <param name="newPassPhrase">The new password for the key.</param>
            <param name="newEncAlgorithm">The algorithm to be used for the encryption.</param>
            <param name="rand">Source of randomness.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSecretKey.CopyWithNewPasswordRaw(Org.BouncyCastle2.Bcpg.OpenPgp.PgpSecretKey,System.Byte[],System.Byte[],Org.BouncyCastle2.Bcpg.SymmetricKeyAlgorithmTag,Org.BouncyCastle2.Security.SecureRandom)">
            <summary>
            Return a copy of the passed in secret key, encrypted using a new password
            and the passed in algorithm.
            </summary>
            <remarks>
            Allows the caller to handle the encoding of the passphrase to bytes.
            </remarks>
            <param name="key">The PgpSecretKey to be copied.</param>
            <param name="rawOldPassPhrase">The current password for the key.</param>
            <param name="rawNewPassPhrase">The new password for the key.</param>
            <param name="newEncAlgorithm">The algorithm to be used for the encryption.</param>
            <param name="rand">Source of randomness.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSecretKey.ReplacePublicKey(Org.BouncyCastle2.Bcpg.OpenPgp.PgpSecretKey,Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKey)">
            <summary>Replace the passed the public key on the passed in secret key.</summary>
            <param name="secretKey">Secret key to change.</param>
            <param name="publicKey">New public key.</param>
            <returns>A new secret key.</returns>
            <exception cref="T:System.ArgumentException">If KeyId's do not match.</exception>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSecretKey.ParseSecretKeyFromSExpr(System.IO.Stream,System.Char[],Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKey)">
            <summary>
            Parse a secret key from one of the GPG S expression keys associating it with the passed in public key.
            </summary>
            <remarks>
            Conversion of the passphrase characters to bytes is performed using Convert.ToByte(), which is
            the historical behaviour of the library (1.7 and earlier).
            </remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSecretKey.ParseSecretKeyFromSExprUtf8(System.IO.Stream,System.Char[],Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKey)">
            <summary>
            Parse a secret key from one of the GPG S expression keys associating it with the passed in public key.
            </summary>
            <remarks>
            The passphrase is encoded to bytes using UTF8 (Encoding.UTF8.GetBytes).
            </remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSecretKey.ParseSecretKeyFromSExprRaw(System.IO.Stream,System.Byte[],Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKey)">
            <summary>
            Parse a secret key from one of the GPG S expression keys associating it with the passed in public key.
            </summary>
            <remarks>
            Allows the caller to handle the encoding of the passphrase to bytes.
            </remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSecretKey.ParseSecretKeyFromSExpr(System.IO.Stream,System.Char[])">
            <summary>
            Parse a secret key from one of the GPG S expression keys.
            </summary>
            <remarks>
            Conversion of the passphrase characters to bytes is performed using Convert.ToByte(), which is
            the historical behaviour of the library (1.7 and earlier).
            </remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSecretKey.ParseSecretKeyFromSExprUtf8(System.IO.Stream,System.Char[])">
            <summary>
            Parse a secret key from one of the GPG S expression keys.
            </summary>
            <remarks>
            The passphrase is encoded to bytes using UTF8 (Encoding.UTF8.GetBytes).
            </remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSecretKey.ParseSecretKeyFromSExprRaw(System.IO.Stream,System.Byte[])">
            <summary>
            Parse a secret key from one of the GPG S expression keys.
            </summary>
            <remarks>
            Allows the caller to handle the encoding of the passphrase to bytes.
            </remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSecretKey.DoParseSecretKeyFromSExpr(System.IO.Stream,System.Byte[],System.Boolean)">
            <summary>
            Parse a secret key from one of the GPG S expression keys.
            </summary>
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSecretKeyRing">
            <remarks>
            Class to hold a single master secret key and its subkeys.
            <p>
            Often PGP keyring files consist of multiple master keys, if you are trying to process
            or construct one of these you should use the <c>PgpSecretKeyRingBundle</c> class.
            </p>
            </remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSecretKeyRing.GetPublicKey">
            <summary>Return the public key for the master key.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSecretKeyRing.GetSecretKey">
            <summary>Return the master private key.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSecretKeyRing.GetSecretKeys">
            <summary>Allows enumeration of the secret keys.</summary>
            <returns>An <c>IEnumerable</c> of <c>PgpSecretKey</c> objects.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSecretKeyRing.GetExtraPublicKeys">
            <summary>
            Return an iterator of the public keys in the secret key ring that
            have no matching private key. At the moment only personal certificate data
            appears in this fashion.
            </summary>
            <returns>An <c>IEnumerable</c> of unattached, or extra, public keys.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSecretKeyRing.ReplacePublicKeys(Org.BouncyCastle2.Bcpg.OpenPgp.PgpSecretKeyRing,Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKeyRing)">
            <summary>
            Replace the public key set on the secret ring with the corresponding key off the public ring.
            </summary>
            <param name="secretRing">Secret ring to be changed.</param>
            <param name="publicRing">Public ring containing the new public key set.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSecretKeyRing.CopyWithNewPassword(Org.BouncyCastle2.Bcpg.OpenPgp.PgpSecretKeyRing,System.Char[],System.Char[],Org.BouncyCastle2.Bcpg.SymmetricKeyAlgorithmTag,Org.BouncyCastle2.Security.SecureRandom)">
            <summary>
            Return a copy of the passed in secret key ring, with the master key and sub keys encrypted
            using a new password and the passed in algorithm.
            </summary>
            <param name="ring">The <c>PgpSecretKeyRing</c> to be copied.</param>
            <param name="oldPassPhrase">The current password for key.</param>
            <param name="newPassPhrase">The new password for the key.</param>
            <param name="newEncAlgorithm">The algorithm to be used for the encryption.</param>
            <param name="rand">Source of randomness.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSecretKeyRing.InsertSecretKey(Org.BouncyCastle2.Bcpg.OpenPgp.PgpSecretKeyRing,Org.BouncyCastle2.Bcpg.OpenPgp.PgpSecretKey)">
            <summary>
            Returns a new key ring with the secret key passed in either added or
            replacing an existing one with the same key ID.
            </summary>
            <param name="secRing">The secret key ring to be modified.</param>
            <param name="secKey">The secret key to be inserted.</param>
            <returns>A new <c>PgpSecretKeyRing</c></returns>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSecretKeyRing.RemoveSecretKey(Org.BouncyCastle2.Bcpg.OpenPgp.PgpSecretKeyRing,Org.BouncyCastle2.Bcpg.OpenPgp.PgpSecretKey)">
            <summary>Returns a new key ring with the secret key passed in removed from the key ring.</summary>
            <param name="secRing">The secret key ring to be modified.</param>
            <param name="secKey">The secret key to be removed.</param>
            <returns>A new <c>PgpSecretKeyRing</c>, or null if secKey is not found.</returns>
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSecretKeyRingBundle">
            <remarks>
            Often a PGP key ring file is made up of a succession of master/sub-key key rings.
            If you want to read an entire secret key file in one hit this is the class for you.
            </remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSecretKeyRingBundle.#ctor(System.IO.Stream)">
            <summary>Build a PgpSecretKeyRingBundle from the passed in input stream.</summary>
            <param name="inputStream">Input stream containing data.</param>
            <exception cref="T:System.IO.IOException">If a problem parsing the stream occurs.</exception>
            <exception cref="T:Org.BouncyCastle2.Bcpg.OpenPgp.PgpException">If an object is encountered which isn't a PgpSecretKeyRing.</exception>
        </member>
        <member name="P:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSecretKeyRingBundle.Count">
            <summary>Return the number of rings in this collection.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSecretKeyRingBundle.GetKeyRings">
            <summary>Allow enumeration of the secret key rings making up this collection.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSecretKeyRingBundle.GetKeyRings(System.String)">
            <summary>Allow enumeration of the key rings associated with the passed in userId.</summary>
            <param name="userId">The user ID to be matched.</param>
            <returns>An <c>IEnumerable</c> of key rings which matched (possibly none).</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSecretKeyRingBundle.GetKeyRings(System.String,System.Boolean)">
            <summary>Allow enumeration of the key rings associated with the passed in userId.</summary>
            <param name="userId">The user ID to be matched.</param>
            <param name="matchPartial">If true, userId need only be a substring of an actual ID string to match.</param>
            <returns>An <c>IEnumerable</c> of key rings which matched (possibly none).</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSecretKeyRingBundle.GetKeyRings(System.String,System.Boolean,System.Boolean)">
            <summary>Allow enumeration of the key rings associated with the passed in userId.</summary>
            <param name="userId">The user ID to be matched.</param>
            <param name="matchPartial">If true, userId need only be a substring of an actual ID string to match.</param>
            <param name="ignoreCase">If true, case is ignored in user ID comparisons.</param>
            <returns>An <c>IEnumerable</c> of key rings which matched (possibly none).</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSecretKeyRingBundle.GetSecretKey(System.Int64)">
            <summary>Return the PGP secret key associated with the given key id.</summary>
            <param name="keyId">The ID of the secret key to return.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSecretKeyRingBundle.GetSecretKeyRing(System.Int64)">
            <summary>Return the secret key ring which contains the key referred to by keyId</summary>
            <param name="keyId">The ID of the secret key</param>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSecretKeyRingBundle.Contains(System.Int64)">
            <summary>
            Return true if a key matching the passed in key ID is present, false otherwise.
            </summary>
            <param name="keyID">key ID to look for.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSecretKeyRingBundle.AddSecretKeyRing(Org.BouncyCastle2.Bcpg.OpenPgp.PgpSecretKeyRingBundle,Org.BouncyCastle2.Bcpg.OpenPgp.PgpSecretKeyRing)">
            <summary>
            Return a new bundle containing the contents of the passed in bundle and
            the passed in secret key ring.
            </summary>
            <param name="bundle">The <c>PgpSecretKeyRingBundle</c> the key ring is to be added to.</param>
            <param name="secretKeyRing">The key ring to be added.</param>
            <returns>A new <c>PgpSecretKeyRingBundle</c> merging the current one with the passed in key ring.</returns>
            <exception cref="T:System.ArgumentException">If the keyId for the passed in key ring is already present.</exception>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSecretKeyRingBundle.RemoveSecretKeyRing(Org.BouncyCastle2.Bcpg.OpenPgp.PgpSecretKeyRingBundle,Org.BouncyCastle2.Bcpg.OpenPgp.PgpSecretKeyRing)">
            <summary>
            Return a new bundle containing the contents of the passed in bundle with
            the passed in secret key ring removed.
            </summary>
            <param name="bundle">The <c>PgpSecretKeyRingBundle</c> the key ring is to be removed from.</param>
            <param name="secretKeyRing">The key ring to be removed.</param>
            <returns>A new <c>PgpSecretKeyRingBundle</c> not containing the passed in key ring.</returns>
            <exception cref="T:System.ArgumentException">If the keyId for the passed in key ring is not present.</exception>
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSignature">
            <remarks>A PGP signature object.</remarks>
        </member>
        <member name="P:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSignature.Version">
            <summary>The OpenPGP version number for this signature.</summary>
        </member>
        <member name="P:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSignature.KeyAlgorithm">
            <summary>The key algorithm associated with this signature.</summary>
        </member>
        <member name="P:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSignature.HashAlgorithm">
            <summary>The hash algorithm associated with this signature.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSignature.IsCertification">
            <summary>Return true if this signature represents a certification.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSignature.VerifyCertification(Org.BouncyCastle2.Bcpg.OpenPgp.PgpUserAttributeSubpacketVector,Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKey)">
            <summary>
            Verify the signature as certifying the passed in public key as associated
            with the passed in user attributes.
            </summary>
            <param name="userAttributes">User attributes the key was stored under.</param>
            <param name="key">The key to be verified.</param>
            <returns>True, if the signature matches, false otherwise.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSignature.VerifyCertification(System.String,Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKey)">
            <summary>
            Verify the signature as certifying the passed in public key as associated
            with the passed in ID.
            </summary>
            <param name="id">ID the key was stored under.</param>
            <param name="key">The key to be verified.</param>
            <returns>True, if the signature matches, false otherwise.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSignature.VerifyCertification(Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKey,Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKey)">
            <summary>Verify a certification for the passed in key against the passed in master key.</summary>
            <param name="masterKey">The key we are verifying against.</param>
            <param name="pubKey">The key we are verifying.</param>
            <returns>True, if the certification is valid, false otherwise.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSignature.VerifyCertification(Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKey)">
            <summary>Verify a key certification, such as revocation, for the passed in key.</summary>
            <param name="pubKey">The key we are checking.</param>
            <returns>True, if the certification is valid, false otherwise.</returns>
        </member>
        <member name="P:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSignature.KeyId">
            <summary>The ID of the key that created the signature.</summary>
        </member>
        <member name="P:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSignature.CreationTime">
            <summary>The creation time of this signature.</summary>
        </member>
        <member name="P:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSignature.HasSubpackets">
            <summary>
            Return true if the signature has either hashed or unhashed subpackets.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSignature.IsCertification(System.Int32)">
            <summary>
            Return true if the passed in signature type represents a certification, false if the signature type is not.
            </summary>
            <param name="signatureType"></param>
            <returns>true if signatureType is a certification, false otherwise.</returns>
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSignatureGenerator">
            <remarks>Generator for PGP signatures.</remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSignatureGenerator.#ctor(Org.BouncyCastle2.Bcpg.PublicKeyAlgorithmTag,Org.BouncyCastle2.Bcpg.HashAlgorithmTag)">
            <summary>Create a generator for the passed in keyAlgorithm and hashAlgorithm codes.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSignatureGenerator.InitSign(System.Int32,Org.BouncyCastle2.Bcpg.OpenPgp.PgpPrivateKey)">
            <summary>Initialise the generator for signing.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSignatureGenerator.InitSign(System.Int32,Org.BouncyCastle2.Bcpg.OpenPgp.PgpPrivateKey,Org.BouncyCastle2.Security.SecureRandom)">
            <summary>Initialise the generator for signing.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSignatureGenerator.GenerateOnePassVersion(System.Boolean)">
            <summary>Return the one pass header associated with the current signature.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSignatureGenerator.Generate">
            <summary>Return a signature object containing the current signature state.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSignatureGenerator.GenerateCertification(System.String,Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKey)">
            <summary>Generate a certification for the passed in ID and key.</summary>
            <param name="id">The ID we are certifying against the public key.</param>
            <param name="pubKey">The key we are certifying against the ID.</param>
            <returns>The certification.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSignatureGenerator.GenerateCertification(Org.BouncyCastle2.Bcpg.OpenPgp.PgpUserAttributeSubpacketVector,Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKey)">
            <summary>Generate a certification for the passed in userAttributes.</summary>
            <param name="userAttributes">The ID we are certifying against the public key.</param>
            <param name="pubKey">The key we are certifying against the ID.</param>
            <returns>The certification.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSignatureGenerator.GenerateCertification(Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKey,Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKey)">
            <summary>Generate a certification for the passed in key against the passed in master key.</summary>
            <param name="masterKey">The key we are certifying against.</param>
            <param name="pubKey">The key we are certifying.</param>
            <returns>The certification.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSignatureGenerator.GenerateCertification(Org.BouncyCastle2.Bcpg.OpenPgp.PgpPublicKey)">
            <summary>Generate a certification, such as a revocation, for the passed in key.</summary>
            <param name="pubKey">The key we are certifying.</param>
            <returns>The certification.</returns>
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSignatureList">
            <remarks>A list of PGP signatures - normally in the signature block after literal data.</remarks>
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSignatureSubpacketVector">
            <remarks>Container for a list of signature subpackets.</remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSignatureSubpacketVector.HasSubpacket(Org.BouncyCastle2.Bcpg.SignatureSubpacketTag)">
             Return true if a particular subpacket type exists.
            
             @param type type to look for.
             @return true if present, false otherwise.
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSignatureSubpacketVector.GetSubpackets(Org.BouncyCastle2.Bcpg.SignatureSubpacketTag)">
            Return all signature subpackets of the passed in type.
            @param type subpacket type code
            @return an array of zero or more matching subpackets.
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSignatureSubpacketVector.GetSignatureExpirationTime">
            <summary>
            Return the number of seconds a signature is valid for after its creation date.
            A value of zero means the signature never expires.
            </summary>
            <returns>Seconds a signature is valid for.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSignatureSubpacketVector.GetKeyExpirationTime">
            <summary>
            Return the number of seconds a key is valid for after its creation date.
            A value of zero means the key never expires.
            </summary>
            <returns>Seconds a signature is valid for.</returns>
        </member>
        <member name="P:Org.BouncyCastle2.Bcpg.OpenPgp.PgpSignatureSubpacketVector.Count">
            <summary>Return the number of packets this vector contains.</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.OpenPgp.PgpUserAttributeSubpacketVector">
            <remarks>Container for a list of user attribute subpackets.</remarks>
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.OpenPgp.PgpUtilities">
            <remarks>Basic utility class.</remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpUtilities.GetCurveName(Org.BouncyCastle2.Asn1.DerObjectIdentifier)">
             Return the EC curve name for the passed in OID.
            
             @param oid the EC curve object identifier in the PGP key
             @return  a string representation of the OID.
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpUtilities.MakeKeyFromPassPhrase(Org.BouncyCastle2.Bcpg.SymmetricKeyAlgorithmTag,Org.BouncyCastle2.Bcpg.S2k,System.Char[])">
            <remarks>
            Conversion of the passphrase characters to bytes is performed using Convert.ToByte(), which is
            the historical behaviour of the library (1.7 and earlier).
            </remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpUtilities.MakeKeyFromPassPhraseUtf8(Org.BouncyCastle2.Bcpg.SymmetricKeyAlgorithmTag,Org.BouncyCastle2.Bcpg.S2k,System.Char[])">
            <remarks>
            The passphrase is encoded to bytes using UTF8 (Encoding.UTF8.GetBytes).
            </remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpUtilities.MakeKeyFromPassPhraseRaw(Org.BouncyCastle2.Bcpg.SymmetricKeyAlgorithmTag,Org.BouncyCastle2.Bcpg.S2k,System.Byte[])">
            <remarks>
            Allows the caller to handle the encoding of the passphrase to bytes.
            </remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpUtilities.WriteFileToLiteralData(System.IO.Stream,System.Char,System.IO.FileInfo)">
            <summary>Write out the passed in file as a literal data packet.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpUtilities.WriteFileToLiteralData(System.IO.Stream,System.Char,System.IO.FileInfo,System.Byte[])">
            <summary>Write out the passed in file as a literal data packet in partial packet format.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Bcpg.OpenPgp.PgpUtilities.GetDecoderStream(System.IO.Stream)">
            <summary>
            Return either an ArmoredInputStream or a BcpgInputStream based on whether
            the initial characters of the stream are binary PGP encodings or not.
            </summary>
        </member>
        <member name="T:Org.BouncyCastle2.Bcpg.OpenPgp.SXprUtilities">
            Utility functions for looking a S-expression keys. This class will move when it finds a better home!
            <p>
            Format documented here:
            http://git.gnupg.org/cgi-bin/gitweb.cgi?p=gnupg.git;a=blob;f=agent/keyformat.txt;h=42c4b1f06faf1bbe71ffadc2fee0fad6bec91a97;hb=refs/heads/master
            </p>
        </member>
        <member name="T:Org.BouncyCastle2.Apache.Bzip2.BZip2Constants">
             Base class for both the compress and decompress classes.
             Holds common arrays, and static data.
            
             @author <a href="mailto:keiron@aftexsw.com">Keiron Liddle</a>
        </member>
        <member name="T:Org.BouncyCastle2.Apache.Bzip2.CBZip2InputStream">
             An input stream that decompresses from the BZip2 format (with the file
             header chars) to be read as any other stream.
            
             @author <a href="mailto:keiron@aftexsw.com">Keiron Liddle</a>
            
             <b>NB:</b> note this class has been modified to read the leading BZ from the
             start of the BZIP2 stream to make it compatible with other PGP programs.
        </member>
        <member name="T:Org.BouncyCastle2.Apache.Bzip2.CRC">
             A simple class the hold and calculate the CRC for sanity checking
             of the data.
            
             @author <a href="mailto:keiron@aftexsw.com">Keiron Liddle</a>
        </member>
        <member name="M:Org.BouncyCastle2.Cmp.GeneralPkiMessage.#ctor(Org.BouncyCastle2.Asn1.Cmp.PkiMessage)">
            <summary>
            Wrap a PKIMessage ASN.1 structure.
            </summary>
            <param name="pkiMessage">PKI message.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Cmp.GeneralPkiMessage.#ctor(System.Byte[])">
            <summary>
            Create a PKIMessage from the passed in bytes.
            </summary>
            <param name="encoding">BER/DER encoding of the PKIMessage</param>
        </member>
        <member name="P:Org.BouncyCastle2.Cmp.GeneralPkiMessage.HasProtection">
            <summary>
            Return true if this message has protection bits on it. A return value of true
            indicates the message can be used to construct a ProtectedPKIMessage.
            </summary>
        </member>
        <member name="T:Org.BouncyCastle2.Cmp.ProtectedPkiMessage">
            <summary>
            Wrapper for a PKIMessage with protection attached to it.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Cmp.ProtectedPkiMessage.#ctor(Org.BouncyCastle2.Cmp.GeneralPkiMessage)">
            <summary>
            Wrap a general message.
            </summary>
            <exception cref="T:System.ArgumentException">If the general message does not have protection.</exception>
            <param name="pkiMessage">The General message</param>
        </member>
        <member name="M:Org.BouncyCastle2.Cmp.ProtectedPkiMessage.#ctor(Org.BouncyCastle2.Asn1.Cmp.PkiMessage)">
            <summary>
            Wrap a PKI message.
            </summary>
            <exception cref="T:System.ArgumentException">If the PKI message does not have protection.</exception>
            <param name="pkiMessage">The PKI message</param>
        </member>
        <member name="P:Org.BouncyCastle2.Cmp.ProtectedPkiMessage.Header">
            <summary>
            Message header
            </summary>
        </member>
        <member name="P:Org.BouncyCastle2.Cmp.ProtectedPkiMessage.Body">
            <summary>
            Message Body
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Cmp.ProtectedPkiMessage.ToAsn1Message">
            <summary>
            Return the underlying ASN.1 structure contained in this object.
            </summary>
            <returns>PKI Message structure</returns>
        </member>
        <member name="P:Org.BouncyCastle2.Cmp.ProtectedPkiMessage.HasPasswordBasedMacProtected">
            <summary>
            Determine whether the message is protected by a password based MAC. Use verify(PKMACBuilder, char[])
            to verify the message if this method returns true.
            </summary>
            <returns>true if protection MAC PBE based, false otherwise.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Cmp.ProtectedPkiMessage.GetCertificates">
            <summary>
            Return the extra certificates associated with this message.
            </summary>
            <returns>an array of extra certificates, zero length if none present.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Cmp.ProtectedPkiMessage.Verify(Org.BouncyCastle2.Crypto.IVerifierFactory)">
            <summary>
            Verify a message with a public key based signature attached.
            </summary>
            <param name="verifierFactory">a factory of signature verifiers.</param>
            <returns>true if the provider is able to create a verifier that validates the signature, false otherwise.</returns>      
        </member>
        <member name="M:Org.BouncyCastle2.Cmp.ProtectedPkiMessage.Verify(Org.BouncyCastle2.Crmf.PKMacBuilder,System.Char[])">
            <summary>
            Verify a message with password based MAC protection.
            </summary>
            <param name="pkMacBuilder">MAC builder that can be used to construct the appropriate MacCalculator</param>
            <param name="password">the MAC password</param>
            <returns>true if the passed in password and MAC builder verify the message, false otherwise.</returns>
            <exception cref="T:System.InvalidOperationException">if algorithm not MAC based, or an exception is thrown verifying the MAC.</exception>
        </member>
        <member name="T:Org.BouncyCastle2.Cms.CmsAttributeTableParameter">
            <remarks>
            The 'Signature' parameter is only available when generating unsigned attributes.
            </remarks>
        </member>
        <member name="T:Org.BouncyCastle2.Cms.CmsAuthEnvelopedData">
            containing class for an CMS AuthEnveloped Data object
        </member>
        <member name="M:Org.BouncyCastle2.Cms.CmsContentInfoParser.Close">
            Close the underlying data stream.
            @throws IOException if the close fails.
        </member>
        <member name="T:Org.BouncyCastle2.Cms.CmsEnvelopedData">
            containing class for an CMS Enveloped Data object
        </member>
        <member name="P:Org.BouncyCastle2.Cms.CmsEnvelopedData.EncryptionAlgOid">
            return the object identifier for the content encryption algorithm.
        </member>
        <member name="M:Org.BouncyCastle2.Cms.CmsEnvelopedData.GetRecipientInfos">
            return a store of the intended recipients for this message
        </member>
        <member name="P:Org.BouncyCastle2.Cms.CmsEnvelopedData.ContentInfo">
            return the ContentInfo 
        </member>
        <member name="M:Org.BouncyCastle2.Cms.CmsEnvelopedData.GetUnprotectedAttributes">
            return a table of the unprotected attributes indexed by
            the OID of the attribute.
        </member>
        <member name="M:Org.BouncyCastle2.Cms.CmsEnvelopedData.GetEncoded">
            return the ASN.1 encoded representation of this object.
        </member>
        <member name="T:Org.BouncyCastle2.Cms.CmsEnvelopedDataGenerator">
             <remarks>
             General class for generating a CMS enveloped-data message.
            
             A simple example of usage.
            
             <pre>
                  CmsEnvelopedDataGenerator  fact = new CmsEnvelopedDataGenerator();
            
                  fact.AddKeyTransRecipient(cert);
            
                  CmsEnvelopedData         data = fact.Generate(content, algorithm);
             </pre>
             </remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Cms.CmsEnvelopedDataGenerator.#ctor(Org.BouncyCastle2.Security.SecureRandom)">
            <summary>Constructor allowing specific source of randomness</summary>
            <param name="rand">Instance of <c>SecureRandom</c> to use.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Cms.CmsEnvelopedDataGenerator.Generate(Org.BouncyCastle2.Cms.CmsProcessable,System.String,Org.BouncyCastle2.Crypto.CipherKeyGenerator)">
            <summary>
            Generate an enveloped object that contains a CMS Enveloped Data
            object using the passed in key generator.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Cms.CmsEnvelopedDataGenerator.Generate(Org.BouncyCastle2.Cms.CmsProcessable,System.String)">
            <summary>Generate an enveloped object that contains an CMS Enveloped Data object.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Cms.CmsEnvelopedDataGenerator.Generate(Org.BouncyCastle2.Cms.CmsProcessable,System.String,System.Int32)">
            <summary>Generate an enveloped object that contains an CMS Enveloped Data object.</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Cms.CmsEnvelopedGenerator">
             General class for generating a CMS enveloped-data message.
            
             A simple example of usage.
            
             <pre>
                  CMSEnvelopedDataGenerator  fact = new CMSEnvelopedDataGenerator();
            
                  fact.addKeyTransRecipient(cert);
            
                  CMSEnvelopedData         data = fact.generate(content, algorithm, "BC");
             </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Cms.CmsEnvelopedGenerator.#ctor(Org.BouncyCastle2.Security.SecureRandom)">
            <summary>Constructor allowing specific source of randomness</summary>
            <param name="rand">Instance of <c>SecureRandom</c> to use.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Cms.CmsEnvelopedGenerator.AddKeyTransRecipient(Org.BouncyCastle2.X509.X509Certificate)">
             add a recipient.
            
             @param cert recipient's public key certificate
             @exception ArgumentException if there is a problem with the certificate
        </member>
        <member name="M:Org.BouncyCastle2.Cms.CmsEnvelopedGenerator.AddKeyTransRecipient(Org.BouncyCastle2.Crypto.AsymmetricKeyParameter,System.Byte[])">
             add a recipient
            
             @param key the public key used by the recipient
             @param subKeyId the identifier for the recipient's public key
             @exception ArgumentException if there is a problem with the key
        </member>
        <member name="M:Org.BouncyCastle2.Cms.CmsEnvelopedGenerator.AddKekRecipient(System.String,Org.BouncyCastle2.Crypto.Parameters.KeyParameter,System.Byte[])">
            add a KEK recipient.
            @param key the secret key to use for wrapping
            @param keyIdentifier the byte string that identifies the key
        </member>
        <member name="M:Org.BouncyCastle2.Cms.CmsEnvelopedGenerator.AddKekRecipient(System.String,Org.BouncyCastle2.Crypto.Parameters.KeyParameter,Org.BouncyCastle2.Asn1.Cms.KekIdentifier)">
            add a KEK recipient.
            @param key the secret key to use for wrapping
            @param keyIdentifier the byte string that identifies the key
        </member>
        <member name="M:Org.BouncyCastle2.Cms.CmsEnvelopedGenerator.AddKeyAgreementRecipient(System.String,Org.BouncyCastle2.Crypto.AsymmetricKeyParameter,Org.BouncyCastle2.Crypto.AsymmetricKeyParameter,Org.BouncyCastle2.X509.X509Certificate,System.String)">
             Add a key agreement based recipient.
            
             @param agreementAlgorithm key agreement algorithm to use.
             @param senderPrivateKey private key to initialise sender side of agreement with.
             @param senderPublicKey sender public key to include with message.
             @param recipientCert recipient's public key certificate.
             @param cekWrapAlgorithm OID for key wrapping algorithm to use.
             @exception SecurityUtilityException if the algorithm requested cannot be found
             @exception InvalidKeyException if the keys are inappropriate for the algorithm specified
        </member>
        <member name="M:Org.BouncyCastle2.Cms.CmsEnvelopedGenerator.AddKeyAgreementRecipients(System.String,Org.BouncyCastle2.Crypto.AsymmetricKeyParameter,Org.BouncyCastle2.Crypto.AsymmetricKeyParameter,System.Collections.ICollection,System.String)">
             Add multiple key agreement based recipients (sharing a single KeyAgreeRecipientInfo structure).
            
             @param agreementAlgorithm key agreement algorithm to use.
             @param senderPrivateKey private key to initialise sender side of agreement with.
             @param senderPublicKey sender public key to include with message.
             @param recipientCerts recipients' public key certificates.
             @param cekWrapAlgorithm OID for key wrapping algorithm to use.
             @exception SecurityUtilityException if the algorithm requested cannot be found
             @exception InvalidKeyException if the keys are inappropriate for the algorithm specified
        </member>
        <member name="M:Org.BouncyCastle2.Cms.CmsEnvelopedGenerator.AddRecipientInfoGenerator(Org.BouncyCastle2.Cms.RecipientInfoGenerator)">
            <summary>
            Add a generator to produce the recipient info required.
            </summary>
            <param name="recipientInfoGenerator">a generator of a recipient info object.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Cms.CmsProcessable.Write(System.IO.Stream)">
            <summary>
            Generic routine to copy out the data we want processed.
            </summary>
            <remarks>
            This routine may be called multiple times.
            </remarks>
        </member>
        <member name="T:Org.BouncyCastle2.Cms.CmsProcessableByteArray">
            a holding class for a byte array of data to be processed.
        </member>
        <member name="M:Org.BouncyCastle2.Cms.CmsProcessableByteArray.GetContent">
            <returns>A clone of the byte array</returns>
        </member>
        <member name="T:Org.BouncyCastle2.Cms.CmsSignedData">
             general class for handling a pkcs7-signature message.
            
             A simple example of usage - note, in the example below the validity of
             the certificate isn't verified, just the fact that one of the certs
             matches the given signer...
            
             <pre>
              IX509Store              certs = s.GetCertificates();
              SignerInformationStore  signers = s.GetSignerInfos();
            
              foreach (SignerInformation signer in signers.GetSigners())
              {
                  ArrayList       certList = new ArrayList(certs.GetMatches(signer.SignerID));
                  X509Certificate cert = (X509Certificate) certList[0];
            
                  if (signer.Verify(cert.GetPublicKey()))
                  {
                      verified++;
                  }
              }
             </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Cms.CmsSignedData.#ctor(System.Collections.IDictionary,System.Byte[])">
             Content with detached signature, digests precomputed
            
             @param hashes a map of precomputed digests for content indexed by name of hash.
             @param sigBlock the signature object.
        </member>
        <member name="M:Org.BouncyCastle2.Cms.CmsSignedData.#ctor(Org.BouncyCastle2.Cms.CmsProcessable,System.IO.Stream)">
             base constructor - content with detached signature.
            
             @param signedContent the content that was signed.
             @param sigData the signature object.
        </member>
        <member name="M:Org.BouncyCastle2.Cms.CmsSignedData.#ctor(System.IO.Stream)">
            base constructor - with encapsulated content
        </member>
        <member name="P:Org.BouncyCastle2.Cms.CmsSignedData.Version">
            <summary>Return the version number for this object.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Cms.CmsSignedData.GetSignerInfos">
            return the collection of signers that are associated with the
            signatures for the message.
        </member>
        <member name="M:Org.BouncyCastle2.Cms.CmsSignedData.GetAttributeCertificates(System.String)">
             return a X509Store containing the attribute certificates, if any, contained
             in this message.
            
             @param type type of store to create
             @return a store of attribute certificates
             @exception NoSuchStoreException if the store type isn't available.
             @exception CmsException if a general exception prevents creation of the X509Store
        </member>
        <member name="M:Org.BouncyCastle2.Cms.CmsSignedData.GetCertificates(System.String)">
             return a X509Store containing the public key certificates, if any, contained
             in this message.
            
             @param type type of store to create
             @return a store of public key certificates
             @exception NoSuchStoreException if the store type isn't available.
             @exception CmsException if a general exception prevents creation of the X509Store
        </member>
        <member name="M:Org.BouncyCastle2.Cms.CmsSignedData.GetCrls(System.String)">
             return a X509Store containing CRLs, if any, contained
             in this message.
            
             @param type type of store to create
             @return a store of CRLs
             @exception NoSuchStoreException if the store type isn't available.
             @exception CmsException if a general exception prevents creation of the X509Store
        </member>
        <member name="P:Org.BouncyCastle2.Cms.CmsSignedData.SignedContentType">
            <summary>
            Return the <c>DerObjectIdentifier</c> associated with the encapsulated
            content info structure carried in the signed data.
            </summary>
        </member>
        <member name="P:Org.BouncyCastle2.Cms.CmsSignedData.ContentInfo">
            return the ContentInfo
        </member>
        <member name="M:Org.BouncyCastle2.Cms.CmsSignedData.GetEncoded">
            return the ASN.1 encoded representation of this object.
        </member>
        <member name="M:Org.BouncyCastle2.Cms.CmsSignedData.GetEncoded(System.String)">
             return the ASN.1 encoded representation of this object using the specified encoding.
            
             @param encoding the ASN.1 encoding format to use ("BER" or "DER").
        </member>
        <member name="M:Org.BouncyCastle2.Cms.CmsSignedData.ReplaceSigners(Org.BouncyCastle2.Cms.CmsSignedData,Org.BouncyCastle2.Cms.SignerInformationStore)">
             Replace the signerinformation store associated with this
             CmsSignedData object with the new one passed in. You would
             probably only want to do this if you wanted to change the unsigned
             attributes associated with a signer, or perhaps delete one.
            
             @param signedData the signed data object to be used as a base.
             @param signerInformationStore the new signer information store to use.
             @return a new signed data object.
        </member>
        <member name="M:Org.BouncyCastle2.Cms.CmsSignedData.ReplaceCertificatesAndCrls(Org.BouncyCastle2.Cms.CmsSignedData,Org.BouncyCastle2.X509.Store.IX509Store,Org.BouncyCastle2.X509.Store.IX509Store,Org.BouncyCastle2.X509.Store.IX509Store)">
             Replace the certificate and CRL information associated with this
             CmsSignedData object with the new one passed in.
            
             @param signedData the signed data object to be used as a base.
             @param x509Certs the new certificates to be used.
             @param x509Crls the new CRLs to be used.
             @return a new signed data object.
             @exception CmsException if there is an error processing the stores
        </member>
        <member name="T:Org.BouncyCastle2.Cms.CmsSignedDataParser">
             Parsing class for an CMS Signed Data object from an input stream.
             <p>
             Note: that because we are in a streaming mode only one signer can be tried and it is important
             that the methods on the parser are called in the appropriate order.
             </p>
             <p>
             A simple example of usage for an encapsulated signature.
             </p>
             <p>
             Two notes: first, in the example below the validity of
             the certificate isn't verified, just the fact that one of the certs
             matches the given signer, and, second, because we are in a streaming
             mode the order of the operations is important.
             </p>
             <pre>
                  CmsSignedDataParser     sp = new CmsSignedDataParser(encapSigData);
            
                  sp.GetSignedContent().Drain();
            
                  IX509Store              certs = sp.GetCertificates();
                  SignerInformationStore  signers = sp.GetSignerInfos();
            
                  foreach (SignerInformation signer in signers.GetSigners())
                  {
                      ArrayList       certList = new ArrayList(certs.GetMatches(signer.SignerID));
                      X509Certificate cert = (X509Certificate) certList[0];
            
                      Console.WriteLine("verify returns: " + signer.Verify(cert));
                  }
             </pre>
              Note also: this class does not introduce buffering - if you are processing large files you should create
              the parser with:
              <pre>
                      CmsSignedDataParser     ep = new CmsSignedDataParser(new BufferedInputStream(encapSigData, bufSize));
              </pre>
              where bufSize is a suitably large buffer size.
        </member>
        <member name="M:Org.BouncyCastle2.Cms.CmsSignedDataParser.#ctor(System.IO.Stream)">
            base constructor - with encapsulated content
        </member>
        <member name="M:Org.BouncyCastle2.Cms.CmsSignedDataParser.#ctor(Org.BouncyCastle2.Cms.CmsTypedStream,System.IO.Stream)">
             base constructor
            
             @param signedContent the content that was signed.
             @param sigData the signature object.
        </member>
        <member name="P:Org.BouncyCastle2.Cms.CmsSignedDataParser.Version">
             Return the version number for the SignedData object
            
             @return the version number
        </member>
        <member name="M:Org.BouncyCastle2.Cms.CmsSignedDataParser.GetSignerInfos">
            return the collection of signers that are associated with the
            signatures for the message.
            @throws CmsException
        </member>
        <member name="M:Org.BouncyCastle2.Cms.CmsSignedDataParser.GetAttributeCertificates(System.String)">
             return a X509Store containing the attribute certificates, if any, contained
             in this message.
            
             @param type type of store to create
             @return a store of attribute certificates
             @exception org.BouncyCastle2.x509.NoSuchStoreException if the store type isn't available.
             @exception CmsException if a general exception prevents creation of the X509Store
        </member>
        <member name="M:Org.BouncyCastle2.Cms.CmsSignedDataParser.GetCertificates(System.String)">
             return a X509Store containing the public key certificates, if any, contained
             in this message.
            
             @param type type of store to create
             @return a store of public key certificates
             @exception NoSuchStoreException if the store type isn't available.
             @exception CmsException if a general exception prevents creation of the X509Store
        </member>
        <member name="M:Org.BouncyCastle2.Cms.CmsSignedDataParser.GetCrls(System.String)">
             return a X509Store containing CRLs, if any, contained
             in this message.
            
             @param type type of store to create
             @return a store of CRLs
             @exception NoSuchStoreException if the store type isn't available.
             @exception CmsException if a general exception prevents creation of the X509Store
        </member>
        <member name="P:Org.BouncyCastle2.Cms.CmsSignedDataParser.SignedContentType">
            <summary>
            Return the <c>DerObjectIdentifier</c> associated with the encapsulated
            content info structure carried in the signed data.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Cms.CmsSignedDataParser.ReplaceSigners(System.IO.Stream,Org.BouncyCastle2.Cms.SignerInformationStore,System.IO.Stream)">
            Replace the signerinformation store associated with the passed
            in message contained in the stream original with the new one passed in.
            You would probably only want to do this if you wanted to change the unsigned
            attributes associated with a signer, or perhaps delete one.
            <p>
            The output stream is returned unclosed.
            </p>
            @param original the signed data stream to be used as a base.
            @param signerInformationStore the new signer information store to use.
            @param out the stream to Write the new signed data object to.
            @return out.
        </member>
        <member name="M:Org.BouncyCastle2.Cms.CmsSignedDataParser.ReplaceCertificatesAndCrls(System.IO.Stream,Org.BouncyCastle2.X509.Store.IX509Store,Org.BouncyCastle2.X509.Store.IX509Store,Org.BouncyCastle2.X509.Store.IX509Store,System.IO.Stream)">
            Replace the certificate and CRL information associated with this
            CMSSignedData object with the new one passed in.
            <p>
            The output stream is returned unclosed.
            </p>
            @param original the signed data stream to be used as a base.
            @param certsAndCrls the new certificates and CRLs to be used.
            @param out the stream to Write the new signed data object to.
            @return out.
            @exception CmsException if there is an error processing the CertStore
        </member>
        <member name="T:Org.BouncyCastle2.Cms.CmsSignedDataStreamGenerator">
             General class for generating a pkcs7-signature message stream.
             <p>
             A simple example of usage.
             </p>
             <pre>
                  IX509Store                   certs...
                  CmsSignedDataStreamGenerator gen = new CmsSignedDataStreamGenerator();
            
                  gen.AddSigner(privateKey, cert, CmsSignedDataStreamGenerator.DIGEST_SHA1);
            
                  gen.AddCertificates(certs);
            
                  Stream sigOut = gen.Open(bOut);
            
                  sigOut.Write(Encoding.UTF8.GetBytes("Hello World!"));
            
                  sigOut.Close();
             </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Cms.CmsSignedDataStreamGenerator.#ctor(Org.BouncyCastle2.Security.SecureRandom)">
            <summary>Constructor allowing specific source of randomness</summary>
            <param name="rand">Instance of <c>SecureRandom</c> to use.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Cms.CmsSignedDataStreamGenerator.SetBufferSize(System.Int32)">
             Set the underlying string size for encapsulated data
            
             @param bufferSize length of octet strings to buffer the data.
        </member>
        <member name="M:Org.BouncyCastle2.Cms.CmsSignedDataStreamGenerator.AddSigner(Org.BouncyCastle2.Crypto.AsymmetricKeyParameter,Org.BouncyCastle2.X509.X509Certificate,System.String)">
            add a signer - no attributes other than the default ones will be
            provided here.
            @throws NoSuchAlgorithmException
            @throws InvalidKeyException
        </member>
        <member name="M:Org.BouncyCastle2.Cms.CmsSignedDataStreamGenerator.AddSigner(Org.BouncyCastle2.Crypto.AsymmetricKeyParameter,Org.BouncyCastle2.X509.X509Certificate,System.String,System.String)">
            add a signer, specifying the digest encryption algorithm - no attributes other than the default ones will be
            provided here.
            @throws NoSuchProviderException
            @throws NoSuchAlgorithmException
            @throws InvalidKeyException
        </member>
        <member name="M:Org.BouncyCastle2.Cms.CmsSignedDataStreamGenerator.AddSigner(Org.BouncyCastle2.Crypto.AsymmetricKeyParameter,Org.BouncyCastle2.X509.X509Certificate,System.String,Org.BouncyCastle2.Asn1.Cms.AttributeTable,Org.BouncyCastle2.Asn1.Cms.AttributeTable)">
            add a signer with extra signed/unsigned attributes.
            @throws NoSuchAlgorithmException
            @throws InvalidKeyException
        </member>
        <member name="M:Org.BouncyCastle2.Cms.CmsSignedDataStreamGenerator.AddSigner(Org.BouncyCastle2.Crypto.AsymmetricKeyParameter,Org.BouncyCastle2.X509.X509Certificate,System.String,System.String,Org.BouncyCastle2.Asn1.Cms.AttributeTable,Org.BouncyCastle2.Asn1.Cms.AttributeTable)">
            add a signer with extra signed/unsigned attributes - specifying digest
            encryption algorithm.
            @throws NoSuchProviderException
            @throws NoSuchAlgorithmException
            @throws InvalidKeyException
        </member>
        <member name="M:Org.BouncyCastle2.Cms.CmsSignedDataStreamGenerator.AddSigner(Org.BouncyCastle2.Crypto.AsymmetricKeyParameter,System.Byte[],System.String)">
            add a signer - no attributes other than the default ones will be
            provided here.
            @throws NoSuchAlgorithmException
            @throws InvalidKeyException
        </member>
        <member name="M:Org.BouncyCastle2.Cms.CmsSignedDataStreamGenerator.AddSigner(Org.BouncyCastle2.Crypto.AsymmetricKeyParameter,System.Byte[],System.String,System.String)">
            add a signer - no attributes other than the default ones will be
            provided here.
            @throws NoSuchProviderException
            @throws NoSuchAlgorithmException
            @throws InvalidKeyException
        </member>
        <member name="M:Org.BouncyCastle2.Cms.CmsSignedDataStreamGenerator.AddSigner(Org.BouncyCastle2.Crypto.AsymmetricKeyParameter,System.Byte[],System.String,Org.BouncyCastle2.Asn1.Cms.AttributeTable,Org.BouncyCastle2.Asn1.Cms.AttributeTable)">
            add a signer with extra signed/unsigned attributes.
            @throws NoSuchAlgorithmException
            @throws InvalidKeyException
        </member>
        <member name="M:Org.BouncyCastle2.Cms.CmsSignedDataStreamGenerator.Open(System.IO.Stream)">
            generate a signed object that for a CMS Signed Data object
        </member>
        <member name="M:Org.BouncyCastle2.Cms.CmsSignedDataStreamGenerator.Open(System.IO.Stream,System.Boolean)">
            generate a signed object that for a CMS Signed Data
            object - if encapsulate is true a copy
            of the message will be included in the signature with the
            default content type "data".
        </member>
        <member name="M:Org.BouncyCastle2.Cms.CmsSignedDataStreamGenerator.Open(System.IO.Stream,System.Boolean,System.IO.Stream)">
            generate a signed object that for a CMS Signed Data
            object using the given provider - if encapsulate is true a copy
            of the message will be included in the signature with the
            default content type "data". If dataOutputStream is non null the data
            being signed will be written to the stream as it is processed.
            @param out stream the CMS object is to be written to.
            @param encapsulate true if data should be encapsulated.
            @param dataOutputStream output stream to copy the data being signed to.
        </member>
        <member name="M:Org.BouncyCastle2.Cms.CmsSignedDataStreamGenerator.Open(System.IO.Stream,System.String,System.Boolean)">
            generate a signed object that for a CMS Signed Data
            object - if encapsulate is true a copy
            of the message will be included in the signature. The content type
            is set according to the OID represented by the string signedContentType.
        </member>
        <member name="M:Org.BouncyCastle2.Cms.CmsSignedDataStreamGenerator.Open(System.IO.Stream,System.String,System.Boolean,System.IO.Stream)">
            generate a signed object that for a CMS Signed Data
            object using the given provider - if encapsulate is true a copy
            of the message will be included in the signature. The content type
            is set according to the OID represented by the string signedContentType.
            @param out stream the CMS object is to be written to.
            @param signedContentType OID for data to be signed.
            @param encapsulate true if data should be encapsulated.
            @param dataOutputStream output stream to copy the data being signed to.
        </member>
        <member name="F:Org.BouncyCastle2.Cms.CmsSignedGenerator.Data">
            Default type for the signed data.
        </member>
        <member name="M:Org.BouncyCastle2.Cms.CmsSignedGenerator.#ctor(Org.BouncyCastle2.Security.SecureRandom)">
            <summary>Constructor allowing specific source of randomness</summary>
            <param name="rand">Instance of <c>SecureRandom</c> to use.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Cms.CmsSignedGenerator.AddAttributeCertificates(Org.BouncyCastle2.X509.Store.IX509Store)">
             Add the attribute certificates contained in the passed in store to the
             generator.
            
             @param store a store of Version 2 attribute certificates
             @throws CmsException if an error occurse processing the store.
        </member>
        <member name="M:Org.BouncyCastle2.Cms.CmsSignedGenerator.AddSigners(Org.BouncyCastle2.Cms.SignerInformationStore)">
             Add a store of precalculated signers to the generator.
            
             @param signerStore store of signers
        </member>
        <member name="M:Org.BouncyCastle2.Cms.CmsSignedGenerator.GetGeneratedDigests">
             Return a map of oids and byte arrays representing the digests calculated on the content during
             the last generate.
            
             @return a map of oids (as string objects) and byte[] representing digests.
        </member>
        <member name="M:Org.BouncyCastle2.Cms.CmsSignedHelper.GetDigestAlgName(System.String)">
            Return the digest algorithm using one of the standard JCA string
            representations rather than the algorithm identifier (if possible).
        </member>
        <member name="M:Org.BouncyCastle2.Cms.CmsSignedHelper.GetEncryptionAlgName(System.String)">
            Return the digest encryption algorithm using one of the standard
            JCA string representations rather than the algorithm identifier (if
            possible).
        </member>
        <member name="T:Org.BouncyCastle2.Cms.DefaultSignedAttributeTableGenerator">
            Default signed attributes generator.
        </member>
        <member name="M:Org.BouncyCastle2.Cms.DefaultSignedAttributeTableGenerator.#ctor">
            Initialise to use all defaults
        </member>
        <member name="M:Org.BouncyCastle2.Cms.DefaultSignedAttributeTableGenerator.#ctor(Org.BouncyCastle2.Asn1.Cms.AttributeTable)">
             Initialise with some extra attributes or overrides.
            
             @param attributeTable initial attribute table to use.
        </member>
        <member name="M:Org.BouncyCastle2.Cms.DefaultSignedAttributeTableGenerator.createStandardAttributeTable(System.Collections.IDictionary)">
             Create a standard attribute table from the passed in parameters - this will
             normally include contentType, signingTime, and messageDigest. If the constructor
             using an AttributeTable was used, entries in it for contentType, signingTime, and
             messageDigest will override the generated ones.
            
             @param parameters source parameters for table generation.
            
             @return a filled in Hashtable of attributes.
        </member>
        <member name="M:Org.BouncyCastle2.Cms.DefaultSignedAttributeTableGenerator.GetAttributes(System.Collections.IDictionary)">
            @param parameters source parameters
            @return the populated attribute table
        </member>
        <member name="T:Org.BouncyCastle2.Cms.KekRecipientInformation">
            the RecipientInfo class for a recipient who has been sent a message
            encrypted using a secret key known to the other side.
        </member>
        <member name="M:Org.BouncyCastle2.Cms.KekRecipientInformation.GetContentStream(Org.BouncyCastle2.Crypto.ICipherParameters)">
            decrypt the content and return an input stream.
        </member>
        <member name="T:Org.BouncyCastle2.Cms.KeyAgreeRecipientInformation">
            the RecipientInfo class for a recipient who has been sent a message
            encrypted using key agreement.
        </member>
        <member name="M:Org.BouncyCastle2.Cms.KeyAgreeRecipientInformation.GetContentStream(Org.BouncyCastle2.Crypto.ICipherParameters)">
            decrypt the content and return an input stream.
        </member>
        <member name="T:Org.BouncyCastle2.Cms.KeyTransRecipientInformation">
            the KeyTransRecipientInformation class for a recipient who has been sent a secret
            key encrypted using their public key that needs to be used to
            extract the message.
        </member>
        <member name="M:Org.BouncyCastle2.Cms.KeyTransRecipientInformation.GetContentStream(Org.BouncyCastle2.Crypto.ICipherParameters)">
            decrypt the content and return it as a byte array.
        </member>
        <member name="T:Org.BouncyCastle2.Cms.OriginatorID">
            a basic index for an originator.
        </member>
        <member name="M:Org.BouncyCastle2.Cms.OriginatorInformation.GetCertificates">
             Return the certificates stored in the underlying OriginatorInfo object.
            
             @return a Store of X509CertificateHolder objects.
        </member>
        <member name="M:Org.BouncyCastle2.Cms.OriginatorInformation.GetCrls">
             Return the CRLs stored in the underlying OriginatorInfo object.
            
             @return a Store of X509CRLHolder objects.
        </member>
        <member name="M:Org.BouncyCastle2.Cms.OriginatorInformation.ToAsn1Structure">
             Return the underlying ASN.1 object defining this SignerInformation object.
            
             @return a OriginatorInfo.
        </member>
        <member name="T:Org.BouncyCastle2.Cms.PasswordRecipientInformation">
            the RecipientInfo class for a recipient who has been sent a message
            encrypted using a password.
        </member>
        <member name="P:Org.BouncyCastle2.Cms.PasswordRecipientInformation.KeyDerivationAlgorithm">
             return the object identifier for the key derivation algorithm, or null
             if there is none present.
            
             @return OID for key derivation algorithm, if present.
        </member>
        <member name="M:Org.BouncyCastle2.Cms.PasswordRecipientInformation.GetContentStream(Org.BouncyCastle2.Crypto.ICipherParameters)">
            decrypt the content and return an input stream.
        </member>
        <member name="M:Org.BouncyCastle2.Cms.RecipientInfoGenerator.Generate(Org.BouncyCastle2.Crypto.Parameters.KeyParameter,Org.BouncyCastle2.Security.SecureRandom)">
            <summary>
            Generate a RecipientInfo object for the given key.
            </summary>
            <param name="contentEncryptionKey">
            A <see cref="T:Org.BouncyCastle2.Crypto.Parameters.KeyParameter"/>
            </param>
            <param name="random">
            A <see cref="T:Org.BouncyCastle2.Security.SecureRandom"/>
            </param>
            <returns>
            A <see cref="T:Org.BouncyCastle2.Asn1.Cms.RecipientInfo"/>
            </returns>
            <exception cref="T:Org.BouncyCastle2.Security.GeneralSecurityException"></exception>
        </member>
        <member name="P:Org.BouncyCastle2.Cms.RecipientInformation.KeyEncryptionAlgOid">
                    * return the object identifier for the key encryption algorithm.
                    * 
            		* @return OID for key encryption algorithm.
        </member>
        <member name="P:Org.BouncyCastle2.Cms.RecipientInformation.KeyEncryptionAlgParams">
                    * return the ASN.1 encoded key encryption algorithm parameters, or null if
                    * there aren't any.
                    * 
            		* @return ASN.1 encoding of key encryption algorithm parameters.
        </member>
        <member name="M:Org.BouncyCastle2.Cms.RecipientInformation.GetMac">
             Return the MAC calculated for the content stream. Note: this call is only meaningful once all
             the content has been read.
            
             @return  byte array containing the mac.
        </member>
        <member name="M:Org.BouncyCastle2.Cms.RecipientInformationStore.GetFirstRecipient(Org.BouncyCastle2.Cms.RecipientID)">
             Return the first RecipientInformation object that matches the
             passed in selector. Null if there are no matches.
            
             @param selector to identify a recipient
             @return a single RecipientInformation object. Null if none matches.
        </member>
        <member name="P:Org.BouncyCastle2.Cms.RecipientInformationStore.Count">
             Return the number of recipients in the collection.
            
             @return number of recipients identified.
        </member>
        <member name="M:Org.BouncyCastle2.Cms.RecipientInformationStore.GetRecipients">
             Return all recipients in the collection
            
             @return a collection of recipients.
        </member>
        <member name="M:Org.BouncyCastle2.Cms.RecipientInformationStore.GetRecipients(Org.BouncyCastle2.Cms.RecipientID)">
             Return possible empty collection with recipients matching the passed in RecipientID
            
             @param selector a recipient id to select against.
             @return a collection of RecipientInformation objects.
        </member>
        <member name="T:Org.BouncyCastle2.Cms.SignerID">
            a basic index for a signer.
        </member>
        <member name="M:Org.BouncyCastle2.Cms.SignerInfoGeneratorBuilder.SetDirectSignature(System.Boolean)">
             If the passed in flag is true, the signer signature will be based on the data, not
             a collection of signed attributes, and no signed attributes will be included.
            
             @return the builder object
        </member>
        <member name="M:Org.BouncyCastle2.Cms.SignerInfoGeneratorBuilder.WithSignedAttributeGenerator(Org.BouncyCastle2.Cms.CmsAttributeTableGenerator)">
              Provide a custom signed attribute generator.
            
             @param signedGen a generator of signed attributes.
             @return the builder object
        </member>
        <member name="M:Org.BouncyCastle2.Cms.SignerInfoGeneratorBuilder.WithUnsignedAttributeGenerator(Org.BouncyCastle2.Cms.CmsAttributeTableGenerator)">
             Provide a generator of unsigned attributes.
            
             @param unsignedGen  a generator for signed attributes.
             @return the builder object
        </member>
        <member name="M:Org.BouncyCastle2.Cms.SignerInfoGeneratorBuilder.Build(Org.BouncyCastle2.Crypto.ISignatureFactory,Org.BouncyCastle2.X509.X509Certificate)">
             Build a generator with the passed in X.509 certificate issuer and serial number as the signerIdentifier.
            
             @param contentSigner  operator for generating the final signature in the SignerInfo with.
             @param certificate  X.509 certificate related to the contentSigner.
             @return  a SignerInfoGenerator
             @throws OperatorCreationException   if the generator cannot be built.
        </member>
        <member name="M:Org.BouncyCastle2.Cms.SignerInfoGeneratorBuilder.Build(Org.BouncyCastle2.Crypto.ISignatureFactory,System.Byte[])">
             Build a generator with the passed in subjectKeyIdentifier as the signerIdentifier. If used  you should
             try to follow the calculation described in RFC 5280 section 4.2.1.2.
            
             @param signerFactory  operator factory for generating the final signature in the SignerInfo with.
             @param subjectKeyIdentifier    key identifier to identify the public key for verifying the signature.
             @return  a SignerInfoGenerator
        </member>
        <member name="T:Org.BouncyCastle2.Cms.SignerInformation">
            an expanded SignerInfo block from a CMS Signed message
        </member>
        <member name="M:Org.BouncyCastle2.Cms.SignerInformation.#ctor(Org.BouncyCastle2.Cms.SignerInformation)">
             Protected constructor. In some cases clients have their own idea about how to encode
             the signed attributes and calculate the signature. This constructor is to allow developers
             to deal with that by extending off the class and overriding e.g. SignedAttributes property.
            
             @param baseInfo the SignerInformation to base this one on.
        </member>
        <member name="P:Org.BouncyCastle2.Cms.SignerInformation.Version">
            return the version number for this objects underlying SignerInfo structure.
        </member>
        <member name="P:Org.BouncyCastle2.Cms.SignerInformation.DigestAlgOid">
            return the object identifier for the signature.
        </member>
        <member name="P:Org.BouncyCastle2.Cms.SignerInformation.DigestAlgParams">
            return the signature parameters, or null if there aren't any.
        </member>
        <member name="M:Org.BouncyCastle2.Cms.SignerInformation.GetContentDigest">
            return the content digest that was calculated during verification.
        </member>
        <member name="P:Org.BouncyCastle2.Cms.SignerInformation.EncryptionAlgOid">
            return the object identifier for the signature.
        </member>
        <member name="P:Org.BouncyCastle2.Cms.SignerInformation.EncryptionAlgParams">
            return the signature/encryption algorithm parameters, or null if
            there aren't any.
        </member>
        <member name="P:Org.BouncyCastle2.Cms.SignerInformation.SignedAttributes">
            return a table of the signed attributes - indexed by
            the OID of the attribute.
        </member>
        <member name="P:Org.BouncyCastle2.Cms.SignerInformation.UnsignedAttributes">
            return a table of the unsigned attributes indexed by
            the OID of the attribute.
        </member>
        <member name="M:Org.BouncyCastle2.Cms.SignerInformation.GetSignature">
            return the encoded signature
        </member>
        <member name="M:Org.BouncyCastle2.Cms.SignerInformation.GetCounterSignatures">
            Return a SignerInformationStore containing the counter signatures attached to this
            signer. If no counter signatures are present an empty store is returned.
        </member>
        <member name="M:Org.BouncyCastle2.Cms.SignerInformation.GetEncodedSignedAttributes">
            return the DER encoding of the signed attributes.
            @throws IOException if an encoding error occurs.
        </member>
        <member name="M:Org.BouncyCastle2.Cms.SignerInformation.Verify(Org.BouncyCastle2.Crypto.AsymmetricKeyParameter)">
            verify that the given public key successfully handles and confirms the
            signature associated with this signer.
        </member>
        <member name="M:Org.BouncyCastle2.Cms.SignerInformation.Verify(Org.BouncyCastle2.X509.X509Certificate)">
            verify that the given certificate successfully handles and confirms
            the signature associated with this signer and, if a signingTime
            attribute is available, that the certificate was valid at the time the
            signature was generated.
        </member>
        <member name="M:Org.BouncyCastle2.Cms.SignerInformation.ToSignerInfo">
             Return the base ASN.1 CMS structure that this object contains.
            
             @return an object containing a CMS SignerInfo structure.
        </member>
        <member name="M:Org.BouncyCastle2.Cms.SignerInformation.ReplaceUnsignedAttributes(Org.BouncyCastle2.Cms.SignerInformation,Org.BouncyCastle2.Asn1.Cms.AttributeTable)">
             Return a signer information object with the passed in unsigned
             attributes replacing the ones that are current associated with
             the object passed in.
            
             @param signerInformation the signerInfo to be used as the basis.
             @param unsignedAttributes the unsigned attributes to add.
             @return a copy of the original SignerInformationObject with the changed attributes.
        </member>
        <member name="M:Org.BouncyCastle2.Cms.SignerInformation.AddCounterSigners(Org.BouncyCastle2.Cms.SignerInformation,Org.BouncyCastle2.Cms.SignerInformationStore)">
             Return a signer information object with passed in SignerInformationStore representing counter
             signatures attached as an unsigned attribute.
            
             @param signerInformation the signerInfo to be used as the basis.
             @param counterSigners signer info objects carrying counter signature.
             @return a copy of the original SignerInformationObject with the changed attributes.
        </member>
        <member name="M:Org.BouncyCastle2.Cms.SignerInformationStore.#ctor(Org.BouncyCastle2.Cms.SignerInformation)">
             Create a store containing a single SignerInformation object.
            
             @param signerInfo the signer information to contain.
        </member>
        <member name="M:Org.BouncyCastle2.Cms.SignerInformationStore.#ctor(System.Collections.ICollection)">
             Create a store containing a collection of SignerInformation objects.
            
             @param signerInfos a collection signer information objects to contain.
        </member>
        <member name="M:Org.BouncyCastle2.Cms.SignerInformationStore.GetFirstSigner(Org.BouncyCastle2.Cms.SignerID)">
             Return the first SignerInformation object that matches the
             passed in selector. Null if there are no matches.
            
             @param selector to identify a signer
             @return a single SignerInformation object. Null if none matches.
        </member>
        <member name="P:Org.BouncyCastle2.Cms.SignerInformationStore.Count">
            <summary>The number of signers in the collection.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Cms.SignerInformationStore.GetSigners">
            <returns>An ICollection of all signers in the collection</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Cms.SignerInformationStore.GetSigners(Org.BouncyCastle2.Cms.SignerID)">
             Return possible empty collection with signers matching the passed in SignerID
            
             @param selector a signer id to select against.
             @return a collection of SignerInformation objects.
        </member>
        <member name="T:Org.BouncyCastle2.Cms.SimpleAttributeTableGenerator">
            Basic generator that just returns a preconstructed attribute table
        </member>
        <member name="T:Org.BouncyCastle2.Crmf.AuthenticatorControl">
            <summary>
            Carrier for an authenticator control.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crmf.AuthenticatorControl.#ctor(Org.BouncyCastle2.Asn1.DerUtf8String)">
            <summary>
            Basic constructor - build from a UTF-8 string representing the token.
            </summary>
            <param name="token">UTF-8 string representing the token.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Crmf.AuthenticatorControl.#ctor(System.String)">
            <summary>
            Basic constructor - build from a string representing the token.
            </summary>
            <param name="token">string representing the token.</param>
        </member>
        <member name="P:Org.BouncyCastle2.Crmf.AuthenticatorControl.Type">
            <summary>
            Return the type of this control.
            </summary>
        </member>
        <member name="P:Org.BouncyCastle2.Crmf.AuthenticatorControl.Value">
            <summary>
            Return the token associated with this control (a UTF8String).
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crmf.CertificateRequestMessage.#ctor(System.Byte[])">
            <summary>
            Create a CertificateRequestMessage from the passed in bytes.
            </summary>
            <param name="encoded">BER/DER encoding of the CertReqMsg structure.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Crmf.CertificateRequestMessage.ToAsn1Structure">
            <summary>
            Return the underlying ASN.1 object defining this CertificateRequestMessage object.
            </summary>
            <returns>A CertReqMsg</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Crmf.CertificateRequestMessage.GetCertTemplate">
            <summary>
            Return the certificate template contained in this message.
            </summary>
            <returns>a CertTemplate structure.</returns>
        </member>
        <member name="P:Org.BouncyCastle2.Crmf.CertificateRequestMessage.HasControls">
            <summary>
            Return whether or not this request has control values associated with it.
            </summary>
            <returns>true if there are control values present, false otherwise.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Crmf.CertificateRequestMessage.HasControl(Org.BouncyCastle2.Asn1.DerObjectIdentifier)">
            <summary>
            Return whether or not this request has a specific type of control value.
            </summary>
            <param name="objectIdentifier">the type OID for the control value we are checking for.</param>
            <returns>true if a control value of type is present, false otherwise.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Crmf.CertificateRequestMessage.GetControl(Org.BouncyCastle2.Asn1.DerObjectIdentifier)">
            <summary>
            Return a control value of the specified type.
            </summary>
            <param name="type">the type OID for the control value we are checking for.</param>
            <returns>the control value if present, null otherwise.</returns>
        </member>
        <member name="P:Org.BouncyCastle2.Crmf.CertificateRequestMessage.HasProofOfPossession">
            <summary>
            Return whether or not this request message has a proof-of-possession field in it.
            </summary>
            <returns>true if proof-of-possession is present, false otherwise.</returns>
        </member>
        <member name="P:Org.BouncyCastle2.Crmf.CertificateRequestMessage.ProofOfPossession">
            <summary>
            Return the type of the proof-of-possession this request message provides.
            </summary>
            <returns>one of: popRaVerified, popSigningKey, popKeyEncipherment, popKeyAgreement</returns>
        </member>
        <member name="P:Org.BouncyCastle2.Crmf.CertificateRequestMessage.HasSigningKeyProofOfPossessionWithPkMac">
            <summary>
            Return whether or not the proof-of-possession (POP) is of the type popSigningKey and
            it has a public key MAC associated with it.
            </summary>
            <returns>true if POP is popSigningKey and a PKMAC is present, false otherwise.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Crmf.CertificateRequestMessage.IsValidSigningKeyPop(Org.BouncyCastle2.Crypto.IVerifierFactoryProvider)">
            <summary>
            Return whether or not a signing key proof-of-possession (POP) is valid.
            </summary>
            <param name="verifierProvider">a provider that can produce content verifiers for the signature contained in this POP.</param>
            <returns>true if the POP is valid, false otherwise.</returns>
            <exception cref="T:System.InvalidOperationException">if there is a problem in verification or content verifier creation.</exception>
            <exception cref="T:System.InvalidOperationException">if POP not appropriate.</exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crmf.CertificateRequestMessage.GetEncoded">
            <summary>
            Return the ASN.1 encoding of the certReqMsg we wrap.
            </summary>
            <returns>a byte array containing the binary encoding of the certReqMsg.</returns>
        </member>
        <member name="T:Org.BouncyCastle2.Crmf.IControl">
            <summary>
            Generic interface for a CertificateRequestMessage control value.
            </summary>
        </member>
        <member name="P:Org.BouncyCastle2.Crmf.IControl.Type">
            <summary>
            Return the type of this control.
            </summary>
        </member>
        <member name="P:Org.BouncyCastle2.Crmf.IControl.Value">
            <summary>
            Return the value contained in this control object.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crmf.PkiArchiveControl.#ctor(Org.BouncyCastle2.Asn1.Crmf.PkiArchiveOptions)">
            <summary>
            Basic constructor - build from an PKIArchiveOptions structure.
            </summary>
            <param name="pkiArchiveOptions">the ASN.1 structure that will underlie this control.</param>
        </member>
        <member name="P:Org.BouncyCastle2.Crmf.PkiArchiveControl.Type">
            <summary>
            Return the type of this control.
            </summary>
            <returns>CRMFObjectIdentifiers.id_regCtrl_pkiArchiveOptions</returns>
        </member>
        <member name="P:Org.BouncyCastle2.Crmf.PkiArchiveControl.Value">
            <summary>
            Return the underlying ASN.1 object.
            </summary>
            <returns>a PKIArchiveOptions structure.</returns>    
        </member>
        <member name="P:Org.BouncyCastle2.Crmf.PkiArchiveControl.ArchiveType">
            <summary>
            Return the archive control type, one of: encryptedPrivKey,keyGenParameters,or archiveRemGenPrivKey.
            </summary>
            <returns>the archive control type.</returns>
        </member>
        <member name="P:Org.BouncyCastle2.Crmf.PkiArchiveControl.EnvelopedData">
            <summary>
            Return whether this control contains enveloped data.
            </summary>
            <returns>true if the control contains enveloped data, false otherwise.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Crmf.PkiArchiveControl.GetEnvelopedData">
            <summary>
            Return the enveloped data structure contained in this control.
            </summary>
            <returns>a CMSEnvelopedData object.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Crmf.PkiArchiveControlBuilder.#ctor(Org.BouncyCastle2.Asn1.Pkcs.PrivateKeyInfo,Org.BouncyCastle2.Asn1.X509.GeneralName)">
             <summary>
            Basic constructor - specify the contents of the PKIArchiveControl structure.
             </summary>
             <param name="privateKeyInfo">the private key to be archived.</param>
             <param name="generalName">the general name to be associated with the private key.</param>
            
        </member>
        <member name="M:Org.BouncyCastle2.Crmf.PkiArchiveControlBuilder.AddRecipientGenerator(Org.BouncyCastle2.Cms.RecipientInfoGenerator)">
            <summary>Add a recipient generator to this control.</summary>       
            <param name="recipientGen"> recipient generator created for a specific recipient.</param>
            <returns>this builder object.</returns>       
        </member>
        <member name="M:Org.BouncyCastle2.Crmf.PkiArchiveControlBuilder.Build(Org.BouncyCastle2.Crypto.ICipherBuilderWithKey)">
            <summary>Build the PKIArchiveControl using the passed in encryptor to encrypt its contents.</summary>
            <param name="contentEncryptor">a suitable content encryptor.</param>
            <returns>a PKIArchiveControl object.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Crmf.PKMacBuilder.#ctor">
            <summary>
            Default, IterationCount = 1000, OIW=IdSha1, Mac=HmacSHA1
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crmf.PKMacBuilder.#ctor(Org.BouncyCastle2.Crmf.IPKMacPrimitivesProvider)">
            <summary>
            Defaults with IPKMacPrimitivesProvider
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:Org.BouncyCastle2.Crmf.PKMacBuilder.#ctor(Org.BouncyCastle2.Crmf.IPKMacPrimitivesProvider,Org.BouncyCastle2.Asn1.X509.AlgorithmIdentifier,Org.BouncyCastle2.Asn1.X509.AlgorithmIdentifier)">
            <summary>
            Create.
            </summary>
            <param name="provider">The Mac provider</param>
            <param name="digestAlgorithmIdentifier">Digest Algorithm Id</param>
            <param name="macAlgorithmIdentifier">Mac Algorithm Id</param>
        </member>
        <member name="M:Org.BouncyCastle2.Crmf.PKMacBuilder.#ctor(Org.BouncyCastle2.Crmf.IPKMacPrimitivesProvider,System.Int32)">
            <summary>
            Create a PKMAC builder enforcing a ceiling on the maximum iteration count.
            </summary>
            <param name="provider">supporting calculator</param>
            <param name="maxIterations">max allowable value for iteration count.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Crmf.PKMacBuilder.SetSaltLength(System.Int32)">
             Set the salt length in octets.
            
             @param saltLength length in octets of the salt to be generated.
             @return the generator
        </member>
        <member name="M:Org.BouncyCastle2.Crmf.PKMacBuilder.SetIterationCount(System.Int32)">
            <summary>
            Set the iteration count.
            </summary>
            <param name="iterationCount">the iteration count.</param>
            <returns>this</returns>
            <exception cref="T:System.ArgumentException">if iteration count is less than 100</exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crmf.PKMacBuilder.SetParameters(Org.BouncyCastle2.Asn1.Cmp.PbmParameter)">
            <summary>
            Set PbmParameters
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>this</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Crmf.PKMacBuilder.SetSecureRandom(Org.BouncyCastle2.Security.SecureRandom)">
            <summary>
            The Secure random
            </summary>
            <param name="random">The random.</param>
            <returns>this</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Crmf.PKMacBuilder.Build(System.Char[])">
            <summary>
            Build an IMacFactory.
            </summary>
            <param name="password">The password.</param>
            <returns>IMacFactory</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Crmf.RegTokenControl.#ctor(Org.BouncyCastle2.Asn1.DerUtf8String)">
            <summary>
            Basic constructor - build from a UTF-8 string representing the token.
            </summary>
            <param name="token">UTF-8 string representing the token.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Crmf.RegTokenControl.#ctor(System.String)">
            <summary>
            Basic constructor - build from a string representing the token.
            </summary>
            <param name="token">string representing the token.</param>
        </member>
        <member name="P:Org.BouncyCastle2.Crmf.RegTokenControl.Type">
            <summary>
            Return the type of this control.
            </summary>
            <returns>CRMFObjectIdentifiers.id_regCtrl_regToken</returns>
        </member>
        <member name="P:Org.BouncyCastle2.Crmf.RegTokenControl.Value">
            <summary>
            Return the token associated with this control (a UTF8String).
            </summary>
            <returns>a UTF8String.</returns>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Agreement.DHBasicAgreement">
            a Diffie-Hellman key agreement class.
            <p>
            note: This is only the basic algorithm, it doesn't take advantage of
            long term public keys if they are available. See the DHAgreement class
            for a "better" implementation.</p>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Agreement.DHBasicAgreement.CalculateAgreement(Org.BouncyCastle2.Crypto.ICipherParameters)">
            given a short term public key from a given party calculate the next
            message in the agreement sequence.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Agreement.DHStandardGroups">
            <summary>Standard Diffie-Hellman groups from various IETF specifications.</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Agreement.ECDHBasicAgreement">
             P1363 7.2.1 ECSVDP-DH
            
             ECSVDP-DH is Elliptic Curve Secret Value Derivation Primitive,
             Diffie-Hellman version. It is based on the work of [DH76], [Mil86],
             and [Kob87]. This primitive derives a shared secret value from one
             party's private key and another party's public key, where both have
             the same set of EC domain parameters. If two parties correctly
             execute this primitive, they will produce the same output. This
             primitive can be invoked by a scheme to derive a shared secret key;
             specifically, it may be used with the schemes ECKAS-DH1 and
             DL/ECKAS-DH2. It assumes that the input keys are valid (see also
             Section 7.2.2).
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Agreement.ECDHCBasicAgreement">
             P1363 7.2.2 ECSVDP-DHC
            
             ECSVDP-DHC is Elliptic Curve Secret Value Derivation Primitive,
             Diffie-Hellman version with cofactor multiplication. It is based on
             the work of [DH76], [Mil86], [Kob87], [LMQ98] and [Kal98a]. This
             primitive derives a shared secret value from one party's private key
             and another party's public key, where both have the same set of EC
             domain parameters. If two parties correctly execute this primitive,
             they will produce the same output. This primitive can be invoked by a
             scheme to derive a shared secret key; specifically, it may be used
             with the schemes ECKAS-DH1 and DL/ECKAS-DH2. It does not assume the
             validity of the input public key (see also Section 7.2.1).
             <p>
             Note: As stated P1363 compatibility mode with ECDH can be preset, and
             in this case the implementation doesn't have a ECDH compatibility mode
             (if you want that just use ECDHBasicAgreement and note they both implement
             BasicAgreement!).</p>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Agreement.JPake.JPakeUtilities">
            <summary>
            Primitives needed for a J-PAKE exchange.
            
            The recommended way to perform a J-PAKE exchange is by using
            two JPAKEParticipants.  Internally, those participants
            call these primitive operations in JPakeUtilities.
            
            The primitives, however, can be used without a JPAKEParticipant if needed.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Agreement.JPake.JPakeUtilities.GenerateX1(Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Security.SecureRandom)">
            <summary>
            Return a value that can be used as x1 or x3 during round 1.
            The returned value is a random value in the range [0, q-1].
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Agreement.JPake.JPakeUtilities.GenerateX2(Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Security.SecureRandom)">
            <summary>
            Return a value that can be used as x2 or x4 during round 1.
            The returned value is a random value in the range [1, q-1].
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Agreement.JPake.JPakeUtilities.CalculateS(System.Char[])">
            <summary>
            Converts the given password to a BigInteger
            for use in arithmetic calculations.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Agreement.JPake.JPakeUtilities.CalculateGx(Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger)">
            <summary>
            Calculate g^x mod p as done in round 1.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Agreement.JPake.JPakeUtilities.CalculateGA(Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger)">
            <summary>
            Calculate ga as done in round 2.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Agreement.JPake.JPakeUtilities.CalculateX2s(Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger)">
            <summary>
            Calculate x2 * s as done in round 2.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Agreement.JPake.JPakeUtilities.CalculateA(Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger)">
            <summary>
            Calculate A as done in round 2. 
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Agreement.JPake.JPakeUtilities.CalculateZeroKnowledgeProof(Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger,System.String,Org.BouncyCastle2.Crypto.IDigest,Org.BouncyCastle2.Security.SecureRandom)">
            <summary>
            Calculate a zero knowledge proof of x using Schnorr's signature.
            The returned array has two elements {g^v, r = v-x*h} for x.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Agreement.JPake.JPakeUtilities.ValidateGx4(Org.BouncyCastle2.Math.BigInteger)">
            <summary>
            Validates that g^x4 is not 1.
            throws CryptoException if g^x4 is 1
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Agreement.JPake.JPakeUtilities.ValidateGa(Org.BouncyCastle2.Math.BigInteger)">
            <summary>
            Validates that ga is not 1.
            
            As described by Feng Hao...
            Alice could simply check ga != 1 to ensure it is a generator.
            In fact, as we will explain in Section 3, (x1 + x3 + x4 ) is random over Zq even in the face of active attacks.
            Hence, the probability for ga = 1 is extremely small - on the order of 2^160 for 160-bit q.
            
            throws CryptoException if ga is 1
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Agreement.JPake.JPakeUtilities.ValidateZeroKnowledgeProof(Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger[],System.String,Org.BouncyCastle2.Crypto.IDigest)">
            <summary>
            Validates the zero knowledge proof (generated by
            calculateZeroKnowledgeProof(BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, string, Digest, SecureRandom)
            is correct.
            
            throws CryptoException if the zero knowledge proof is not correct
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Agreement.JPake.JPakeUtilities.CalculateKeyingMaterial(Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger)">
            <summary>
            Calculates the keying material, which can be done after round 2 has completed.
            A session key must be derived from this key material using a secure key derivation function (KDF).
            The KDF used to derive the key is handled externally (i.e. not by JPAKEParticipant).
            
            KeyingMaterial = (B/g^{x2*x4*s})^x2
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Agreement.JPake.JPakeUtilities.ValidateParticipantIdsDiffer(System.String,System.String)">
             <summary>
             Validates that the given participant ids are not equal.
             (For the J-PAKE exchange, each participant must use a unique id.)
            
             Throws CryptoException if the participantId strings are equal.
             </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Agreement.JPake.JPakeUtilities.ValidateParticipantIdsEqual(System.String,System.String)">
            <summary>
            Validates that the given participant ids are equal.
            This is used to ensure that the payloads received from
            each round all come from the same participant.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Agreement.JPake.JPakeUtilities.ValidateNotNull(System.Object,System.String)">
            <summary>
            Validates that the given object is not null.
            throws NullReferenceException if the object is null.
            </summary>
            <param name="obj">object in question</param>
            <param name="description">name of the object (to be used in exception message)</param>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Agreement.JPake.JPakeUtilities.CalculateMacTag(System.String,System.String,Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Crypto.IDigest)">
             <summary>
             Calculates the MacTag (to be used for key confirmation), as defined by
             <a href="http://csrc.nist.gov/publications/nistpubs/800-56A/SP800-56A_Revision1_Mar08-2007.pdf">NIST SP 800-56A Revision 1</a>,
             Section 8.2 Unilateral Key Confirmation for Key Agreement Schemes.
            
             MacTag = HMAC(MacKey, MacLen, MacData)
             MacKey = H(K || "JPAKE_KC")
             MacData = "KC_1_U" || participantId || partnerParticipantId || gx1 || gx2 || gx3 || gx4
            
             Note that both participants use "KC_1_U" because the sender of the round 3 message
             is always the initiator for key confirmation.
            
             HMAC = {@link HMac} used with the given {@link Digest}
             H = The given {@link Digest}
             MacLen = length of MacTag
             </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Agreement.JPake.JPakeUtilities.CalculateMacKey(Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Crypto.IDigest)">
            <summary>
            Calculates the MacKey (i.e. the key to use when calculating the MagTag for key confirmation).
            
            MacKey = H(K || "JPAKE_KC")
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Agreement.JPake.JPakeUtilities.ValidateMacTag(System.String,System.String,Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Crypto.IDigest,Org.BouncyCastle2.Math.BigInteger)">
            <summary>
            Validates the MacTag received from the partner participant.
            
            throws CryptoException if the participantId strings are equal.
            </summary>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Agreement.Kdf.ECDHKekGenerator">
            X9.63 based key derivation function for ECDH CMS.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Agreement.Srp.Srp6Client">
            Implements the client side SRP-6a protocol. Note that this class is stateful, and therefore NOT threadsafe.
            This implementation of SRP is based on the optimized message sequence put forth by Thomas Wu in the paper
            "SRP-6: Improvements and Refinements to the Secure Remote Password Protocol, 2002"
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Agreement.Srp.Srp6Client.Init(Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Crypto.IDigest,Org.BouncyCastle2.Security.SecureRandom)">
            Initialises the client to begin new authentication attempt
            @param N The safe prime associated with the client's verifier
            @param g The group parameter associated with the client's verifier
            @param digest The digest algorithm associated with the client's verifier
            @param random For key generation
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Agreement.Srp.Srp6Client.GenerateClientCredentials(System.Byte[],System.Byte[],System.Byte[])">
            Generates client's credentials given the client's salt, identity and password
            @param salt The salt used in the client's verifier.
            @param identity The user's identity (eg. username)
            @param password The user's password
            @return Client's public value to send to server
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Agreement.Srp.Srp6Client.CalculateSecret(Org.BouncyCastle2.Math.BigInteger)">
            Generates client's verification message given the server's credentials
            @param serverB The server's credentials
            @return Client's verification message for the server
            @throws CryptoException If server's credentials are invalid
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Agreement.Srp.Srp6Client.CalculateClientEvidenceMessage">
            Computes the client evidence message M1 using the previously received values.
            To be called after calculating the secret S.
            @return M1: the client side generated evidence message
            @throws CryptoException
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Agreement.Srp.Srp6Client.VerifyServerEvidenceMessage(Org.BouncyCastle2.Math.BigInteger)">
            Authenticates the server evidence message M2 received and saves it only if correct.
            @param M2: the server side generated evidence message
            @return A boolean indicating if the server message M2 was the expected one.
            @throws CryptoException
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Agreement.Srp.Srp6Client.CalculateSessionKey">
            Computes the final session key as a result of the SRP successful mutual authentication
            To be called after verifying the server evidence message M2.
            @return Key: the mutually authenticated symmetric session key
            @throws CryptoException
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Agreement.Srp.Srp6Server">
            Implements the server side SRP-6a protocol. Note that this class is stateful, and therefore NOT threadsafe.
            This implementation of SRP is based on the optimized message sequence put forth by Thomas Wu in the paper
            "SRP-6: Improvements and Refinements to the Secure Remote Password Protocol, 2002"
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Agreement.Srp.Srp6Server.Init(Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Crypto.IDigest,Org.BouncyCastle2.Security.SecureRandom)">
            Initialises the server to accept a new client authentication attempt
            @param N The safe prime associated with the client's verifier
            @param g The group parameter associated with the client's verifier
            @param v The client's verifier
            @param digest The digest algorithm associated with the client's verifier
            @param random For key generation
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Agreement.Srp.Srp6Server.GenerateServerCredentials">
            Generates the server's credentials that are to be sent to the client.
            @return The server's public value to the client
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Agreement.Srp.Srp6Server.CalculateSecret(Org.BouncyCastle2.Math.BigInteger)">
            Processes the client's credentials. If valid the shared secret is generated and returned.
            @param clientA The client's credentials
            @return A shared secret BigInteger
            @throws CryptoException If client's credentials are invalid
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Agreement.Srp.Srp6Server.VerifyClientEvidenceMessage(Org.BouncyCastle2.Math.BigInteger)">
            Authenticates the received client evidence message M1 and saves it only if correct.
            To be called after calculating the secret S.
            @param M1: the client side generated evidence message
            @return A boolean indicating if the client message M1 was the expected one.
            @throws CryptoException 
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Agreement.Srp.Srp6Server.CalculateServerEvidenceMessage">
            Computes the server evidence message M2 using the previously verified values.
            To be called after successfully verifying the client evidence message M1.
            @return M2: the server side generated evidence message
            @throws CryptoException
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Agreement.Srp.Srp6Server.CalculateSessionKey">
            Computes the final session key as a result of the SRP successful mutual authentication
            To be called after calculating the server evidence message M2.
            @return Key: the mutual authenticated symmetric session key
            @throws CryptoException
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Agreement.Srp.Srp6Utilities.CalculateM1(Org.BouncyCastle2.Crypto.IDigest,Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger)">
            Computes the client evidence message (M1) according to the standard routine:
            M1 = H( A | B | S )
            @param digest The Digest used as the hashing function H
            @param N Modulus used to get the pad length
            @param A The public client value
            @param B The public server value
            @param S The secret calculated by both sides
            @return M1 The calculated client evidence message
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Agreement.Srp.Srp6Utilities.CalculateM2(Org.BouncyCastle2.Crypto.IDigest,Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger)">
            Computes the server evidence message (M2) according to the standard routine:
            M2 = H( A | M1 | S )
            @param digest The Digest used as the hashing function H
            @param N Modulus used to get the pad length
            @param A The public client value
            @param M1 The client evidence message
            @param S The secret calculated by both sides
            @return M2 The calculated server evidence message
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Agreement.Srp.Srp6Utilities.CalculateKey(Org.BouncyCastle2.Crypto.IDigest,Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger)">
            Computes the final Key according to the standard routine: Key = H(S)
            @param digest The Digest used as the hashing function H
            @param N Modulus used to get the pad length
            @param S The secret calculated by both sides
            @return
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Agreement.Srp.Srp6VerifierGenerator">
            Generates new SRP verifier for user
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Agreement.Srp.Srp6VerifierGenerator.Init(Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Crypto.IDigest)">
            Initialises generator to create new verifiers
            @param N The safe prime to use (see DHParametersGenerator)
            @param g The group parameter to use (see DHParametersGenerator)
            @param digest The digest to use. The same digest type will need to be used later for the actual authentication
            attempt. Also note that the final session key size is dependent on the chosen digest.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Agreement.Srp.Srp6VerifierGenerator.GenerateVerifier(System.Byte[],System.Byte[],System.Byte[])">
            Creates a new SRP verifier
            @param salt The salt to use, generally should be large and random
            @param identity The user's identifying information (eg. username)
            @param password The user's password
            @return A new verifier for use in future SRP authentication
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.AsymmetricCipherKeyPair">
            a holding class for public/private parameter pairs.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.AsymmetricCipherKeyPair.#ctor(Org.BouncyCastle2.Crypto.AsymmetricKeyParameter,Org.BouncyCastle2.Crypto.AsymmetricKeyParameter)">
             basic constructor.
            
             @param publicParam a public key parameters object.
             @param privateParam the corresponding private key parameters.
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.AsymmetricCipherKeyPair.Public">
             return the public key parameters.
            
             @return the public key parameters.
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.AsymmetricCipherKeyPair.Private">
             return the private key parameters.
            
             @return the private key parameters.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.BufferedAeadBlockCipher">
            The AEAD block ciphers already handle buffering internally, so this class
            just takes care of implementing IBufferedCipher methods.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.BufferedAeadBlockCipher.Init(System.Boolean,Org.BouncyCastle2.Crypto.ICipherParameters)">
             initialise the cipher.
            
             @param forEncryption if true the cipher is initialised for
              encryption, if false for decryption.
             @param param the key and other data required by the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.BufferedAeadBlockCipher.GetBlockSize">
             return the blocksize for the underlying cipher.
            
             @return the blocksize for the underlying cipher.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.BufferedAeadBlockCipher.GetUpdateOutputSize(System.Int32)">
             return the size of the output buffer required for an update
             an input of len bytes.
            
             @param len the length of the input.
             @return the space required to accommodate a call to update
             with len bytes of input.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.BufferedAeadBlockCipher.GetOutputSize(System.Int32)">
             return the size of the output buffer required for an update plus a
             doFinal with an input of len bytes.
            
             @param len the length of the input.
             @return the space required to accommodate a call to update and doFinal
             with len bytes of input.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.BufferedAeadBlockCipher.ProcessByte(System.Byte,System.Byte[],System.Int32)">
             process a single byte, producing an output block if necessary.
            
             @param in the input byte.
             @param out the space for any output that might be produced.
             @param outOff the offset from which the output will be copied.
             @return the number of output bytes copied to out.
             @exception DataLengthException if there isn't enough space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.BufferedAeadBlockCipher.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
             process an array of bytes, producing output if necessary.
            
             @param in the input byte array.
             @param inOff the offset at which the input data starts.
             @param len the number of bytes to be copied out of the input array.
             @param out the space for any output that might be produced.
             @param outOff the offset from which the output will be copied.
             @return the number of output bytes copied to out.
             @exception DataLengthException if there isn't enough space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.BufferedAeadBlockCipher.DoFinal(System.Byte[],System.Int32)">
             Process the last block in the buffer.
            
             @param out the array the block currently being held is copied into.
             @param outOff the offset at which the copying starts.
             @return the number of output bytes copied to out.
             @exception DataLengthException if there is insufficient space in out for
             the output, or the input is not block size aligned and should be.
             @exception InvalidOperationException if the underlying cipher is not
             initialised.
             @exception InvalidCipherTextException if padding is expected and not found.
             @exception DataLengthException if the input is not block size
             aligned.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.BufferedAeadBlockCipher.Reset">
            Reset the buffer and cipher. After resetting the object is in the same
            state as it was after the last init (if there was one).
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.BufferedAeadCipher">
            The AEAD ciphers already handle buffering internally, so this class
            just takes care of implementing IBufferedCipher methods.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.BufferedAeadCipher.Init(System.Boolean,Org.BouncyCastle2.Crypto.ICipherParameters)">
             initialise the cipher.
            
             @param forEncryption if true the cipher is initialised for
              encryption, if false for decryption.
             @param param the key and other data required by the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.BufferedAeadCipher.GetBlockSize">
             return the blocksize for the underlying cipher.
            
             @return the blocksize for the underlying cipher.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.BufferedAeadCipher.GetUpdateOutputSize(System.Int32)">
             return the size of the output buffer required for an update
             an input of len bytes.
            
             @param len the length of the input.
             @return the space required to accommodate a call to update
             with len bytes of input.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.BufferedAeadCipher.GetOutputSize(System.Int32)">
             return the size of the output buffer required for an update plus a
             doFinal with an input of len bytes.
            
             @param len the length of the input.
             @return the space required to accommodate a call to update and doFinal
             with len bytes of input.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.BufferedAeadCipher.ProcessByte(System.Byte,System.Byte[],System.Int32)">
             process a single byte, producing an output block if necessary.
            
             @param in the input byte.
             @param out the space for any output that might be produced.
             @param outOff the offset from which the output will be copied.
             @return the number of output bytes copied to out.
             @exception DataLengthException if there isn't enough space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.BufferedAeadCipher.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
             process an array of bytes, producing output if necessary.
            
             @param in the input byte array.
             @param inOff the offset at which the input data starts.
             @param len the number of bytes to be copied out of the input array.
             @param out the space for any output that might be produced.
             @param outOff the offset from which the output will be copied.
             @return the number of output bytes copied to out.
             @exception DataLengthException if there isn't enough space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.BufferedAeadCipher.DoFinal(System.Byte[],System.Int32)">
             Process the last block in the buffer.
            
             @param out the array the block currently being held is copied into.
             @param outOff the offset at which the copying starts.
             @return the number of output bytes copied to out.
             @exception DataLengthException if there is insufficient space in out for
             the output, or the input is not block size aligned and should be.
             @exception InvalidOperationException if the underlying cipher is not
             initialised.
             @exception InvalidCipherTextException if padding is expected and not found.
             @exception DataLengthException if the input is not block size
             aligned.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.BufferedAeadCipher.Reset">
            Reset the buffer and cipher. After resetting the object is in the same
            state as it was after the last init (if there was one).
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.BufferedAsymmetricBlockCipher">
            a buffer wrapper for an asymmetric block cipher, allowing input
            to be accumulated in a piecemeal fashion until final processing.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.BufferedAsymmetricBlockCipher.#ctor(Org.BouncyCastle2.Crypto.IAsymmetricBlockCipher)">
             base constructor.
            
             @param cipher the cipher this buffering object wraps.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.BufferedAsymmetricBlockCipher.GetBufferPosition">
             return the amount of data sitting in the buffer.
            
             @return the amount of data sitting in the buffer.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.BufferedAsymmetricBlockCipher.Init(System.Boolean,Org.BouncyCastle2.Crypto.ICipherParameters)">
             initialise the buffer and the underlying cipher.
            
             @param forEncryption if true the cipher is initialised for
              encryption, if false for decryption.
             @param param the key and other data required by the cipher.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.BufferedAsymmetricBlockCipher.DoFinal">
             process the contents of the buffer using the underlying
             cipher.
            
             @return the result of the encryption/decryption process on the
             buffer.
             @exception InvalidCipherTextException if we are given a garbage block.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.BufferedAsymmetricBlockCipher.Reset">
            <summary>Reset the buffer</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.BufferedBlockCipher">
            A wrapper class that allows block ciphers to be used to process data in
            a piecemeal fashion. The BufferedBlockCipher outputs a block only when the
            buffer is full and more data is being added, or on a doFinal.
            <p>
            Note: in the case where the underlying cipher is either a CFB cipher or an
            OFB one the last block may not be a multiple of the block size.
            </p>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.BufferedBlockCipher.#ctor">
            constructor for subclasses
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.BufferedBlockCipher.#ctor(Org.BouncyCastle2.Crypto.IBlockCipher)">
             Create a buffered block cipher without padding.
            
             @param cipher the underlying block cipher this buffering object wraps.
             false otherwise.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.BufferedBlockCipher.Init(System.Boolean,Org.BouncyCastle2.Crypto.ICipherParameters)">
             initialise the cipher.
            
             @param forEncryption if true the cipher is initialised for
              encryption, if false for decryption.
             @param param the key and other data required by the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.BufferedBlockCipher.GetBlockSize">
             return the blocksize for the underlying cipher.
            
             @return the blocksize for the underlying cipher.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.BufferedBlockCipher.GetUpdateOutputSize(System.Int32)">
             return the size of the output buffer required for an update
             an input of len bytes.
            
             @param len the length of the input.
             @return the space required to accommodate a call to update
             with len bytes of input.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.BufferedBlockCipher.GetOutputSize(System.Int32)">
             return the size of the output buffer required for an update plus a
             doFinal with an input of len bytes.
            
             @param len the length of the input.
             @return the space required to accommodate a call to update and doFinal
             with len bytes of input.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.BufferedBlockCipher.ProcessByte(System.Byte,System.Byte[],System.Int32)">
             process a single byte, producing an output block if necessary.
            
             @param in the input byte.
             @param out the space for any output that might be produced.
             @param outOff the offset from which the output will be copied.
             @return the number of output bytes copied to out.
             @exception DataLengthException if there isn't enough space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.BufferedBlockCipher.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
             process an array of bytes, producing output if necessary.
            
             @param in the input byte array.
             @param inOff the offset at which the input data starts.
             @param len the number of bytes to be copied out of the input array.
             @param out the space for any output that might be produced.
             @param outOff the offset from which the output will be copied.
             @return the number of output bytes copied to out.
             @exception DataLengthException if there isn't enough space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.BufferedBlockCipher.DoFinal(System.Byte[],System.Int32)">
             Process the last block in the buffer.
            
             @param out the array the block currently being held is copied into.
             @param outOff the offset at which the copying starts.
             @return the number of output bytes copied to out.
             @exception DataLengthException if there is insufficient space in out for
             the output, or the input is not block size aligned and should be.
             @exception InvalidOperationException if the underlying cipher is not
             initialised.
             @exception InvalidCipherTextException if padding is expected and not found.
             @exception DataLengthException if the input is not block size
             aligned.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.BufferedBlockCipher.Reset">
            Reset the buffer and cipher. After resetting the object is in the same
            state as it was after the last init (if there was one).
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.CipherKeyGenerator">
            The base class for symmetric, or secret, cipher key generators.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.CipherKeyGenerator.Init(Org.BouncyCastle2.Crypto.KeyGenerationParameters)">
             initialise the key generator.
            
             @param param the parameters to be used for key generation
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.CipherKeyGenerator.GenerateKey">
             Generate a secret key.
            
             @return a byte array containing the key value.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.DataLengthException">
            this exception is thrown if a buffer that is meant to have output
            copied into it turns out to be too short, or if we've been given
            insufficient input. In general this exception will Get thrown rather
            than an ArrayOutOfBounds exception.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.DataLengthException.#ctor">
            base constructor.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.DataLengthException.#ctor(System.String)">
             create a DataLengthException with the given message.
            
             @param message the message to be carried with the exception.
        </member>
        <!-- Badly formed XML comment ignored for member "T:Org.BouncyCastle2.Crypto.Digests.Blake2bDigest" -->
        <member name="M:Org.BouncyCastle2.Crypto.Digests.Blake2bDigest.#ctor(System.Int32)">
             Basic sized constructor - size in bits.
            
             @param digestSize size of the digest in bits
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.Blake2bDigest.#ctor(System.Byte[])">
             Blake2b for authentication ("Prefix-MAC mode").
             After calling the doFinal() method, the key will
             remain to be used for further computations of
             this instance.
             The key can be overwritten using the clearKey() method.
            
             @param key A key up to 64 bytes or null
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.Blake2bDigest.#ctor(System.Byte[],System.Int32,System.Byte[],System.Byte[])">
             Blake2b with key, required digest length (in bytes), salt and personalization.
             After calling the doFinal() method, the key, the salt and the personal string
             will remain and might be used for further computations with this instance.
             The key can be overwritten using the clearKey() method, the salt (pepper)
             can be overwritten using the clearSalt() method.
            
             @param key             A key up to 64 bytes or null
             @param digestLength    from 1 up to 64 bytes
             @param salt            16 bytes or null
             @param personalization 16 bytes or null
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.Blake2bDigest.Update(System.Byte)">
             update the message digest with a single byte.
            
             @param b the input byte to be entered.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.Blake2bDigest.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
             update the message digest with a block of bytes.
            
             @param message the byte array containing the data.
             @param offset  the offset into the byte array where the data starts.
             @param len     the length of the data.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.Blake2bDigest.DoFinal(System.Byte[],System.Int32)">
             close the digest, producing the final digest value. The doFinal
             call leaves the digest reset.
             Key, salt and personal string remain.
            
             @param out       the array the digest is to be copied into.
             @param outOffset the offset into the out array the digest is to start at.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.Blake2bDigest.Reset">
            Reset the digest back to it's initial state.
            The key, the salt and the personal string will
            remain for further computations.
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.Digests.Blake2bDigest.AlgorithmName">
             return the algorithm name
            
             @return the algorithm name
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.Blake2bDigest.GetDigestSize">
             return the size, in bytes, of the digest produced by this message digest.
            
             @return the size, in bytes, of the digest produced by this message digest.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.Blake2bDigest.GetByteLength">
             Return the size in bytes of the internal buffer the digest applies it's compression
             function to.
            
             @return byte length of the digests internal buffer.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.Blake2bDigest.ClearKey">
            Overwrite the key
            if it is no longer used (zeroization)
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.Blake2bDigest.ClearSalt">
            Overwrite the salt (pepper) if it
            is secret and no longer used (zeroization)
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Digests.Blake2sDigest">
            Implementation of the cryptographic hash function BLAKE2s.
            <p/>
            BLAKE2s offers a built-in keying mechanism to be used directly
            for authentication ("Prefix-MAC") rather than a HMAC construction.
            <p/>
            BLAKE2s offers a built-in support for a salt for randomized hashing
            and a personal string for defining a unique hash function for each application.
            <p/>
            BLAKE2s is optimized for 32-bit platforms and produces digests of any size
            between 1 and 32 bytes.
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Digests.Blake2sDigest.blake2s_IV">
             BLAKE2s Initialization Vector
            
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Digests.Blake2sDigest.blake2s_sigma">
             Message word permutations
            
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Digests.Blake2sDigest.buffer">
            Whenever this buffer overflows, it will be processed in the Compress()
            function. For performance issues, long messages will not use this buffer.
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Digests.Blake2sDigest.bufferPos">
             Position of last inserted byte
            
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Digests.Blake2sDigest.internalState">
             Internal state, in the BLAKE2 paper it is called v
            
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Digests.Blake2sDigest.chainValue">
             State vector, in the BLAKE2 paper it is called h
            
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Digests.Blake2sDigest.t0">
             holds least significant bits of counter
            
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Digests.Blake2sDigest.t1">
             holds most significant bits of counter
            
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Digests.Blake2sDigest.f0">
             finalization flag, for last block: ~0
            
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.Blake2sDigest.#ctor">
            BLAKE2s-256 for hashing.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.Blake2sDigest.#ctor(System.Int32)">
             BLAKE2s for hashing.
            
             @param digestBits the desired digest length in bits. Must be a multiple of 8 and less than 256.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.Blake2sDigest.#ctor(System.Byte[])">
             BLAKE2s for authentication ("Prefix-MAC mode").
             <p/>
             After calling the doFinal() method, the key will remain to be used for
             further computations of this instance. The key can be overwritten using
             the clearKey() method.
            
             @param key a key up to 32 bytes or null
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.Blake2sDigest.#ctor(System.Byte[],System.Int32,System.Byte[],System.Byte[])">
             BLAKE2s with key, required digest length, salt and personalization.
             <p/>
             After calling the doFinal() method, the key, the salt and the personal
             string will remain and might be used for further computations with this
             instance. The key can be overwritten using the clearKey() method, the
             salt (pepper) can be overwritten using the clearSalt() method.
            
             @param key             a key up to 32 bytes or null
             @param digestBytes     from 1 up to 32 bytes
             @param salt            8 bytes or null
             @param personalization 8 bytes or null
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.Blake2sDigest.Update(System.Byte)">
             Update the message digest with a single byte.
            
             @param b the input byte to be entered.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.Blake2sDigest.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
             Update the message digest with a block of bytes.
            
             @param message the byte array containing the data.
             @param offset  the offset into the byte array where the data starts.
             @param len     the length of the data.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.Blake2sDigest.DoFinal(System.Byte[],System.Int32)">
             Close the digest, producing the final digest value. The doFinal() call
             leaves the digest reset. Key, salt and personal string remain.
            
             @param out       the array the digest is to be copied into.
             @param outOffset the offset into the out array the digest is to start at.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.Blake2sDigest.Reset">
            Reset the digest back to its initial state. The key, the salt and the
            personal string will remain for further computations.
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.Digests.Blake2sDigest.AlgorithmName">
             Return the algorithm name.
            
             @return the algorithm name
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.Blake2sDigest.GetDigestSize">
             Return the size in bytes of the digest produced by this message digest.
            
             @return the size in bytes of the digest produced by this message digest.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.Blake2sDigest.GetByteLength">
             Return the size in bytes of the internal buffer the digest applies its
             compression function to.
            
             @return byte length of the digest's internal buffer.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.Blake2sDigest.ClearKey">
            Overwrite the key if it is no longer used (zeroization).
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.Blake2sDigest.ClearSalt">
            Overwrite the salt (pepper) if it is secret and no longer used
            (zeroization).
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Digests.CShakeDigest">
            <summary>
            Customizable SHAKE function.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.CShakeDigest.#ctor(System.Int32,System.Byte[],System.Byte[])">
            <summary>
            Base constructor
            </summary>
            <param name="bitLength">bit length of the underlying SHAKE function, 128 or 256.</param>
            <param name="N">the function name string, note this is reserved for use by NIST. Avoid using it if not required.</param>
            <param name="S">the customization string - available for local use.</param>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Digests.Dstu7564Digest">
            implementation of Ukrainian DSTU 7564 hash function
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Digests.GeneralDigest">
            base implementation of MD4 family style digest as outlined in
            "Handbook of Applied Cryptography", pages 344 - 347.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Digests.Gost3411Digest">
            implementation of GOST R 34.11-94
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.Gost3411Digest.#ctor">
            Standard constructor
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.Gost3411Digest.#ctor(System.Byte[])">
            Constructor to allow use of a particular sbox with GOST28147
            @see GOST28147Engine#getSBox(String)
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.Gost3411Digest.#ctor(Org.BouncyCastle2.Crypto.Digests.Gost3411Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Digests.Gost3411Digest.C2">
            reset the chaining variables to the IV values.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Digests.KeccakDigest">
            <summary>
            Implementation of Keccak based on following KeccakNISTInterface.c from http://keccak.noekeon.org/
            </summary>
            <remarks>
            Following the naming conventions used in the C source code to enable easy review of the implementation.
            </remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.KeccakDigest.GetByteLength">
             Return the size of block that the compression function is applied to in bytes.
            
             @return internal byte length of a block.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Digests.LongDigest">
            Base class for SHA-384 and SHA-512.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.LongDigest.#ctor">
            Constructor for variable length word
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.LongDigest.#ctor(Org.BouncyCastle2.Crypto.Digests.LongDigest)">
            Copy constructor.  We are using copy constructors in place
            of the object.Clone() interface as this interface is not
            supported by J2ME.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.LongDigest.AdjustByteCounts">
            adjust the byte counts so that byteCount2 represents the
            upper long (less 3 bits) word of the byte count.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Digests.MD2Digest">
            implementation of MD2
            as outlined in RFC1319 by B.Kaliski from RSA Laboratories April 1992
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.Digests.MD2Digest.AlgorithmName">
             return the algorithm name
            
             @return the algorithm name
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.MD2Digest.DoFinal(System.Byte[],System.Int32)">
             Close the digest, producing the final digest value. The doFinal
             call leaves the digest reset.
            
             @param out the array the digest is to be copied into.
             @param outOff the offset into the out array the digest is to start at.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.MD2Digest.Reset">
            reset the digest back to it's initial state.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.MD2Digest.Update(System.Byte)">
             update the message digest with a single byte.
            
             @param in the input byte to be entered.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.MD2Digest.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
             update the message digest with a block of bytes.
            
             @param in the byte array containing the data.
             @param inOff the offset into the byte array where the data starts.
             @param len the length of the data.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Digests.MD4Digest">
            implementation of MD4 as RFC 1320 by R. Rivest, MIT Laboratory for
            Computer Science and RSA Data Security, Inc.
            <p>
            <b>NOTE</b>: This algorithm is only included for backwards compatibility
            with legacy applications, it's not secure, don't use it for anything new!</p>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.MD4Digest.#ctor">
            Standard constructor
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.MD4Digest.#ctor(Org.BouncyCastle2.Crypto.Digests.MD4Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.MD4Digest.Reset">
            reset the chaining variables to the IV values.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Digests.MD5Digest">
            implementation of MD5 as outlined in "Handbook of Applied Cryptography", pages 346 - 347.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.MD5Digest.#ctor(Org.BouncyCastle2.Crypto.Digests.MD5Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.MD5Digest.Reset">
            reset the chaining variables to the IV values.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Digests.ParallelHash">
            <summary>
            ParallelHash - a hash designed  to  support the efficient hashing of very long strings, by taking advantage,
            of the parallelism available in modern processors with an optional XOF mode.
            <para>
            From NIST Special Publication 800-185 - SHA-3 Derived Functions:cSHAKE, KMAC, TupleHash and ParallelHash
            </para>
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.ParallelHash.#ctor(System.Int32,System.Byte[],System.Int32)">
             Base constructor.
            
             @param bitLength bit length of the underlying SHAKE function, 128 or 256.
             @param S the customization string - available for local use.
             @param B the blocksize (in bytes) for hashing.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Digests.RipeMD128Digest">
            implementation of RipeMD128
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.RipeMD128Digest.#ctor">
            Standard constructor
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.RipeMD128Digest.#ctor(Org.BouncyCastle2.Crypto.Digests.RipeMD128Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.RipeMD128Digest.Reset">
            reset the chaining variables to the IV values.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Digests.RipeMD160Digest">
            implementation of RipeMD see,
            http://www.esat.kuleuven.ac.be/~bosselae/ripemd160.html
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.RipeMD160Digest.#ctor">
            Standard constructor
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.RipeMD160Digest.#ctor(Org.BouncyCastle2.Crypto.Digests.RipeMD160Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.RipeMD160Digest.Reset">
            reset the chaining variables to the IV values.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Digests.RipeMD256Digest">
            <remarks>
            <p>Implementation of RipeMD256.</p>
            <p><b>Note:</b> this algorithm offers the same level of security as RipeMD128.</p>
            </remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.RipeMD256Digest.#ctor">
            <summary> Standard constructor</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.RipeMD256Digest.#ctor(Org.BouncyCastle2.Crypto.Digests.RipeMD256Digest)">
            <summary> Copy constructor.  This will copy the state of the provided
            message digest.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.RipeMD256Digest.Reset">
            <summary> reset the chaining variables to the IV values.</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Digests.RipeMD320Digest">
            <remarks>
            <p>Implementation of RipeMD 320.</p>
            <p><b>Note:</b> this algorithm offers the same level of security as RipeMD160.</p>
            </remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.RipeMD320Digest.#ctor">
            <summary> Standard constructor</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.RipeMD320Digest.#ctor(Org.BouncyCastle2.Crypto.Digests.RipeMD320Digest)">
            <summary> Copy constructor.  This will copy the state of the provided
            message digest.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.RipeMD320Digest.Reset">
            <summary> reset the chaining variables to the IV values.</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Digests.Sha1Digest">
             implementation of SHA-1 as outlined in "Handbook of Applied Cryptography", pages 346 - 349.
            
             It is interesting to ponder why the, apart from the extra IV, the other difference here from MD5
             is the "endianness" of the word processing!
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.Sha1Digest.#ctor(Org.BouncyCastle2.Crypto.Digests.Sha1Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.Sha1Digest.Reset">
            reset the chaining variables
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Digests.Sha224Digest">
            SHA-224 as described in RFC 3874
            <pre>
                    block  word  digest
            SHA-1   512    32    160
            SHA-224 512    32    224
            SHA-256 512    32    256
            SHA-384 1024   64    384
            SHA-512 1024   64    512
            </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.Sha224Digest.#ctor">
            Standard constructor
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.Sha224Digest.#ctor(Org.BouncyCastle2.Crypto.Digests.Sha224Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.Sha224Digest.Reset">
            reset the chaining variables
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Digests.Sha256Digest">
             Draft FIPS 180-2 implementation of SHA-256. <b>Note:</b> As this is
             based on a draft this implementation is subject to change.
            
             <pre>
                     block  word  digest
             SHA-1   512    32    160
             SHA-256 512    32    256
             SHA-384 1024   64    384
             SHA-512 1024   64    512
             </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.Sha256Digest.#ctor(Org.BouncyCastle2.Crypto.Digests.Sha256Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.Sha256Digest.Reset">
            reset the chaining variables
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Digests.Sha384Digest">
             Draft FIPS 180-2 implementation of SHA-384. <b>Note:</b> As this is
             based on a draft this implementation is subject to change.
            
             <pre>
                     block  word  digest
             SHA-1   512    32    160
             SHA-256 512    32    256
             SHA-384 1024   64    384
             SHA-512 1024   64    512
             </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.Sha384Digest.#ctor(Org.BouncyCastle2.Crypto.Digests.Sha384Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.Sha384Digest.Reset">
            reset the chaining variables
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Digests.Sha3Digest">
            <summary>
            Implementation of SHA-3 based on following KeccakNISTInterface.c from http://keccak.noekeon.org/
            </summary>
            <remarks>
            Following the naming conventions used in the C source code to enable easy review of the implementation.
            </remarks>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Digests.Sha512Digest">
             Draft FIPS 180-2 implementation of SHA-512. <b>Note:</b> As this is
             based on a draft this implementation is subject to change.
            
             <pre>
                     block  word  digest
             SHA-1   512    32    160
             SHA-256 512    32    256
             SHA-384 1024   64    384
             SHA-512 1024   64    512
             </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.Sha512Digest.#ctor(Org.BouncyCastle2.Crypto.Digests.Sha512Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.Sha512Digest.Reset">
            reset the chaining variables
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Digests.Sha512tDigest">
            FIPS 180-4 implementation of SHA-512/t
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.Sha512tDigest.#ctor(System.Int32)">
            Standard constructor
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.Sha512tDigest.#ctor(Org.BouncyCastle2.Crypto.Digests.Sha512tDigest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.Sha512tDigest.Reset">
            reset the chaining variables
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Digests.ShakeDigest">
            <summary>
            Implementation of SHAKE based on following KeccakNISTInterface.c from http://keccak.noekeon.org/
            </summary>
            <remarks>
            Following the naming conventions used in the C source code to enable easy review of the implementation.
            </remarks>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Digests.SkeinDigest">
            <summary>
            Implementation of the Skein parameterised hash function in 256, 512 and 1024 bit block sizes,
            based on the <see cref="T:Org.BouncyCastle2.Crypto.Engines.ThreefishEngine">Threefish</see> tweakable block cipher.
            </summary>
            <remarks>
            This is the 1.3 version of Skein defined in the Skein hash function submission to the NIST SHA-3
            competition in October 2010.
            <p/>
            Skein was designed by Niels Ferguson - Stefan Lucks - Bruce Schneier - Doug Whiting - Mihir
            Bellare - Tadayoshi Kohno - Jon Callas - Jesse Walker.
            </remarks>
            <seealso cref="T:Org.BouncyCastle2.Crypto.Digests.SkeinEngine"/>
            <seealso cref="T:Org.BouncyCastle2.Crypto.Parameters.SkeinParameters"/>
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Digests.SkeinDigest.SKEIN_256">
            <summary>
            256 bit block size - Skein-256
            </summary>
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Digests.SkeinDigest.SKEIN_512">
            <summary>
            512 bit block size - Skein-512
            </summary>
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Digests.SkeinDigest.SKEIN_1024">
            <summary>
            1024 bit block size - Skein-1024
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.SkeinDigest.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a Skein digest with an internal state size and output size.
            </summary>
            <param name="stateSizeBits">the internal state size in bits - one of <see cref="F:Org.BouncyCastle2.Crypto.Digests.SkeinDigest.SKEIN_256"/> <see cref="F:Org.BouncyCastle2.Crypto.Digests.SkeinDigest.SKEIN_512"/> or
                                  <see cref="F:Org.BouncyCastle2.Crypto.Digests.SkeinDigest.SKEIN_1024"/>.</param>
            <param name="digestSizeBits">the output/digest size to produce in bits, which must be an integral number of
                                 bytes.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.SkeinDigest.Init(Org.BouncyCastle2.Crypto.Parameters.SkeinParameters)">
            <summary>
            Optionally initialises the Skein digest with the provided parameters.
            </summary>
            See <see cref="T:Org.BouncyCastle2.Crypto.Parameters.SkeinParameters"></see> for details on the parameterisation of the Skein hash function.
            <param name="parameters">the parameters to apply to this engine, or <code>null</code> to use no parameters.</param>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Digests.SkeinEngine">
            <summary>
            Implementation of the Skein family of parameterised hash functions in 256, 512 and 1024 bit block
            sizes, based on the <see cref="T:Org.BouncyCastle2.Crypto.Engines.ThreefishEngine">Threefish</see> tweakable block cipher.
            </summary>
            <remarks>
            This is the 1.3 version of Skein defined in the Skein hash function submission to the NIST SHA-3
            competition in October 2010.
            <p/>
            Skein was designed by Niels Ferguson - Stefan Lucks - Bruce Schneier - Doug Whiting - Mihir
            Bellare - Tadayoshi Kohno - Jon Callas - Jesse Walker.
            <p/>
            This implementation is the basis for <see cref="T:Org.BouncyCastle2.Crypto.Digests.SkeinDigest"/> and <see cref="T:Org.BouncyCastle2.Crypto.Macs.SkeinMac"/>, implementing the
            parameter based configuration system that allows Skein to be adapted to multiple applications. <br/>
            Initialising the engine with <see cref="T:Org.BouncyCastle2.Crypto.Parameters.SkeinParameters"/> allows standard and arbitrary parameters to
            be applied during the Skein hash function.
            <p/>
            Implemented:
            <ul>
            <li>256, 512 and 1024 bit internal states.</li>
            <li>Full 96 bit input length.</li>
            <li>Parameters defined in the Skein specification, and arbitrary other pre and post message
            parameters.</li>
            <li>Arbitrary output size in 1 byte intervals.</li>
            </ul>
            <p/>
            Not implemented:
            <ul>
            <li>Sub-byte length input (bit padding).</li>
            <li>Tree hashing.</li>
            </ul>
            </remarks>
            <seealso cref="T:Org.BouncyCastle2.Crypto.Parameters.SkeinParameters"/>
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Digests.SkeinEngine.SKEIN_256">
            <summary>
            256 bit block size - Skein-256
            </summary>
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Digests.SkeinEngine.SKEIN_512">
            <summary>
            512 bit block size - Skein-512
            </summary>
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Digests.SkeinEngine.SKEIN_1024">
            <summary>
            1024 bit block size - Skein-1024
            </summary>
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Digests.SkeinEngine.PARAM_TYPE_KEY">
            The parameter type for the Skein key.
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Digests.SkeinEngine.PARAM_TYPE_CONFIG">
            The parameter type for the Skein configuration block.
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Digests.SkeinEngine.PARAM_TYPE_MESSAGE">
            The parameter type for the message.
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Digests.SkeinEngine.PARAM_TYPE_OUTPUT">
            The parameter type for the output transformation.
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Digests.SkeinEngine.INITIAL_STATES">
            Precalculated UBI(CFG) states for common state/output combinations without key or other
            pre-message params.
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Digests.SkeinEngine.UbiTweak.LOW_RANGE">
            Point at which position might overflow long, so switch to add with carry logic
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Digests.SkeinEngine.UbiTweak.T1_FINAL">
            Bit 127 = final
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Digests.SkeinEngine.UbiTweak.T1_FIRST">
            Bit 126 = first
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Digests.SkeinEngine.UbiTweak.tweak">
            UBI uses a 128 bit tweak
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Digests.SkeinEngine.UbiTweak.extendedPosition">
            Whether 64 bit position exceeded
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.SkeinEngine.UbiTweak.AdvancePosition(System.Int32)">
            Advances the position in the tweak by the specified value.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Digests.SkeinEngine.UBI">
            The Unique Block Iteration chaining mode.
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Digests.SkeinEngine.UBI.currentBlock">
            Buffer for the current block of message data
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Digests.SkeinEngine.UBI.currentOffset">
            Offset into the current message block
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Digests.SkeinEngine.UBI.message">
            Buffer for message words for feedback into encrypted block
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Digests.SkeinEngine.threefish">
            Underlying Threefish tweakable block cipher
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Digests.SkeinEngine.outputSizeBytes">
            Size of the digest output, in bytes
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Digests.SkeinEngine.chain">
            The current chaining/state value
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Digests.SkeinEngine.initialState">
            The initial state value
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Digests.SkeinEngine.key">
            The (optional) key parameter
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Digests.SkeinEngine.preMessageParameters">
            Parameters to apply prior to the message
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Digests.SkeinEngine.postMessageParameters">
            Parameters to apply after the message, but prior to output
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Digests.SkeinEngine.ubi">
            The current UBI operation
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Digests.SkeinEngine.singleByte">
            Buffer for single byte update method
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.SkeinEngine.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a Skein digest with an internal state size and output size.
            </summary>
            <param name="blockSizeBits">the internal state size in bits - one of <see cref="F:Org.BouncyCastle2.Crypto.Digests.SkeinEngine.SKEIN_256"/> <see cref="F:Org.BouncyCastle2.Crypto.Digests.SkeinEngine.SKEIN_512"/> or
                                  <see cref="F:Org.BouncyCastle2.Crypto.Digests.SkeinEngine.SKEIN_1024"/>.</param>
            <param name="outputSizeBits">the output/digest size to produce in bits, which must be an integral number of
                                 bytes.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.SkeinEngine.#ctor(Org.BouncyCastle2.Crypto.Digests.SkeinEngine)">
            <summary>
            Creates a SkeinEngine as an exact copy of an existing instance.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.SkeinEngine.Init(Org.BouncyCastle2.Crypto.Parameters.SkeinParameters)">
            <summary>
            Initialises the Skein engine with the provided parameters. See <see cref="T:Org.BouncyCastle2.Crypto.Parameters.SkeinParameters"/> for
            details on the parameterisation of the Skein hash function.
            </summary>
            <param name="parameters">the parameters to apply to this engine, or <code>null</code> to use no parameters.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.SkeinEngine.CreateInitialState">
            Calculate the initial (pre message block) chaining state.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.SkeinEngine.Reset">
            <summary>
            Reset the engine to the initial state (with the key and any pre-message parameters , ready to
            accept message input.
            </summary>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Digests.SM3Digest">
            <summary>
            Implementation of Chinese SM3 digest as described at
            http://tools.ietf.org/html/draft-shen-sm3-hash-00
            and at .... ( Chinese PDF )
            </summary>
            <remarks>
            The specification says "process a bit stream",
            but this is written to process bytes in blocks of 4,
            meaning this will process 32-bit word groups.
            But so do also most other digest specifications,
            including the SHA-256 which was a origin for
            this specification.
            </remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.SM3Digest.#ctor">
            <summary>
            Standard constructor
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.SM3Digest.#ctor(Org.BouncyCastle2.Crypto.Digests.SM3Digest)">
            <summary>
            Copy constructor.  This will copy the state of the provided
            message digest.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.SM3Digest.Reset">
            <summary>
            reset the chaining variables
            </summary>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Digests.TigerDigest">
            implementation of Tiger based on:
            <a href="http://www.cs.technion.ac.il/~biham/Reports/Tiger">
             http://www.cs.technion.ac.il/~biham/Reports/Tiger</a>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.TigerDigest.#ctor">
            Standard constructor
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.TigerDigest.#ctor(Org.BouncyCastle2.Crypto.Digests.TigerDigest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.TigerDigest.Reset">
            reset the chaining variables
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Digests.TupleHash">
            <summary>
            TupleHash - a hash designed  to  simply  hash  a  tuple  of  input  strings,  any  or  all  of  which  may  be  empty  strings,
            in  an  unambiguous way with an optional XOF mode.
            <para>
            From NIST Special Publication 800-185 - SHA-3 Derived Functions:cSHAKE, KMAC, TupleHash and ParallelHash
            </para>
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.TupleHash.#ctor(System.Int32,System.Byte[])">
             Base constructor.
            
             @param bitLength bit length of the underlying SHAKE function, 128 or 256.
             @param S         the customization string - available for local use.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Digests.WhirlpoolDigest">
             Implementation of WhirlpoolDigest, based on Java source published by Barreto
             and Rijmen.
            
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.WhirlpoolDigest.#ctor(Org.BouncyCastle2.Crypto.Digests.WhirlpoolDigest)">
            Copy constructor. This will copy the state of the provided message
            digest.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Digests.WhirlpoolDigest.Reset">
            Reset the chaining variables
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.EC.CustomNamedCurves.GetByOid(Org.BouncyCastle2.Asn1.DerObjectIdentifier)">
             return the X9ECParameters object for the named curve represented by
             the passed in object identifier. Null if the curve isn't present.
            
             @param oid an object identifier representing a named curve, if present.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.EC.CustomNamedCurves.GetOid(System.String)">
             return the object identifier signified by the passed in name. Null
             if there is no object identifier associated with name.
            
             @return the object identifier associated with name, if present.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.EC.CustomNamedCurves.GetName(Org.BouncyCastle2.Asn1.DerObjectIdentifier)">
            return the named curve name represented by the given object identifier.
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.EC.CustomNamedCurves.Names">
            returns an enumeration containing the name strings for curves
            contained in this structure.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Encodings.ISO9796d1Encoding">
            ISO 9796-1 padding. Note in the light of recent results you should
            only use this with RSA (rather than the "simpler" Rabin keys) and you
            should never use it with anything other than a hash (ie. even if the
            message is small don't sign the message, sign it's hash) or some "random"
            value. See your favorite search engine for details.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Encodings.ISO9796d1Encoding.GetInputBlockSize">
            return the input block size. The largest message we can process
            is (key_size_in_bits + 3)/16, which in our world comes to
            key_size_in_bytes / 2.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Encodings.ISO9796d1Encoding.GetOutputBlockSize">
            return the maximum possible size for the output.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Encodings.ISO9796d1Encoding.SetPadBits(System.Int32)">
            set the number of bits in the next message to be treated as
            pad bits.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Encodings.ISO9796d1Encoding.GetPadBits">
            retrieve the number of pad bits in the last decoded message.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Encodings.ISO9796d1Encoding.DecodeBlock(System.Byte[],System.Int32,System.Int32)">
            @exception InvalidCipherTextException if the decrypted block is not a valid ISO 9796 bit string
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Encodings.OaepEncoding">
            Optimal Asymmetric Encryption Padding (OAEP) - see PKCS 1 V 2.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Encodings.OaepEncoding.DecodeBlock(System.Byte[],System.Int32,System.Int32)">
            @exception InvalidCipherTextException if the decrypted block turns out to
            be badly formatted.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Encodings.OaepEncoding.MaskGeneratorFunction1(System.Byte[],System.Int32,System.Int32,System.Int32)">
            mask generator function, as described in PKCS1v2.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Encodings.Pkcs1Encoding">
            this does your basic Pkcs 1 v1.5 padding - whether or not you should be using this
            depends on your application - see Pkcs1 Version 2 for details.
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Encodings.Pkcs1Encoding.StrictLengthEnabledProperty">
            some providers fail to include the leading zero in PKCS1 encoded blocks. If you need to
            work with one of these set the system property Org.BouncyCastle2.Pkcs1.Strict to false.
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.Encodings.Pkcs1Encoding.StrictLengthEnabled">
            The same effect can be achieved by setting the static property directly
            <p>
            The static property is checked during construction of the encoding object, it is set to
            true by default.
            </p>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Encodings.Pkcs1Encoding.#ctor(Org.BouncyCastle2.Crypto.IAsymmetricBlockCipher)">
             Basic constructor.
            
             @param cipher
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Encodings.Pkcs1Encoding.#ctor(Org.BouncyCastle2.Crypto.IAsymmetricBlockCipher,System.Int32)">
            Constructor for decryption with a fixed plaintext length.
            
            @param cipher The cipher to use for cryptographic operation.
            @param pLen Length of the expected plaintext.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Encodings.Pkcs1Encoding.#ctor(Org.BouncyCastle2.Crypto.IAsymmetricBlockCipher,System.Byte[])">
            Constructor for decryption with a fixed plaintext length and a fallback
            value that is returned, if the padding is incorrect.
            
            @param cipher
                       The cipher to use for cryptographic operation.
            @param fallback
                       The fallback value, we don't to a arraycopy here.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Encodings.Pkcs1Encoding.CheckPkcs1Encoding(System.Byte[],System.Int32)">
            Checks if the argument is a correctly PKCS#1.5 encoded Plaintext
            for encryption.
            
            @param encoded The Plaintext.
            @param pLen Expected length of the plaintext.
            @return Either 0, if the encoding is correct, or -1, if it is incorrect.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Encodings.Pkcs1Encoding.DecodeBlockOrRandom(System.Byte[],System.Int32,System.Int32)">
            Decode PKCS#1.5 encoding, and return a random value if the padding is not correct.
            
            @param in The encrypted block.
            @param inOff Offset in the encrypted block.
            @param inLen Length of the encrypted block.
            @param pLen Length of the desired output.
            @return The plaintext without padding, or a random value if the padding was incorrect.
            @throws InvalidCipherTextException
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Encodings.Pkcs1Encoding.DecodeBlock(System.Byte[],System.Int32,System.Int32)">
            @exception InvalidCipherTextException if the decrypted block is not in Pkcs1 format.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Engines.AesEngine">
             an implementation of the AES (Rijndael), from FIPS-197.
             <p>
             For further details see: <a href="http://csrc.nist.gov/encryption/aes/">http://csrc.nist.gov/encryption/aes/</a>.
            
             This implementation is based on optimizations from Dr. Brian Gladman's paper and C code at
             <a href="http://fp.gladman.plus.com/cryptography_technology/rijndael/">http://fp.gladman.plus.com/cryptography_technology/rijndael/</a>
            
             There are three levels of tradeoff of speed vs memory
             Because java has no preprocessor, they are written as three separate classes from which to choose
            
             The fastest uses 8Kbytes of static tables to precompute round calculations, 4 256 word tables for encryption
             and 4 for decryption.
            
             The middle performance version uses only one 256 word table for each, for a total of 2Kbytes,
             adding 12 rotate operations per round to compute the values contained in the other tables from
             the contents of the first.
            
             The slowest version uses no static tables at all and computes the values in each round.
             </p>
             <p>
             This file contains the middle performance version with 2Kbytes of static tables for round precomputation.
             </p>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.AesEngine.GenerateWorkingKey(System.Byte[],System.Boolean)">
            Calculate the necessary round keys
            The number of calculations depends on key size and block size
            AES specified a fixed block size of 128 bits and key sizes 128/192/256 bits
            This code is written assuming those are the only possible values
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.AesEngine.#ctor">
            default constructor - 128 bit block size.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.AesEngine.Init(System.Boolean,Org.BouncyCastle2.Crypto.ICipherParameters)">
             initialise an AES cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param parameters the parameters required to set up the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Engines.AesWrapEngine">
            <remarks>
            An implementation of the AES Key Wrapper from the NIST Key Wrap Specification.
            <p/>
            For further details see: <a href="http://csrc.nist.gov/encryption/kms/key-wrap.pdf">http://csrc.nist.gov/encryption/kms/key-wrap.pdf</a>.
            </remarks>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Engines.AriaEngine">
            RFC 5794.
            
            ARIA is a 128-bit block cipher with 128-, 192-, and 256-bit keys.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Engines.BlowfishEngine">
            A class that provides Blowfish key encryption operations,
            such as encoding data and generating keys.
            All the algorithms herein are from Applied Cryptography
            and implement a simplified cryptography interface.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.BlowfishEngine.Init(System.Boolean,Org.BouncyCastle2.Crypto.ICipherParameters)">
             initialise a Blowfish cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param parameters the parameters required to set up the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.BlowfishEngine.ProcessTable(System.UInt32,System.UInt32,System.UInt32[])">
            apply the encryption cycle to each value pair in the table.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.BlowfishEngine.EncryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
            Encrypt the given input starting at the given offset and place
            the result in the provided buffer starting at the given offset.
            The input will be an exact multiple of our blocksize.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.BlowfishEngine.DecryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
            Decrypt the given input starting at the given offset and place
            the result in the provided buffer starting at the given offset.
            The input will be an exact multiple of our blocksize.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Engines.CamelliaEngine">
            Camellia - based on RFC 3713.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Engines.CamelliaWrapEngine">
            <remarks>
            An implementation of the Camellia key wrapper based on RFC 3657/RFC 3394.
            <p/>
            For further details see: <a href="http://www.ietf.org/rfc/rfc3657.txt">http://www.ietf.org/rfc/rfc3657.txt</a>.
            </remarks>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Engines.Cast5Engine">
             A class that provides CAST key encryption operations,
             such as encoding data and generating keys.
            
             All the algorithms herein are from the Internet RFC's
            
             RFC2144 - Cast5 (64bit block, 40-128bit key)
             RFC2612 - CAST6 (128bit block, 128-256bit key)
            
             and implement a simplified cryptography interface.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.Cast5Engine.Init(System.Boolean,Org.BouncyCastle2.Crypto.ICipherParameters)">
             initialise a CAST cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param parameters the parameters required to set up the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.Cast5Engine.EncryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Encrypt the given input starting at the given offset and place
             the result in the provided buffer starting at the given offset.
            
             @param src        The plaintext buffer
             @param srcIndex    An offset into src
             @param dst        The ciphertext buffer
             @param dstIndex    An offset into dst
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.Cast5Engine.DecryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Decrypt the given input starting at the given offset and place
             the result in the provided buffer starting at the given offset.
            
             @param src        The plaintext buffer
             @param srcIndex    An offset into src
             @param dst        The ciphertext buffer
             @param dstIndex    An offset into dst
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.Cast5Engine.F1(System.UInt32,System.UInt32,System.Int32)">
             The first of the three processing functions for the
             encryption and decryption.
            
             @param D            the input to be processed
             @param Kmi        the mask to be used from Km[n]
             @param Kri        the rotation value to be used
            
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.Cast5Engine.F2(System.UInt32,System.UInt32,System.Int32)">
             The second of the three processing functions for the
             encryption and decryption.
            
             @param D            the input to be processed
             @param Kmi        the mask to be used from Km[n]
             @param Kri        the rotation value to be used
            
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.Cast5Engine.F3(System.UInt32,System.UInt32,System.Int32)">
             The third of the three processing functions for the
             encryption and decryption.
            
             @param D            the input to be processed
             @param Kmi        the mask to be used from Km[n]
             @param Kri        the rotation value to be used
            
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.Cast5Engine.CAST_Encipher(System.UInt32,System.UInt32,System.UInt32[])">
             Does the 16 rounds to encrypt the block.
            
             @param L0    the LH-32bits of the plaintext block
             @param R0    the RH-32bits of the plaintext block
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Engines.Cast6Engine">
             A class that provides CAST6 key encryption operations,
             such as encoding data and generating keys.
            
             All the algorithms herein are from the Internet RFC
            
             RFC2612 - CAST6 (128bit block, 128-256bit key)
            
             and implement a simplified cryptography interface.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.Cast6Engine.EncryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Encrypt the given input starting at the given offset and place
             the result in the provided buffer starting at the given offset.
            
             @param src        The plaintext buffer
             @param srcIndex    An offset into src
             @param dst        The ciphertext buffer
             @param dstIndex    An offset into dst
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.Cast6Engine.DecryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Decrypt the given input starting at the given offset and place
             the result in the provided buffer starting at the given offset.
            
             @param src        The plaintext buffer
             @param srcIndex    An offset into src
             @param dst        The ciphertext buffer
             @param dstIndex    An offset into dst
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.Cast6Engine.CAST_Encipher(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32[])">
             Does the 12 quad rounds rounds to encrypt the block.
            
             @param A    the 00-31  bits of the plaintext block
             @param B    the 32-63  bits of the plaintext block
             @param C    the 64-95  bits of the plaintext block
             @param D    the 96-127 bits of the plaintext block
             @param result the resulting ciphertext
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.Cast6Engine.CAST_Decipher(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32[])">
             Does the 12 quad rounds rounds to decrypt the block.
            
             @param A    the 00-31  bits of the ciphertext block
             @param B    the 32-63  bits of the ciphertext block
             @param C    the 64-95  bits of the ciphertext block
             @param D    the 96-127 bits of the ciphertext block
             @param result the resulting plaintext
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Engines.ChaCha7539Engine">
            <summary>
            Implementation of Daniel J. Bernstein's ChaCha stream cipher.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.ChaCha7539Engine.#ctor">
            <summary>
            Creates a 20 rounds ChaCha engine.
            </summary>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Engines.ChaChaEngine">
            <summary>
            Implementation of Daniel J. Bernstein's ChaCha stream cipher.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.ChaChaEngine.#ctor">
            <summary>
            Creates a 20 rounds ChaCha engine.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.ChaChaEngine.#ctor(System.Int32)">
            <summary>
            Creates a ChaCha engine with a specific number of rounds.
            </summary>
            <param name="rounds">the number of rounds (must be an even number).</param>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.ChaChaEngine.ChachaCore(System.Int32,System.UInt32[],System.UInt32[])">
            <summary>
            ChaCha function.
            </summary>
            <param name="rounds">The number of ChaCha rounds to execute</param>
            <param name="input">The input words.</param>
            <param name="x">The ChaCha state to modify.</param>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Engines.DesEdeEngine">
            <remarks>A class that provides a basic DESede (or Triple DES) engine.</remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.DesEdeEngine.Init(System.Boolean,Org.BouncyCastle2.Crypto.ICipherParameters)">
             initialise a DESede cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param parameters the parameters required to set up the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Engines.DesEdeWrapEngine">
                * Wrap keys according to
                * <a href="http://www.ietf.org/internet-drafts/draft-ietf-smime-key-wrap-01.txt">
                * draft-ietf-smime-key-wrap-01.txt</a>.
                * <p>
                * Note:
                * <ul>
                * <li>this is based on a draft, and as such is subject to change - don't use this class for anything requiring long term storage.</li>
                * <li>if you are using this to wrap triple-des keys you need to set the
                * parity bits on the key and, if it's a two-key triple-des key, pad it
                * yourself.</li>
                * </ul>
            	* </p>
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Engines.DesEdeWrapEngine.engine">
            Field engine 
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Engines.DesEdeWrapEngine.param">
            Field param 
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Engines.DesEdeWrapEngine.paramPlusIV">
            Field paramPlusIV 
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Engines.DesEdeWrapEngine.iv">
            Field iv 
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Engines.DesEdeWrapEngine.forWrapping">
            Field forWrapping 
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Engines.DesEdeWrapEngine.IV2">
            Field IV2           
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.DesEdeWrapEngine.Init(System.Boolean,Org.BouncyCastle2.Crypto.ICipherParameters)">
             Method init
            
             @param forWrapping
             @param param
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.Engines.DesEdeWrapEngine.AlgorithmName">
             Method GetAlgorithmName
            
             @return
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.DesEdeWrapEngine.Wrap(System.Byte[],System.Int32,System.Int32)">
             Method wrap
            
             @param in
             @param inOff
             @param inLen
             @return
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.DesEdeWrapEngine.Unwrap(System.Byte[],System.Int32,System.Int32)">
             Method unwrap
            
             @param in
             @param inOff
             @param inLen
             @return
             @throws InvalidCipherTextException
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.DesEdeWrapEngine.CalculateCmsKeyChecksum(System.Byte[])">
             Some key wrap algorithms make use of the Key Checksum defined
             in CMS [CMS-Algorithms]. This is used to provide an integrity
             check value for the key being wrapped. The algorithm is
            
             - Compute the 20 octet SHA-1 hash on the key being wrapped.
             - Use the first 8 octets of this hash as the checksum value.
            
             @param key
             @return
             @throws Exception
             @see http://www.w3.org/TR/xmlenc-core/#sec-CMSKeyChecksum
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.DesEdeWrapEngine.CheckCmsKeyChecksum(System.Byte[],System.Byte[])">
            @param key
            @param checksum
            @return
            @see http://www.w3.org/TR/xmlenc-core/#sec-CMSKeyChecksum
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Engines.DesEngine">
            <remarks>A class that provides a basic DES engine.</remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.DesEngine.Init(System.Boolean,Org.BouncyCastle2.Crypto.ICipherParameters)">
             initialise a DES cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param parameters the parameters required to set up the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Engines.DesEngine.bytebit">
            what follows is mainly taken from "Applied Cryptography", by
            Bruce Schneier, however it also bears great resemblance to Richard
            Outerbridge's D3DES...
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.DesEngine.GenerateWorkingKey(System.Boolean,System.Byte[])">
             Generate an integer based working key based on our secret key
             and what we processing we are planning to do.
            
             Acknowledgements for this routine go to James Gillogly and Phil Karn.
                     (whoever, and wherever they are!).
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.DesEngine.DesFunc(System.Int32[],System.Byte[],System.Int32,System.Byte[],System.Int32)">
            the DES engine.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Engines.ElGamalEngine">
            this does your basic ElGamal algorithm.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.ElGamalEngine.Init(System.Boolean,Org.BouncyCastle2.Crypto.ICipherParameters)">
             initialise the ElGamal engine.
            
             @param forEncryption true if we are encrypting, false otherwise.
             @param param the necessary ElGamal key parameters.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.ElGamalEngine.GetInputBlockSize">
             Return the maximum size for an input block to this engine.
             For ElGamal this is always one byte less than the size of P on
             encryption, and twice the length as the size of P on decryption.
            
             @return maximum size for an input block.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.ElGamalEngine.GetOutputBlockSize">
             Return the maximum size for an output block to this engine.
             For ElGamal this is always one byte less than the size of P on
             decryption, and twice the length as the size of P on encryption.
            
             @return maximum size for an output block.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.ElGamalEngine.ProcessBlock(System.Byte[],System.Int32,System.Int32)">
             Process a single block using the basic ElGamal algorithm.
            
             @param in the input array.
             @param inOff the offset into the input buffer where the data starts.
             @param length the length of the data to be processed.
             @return the result of the ElGamal process.
             @exception DataLengthException the input block is too large.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Engines.Gost28147Engine">
            implementation of GOST 28147-89
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.Gost28147Engine.#ctor">
            standard constructor.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.Gost28147Engine.Init(System.Boolean,Org.BouncyCastle2.Crypto.ICipherParameters)">
             initialise an Gost28147 cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param parameters the parameters required to set up the cipher.
             @exception ArgumentException if the parameters argument is inappropriate.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.Gost28147Engine.GetSBox(System.String)">
            Return the S-Box associated with SBoxName
            @param sBoxName name of the S-Box
            @return byte array representing the S-Box
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Engines.HC128Engine">
             HC-128 is a software-efficient stream cipher created by Hongjun Wu. It
             generates keystream from a 128-bit secret key and a 128-bit initialization
             vector.
             <p>
             http://www.ecrypt.eu.org/stream/p3ciphers/hc/hc128_p3.pdf
             </p><p>
             It is a third phase candidate in the eStream contest, and is patent-free.
             No attacks are known as of today (April 2007). See
            
             http://www.ecrypt.eu.org/stream/hcp3.html
             </p>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.HC128Engine.Init(System.Boolean,Org.BouncyCastle2.Crypto.ICipherParameters)">
             Initialise a HC-128 cipher.
            
             @param forEncryption whether or not we are for encryption. Irrelevant, as
                                  encryption and decryption are the same.
             @param params        the parameters required to set up the cipher.
             @throws ArgumentException if the params argument is
                                              inappropriate (ie. the key is not 128 bit long).
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Engines.HC256Engine">
            HC-256 is a software-efficient stream cipher created by Hongjun Wu. It 
            generates keystream from a 256-bit secret key and a 256-bit initialization 
            vector.
            <p>
            http://www.ecrypt.eu.org/stream/p3ciphers/hc/hc256_p3.pdf
            </p><p>
            Its brother, HC-128, is a third phase candidate in the eStream contest.
            The algorithm is patent-free. No attacks are known as of today (April 2007). 
            See
            
            http://www.ecrypt.eu.org/stream/hcp3.html
            </p>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.HC256Engine.Init(System.Boolean,Org.BouncyCastle2.Crypto.ICipherParameters)">
             Initialise a HC-256 cipher.
            
             @param forEncryption whether or not we are for encryption. Irrelevant, as
                                  encryption and decryption are the same.
             @param params        the parameters required to set up the cipher.
             @throws ArgumentException if the params argument is
                                              inappropriate (ie. the key is not 256 bit long).
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Engines.IdeaEngine">
            A class that provides a basic International Data Encryption Algorithm (IDEA) engine.
            <p>
            This implementation is based on the "HOWTO: INTERNATIONAL DATA ENCRYPTION ALGORITHM"
            implementation summary by Fauzan Mirza (F.U.Mirza@sheffield.ac.uk). (barring 1 typo at the
            end of the MulInv function!).
            </p>
            <p>
            It can be found at ftp://ftp.funet.fi/pub/crypt/cryptography/symmetric/idea/
            </p>
            <p>
            Note: This algorithm was patented in the USA, Japan and Europe. These patents expired in 2011/2012.
            </p>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.IdeaEngine.#ctor">
            standard constructor.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.IdeaEngine.Init(System.Boolean,Org.BouncyCastle2.Crypto.ICipherParameters)">
             initialise an IDEA cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param parameters the parameters required to set up the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.IdeaEngine.Mul(System.Int32,System.Int32)">
             return x = x * y where the multiplication is done modulo
             65537 (0x10001) (as defined in the IDEA specification) and
             a zero input is taken to be 65536 (0x10000).
            
             @param x the x value
             @param y the y value
             @return x = x * y
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.IdeaEngine.ExpandKey(System.Byte[])">
            The following function is used to expand the user key to the encryption
            subkey. The first 16 bytes are the user key, and the rest of the subkey
            is calculated by rotating the previous 16 bytes by 25 bits to the left,
            and so on until the subkey is completed.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.IdeaEngine.MulInv(System.Int32)">
            This function computes multiplicative inverse using Euclid's Greatest
            Common Divisor algorithm. Zero and one are self inverse.
            <p>
            i.e. x * MulInv(x) == 1 (modulo BASE)
            </p>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.IdeaEngine.AddInv(System.Int32)">
            Return the additive inverse of x.
            <p>
            i.e. x + AddInv(x) == 0
            </p>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.IdeaEngine.InvertKey(System.Int32[])">
            The function to invert the encryption subkey to the decryption subkey.
            It also involves the multiplicative inverse and the additive inverse functions.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Engines.IesEngine">
            support class for constructing intergrated encryption ciphers
            for doing basic message exchanges on top of key agreement ciphers
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.IesEngine.#ctor(Org.BouncyCastle2.Crypto.IBasicAgreement,Org.BouncyCastle2.Crypto.IDerivationFunction,Org.BouncyCastle2.Crypto.IMac)">
             set up for use with stream mode, where the key derivation function
             is used to provide a stream of bytes to xor with the message.
            
             @param agree the key agreement used as the basis for the encryption
             @param kdf the key derivation function used for byte generation
             @param mac the message authentication code generator for the message
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.IesEngine.#ctor(Org.BouncyCastle2.Crypto.IBasicAgreement,Org.BouncyCastle2.Crypto.IDerivationFunction,Org.BouncyCastle2.Crypto.IMac,Org.BouncyCastle2.Crypto.BufferedBlockCipher)">
             set up for use in conjunction with a block cipher to handle the
             message.
            
             @param agree the key agreement used as the basis for the encryption
             @param kdf the key derivation function used for byte generation
             @param mac the message authentication code generator for the message
             @param cipher the cipher to used for encrypting the message
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.IesEngine.Init(System.Boolean,Org.BouncyCastle2.Crypto.ICipherParameters,Org.BouncyCastle2.Crypto.ICipherParameters,Org.BouncyCastle2.Crypto.ICipherParameters)">
             Initialise the encryptor.
            
             @param forEncryption whether or not this is encryption/decryption.
             @param privParam our private key parameters
             @param pubParam the recipient's/sender's public key parameters
             @param param encoding and derivation parameters.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Engines.NoekeonEngine">
            A Noekeon engine, using direct-key mode.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.NoekeonEngine.#ctor">
            Create an instance of the Noekeon encryption algorithm
            and set some defaults
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.NoekeonEngine.Init(System.Boolean,Org.BouncyCastle2.Crypto.ICipherParameters)">
             initialise
            
             @param forEncryption whether or not we are for encryption.
             @param params the parameters required to set up the cipher.
             @exception ArgumentException if the params argument is
             inappropriate.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Engines.NullEngine">
            The no-op engine that just copies bytes through, irrespective of whether encrypting and decrypting.
            Provided for the sake of completeness.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Engines.RC2Engine">
            an implementation of RC2 as described in RFC 2268
                 "A Description of the RC2(r) Encryption Algorithm" R. Rivest.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.RC2Engine.Init(System.Boolean,Org.BouncyCastle2.Crypto.ICipherParameters)">
             initialise a RC2 cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param parameters the parameters required to set up the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.RC2Engine.RotateWordLeft(System.Int32,System.Int32)">
            return the result rotating the 16 bit number in x left by y
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Engines.RC2WrapEngine">
            Wrap keys according to RFC 3217 - RC2 mechanism
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Engines.RC2WrapEngine.engine">
            Field engine 
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Engines.RC2WrapEngine.parameters">
            Field param 
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Engines.RC2WrapEngine.paramPlusIV">
            Field paramPlusIV 
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Engines.RC2WrapEngine.iv">
            Field iv 
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Engines.RC2WrapEngine.forWrapping">
            Field forWrapping 
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Engines.RC2WrapEngine.IV2">
            Field IV2           
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.RC2WrapEngine.Init(System.Boolean,Org.BouncyCastle2.Crypto.ICipherParameters)">
             Method init
            
             @param forWrapping
             @param param
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.Engines.RC2WrapEngine.AlgorithmName">
             Method GetAlgorithmName
            
             @return
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.RC2WrapEngine.Wrap(System.Byte[],System.Int32,System.Int32)">
             Method wrap
            
             @param in
             @param inOff
             @param inLen
             @return
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.RC2WrapEngine.Unwrap(System.Byte[],System.Int32,System.Int32)">
             Method unwrap
            
             @param in
             @param inOff
             @param inLen
             @return
             @throws InvalidCipherTextException
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.RC2WrapEngine.CalculateCmsKeyChecksum(System.Byte[])">
             Some key wrap algorithms make use of the Key Checksum defined
             in CMS [CMS-Algorithms]. This is used to provide an integrity
             check value for the key being wrapped. The algorithm is
            
             - Compute the 20 octet SHA-1 hash on the key being wrapped.
             - Use the first 8 octets of this hash as the checksum value.
            
             @param key
             @return
             @throws Exception
             @see http://www.w3.org/TR/xmlenc-core/#sec-CMSKeyChecksum
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.RC2WrapEngine.CheckCmsKeyChecksum(System.Byte[],System.Byte[])">
            @param key
            @param checksum
            @return
            @see http://www.w3.org/TR/xmlenc-core/#sec-CMSKeyChecksum
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.RC4Engine.Init(System.Boolean,Org.BouncyCastle2.Crypto.ICipherParameters)">
             initialise a RC4 cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param parameters the parameters required to set up the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Engines.RC532Engine">
            The specification for RC5 came from the <code>RC5 Encryption Algorithm</code>
            publication in RSA CryptoBytes, Spring of 1995.
            <em>http://www.rsasecurity.com/rsalabs/cryptobytes</em>.
            <p>
            This implementation has a word size of 32 bits.</p>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.RC532Engine.#ctor">
            Create an instance of the RC5 encryption algorithm
            and set some defaults
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.RC532Engine.Init(System.Boolean,Org.BouncyCastle2.Crypto.ICipherParameters)">
             initialise a RC5-32 cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param parameters the parameters required to set up the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.RC532Engine.SetKey(System.Byte[])">
             Re-key the cipher.
            
             @param  key  the key to be used
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.RC532Engine.EncryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Encrypt the given block starting at the given offset and place
             the result in the provided buffer starting at the given offset.
            
             @param  in     in byte buffer containing data to encrypt
             @param  inOff  offset into src buffer
             @param  out     out buffer where encrypted data is written
             @param  outOff  offset into out buffer
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.RC532Engine.RotateLeft(System.Int32,System.Int32)">
             Perform a left "spin" of the word. The rotation of the given
             word <em>x</em> is rotated left by <em>y</em> bits.
             Only the <em>lg(32)</em> low-order bits of <em>y</em>
             are used to determine the rotation amount. Here it is
             assumed that the wordsize used is a power of 2.
            
             @param  x  word to rotate
             @param  y    number of bits to rotate % 32
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.RC532Engine.RotateRight(System.Int32,System.Int32)">
             Perform a right "spin" of the word. The rotation of the given
             word <em>x</em> is rotated left by <em>y</em> bits.
             Only the <em>lg(32)</em> low-order bits of <em>y</em>
             are used to determine the rotation amount. Here it is
             assumed that the wordsize used is a power of 2.
            
             @param  x  word to rotate
             @param  y    number of bits to rotate % 32
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Engines.RC564Engine">
            The specification for RC5 came from the <code>RC5 Encryption Algorithm</code>
            publication in RSA CryptoBytes, Spring of 1995.
            <em>http://www.rsasecurity.com/rsalabs/cryptobytes</em>.
            <p>
            This implementation is set to work with a 64 bit word size.</p>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.RC564Engine.#ctor">
            Create an instance of the RC5 encryption algorithm
            and set some defaults
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.RC564Engine.Init(System.Boolean,Org.BouncyCastle2.Crypto.ICipherParameters)">
             initialise a RC5-64 cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param parameters the parameters required to set up the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.RC564Engine.SetKey(System.Byte[])">
             Re-key the cipher.
            
             @param  key  the key to be used
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.RC564Engine.EncryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Encrypt the given block starting at the given offset and place
             the result in the provided buffer starting at the given offset.
            
             @param  in      in byte buffer containing data to encrypt
             @param  inOff   offset into src buffer
             @param  out     out buffer where encrypted data is written
             @param  outOff  offset into out buffer
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.RC564Engine.RotateLeft(System.Int64,System.Int64)">
             Perform a left "spin" of the word. The rotation of the given
             word <em>x</em> is rotated left by <em>y</em> bits.
             Only the <em>lg(wordSize)</em> low-order bits of <em>y</em>
             are used to determine the rotation amount. Here it is
             assumed that the wordsize used is a power of 2.
            
             @param  x  word to rotate
             @param  y    number of bits to rotate % wordSize
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.RC564Engine.RotateRight(System.Int64,System.Int64)">
             Perform a right "spin" of the word. The rotation of the given
             word <em>x</em> is rotated left by <em>y</em> bits.
             Only the <em>lg(wordSize)</em> low-order bits of <em>y</em>
             are used to determine the rotation amount. Here it is
             assumed that the wordsize used is a power of 2.
            
             @param x word to rotate
             @param y number of bits to rotate % wordSize
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Engines.RC6Engine">
            An RC6 engine.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.RC6Engine.#ctor">
            Create an instance of the RC6 encryption algorithm
            and set some defaults
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.RC6Engine.Init(System.Boolean,Org.BouncyCastle2.Crypto.ICipherParameters)">
             initialise a RC5-32 cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param parameters the parameters required to set up the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.RC6Engine.SetKey(System.Byte[])">
             Re-key the cipher.
            
             @param inKey the key to be used
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.RC6Engine.RotateLeft(System.Int32,System.Int32)">
             Perform a left "spin" of the word. The rotation of the given
             word <em>x</em> is rotated left by <em>y</em> bits.
             Only the <em>lg(wordSize)</em> low-order bits of <em>y</em>
             are used to determine the rotation amount. Here it is
             assumed that the wordsize used is a power of 2.
            
             @param x word to rotate
             @param y number of bits to rotate % wordSize
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.RC6Engine.RotateRight(System.Int32,System.Int32)">
             Perform a right "spin" of the word. The rotation of the given
             word <em>x</em> is rotated left by <em>y</em> bits.
             Only the <em>lg(wordSize)</em> low-order bits of <em>y</em>
             are used to determine the rotation amount. Here it is
             assumed that the wordsize used is a power of 2.
            
             @param x word to rotate
             @param y number of bits to rotate % wordSize
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Engines.Rfc3211WrapEngine">
            an implementation of the RFC 3211 Key Wrap
            Specification.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Engines.Rfc3394WrapEngine">
            <remarks>
            An implementation of the AES Key Wrapper from the NIST Key Wrap
            Specification as described in RFC 3394.
            <p/>
            For further details see: <a href="http://www.ietf.org/rfc/rfc3394.txt">http://www.ietf.org/rfc/rfc3394.txt</a>
            and  <a href="http://csrc.nist.gov/encryption/kms/key-wrap.pdf">http://csrc.nist.gov/encryption/kms/key-wrap.pdf</a>.
            </remarks>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Engines.RijndaelEngine">
            an implementation of Rijndael, based on the documentation and reference implementation
            by Paulo Barreto, Vincent Rijmen, for v2.0 August '99.
            <p>
            Note: this implementation is based on information prior to readonly NIST publication.
            </p>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.RijndaelEngine.Mul0x2(System.Int32)">
            multiply two elements of GF(2^m)
            needed for MixColumn and InvMixColumn
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.RijndaelEngine.KeyAddition(System.Int64[])">
            xor corresponding text input and round key input bytes
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.RijndaelEngine.ShiftRow(System.Byte[])">
            Row 0 remains unchanged
            The other three rows are shifted a variable amount
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.RijndaelEngine.Substitution(System.Byte[])">
            Replace every byte of the input by the byte at that place
            in the nonlinear S-box
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.RijndaelEngine.MixColumn">
            Mix the bytes of every column in a linear way
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.RijndaelEngine.InvMixColumn">
            Mix the bytes of every column in a linear way
            This is the opposite operation of Mixcolumn
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.RijndaelEngine.GenerateWorkingKey(System.Byte[])">
            Calculate the necessary round keys
            The number of calculations depends on keyBits and blockBits
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.RijndaelEngine.#ctor">
            default constructor - 128 bit block size.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.RijndaelEngine.#ctor(System.Int32)">
             basic constructor - set the cipher up for a given blocksize
            
             @param blocksize the blocksize in bits, must be 128, 192, or 256.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.RijndaelEngine.Init(System.Boolean,Org.BouncyCastle2.Crypto.ICipherParameters)">
             initialise a Rijndael cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param parameters the parameters required to set up the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Engines.RsaBlindedEngine">
            this does your basic RSA algorithm with blinding
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.RsaBlindedEngine.Init(System.Boolean,Org.BouncyCastle2.Crypto.ICipherParameters)">
             initialise the RSA engine.
            
             @param forEncryption true if we are encrypting, false otherwise.
             @param param the necessary RSA key parameters.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.RsaBlindedEngine.GetInputBlockSize">
             Return the maximum size for an input block to this engine.
             For RSA this is always one byte less than the key size on
             encryption, and the same length as the key size on decryption.
            
             @return maximum size for an input block.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.RsaBlindedEngine.GetOutputBlockSize">
             Return the maximum size for an output block to this engine.
             For RSA this is always one byte less than the key size on
             decryption, and the same length as the key size on encryption.
            
             @return maximum size for an output block.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.RsaBlindedEngine.ProcessBlock(System.Byte[],System.Int32,System.Int32)">
             Process a single block using the basic RSA algorithm.
            
             @param inBuf the input array.
             @param inOff the offset into the input buffer where the data starts.
             @param inLen the length of the data to be processed.
             @return the result of the RSA process.
             @exception DataLengthException the input block is too large.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Engines.RsaCoreEngine">
            this does your basic RSA algorithm.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.RsaCoreEngine.Init(System.Boolean,Org.BouncyCastle2.Crypto.ICipherParameters)">
             initialise the RSA engine.
            
             @param forEncryption true if we are encrypting, false otherwise.
             @param param the necessary RSA key parameters.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.RsaCoreEngine.GetInputBlockSize">
             Return the maximum size for an input block to this engine.
             For RSA this is always one byte less than the key size on
             encryption, and the same length as the key size on decryption.
            
             @return maximum size for an input block.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.RsaCoreEngine.GetOutputBlockSize">
             Return the maximum size for an output block to this engine.
             For RSA this is always one byte less than the key size on
             decryption, and the same length as the key size on encryption.
            
             @return maximum size for an output block.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Engines.RsaEngine">
            this does your basic RSA algorithm.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.RsaEngine.Init(System.Boolean,Org.BouncyCastle2.Crypto.ICipherParameters)">
             initialise the RSA engine.
            
             @param forEncryption true if we are encrypting, false otherwise.
             @param param the necessary RSA key parameters.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.RsaEngine.GetInputBlockSize">
             Return the maximum size for an input block to this engine.
             For RSA this is always one byte less than the key size on
             encryption, and the same length as the key size on decryption.
            
             @return maximum size for an input block.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.RsaEngine.GetOutputBlockSize">
             Return the maximum size for an output block to this engine.
             For RSA this is always one byte less than the key size on
             decryption, and the same length as the key size on encryption.
            
             @return maximum size for an output block.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.RsaEngine.ProcessBlock(System.Byte[],System.Int32,System.Int32)">
             Process a single block using the basic RSA algorithm.
            
             @param inBuf the input array.
             @param inOff the offset into the input buffer where the data starts.
             @param inLen the length of the data to be processed.
             @return the result of the RSA process.
             @exception DataLengthException the input block is too large.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Engines.Salsa20Engine">
            <summary>
            Implementation of Daniel J. Bernstein's Salsa20 stream cipher, Snuffle 2005
            </summary>
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Engines.Salsa20Engine.StateSize">
            Constants 
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.Salsa20Engine.#ctor">
            <summary>
            Creates a 20 round Salsa20 engine.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.Salsa20Engine.#ctor(System.Int32)">
            <summary>
            Creates a Salsa20 engine with a specific number of rounds.
            </summary>
            <param name="rounds">the number of rounds (must be an even number).</param>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Engines.SeedEngine">
            Implementation of the SEED algorithm as described in RFC 4009
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Engines.SeedWrapEngine">
            <remarks>
            An implementation of the SEED key wrapper based on RFC 4010/RFC 3394.
            <p/>
            For further details see: <a href="http://www.ietf.org/rfc/rfc4010.txt">http://www.ietf.org/rfc/rfc4010.txt</a>.
            </remarks>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Engines.SerpentEngine">
                 * Serpent is a 128-bit 32-round block cipher with variable key lengths,
                 * including 128, 192 and 256 bit keys conjectured to be at least as
                 * secure as three-key triple-DES.
                 * <p>
                 * Serpent was designed by Ross Anderson, Eli Biham and Lars Knudsen as a
                 * candidate algorithm for the NIST AES Quest.
            	 * </p>
                 * <p>
                 * For full details see <a href="http://www.cl.cam.ac.uk/~rja14/serpent.html">The Serpent home page</a>
            	 * </p>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.SerpentEngine.MakeWorkingKey(System.Byte[])">
             Expand a user-supplied key material into a session key.
            
             @param key  The user-key bytes (multiples of 4) to use.
             @exception ArgumentException
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.SerpentEngine.EncryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Encrypt one block of plaintext.
            
             @param input the array containing the input data.
             @param inOff offset into the in array the data starts at.
             @param output the array the output data will be copied into.
             @param outOff the offset into the out array the output will start at.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.SerpentEngine.DecryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Decrypt one block of ciphertext.
            
             @param input the array containing the input data.
             @param inOff offset into the in array the data starts at.
             @param output the array the output data will be copied into.
             @param outOff the offset into the out array the output will start at.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.SerpentEngineBase.Init(System.Boolean,Org.BouncyCastle2.Crypto.ICipherParameters)">
             initialise a Serpent cipher.
            
             @param encrypting whether or not we are for encryption.
             @param params     the parameters required to set up the cipher.
             @throws IllegalArgumentException if the params argument is
             inappropriate.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.SerpentEngineBase.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Process one block of input from the array in and write it to
             the out array.
            
             @param in     the array containing the input data.
             @param inOff  offset into the in array the data starts at.
             @param out    the array the output data will be copied into.
             @param outOff the offset into the out array the output will start at.
             @return the number of bytes processed and produced.
             @throws DataLengthException if there isn't enough data in in, or
             space in out.
             @throws IllegalStateException if the cipher isn't initialised.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.SerpentEngineBase.Ib0(System.Int32,System.Int32,System.Int32,System.Int32)">
            InvSO - {13, 3,11, 0,10, 6, 5,12, 1,14, 4, 7,15, 9, 8, 2 } - 15 terms.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.SerpentEngineBase.Sb1(System.Int32,System.Int32,System.Int32,System.Int32)">
            S1 - {15,12, 2, 7, 9, 0, 5,10, 1,11,14, 8, 6,13, 3, 4 } - 14 terms.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.SerpentEngineBase.Ib1(System.Int32,System.Int32,System.Int32,System.Int32)">
            InvS1 - { 5, 8, 2,14,15, 6,12, 3,11, 4, 7, 9, 1,13,10, 0 } - 14 steps.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.SerpentEngineBase.Sb2(System.Int32,System.Int32,System.Int32,System.Int32)">
            S2 - { 8, 6, 7, 9, 3,12,10,15,13, 1,14, 4, 0,11, 5, 2 } - 16 terms.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.SerpentEngineBase.Ib2(System.Int32,System.Int32,System.Int32,System.Int32)">
            InvS2 - {12, 9,15, 4,11,14, 1, 2, 0, 3, 6,13, 5, 8,10, 7 } - 16 steps.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.SerpentEngineBase.Sb3(System.Int32,System.Int32,System.Int32,System.Int32)">
            S3 - { 0,15,11, 8,12, 9, 6, 3,13, 1, 2, 4,10, 7, 5,14 } - 16 terms.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.SerpentEngineBase.Ib3(System.Int32,System.Int32,System.Int32,System.Int32)">
            InvS3 - { 0, 9,10, 7,11,14, 6,13, 3, 5,12, 2, 4, 8,15, 1 } - 15 terms
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.SerpentEngineBase.Sb4(System.Int32,System.Int32,System.Int32,System.Int32)">
            S4 - { 1,15, 8, 3,12, 0,11, 6, 2, 5, 4,10, 9,14, 7,13 } - 15 terms.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.SerpentEngineBase.Ib4(System.Int32,System.Int32,System.Int32,System.Int32)">
            InvS4 - { 5, 0, 8, 3,10, 9, 7,14, 2,12,11, 6, 4,15,13, 1 } - 15 terms.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.SerpentEngineBase.Sb5(System.Int32,System.Int32,System.Int32,System.Int32)">
            S5 - {15, 5, 2,11, 4,10, 9,12, 0, 3,14, 8,13, 6, 7, 1 } - 16 terms.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.SerpentEngineBase.Ib5(System.Int32,System.Int32,System.Int32,System.Int32)">
            InvS5 - { 8,15, 2, 9, 4, 1,13,14,11, 6, 5, 3, 7,12,10, 0 } - 16 terms.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.SerpentEngineBase.Sb6(System.Int32,System.Int32,System.Int32,System.Int32)">
            S6 - { 7, 2,12, 5, 8, 4, 6,11,14, 9, 1,15,13, 3,10, 0 } - 15 terms.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.SerpentEngineBase.Ib6(System.Int32,System.Int32,System.Int32,System.Int32)">
            InvS6 - {15,10, 1,13, 5, 3, 6, 0, 4, 9,14, 7, 2,12, 8,11 } - 15 terms.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.SerpentEngineBase.Sb7(System.Int32,System.Int32,System.Int32,System.Int32)">
            S7 - { 1,13,15, 0,14, 8, 2,11, 7, 4,12,10, 9, 3, 5, 6 } - 16 terms.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.SerpentEngineBase.Ib7(System.Int32,System.Int32,System.Int32,System.Int32)">
            InvS7 - { 3, 0, 6,13, 9,14,15, 8, 5,12,11, 7,10, 1, 4, 2 } - 17 terms.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.SerpentEngineBase.LT">
            Apply the linear transformation to the register set.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.SerpentEngineBase.InverseLT">
            Apply the inverse of the linear transformation to the register set.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Engines.SkipjackEngine">
            a class that provides a basic SKIPJACK engine.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.SkipjackEngine.Init(System.Boolean,Org.BouncyCastle2.Crypto.ICipherParameters)">
             initialise a SKIPJACK cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param parameters the parameters required to set up the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.SkipjackEngine.G(System.Int32,System.Int32)">
            The G permutation
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.SkipjackEngine.H(System.Int32,System.Int32)">
            the inverse of the G permutation.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Engines.SM4Engine">
            <summary>SM4 Block Cipher - SM4 is a 128 bit block cipher with a 128 bit key.</summary>
            <remarks>
            The implementation here is based on the document <a href="http://eprint.iacr.org/2008/329.pdf">http://eprint.iacr.org/2008/329.pdf</a>
            by Whitfield Diffie and George Ledin, which is a translation of Prof. LU Shu-wang's original standard.
            </remarks>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Engines.TeaEngine">
            An TEA engine.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.TeaEngine.#ctor">
            Create an instance of the TEA encryption algorithm
            and set some defaults
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.TeaEngine.Init(System.Boolean,Org.BouncyCastle2.Crypto.ICipherParameters)">
             initialise
            
             @param forEncryption whether or not we are for encryption.
             @param params the parameters required to set up the cipher.
             @exception ArgumentException if the params argument is
             inappropriate.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.TeaEngine.setKey(System.Byte[])">
             Re-key the cipher.
            
             @param  key  the key to be used
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Engines.ThreefishEngine">
            <summary>
            Implementation of the Threefish tweakable large block cipher in 256, 512 and 1024 bit block
            sizes.
            </summary>
            <remarks>
            This is the 1.3 version of Threefish defined in the Skein hash function submission to the NIST
            SHA-3 competition in October 2010.
            <p/>
            Threefish was designed by Niels Ferguson - Stefan Lucks - Bruce Schneier - Doug Whiting - Mihir
            Bellare - Tadayoshi Kohno - Jon Callas - Jesse Walker.
            <p/>
            This implementation inlines all round functions, unrolls 8 rounds, and uses 1.2k of static tables
            to speed up key schedule injection. <br/>
            2 x block size state is retained by each cipher instance.
            </remarks>
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Engines.ThreefishEngine.BLOCKSIZE_256">
            <summary>
            256 bit block size - Threefish-256
            </summary>
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Engines.ThreefishEngine.BLOCKSIZE_512">
            <summary>
            512 bit block size - Threefish-512
            </summary>
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Engines.ThreefishEngine.BLOCKSIZE_1024">
            <summary>
            1024 bit block size - Threefish-1024
            </summary>
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Engines.ThreefishEngine.TWEAK_SIZE_BYTES">
            Size of the tweak in bytes (always 128 bit/16 bytes)
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Engines.ThreefishEngine.ROUNDS_256">
            Rounds in Threefish-256
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Engines.ThreefishEngine.ROUNDS_512">
            Rounds in Threefish-512
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Engines.ThreefishEngine.ROUNDS_1024">
            Rounds in Threefish-1024
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Engines.ThreefishEngine.MAX_ROUNDS">
            Max rounds of any of the variants
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Engines.ThreefishEngine.C_240">
            Key schedule parity constant
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Engines.ThreefishEngine.blocksizeBytes">
            Block size in bytes
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Engines.ThreefishEngine.blocksizeWords">
            Block size in 64 bit words
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Engines.ThreefishEngine.currentBlock">
            Buffer for byte oriented processBytes to call internal word API
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Engines.ThreefishEngine.t">
            Tweak bytes (2 byte t1,t2, calculated t3 and repeat of t1,t2 for modulo free lookup
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Engines.ThreefishEngine.kw">
            Key schedule words
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Engines.ThreefishEngine.cipher">
            The internal cipher implementation (varies by blocksize)
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.ThreefishEngine.#ctor(System.Int32)">
            <summary>
            Constructs a new Threefish cipher, with a specified block size.
            </summary>
            <param name="blocksizeBits">the block size in bits, one of <see cref="F:Org.BouncyCastle2.Crypto.Engines.ThreefishEngine.BLOCKSIZE_256"/>, <see cref="F:Org.BouncyCastle2.Crypto.Engines.ThreefishEngine.BLOCKSIZE_512"/>,
                                 <see cref="F:Org.BouncyCastle2.Crypto.Engines.ThreefishEngine.BLOCKSIZE_1024"/> .</param>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.ThreefishEngine.Init(System.Boolean,Org.BouncyCastle2.Crypto.ICipherParameters)">
            <summary>
            Initialise the engine.
            </summary>
            <param name="forEncryption">Initialise for encryption if true, for decryption if false.</param>
            <param name="parameters">an instance of <see cref="T:Org.BouncyCastle2.Crypto.Parameters.TweakableBlockCipherParameters"/> or <see cref="T:Org.BouncyCastle2.Crypto.Parameters.KeyParameter"/> (to
                          use a 0 tweak)</param>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.ThreefishEngine.Init(System.Boolean,System.UInt64[],System.UInt64[])">
            <summary>
            Initialise the engine, specifying the key and tweak directly.
            </summary>
            <param name="forEncryption">the cipher mode.</param>
            <param name="key">the words of the key, or <code>null</code> to use the current key.</param>
            <param name="tweak">the 2 word (128 bit) tweak, or <code>null</code> to use the current tweak.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.ThreefishEngine.ProcessBlock(System.UInt64[],System.UInt64[])">
            <summary>
            Process a block of data represented as 64 bit words.
            </summary>
            <returns>the number of 8 byte words processed (which will be the same as the block size).</returns>
            <param name="inWords">a block sized buffer of words to process.</param>
            <param name="outWords">a block sized buffer of words to receive the output of the operation.</param>
            <exception cref="T:Org.BouncyCastle2.Crypto.DataLengthException">if either the input or output is not block sized</exception>
            <exception cref="T:System.InvalidOperationException">if this engine is not initialised</exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.ThreefishEngine.BytesToWord(System.Byte[],System.Int32)">
            <summary>
            Read a single 64 bit word from input in LSB first order.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.ThreefishEngine.WordToBytes(System.UInt64,System.Byte[],System.Int32)">
            <summary>
            Write a 64 bit word to output in LSB first order.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.ThreefishEngine.RotlXor(System.UInt64,System.Int32,System.UInt64)">
            Rotate left + xor part of the mix operation.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.ThreefishEngine.XorRotr(System.UInt64,System.Int32,System.UInt64)">
            Rotate xor + rotate right part of the unmix operation.
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Engines.ThreefishEngine.ThreefishCipher.t">
            The extended + repeated tweak words
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Engines.ThreefishEngine.ThreefishCipher.kw">
            The extended + repeated key words
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Engines.ThreefishEngine.Threefish256Cipher.ROTATION_0_0">
            Mix rotation constants defined in Skein 1.3 specification
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Engines.ThreefishEngine.Threefish256Cipher.ROTATION_0_1">
            Mix rotation constants defined in Skein 1.3 specification
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Engines.ThreefishEngine.Threefish512Cipher.ROTATION_0_0">
            Mix rotation constants defined in Skein 1.3 specification
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Engines.ThreefishEngine.Threefish512Cipher.ROTATION_0_1">
            Mix rotation constants defined in Skein 1.3 specification
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Engines.ThreefishEngine.Threefish512Cipher.ROTATION_0_2">
            Mix rotation constants defined in Skein 1.3 specification
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Engines.ThreefishEngine.Threefish512Cipher.ROTATION_0_3">
            Mix rotation constants defined in Skein 1.3 specification
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Engines.ThreefishEngine.Threefish1024Cipher.ROTATION_0_0">
            Mix rotation constants defined in Skein 1.3 specification
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Engines.ThreefishEngine.Threefish1024Cipher.ROTATION_0_1">
            Mix rotation constants defined in Skein 1.3 specification
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Engines.ThreefishEngine.Threefish1024Cipher.ROTATION_0_2">
            Mix rotation constants defined in Skein 1.3 specification
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Engines.ThreefishEngine.Threefish1024Cipher.ROTATION_0_3">
            Mix rotation constants defined in Skein 1.3 specification
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Engines.TnepresEngine">
            Tnepres is a 128-bit 32-round block cipher with variable key lengths,
            including 128, 192 and 256 bit keys conjectured to be at least as
            secure as three-key triple-DES.
            <p>
            Tnepres is based on Serpent which was designed by Ross Anderson, Eli Biham and Lars Knudsen as a
            candidate algorithm for the NIST AES Quest. Unfortunately there was an endianness issue
            with test vectors in the AES submission and the resulting confusion lead to the Tnepres cipher
            as well, which is a byte swapped version of Serpent.
            </p>
            <p>
            For full details see <a href="http://www.cl.cam.ac.uk/~rja14/serpent.html">The Serpent home page</a>
            </p>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.TnepresEngine.MakeWorkingKey(System.Byte[])">
             Expand a user-supplied key material into a session key.
            
             @param key  The user-key bytes (multiples of 4) to use.
             @exception ArgumentException
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.TnepresEngine.EncryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Encrypt one block of plaintext.
            
             @param input the array containing the input data.
             @param inOff offset into the in array the data starts at.
             @param output the array the output data will be copied into.
             @param outOff the offset into the out array the output will start at.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.TnepresEngine.DecryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Decrypt one block of ciphertext.
            
             @param input the array containing the input data.
             @param inOff offset into the in array the data starts at.
             @param output the array the output data will be copied into.
             @param outOff the offset into the out array the output will start at.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Engines.TwofishEngine">
             A class that provides Twofish encryption operations.
            
             This Java implementation is based on the Java reference
             implementation provided by Bruce Schneier and developed
             by Raif S. Naffah.
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Engines.TwofishEngine.P_00">
            Define the fixed p0/p1 permutations used in keyed S-box lookup.
            By changing the following constant definitions, the S-boxes will
            automatically Get changed in the Twofish engine.
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Engines.TwofishEngine.gSubKeys">
            gSubKeys[] and gSBox[] are eventually used in the
            encryption and decryption methods.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.TwofishEngine.Init(System.Boolean,Org.BouncyCastle2.Crypto.ICipherParameters)">
             initialise a Twofish cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param parameters the parameters required to set up the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.TwofishEngine.EncryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Encrypt the given input starting at the given offset and place
             the result in the provided buffer starting at the given offset.
             The input will be an exact multiple of our blocksize.
            
             encryptBlock uses the pre-calculated gSBox[] and subKey[]
             arrays.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.TwofishEngine.DecryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
            Decrypt the given input starting at the given offset and place
            the result in the provided buffer starting at the given offset.
            The input will be an exact multiple of our blocksize.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.TwofishEngine.RS_MDS_Encode(System.Int32,System.Int32)">
             Use (12, 8) Reed-Solomon code over GF(256) to produce
             a key S-box 32-bit entity from 2 key material 32-bit
             entities.
            
             @param    k0 first 32-bit entity
             @param    k1 second 32-bit entity
             @return     Remainder polynomial Generated using RS code
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.TwofishEngine.RS_rem(System.Int32)">
                    * Reed-Solomon code parameters: (12,8) reversible code:
            		* <p>
                    * <pre>
                    * G(x) = x^4 + (a+1/a)x^3 + ax^2 + (a+1/a)x + 1
                    * </pre>
                    * where a = primitive root of field generator 0x14D
            		* </p>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.VmpcEngine.Init(System.Boolean,Org.BouncyCastle2.Crypto.ICipherParameters)">
            initialise a VMPC cipher.
            
            @param forEncryption
               whether or not we are for encryption.
            @param params
               the parameters required to set up the cipher.
            @exception ArgumentException
               if the params argument is inappropriate.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Engines.XteaEngine">
            An XTEA engine.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.XteaEngine.#ctor">
            Create an instance of the TEA encryption algorithm
            and set some defaults
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.XteaEngine.Init(System.Boolean,Org.BouncyCastle2.Crypto.ICipherParameters)">
             initialise
            
             @param forEncryption whether or not we are for encryption.
             @param params the parameters required to set up the cipher.
             @exception ArgumentException if the params argument is
             inappropriate.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Engines.XteaEngine.setKey(System.Byte[])">
             Re-key the cipher.
            
             @param  key  the key to be used
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Generators.BaseKdfBytesGenerator">
            Basic KDF generator for derived keys and ivs as defined by IEEE P1363a/ISO 18033
            <br/>
            This implementation is based on ISO 18033/P1363a.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Generators.BaseKdfBytesGenerator.#ctor(System.Int32,Org.BouncyCastle2.Crypto.IDigest)">
             Construct a KDF Parameters generator.
            
             @param counterStart value of counter.
             @param digest the digest to be used as the source of derived keys.
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.Generators.BaseKdfBytesGenerator.Digest">
            return the underlying digest.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Generators.BaseKdfBytesGenerator.GenerateBytes(System.Byte[],System.Int32,System.Int32)">
             fill len bytes of the output buffer with bytes generated from
             the derivation function.
            
             @throws ArgumentException if the size of the request will cause an overflow.
             @throws DataLengthException if the out buffer is too small.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Generators.BCrypt">
            Core of password hashing scheme Bcrypt,
            designed by Niels Provos and David Mazières,
            corresponds to the C reference implementation.
            <p>
            This implementation does not correspondent to the 1999 published paper
            "A Future-Adaptable Password Scheme" of Niels Provos and David Mazières,
            see: https://www.usenix.org/legacy/events/usenix99/provos/provos_html/node1.html.
            In contrast to the paper, the order of key setup and salt setup is reversed:
            state &lt;- ExpandKey(state, 0, key)
            state %lt;- ExpandKey(state, 0, salt)
            This corresponds to the OpenBSD reference implementation of Bcrypt. 
            </p><p>
            Note: 
            There is no successful cryptanalysis (status 2015), but
            the amount of memory and the band width of Bcrypt
            may be insufficient to effectively prevent attacks 
            with custom hardware like FPGAs, ASICs
            </p><p>
            This implementation uses some parts of Bouncy Castle's BlowfishEngine.
            </p>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Generators.BCrypt.DeriveRawKey(System.Int32,System.Byte[],System.Byte[])">
             Derives a raw 192 bit Bcrypt key
            
             @param cost the cost factor, treated as an exponent of 2
             @param salt a 16 byte salt
             @param psw  the password
             @return a 192 bit key
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Generators.BCrypt.SALT_SIZE_BYTES">
            Size of the salt parameter in bytes
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Generators.BCrypt.MIN_COST">
            Minimum value of cost parameter, equal to log2(bytes of salt)
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Generators.BCrypt.MAX_COST">
            Maximum value of cost parameter (31 == 2,147,483,648)
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Generators.BCrypt.MAX_PASSWORD_BYTES">
            Maximum size of password == max (unrestricted) size of Blowfish key
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Generators.BCrypt.PasswordToByteArray(System.Char[])">
             Converts a character password to bytes incorporating the required trailing zero byte.
            
             @param password the password to be encoded.
             @return a byte representation of the password in UTF8 + trailing zero.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Generators.BCrypt.Generate(System.Byte[],System.Byte[],System.Int32)">
            Calculates the <b>bcrypt</b> hash of a password.
            <p>
            This implements the raw <b>bcrypt</b> function as defined in the bcrypt specification, not
            the crypt encoded version implemented in OpenBSD.
            </p>
            @param password the password bytes (up to 72 bytes) to use for this invocation.
            @param salt     the 128 bit salt to use for this invocation.
            @param cost     the bcrypt cost parameter. The cost of the bcrypt function grows as
                            <code>2^cost</code>. Legal values are 4..31 inclusive.
            @return the output of the raw bcrypt operation: a 192 bit (24 byte) hash.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Generators.DesEdeKeyGenerator.engineInit(Org.BouncyCastle2.Crypto.KeyGenerationParameters)">
             initialise the key generator - if strength is set to zero
             the key Generated will be 192 bits in size, otherwise
             strength can be 128 or 192 (or 112 or 168 if you don't count
             parity bits), depending on whether you wish to do 2-key or 3-key
             triple DES.
            
             @param param the parameters to be used for key generation
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Generators.DesKeyGenerator.engineInit(Org.BouncyCastle2.Crypto.KeyGenerationParameters)">
             initialise the key generator - if strength is set to zero
             the key generated will be 64 bits in size, otherwise
             strength can be 64 or 56 bits (if you don't count the parity bits).
            
             @param param the parameters to be used for key generation
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Generators.DHBasicKeyPairGenerator">
             a basic Diffie-Hellman key pair generator.
            
             This generates keys consistent for use with the basic algorithm for
             Diffie-Hellman.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Generators.DHKeyPairGenerator">
             a Diffie-Hellman key pair generator.
            
             This generates keys consistent for use in the MTI/A0 key agreement protocol
             as described in "Handbook of Applied Cryptography", Pages 516-519.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Generators.DsaKeyPairGenerator">
             a DSA key pair generator.
            
             This Generates DSA keys in line with the method described
             in <i>FIPS 186-3 B.1 FFC Key Pair Generation</i>.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Generators.ECKeyPairGenerator.GenerateKeyPair">
            Given the domain parameters this routine generates an EC key
            pair in accordance with X9.62 section 5.2.1 pages 26, 27.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Generators.ElGamalKeyPairGenerator">
            a ElGamal key pair generator.
            <p>
            This Generates keys consistent for use with ElGamal as described in
            page 164 of "Handbook of Applied Cryptography".</p>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Generators.Gost3410KeyPairGenerator">
            a GOST3410 key pair generator.
            This generates GOST3410 keys in line with the method described
            in GOST R 34.10-94.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Generators.Kdf2BytesGenerator">
            KDF2 generator for derived keys and ivs as defined by IEEE P1363a/ISO 18033
            <br/>
            This implementation is based on IEEE P1363/ISO 18033.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Generators.Kdf2BytesGenerator.#ctor(Org.BouncyCastle2.Crypto.IDigest)">
             Construct a KDF2 bytes generator. Generates key material
             according to IEEE P1363 or ISO 18033 depending on the initialisation.
            
             @param digest the digest to be used as the source of derived keys.
        </member>
        <!-- Badly formed XML comment ignored for member "T:Org.BouncyCastle2.Crypto.Generators.OpenSslPbeParametersGenerator" -->
        <member name="M:Org.BouncyCastle2.Crypto.Generators.OpenSslPbeParametersGenerator.#ctor">
            
             <description>
             Construct a OpenSSL Parameters generator - digest the original MD5.
             </description>
            
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Generators.OpenSslPbeParametersGenerator.#ctor(Org.BouncyCastle2.Crypto.IDigest)">
            
             <description>
             Construct a OpenSSL Parameters generator - digest as specified.
             </description>
             <param name="digest">the digest to use as the PRF.</param>
            
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Generators.OpenSslPbeParametersGenerator.Init(System.Byte[],System.Byte[])">
            Initialise - note the iteration count for this algorithm is fixed at 1.
            
            @param password password to use.
            @param salt salt to use.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Generators.OpenSslPbeParametersGenerator.GenerateDerivedKey(System.Int32)">
            the derived key function, the ith hash of the password and the salt.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Generators.OpenSslPbeParametersGenerator.GenerateDerivedParameters(System.Int32)">
             Generate a key parameter derived from the password, salt, and iteration
             count we are currently initialised with.
            
             @param keySize the size of the key we want (in bits)
             @return a KeyParameter object.
             @exception ArgumentException if the key length larger than the base hash size.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Generators.OpenSslPbeParametersGenerator.GenerateDerivedParameters(System.Int32,System.Int32)">
             Generate a key with initialisation vector parameter derived from
             the password, salt, and iteration count we are currently initialised
             with.
            
             @param keySize the size of the key we want (in bits)
             @param ivSize the size of the iv we want (in bits)
             @return a ParametersWithIV object.
             @exception ArgumentException if keySize + ivSize is larger than the base hash size.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Generators.OpenSslPbeParametersGenerator.GenerateDerivedMacParameters(System.Int32)">
             Generate a key parameter for use with a MAC derived from the password,
             salt, and iteration count we are currently initialised with.
            
             @param keySize the size of the key we want (in bits)
             @return a KeyParameter object.
             @exception ArgumentException if the key length larger than the base hash size.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Generators.Pkcs12ParametersGenerator">
            Generator for Pbe derived keys and ivs as defined by Pkcs 12 V1.0.
            <p>
            The document this implementation is based on can be found at
            <a href="http://www.rsasecurity.com/rsalabs/pkcs/pkcs-12/index.html">
            RSA's Pkcs12 Page</a>
            </p>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Generators.Pkcs12ParametersGenerator.#ctor(Org.BouncyCastle2.Crypto.IDigest)">
             Construct a Pkcs 12 Parameters generator.
            
             @param digest the digest to be used as the source of derived keys.
             @exception ArgumentException if an unknown digest is passed in.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Generators.Pkcs12ParametersGenerator.Adjust(System.Byte[],System.Int32,System.Byte[])">
            add a + b + 1, returning the result in a. The a value is treated
            as a BigInteger of length (b.Length * 8) bits. The result is
            modulo 2^b.Length in case of overflow.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Generators.Pkcs12ParametersGenerator.GenerateDerivedKey(System.Int32,System.Int32)">
            generation of a derived key ala Pkcs12 V1.0.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Generators.Pkcs12ParametersGenerator.GenerateDerivedParameters(System.Int32)">
             Generate a key parameter derived from the password, salt, and iteration
             count we are currently initialised with.
            
             @param keySize the size of the key we want (in bits)
             @return a KeyParameter object.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Generators.Pkcs12ParametersGenerator.GenerateDerivedParameters(System.Int32,System.Int32)">
             Generate a key with initialisation vector parameter derived from
             the password, salt, and iteration count we are currently initialised
             with.
            
             @param keySize the size of the key we want (in bits)
             @param ivSize the size of the iv we want (in bits)
             @return a ParametersWithIV object.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Generators.Pkcs12ParametersGenerator.GenerateDerivedMacParameters(System.Int32)">
             Generate a key parameter for use with a MAC derived from the password,
             salt, and iteration count we are currently initialised with.
            
             @param keySize the size of the key we want (in bits)
             @return a KeyParameter object.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Generators.Pkcs5S1ParametersGenerator">
            Generator for Pbe derived keys and ivs as defined by Pkcs 5 V2.0 Scheme 1.
            Note this generator is limited to the size of the hash produced by the
            digest used to drive it.
            <p>
            The document this implementation is based on can be found at
            <a href="http://www.rsasecurity.com/rsalabs/pkcs/pkcs-5/index.html">
            RSA's Pkcs5 Page</a>
            </p>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Generators.Pkcs5S1ParametersGenerator.#ctor(Org.BouncyCastle2.Crypto.IDigest)">
             Construct a Pkcs 5 Scheme 1 Parameters generator.
            
             @param digest the digest to be used as the source of derived keys.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Generators.Pkcs5S1ParametersGenerator.GenerateDerivedKey">
            the derived key function, the ith hash of the mPassword and the mSalt.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Generators.Pkcs5S1ParametersGenerator.GenerateDerivedParameters(System.Int32)">
             Generate a key parameter derived from the mPassword, mSalt, and iteration
             count we are currently initialised with.
            
             @param keySize the size of the key we want (in bits)
             @return a KeyParameter object.
             @exception ArgumentException if the key length larger than the base hash size.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Generators.Pkcs5S1ParametersGenerator.GenerateDerivedParameters(System.Int32,System.Int32)">
             Generate a key with initialisation vector parameter derived from
             the mPassword, mSalt, and iteration count we are currently initialised
             with.
            
             @param keySize the size of the key we want (in bits)
             @param ivSize the size of the iv we want (in bits)
             @return a ParametersWithIV object.
             @exception ArgumentException if keySize + ivSize is larger than the base hash size.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Generators.Pkcs5S1ParametersGenerator.GenerateDerivedMacParameters(System.Int32)">
             Generate a key parameter for use with a MAC derived from the mPassword,
             mSalt, and iteration count we are currently initialised with.
            
             @param keySize the size of the key we want (in bits)
             @return a KeyParameter object.
             @exception ArgumentException if the key length larger than the base hash size.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Generators.Pkcs5S2ParametersGenerator">
            Generator for Pbe derived keys and ivs as defined by Pkcs 5 V2.0 Scheme 2.
            This generator uses a SHA-1 HMac as the calculation function.
            <p>
            The document this implementation is based on can be found at
            <a href="http://www.rsasecurity.com/rsalabs/pkcs/pkcs-5/index.html">
            RSA's Pkcs5 Page</a></p>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Generators.Pkcs5S2ParametersGenerator.#ctor">
            construct a Pkcs5 Scheme 2 Parameters generator.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Generators.Pkcs5S2ParametersGenerator.GenerateDerivedParameters(System.Int32)">
             Generate a key parameter derived from the password, salt, and iteration
             count we are currently initialised with.
            
             @param keySize the size of the key we want (in bits)
             @return a KeyParameter object.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Generators.Pkcs5S2ParametersGenerator.GenerateDerivedParameters(System.Int32,System.Int32)">
             Generate a key with initialisation vector parameter derived from
             the password, salt, and iteration count we are currently initialised
             with.
            
             @param keySize the size of the key we want (in bits)
             @param ivSize the size of the iv we want (in bits)
             @return a ParametersWithIV object.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Generators.Pkcs5S2ParametersGenerator.GenerateDerivedMacParameters(System.Int32)">
             Generate a key parameter for use with a MAC derived from the password,
             salt, and iteration count we are currently initialised with.
            
             @param keySize the size of the key we want (in bits)
             @return a KeyParameter object.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Generators.Poly1305KeyGenerator">
            <summary>
            Generates keys for the Poly1305 MAC.
            </summary>
            <remarks>
            Poly1305 keys are 256 bit keys consisting of a 128 bit secret key used for the underlying block
            cipher followed by a 128 bit {@code r} value used for the polynomial portion of the Mac. <br/>
            The {@code r} value has a specific format with some bits required to be cleared, resulting in an
            effective 106 bit key. <br/>
            A separately generated 256 bit key can be modified to fit the Poly1305 key format by using the
            {@link #clamp(byte[])} method to clear the required bits.
            </remarks>
            <seealso cref="T:Org.BouncyCastle2.Crypto.Macs.Poly1305"/>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Generators.Poly1305KeyGenerator.engineInit(Org.BouncyCastle2.Crypto.KeyGenerationParameters)">
            <summary>
            Initialises the key generator.
            </summary>
            <remarks>
            Poly1305 keys are always 256 bits, so the key length in the provided parameters is ignored.
            </remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Generators.Poly1305KeyGenerator.engineGenerateKey">
            <summary>
            Generates a 256 bit key in the format required for Poly1305 - e.g.
            <code>k[0] ... k[15], r[0] ... r[15]</code> with the required bits in <code>r</code> cleared
            as per <see cref="M:Org.BouncyCastle2.Crypto.Generators.Poly1305KeyGenerator.Clamp(System.Byte[])"/>.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Generators.Poly1305KeyGenerator.Clamp(System.Byte[])">
            <summary>
            Modifies an existing 32 byte key value to comply with the requirements of the Poly1305 key by
            clearing required bits in the <code>r</code> (second 16 bytes) portion of the key.<br/>
            Specifically:
            <ul>
            <li>r[3], r[7], r[11], r[15] have top four bits clear (i.e., are {0, 1, . . . , 15})</li>
            <li>r[4], r[8], r[12] have bottom two bits clear (i.e., are in {0, 4, 8, . . . , 252})</li>
            </ul>
            </summary>
            <param name="key">a 32 byte key value <code>k[0] ... k[15], r[0] ... r[15]</code></param>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Generators.Poly1305KeyGenerator.CheckKey(System.Byte[])">
            <summary>
            Checks a 32 byte key for compliance with the Poly1305 key requirements, e.g.
            <code>k[0] ... k[15], r[0] ... r[15]</code> with the required bits in <code>r</code> cleared
            as per <see cref="M:Org.BouncyCastle2.Crypto.Generators.Poly1305KeyGenerator.Clamp(System.Byte[])"/>.
            </summary>
            <param name="key">Key.</param>
            <exception cref="T:System.ArgumentException">if the key is of the wrong length, or has invalid bits set
                      in the <code>r</code> portion of the key.</exception>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Generators.RsaKeyPairGenerator">
            an RSA key pair generator.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Generators.RsaKeyPairGenerator.ChooseRandomPrime(System.Int32,Org.BouncyCastle2.Math.BigInteger)">
            <summary>Choose a random prime value for use with RSA</summary>
            <param name="bitlength">the bit-length of the returned prime</param>
            <param name="e">the RSA public exponent</param>
            <returns>a prime p, with (p-1) relatively prime to e</returns>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Generators.SCrypt">
            <summary>Implementation of the scrypt a password-based key derivation function.</summary>
            <remarks>
            Scrypt was created by Colin Percival and is specified in
            <a href="http://tools.ietf.org/html/draft-josefsson-scrypt-kdf-01">draft-josefsson-scrypt-kd</a>.
            </remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Generators.SCrypt.Generate(System.Byte[],System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Generate a key using the scrypt key derivation function.</summary>
            <param name="P">the bytes of the pass phrase.</param>
            <param name="S">the salt to use for this invocation.</param>
            <param name="N">CPU/Memory cost parameter. Must be larger than 1, a power of 2 and less than
                <code>2^(128 * r / 8)</code>.</param>
            <param name="r">the block size, must be >= 1.</param>
            <param name="p">Parallelization parameter. Must be a positive integer less than or equal to
                <code>Int32.MaxValue / (128 * r * 8)</code>.</param>
            <param name="dkLen">the length of the key to generate.</param>
            <returns>the generated key.</returns>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.IAsymmetricBlockCipher">
            <remarks>Base interface for a public/private key block cipher.</remarks>
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.IAsymmetricBlockCipher.AlgorithmName">
            <summary>The name of the algorithm this cipher implements.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.IAsymmetricBlockCipher.Init(System.Boolean,Org.BouncyCastle2.Crypto.ICipherParameters)">
            <summary>Initialise the cipher.</summary>
            <param name="forEncryption">Initialise for encryption if true, for decryption if false.</param>
            <param name="parameters">The key or other data required by the cipher.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.IAsymmetricBlockCipher.GetInputBlockSize">
            <returns>The maximum size, in bytes, an input block may be.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.IAsymmetricBlockCipher.GetOutputBlockSize">
            <returns>The maximum size, in bytes, an output block will be.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.IAsymmetricBlockCipher.ProcessBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>Process a block.</summary>
            <param name="inBuf">The input buffer.</param>
            <param name="inOff">The offset into <paramref>inBuf</paramref> that the input block begins.</param>
            <param name="inLen">The length of the input block.</param>
            <exception cref="T:Org.BouncyCastle2.Crypto.InvalidCipherTextException">Input decrypts improperly.</exception>
            <exception cref="T:Org.BouncyCastle2.Crypto.DataLengthException">Input is too large for the cipher.</exception>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.IAsymmetricCipherKeyPairGenerator">
            interface that a public/private key pair generator should conform to.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.IAsymmetricCipherKeyPairGenerator.Init(Org.BouncyCastle2.Crypto.KeyGenerationParameters)">
             intialise the key pair generator.
            
             @param the parameters the key pair is to be initialised with.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.IAsymmetricCipherKeyPairGenerator.GenerateKeyPair">
             return an AsymmetricCipherKeyPair containing the Generated keys.
            
             @return an AsymmetricCipherKeyPair containing the Generated keys.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.IBasicAgreement">
            The basic interface that basic Diffie-Hellman implementations
            conforms to.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.IBasicAgreement.Init(Org.BouncyCastle2.Crypto.ICipherParameters)">
            initialise the agreement engine.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.IBasicAgreement.GetFieldSize">
            return the field size for the agreement algorithm in bytes.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.IBasicAgreement.CalculateAgreement(Org.BouncyCastle2.Crypto.ICipherParameters)">
            given a public key from a given party calculate the next
            message in the agreement sequence.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.IBlockCipher">
            <remarks>Base interface for a symmetric key block cipher.</remarks>
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.IBlockCipher.AlgorithmName">
            <summary>The name of the algorithm this cipher implements.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.IBlockCipher.Init(System.Boolean,Org.BouncyCastle2.Crypto.ICipherParameters)">
            <summary>Initialise the cipher.</summary>
            <param name="forEncryption">Initialise for encryption if true, for decryption if false.</param>
            <param name="parameters">The key or other data required by the cipher.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.IBlockCipher.GetBlockSize">
            <returns>The block size for this cipher, in bytes.</returns>
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.IBlockCipher.IsPartialBlockOkay">
            <summary>Indicates whether this cipher can handle partial blocks.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.IBlockCipher.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
            <summary>Process a block.</summary>
            <param name="inBuf">The input buffer.</param>
            <param name="inOff">The offset into <paramref>inBuf</paramref> that the input block begins.</param>
            <param name="outBuf">The output buffer.</param>
            <param name="outOff">The offset into <paramref>outBuf</paramref> to write the output block.</param>
            <exception cref="T:Org.BouncyCastle2.Crypto.DataLengthException">If input block is wrong size, or outBuf too small.</exception>
            <returns>The number of bytes processed and produced.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.IBlockCipher.Reset">
            <summary>
            Reset the cipher to the same state as it was after the last init (if there was one).
            </summary>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.IBlockResult">
            <summary>
            Operators that reduce their input to a single block return an object
            of this type.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.IBlockResult.Collect">
            <summary>
            Return the final result of the operation.
            </summary>
            <returns>A block of bytes, representing the result of an operation.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.IBlockResult.Collect(System.Byte[],System.Int32)">
            <summary>
            Store the final result of the operation by copying it into the destination array.
            </summary>
            <returns>The number of bytes copied into destination.</returns>
            <param name="destination">The byte array to copy the result into.</param>
            <param name="offset">The offset into destination to start copying the result at.</param>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.IBufferedCipher">
            <remarks>Block cipher engines are expected to conform to this interface.</remarks>
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.IBufferedCipher.AlgorithmName">
            <summary>The name of the algorithm this cipher implements.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.IBufferedCipher.Init(System.Boolean,Org.BouncyCastle2.Crypto.ICipherParameters)">
            <summary>Initialise the cipher.</summary>
            <param name="forEncryption">If true the cipher is initialised for encryption,
            if false for decryption.</param>
            <param name="parameters">The key and other data required by the cipher.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.IBufferedCipher.Reset">
            <summary>
            Reset the cipher. After resetting the cipher is in the same state
            as it was after the last init (if there was one).
            </summary>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.ICipher">
            <summary>
            Base interface for a ciphers that do not require data to be block aligned.
            <para>
            Note: In cases where the underlying algorithm is block based, these ciphers may add or remove padding as needed.
            </para>
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.ICipher.GetMaxOutputSize(System.Int32)">
            <summary>
            Return the size of the output buffer required for a Write() plus a
            close() with the write() being passed inputLen bytes.
            <para>
            The returned size may be dependent on the initialisation of this cipher
            and may not be accurate once subsequent input data is processed as the cipher may
            add, add or remove padding, as it sees fit.
            </para>
            </summary>
            <returns>The space required to accommodate a call to processBytes and doFinal with inputLen bytes of input.</returns>
            <param name="inputLen">The length of the expected input.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.ICipher.GetUpdateOutputSize(System.Int32)">
            <summary>
            Return the size of the output buffer required for a write() with the write() being
            passed inputLen bytes and just updating the cipher output.
            </summary>
            <returns>The space required to accommodate a call to processBytes with inputLen bytes of input.</returns>
            <param name="inputLen">The length of the expected input.</param>
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.ICipher.Stream">
            <summary>
            Gets the stream for reading/writing data processed/to be processed.
            </summary>
            <value>The stream associated with this cipher.</value>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.ICipherBuilder">
            <summary>
            Base interface for cipher builders.
            </summary>
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.ICipherBuilder.AlgorithmDetails">
            <summary>
            Return the algorithm and parameter details associated with any cipher built.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.ICipherBuilder.GetMaxOutputSize(System.Int32)">
            <summary>
            Return the maximum output size that a given input will produce.
            </summary>
            <param name="inputLen">the length of the expected input.</param>
            <returns>The maximum possible output size that can produced for the expected input length.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.ICipherBuilder.BuildCipher(System.IO.Stream)">
            <summary>
            Build a cipher that operates on the passed in stream.
            </summary>
            <param name="stream">The stream to write/read any encrypted/decrypted data.</param>
            <returns>A cipher based around the given stream.</returns>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.ICipherBuilderWithKey">
            <summary>
            A cipher builder that can also return the key it was initialized with.
            </summary>
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.ICipherBuilderWithKey.Key">
            <summary>
            Return the key we were initialized with.
            </summary>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.ICipherParameters">
            all parameter classes implement this.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.IDecryptorBuilderProvider">
            <summary>
            Interface describing a provider of cipher builders for creating decrypting ciphers.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.IDecryptorBuilderProvider.CreateDecryptorBuilder(System.Object)">
            <summary>
            Return a cipher builder for creating decrypting ciphers.
            </summary>
            <param name="algorithmDetails">The algorithm details/parameters to use to create the final cipher.</param>
            <returns>A new cipher builder.</returns>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.IDerivationFunction">
            base interface for general purpose byte derivation functions.
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.IDerivationFunction.Digest">
            return the message digest used as the basis for the function
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.IDerivationParameters">
            Parameters for key/byte stream derivation classes
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.IDigest">
            interface that a message digest conforms to.
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.IDigest.AlgorithmName">
             return the algorithm name
            
             @return the algorithm name
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.IDigest.GetDigestSize">
             return the size, in bytes, of the digest produced by this message digest.
            
             @return the size, in bytes, of the digest produced by this message digest.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.IDigest.GetByteLength">
             return the size, in bytes, of the internal buffer used by this digest.
            
             @return the size, in bytes, of the internal buffer used by this digest.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.IDigest.Update(System.Byte)">
             update the message digest with a single byte.
            
             @param inByte the input byte to be entered.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.IDigest.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
             update the message digest with a block of bytes.
            
             @param input the byte array containing the data.
             @param inOff the offset into the byte array where the data starts.
             @param len the length of the data.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.IDigest.DoFinal(System.Byte[],System.Int32)">
             Close the digest, producing the final digest value. The doFinal
             call leaves the digest reset.
            
             @param output the array the digest is to be copied into.
             @param outOff the offset into the out array the digest is to start at.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.IDigest.Reset">
            reset the digest back to it's initial state.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.IDigestFactory">
            <summary>
            Base interface for operator factories that create stream-based digest calculators.
            </summary>   
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.IDigestFactory.AlgorithmDetails">
            <summary>The algorithm details object for calculators made by this factory.</summary>
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.IDigestFactory.DigestLength">
            <summary>Return the size of the digest associated with this factory.</summary>
            <returns>The length of the digest produced by this calculators from this factory in bytes.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.IDigestFactory.CreateCalculator">
            <summary>
            Create a stream calculator for the digest associated with this factory. The stream
            calculator is used for the actual operation of entering the data to be digested
            and producing the digest block.
            </summary>
            <returns>A calculator producing an IBlockResult with the final digest in it.</returns>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.IDsa">
            interface for classes implementing the Digital Signature Algorithm
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.IDsa.Init(System.Boolean,Org.BouncyCastle2.Crypto.ICipherParameters)">
             initialise the signer for signature generation or signature
             verification.
            
             @param forSigning true if we are generating a signature, false
             otherwise.
             @param param key parameters for signature generation.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.IDsa.GenerateSignature(System.Byte[])">
             sign the passed in message (usually the output of a hash function).
            
             @param message the message to be signed.
             @return two big integers representing the r and s values respectively.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.IDsa.VerifySignature(System.Byte[],Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger)">
             verify the message message against the signature values r and s.
            
             @param message the message that was supposed to have been signed.
             @param r the r signature value.
             @param s the s signature value.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.IDsaExt">
            <summary>
            An "extended" interface for classes implementing DSA-style algorithms, that provides access
            to the group order.
            </summary>
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.IDsaExt.Order">
            <summary>The order of the group that the r, s values in signatures belong to.</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.IEntropySource">
            <summary>
            Base interface describing an entropy source for a DRBG.
            </summary>
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.IEntropySource.IsPredictionResistant">
            <summary>
            Return whether or not this entropy source is regarded as prediction resistant.
            </summary>
            <value><c>true</c> if this instance is prediction resistant; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.IEntropySource.GetEntropy">
            <summary>
            Return a byte array of entropy.
            </summary>
            <returns>The entropy bytes.</returns>
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.IEntropySource.EntropySize">
            <summary>
            Return the number of bits of entropy this source can produce.
            </summary>
            <value>The size, in bits, of the return value of getEntropy.</value>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.IEntropySourceProvider">
            <summary>
            Base interface describing a provider of entropy sources.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.IEntropySourceProvider.Get(System.Int32)">
            <summary>
            Return an entropy source providing a block of entropy.
            </summary>
            <param name="bitsRequired">The size of the block of entropy required.</param>
            <returns>An entropy source providing bitsRequired blocks of entropy.</returns>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.IKeyUnwrapper">
            <summary>
            Base interface for a key unwrapper.
            </summary>
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.IKeyUnwrapper.AlgorithmDetails">
            <summary>
            The parameter set used to configure this key unwrapper.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.IKeyUnwrapper.Unwrap(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Unwrap the passed in data.
            </summary>
            <param name="cipherText">The array containing the data to be unwrapped.</param>
            <param name="offset">The offset into cipherText at which the unwrapped data starts.</param>
            <param name="length">The length of the data to be unwrapped.</param>
            <returns>an IBlockResult containing the unwrapped key data.</returns>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.IKeyWrapper">
            <summary>
            Base interface for a key wrapper.
            </summary>
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.IKeyWrapper.AlgorithmDetails">
            <summary>
            The parameter set used to configure this key wrapper.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.IKeyWrapper.Wrap(System.Byte[])">
            <summary>
            Wrap the passed in key data.
            </summary>
            <param name="keyData">The key data to be wrapped.</param>
            <returns>an IBlockResult containing the wrapped key data.</returns>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.IMac">
            The base interface for implementations of message authentication codes (MACs).
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.IMac.Init(Org.BouncyCastle2.Crypto.ICipherParameters)">
             Initialise the MAC.
            
             @param param the key and other data required by the MAC.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.IMac.AlgorithmName">
             Return the name of the algorithm the MAC implements.
            
             @return the name of the algorithm the MAC implements.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.IMac.GetMacSize">
             Return the block size for this MAC (in bytes).
            
             @return the block size for this MAC in bytes.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.IMac.Update(System.Byte)">
             add a single byte to the mac for processing.
            
             @param in the byte to be processed.
             @exception InvalidOperationException if the MAC is not initialised.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.IMac.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
            @param in the array containing the input.
            @param inOff the index in the array the data begins at.
            @param len the length of the input starting at inOff.
            @exception InvalidOperationException if the MAC is not initialised.
            @exception DataLengthException if there isn't enough data in in.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.IMac.DoFinal(System.Byte[],System.Int32)">
            Compute the final stage of the MAC writing the output to the out
            parameter.
            <p>
            doFinal leaves the MAC in the same state it was after the last init.
            </p>
            @param out the array the MAC is to be output to.
            @param outOff the offset into the out buffer the output is to start at.
            @exception DataLengthException if there isn't enough space in out.
            @exception InvalidOperationException if the MAC is not initialised.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.IMac.Reset">
            Reset the MAC. At the end of resetting the MAC should be in the
            in the same state it was after the last init (if there was one).
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.IMacFactory.AlgorithmDetails">
            <summary>The algorithm details object for this calculator.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.IMacFactory.CreateCalculator">
            <summary>
            Create a stream calculator for this signature calculator. The stream
            calculator is used for the actual operation of entering the data to be signed
            and producing the signature block.
            </summary>
            <returns>A calculator producing an IBlockResult with a signature in it.</returns>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.InvalidCipherTextException">
            this exception is thrown whenever we find something we don't expect in a
            message.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.InvalidCipherTextException.#ctor">
            base constructor.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.InvalidCipherTextException.#ctor(System.String)">
             create a InvalidCipherTextException with the given message.
            
             @param message the message to be carried with the exception.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.ISignatureFactory">
            <summary>
            Base interface for operators that serve as stream-based signature calculators.
            </summary>
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.ISignatureFactory.AlgorithmDetails">
            <summary>The algorithm details object for this calculator.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.ISignatureFactory.CreateCalculator">
            <summary>
            Create a stream calculator for this signature calculator. The stream
            calculator is used for the actual operation of entering the data to be signed
            and producing the signature block.
            </summary>
            <returns>A calculator producing an IBlockResult with a signature in it.</returns>
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.ISigner.AlgorithmName">
             Return the name of the algorithm the signer implements.
            
             @return the name of the algorithm the signer implements.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.ISigner.Init(System.Boolean,Org.BouncyCastle2.Crypto.ICipherParameters)">
             Initialise the signer for signing or verification.
            
             @param forSigning true if for signing, false otherwise
             @param param necessary parameters.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.ISigner.Update(System.Byte)">
            update the internal digest with the byte b
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.ISigner.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
            update the internal digest with the byte array in
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.ISigner.GenerateSignature">
            Generate a signature for the message we've been loaded with using
            the key we were initialised with.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.ISigner.VerifySignature(System.Byte[])">
            return true if the internal state represents the signature described
            in the passed in array.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.ISigner.Reset">
            reset the internal state
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.ISignerWithRecovery">
            Signer with message recovery.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.ISignerWithRecovery.HasFullMessage">
             Returns true if the signer has recovered the full message as
             part of signature verification.
            
             @return true if full message recovered.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.ISignerWithRecovery.GetRecoveredMessage">
             Returns a reference to what message was recovered (if any).
            
             @return full/partial message, null if nothing.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.ISignerWithRecovery.UpdateWithRecoveredMessage(System.Byte[])">
             Perform an update with the recovered message before adding any other data. This must
             be the first update method called, and calling it will result in the signer assuming
             that further calls to update will include message content past what is recoverable.
            
             @param signature the signature that we are in the process of verifying.
             @throws IllegalStateException
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.IStreamCalculator">
            <summary>
            Base interface for cryptographic operations such as Hashes, MACs, and Signatures which reduce a stream of data
            to a single value.
            </summary>
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.IStreamCalculator.Stream">
            <summary>Return a "sink" stream which only exists to update the implementing object.</summary>
            <returns>A stream to write to in order to update the implementing object.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.IStreamCalculator.GetResult">
            <summary>
            Return the result of processing the stream. This value is only available once the stream
            has been closed.
            </summary>
            <returns>The result of processing the stream.</returns>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.IStreamCipher">
            <summary>The interface stream ciphers conform to.</summary>
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.IStreamCipher.AlgorithmName">
            <summary>The name of the algorithm this cipher implements.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.IStreamCipher.Init(System.Boolean,Org.BouncyCastle2.Crypto.ICipherParameters)">
            <summary>Initialise the cipher.</summary>
            <param name="forEncryption">If true the cipher is initialised for encryption,
            if false for decryption.</param>
            <param name="parameters">The key and other data required by the cipher.</param>
            <exception cref="T:System.ArgumentException">
            If the parameters argument is inappropriate.
            </exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.IStreamCipher.ReturnByte(System.Byte)">
            <summary>encrypt/decrypt a single byte returning the result.</summary>
            <param name="input">the byte to be processed.</param>
            <returns>the result of processing the input byte.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.IStreamCipher.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Process a block of bytes from <c>input</c> putting the result into <c>output</c>.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inOff">
            The offset into <c>input</c> where the data to be processed starts.
            </param>
            <param name="length">The number of bytes to be processed.</param>
            <param name="output">The output buffer the processed bytes go into.</param>
            <param name="outOff">
            The offset into <c>output</c> the processed data starts at.
            </param>
            <exception cref="T:Org.BouncyCastle2.Crypto.DataLengthException">If the output buffer is too small.</exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.IStreamCipher.Reset">
            <summary>
            Reset the cipher to the same state as it was after the last init (if there was one).
            </summary>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.IVerifier">
            <summary>
            Operators that reduce their input to the validation of a signature produce this type.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.IVerifier.IsVerified(System.Byte[])">
            <summary>
            Return true if the passed in data matches what is expected by the verification result.
            </summary>
            <param name="data">The bytes representing the signature.</param>
            <returns>true if the signature verifies, false otherwise.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.IVerifier.IsVerified(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Return true if the length bytes from off in the source array match the signature
            expected by the verification result.
            </summary>
            <param name="source">Byte array containing the signature.</param>
            <param name="off">The offset into the source array where the signature starts.</param>
            <param name="length">The number of bytes in source making up the signature.</param>
            <returns>true if the signature verifies, false otherwise.</returns>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.IVerifierFactory">
            <summary>
            Base interface for operators that serve as stream-based signature verifiers.
            </summary>
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.IVerifierFactory.AlgorithmDetails">
            <summary>The algorithm details object for this verifier.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.IVerifierFactory.CreateCalculator">
            <summary>
            Create a stream calculator for this verifier. The stream
            calculator is used for the actual operation of entering the data to be verified
            and producing a result which can be used to verify the original signature.
            </summary>
            <returns>A calculator producing an IVerifier which can verify the signature.</returns>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.IVerifierFactoryProvider">
            <summary>
            Base interface for a provider to support the dynamic creation of signature verifiers.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.IVerifierFactoryProvider.CreateVerifierFactory(System.Object)">
            <summary>
            Return a signature verfier for signature algorithm described in the passed in algorithm details object.
            </summary>
            <param name="algorithmDetails">The details of the signature algorithm verification is required for.</param>
            <returns>A new signature verifier.</returns>
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.IWrapper.AlgorithmName">
            <summary>The name of the algorithm this cipher implements.</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.IXof">
            <remarks>
            With FIPS PUB 202 a new kind of message digest was announced which supported extendable output, or variable digest sizes.
            This interface provides the extra method required to support variable output on a digest implementation.
            </remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.IXof.DoFinal(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Output the results of the final calculation for this digest to outLen number of bytes.
            </summary>
            <param name="output">output array to write the output bytes to.</param>
            <param name="outOff">offset to start writing the bytes at.</param>
            <param name="outLen">the number of output bytes requested.</param>
            <returns>the number of bytes written</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.IXof.DoOutput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Start outputting the results of the final calculation for this digest. Unlike DoFinal, this method
            will continue producing output until the Xof is explicitly reset, or signals otherwise.
            </summary>
            <param name="output">output array to write the output bytes to.</param>
            <param name="outOff">offset to start writing the bytes at.</param>
            <param name="outLen">the number of output bytes requested.</param>
            <returns>the number of bytes written</returns>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.KeyGenerationParameters">
            The base class for parameters to key generators.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.KeyGenerationParameters.#ctor(Org.BouncyCastle2.Security.SecureRandom,System.Int32)">
             initialise the generator with a source of randomness
             and a strength (in bits).
            
             @param random the random byte source.
             @param strength the size, in bits, of the keys we want to produce.
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.KeyGenerationParameters.Random">
             return the random source associated with this
             generator.
            
             @return the generators random source.
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.KeyGenerationParameters.Strength">
             return the bit strength for keys produced by this generator,
            
             @return the strength of the keys this generator produces (in bits).
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Macs.CbcBlockCipherMac">
            standard CBC Block Cipher MAC - if no padding is specified the default of
            pad of zeroes is used.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Macs.CbcBlockCipherMac.#ctor(Org.BouncyCastle2.Crypto.IBlockCipher)">
             create a standard MAC based on a CBC block cipher. This will produce an
             authentication code half the length of the block size of the cipher.
            
             @param cipher the cipher to be used as the basis of the MAC generation.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Macs.CbcBlockCipherMac.#ctor(Org.BouncyCastle2.Crypto.IBlockCipher,Org.BouncyCastle2.Crypto.Paddings.IBlockCipherPadding)">
             create a standard MAC based on a CBC block cipher. This will produce an
             authentication code half the length of the block size of the cipher.
            
             @param cipher the cipher to be used as the basis of the MAC generation.
             @param padding the padding to be used to complete the last block.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Macs.CbcBlockCipherMac.#ctor(Org.BouncyCastle2.Crypto.IBlockCipher,System.Int32)">
            create a standard MAC based on a block cipher with the size of the
            MAC been given in bits. This class uses CBC mode as the basis for the
            MAC generation.
            <p>
            Note: the size of the MAC must be at least 24 bits (FIPS Publication 81),
            or 16 bits if being used as a data authenticator (FIPS Publication 113),
            and in general should be less than the size of the block cipher as it reduces
            the chance of an exhaustive attack (see Handbook of Applied Cryptography).
            </p>
            @param cipher the cipher to be used as the basis of the MAC generation.
            @param macSizeInBits the size of the MAC in bits, must be a multiple of 8.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Macs.CbcBlockCipherMac.#ctor(Org.BouncyCastle2.Crypto.IBlockCipher,System.Int32,Org.BouncyCastle2.Crypto.Paddings.IBlockCipherPadding)">
            create a standard MAC based on a block cipher with the size of the
            MAC been given in bits. This class uses CBC mode as the basis for the
            MAC generation.
            <p>
            Note: the size of the MAC must be at least 24 bits (FIPS Publication 81),
            or 16 bits if being used as a data authenticator (FIPS Publication 113),
            and in general should be less than the size of the block cipher as it reduces
            the chance of an exhaustive attack (see Handbook of Applied Cryptography).
            </p>
            @param cipher the cipher to be used as the basis of the MAC generation.
            @param macSizeInBits the size of the MAC in bits, must be a multiple of 8.
            @param padding the padding to be used to complete the last block.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Macs.CbcBlockCipherMac.Reset">
            Reset the mac generator.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Macs.MacCFBBlockCipher">
            implements a Cipher-FeedBack (CFB) mode on top of a simple cipher.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Macs.MacCFBBlockCipher.#ctor(Org.BouncyCastle2.Crypto.IBlockCipher,System.Int32)">
             Basic constructor.
            
             @param cipher the block cipher to be used as the basis of the
             feedback mode.
             @param blockSize the block size in bits (note: a multiple of 8)
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Macs.MacCFBBlockCipher.Init(System.Boolean,Org.BouncyCastle2.Crypto.ICipherParameters)">
             Initialise the cipher and, possibly, the initialisation vector (IV).
             If an IV isn't passed as part of the parameter, the IV will be all zeros.
             An IV which is too short is handled in FIPS compliant fashion.
            
             @param param the key and other data required by the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.Macs.MacCFBBlockCipher.AlgorithmName">
             return the algorithm name and mode.
            
             @return the name of the underlying algorithm followed by "/CFB"
             and the block size in bits.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Macs.MacCFBBlockCipher.GetBlockSize">
             return the block size we are operating at.
            
             @return the block size we are operating at (in bytes).
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Macs.MacCFBBlockCipher.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Process one block of input from the array in and write it to
             the out array.
            
             @param in the array containing the input data.
             @param inOff offset into the in array the data starts at.
             @param out the array the output data will be copied into.
             @param outOff the offset into the out array the output will start at.
             @exception DataLengthException if there isn't enough data in in, or
             space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
             @return the number of bytes processed and produced.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Macs.MacCFBBlockCipher.Reset">
            reset the chaining vector back to the IV and reset the underlying
            cipher.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Macs.CfbBlockCipherMac.#ctor(Org.BouncyCastle2.Crypto.IBlockCipher)">
             create a standard MAC based on a CFB block cipher. This will produce an
             authentication code half the length of the block size of the cipher, with
             the CFB mode set to 8 bits.
            
             @param cipher the cipher to be used as the basis of the MAC generation.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Macs.CfbBlockCipherMac.#ctor(Org.BouncyCastle2.Crypto.IBlockCipher,Org.BouncyCastle2.Crypto.Paddings.IBlockCipherPadding)">
             create a standard MAC based on a CFB block cipher. This will produce an
             authentication code half the length of the block size of the cipher, with
             the CFB mode set to 8 bits.
            
             @param cipher the cipher to be used as the basis of the MAC generation.
             @param padding the padding to be used.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Macs.CfbBlockCipherMac.#ctor(Org.BouncyCastle2.Crypto.IBlockCipher,System.Int32,System.Int32)">
            create a standard MAC based on a block cipher with the size of the
            MAC been given in bits. This class uses CFB mode as the basis for the
            MAC generation.
            <p>
            Note: the size of the MAC must be at least 24 bits (FIPS Publication 81),
            or 16 bits if being used as a data authenticator (FIPS Publication 113),
            and in general should be less than the size of the block cipher as it reduces
            the chance of an exhaustive attack (see Handbook of Applied Cryptography).
            </p>
            @param cipher the cipher to be used as the basis of the MAC generation.
            @param cfbBitSize the size of an output block produced by the CFB mode.
            @param macSizeInBits the size of the MAC in bits, must be a multiple of 8.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Macs.CfbBlockCipherMac.#ctor(Org.BouncyCastle2.Crypto.IBlockCipher,System.Int32,System.Int32,Org.BouncyCastle2.Crypto.Paddings.IBlockCipherPadding)">
            create a standard MAC based on a block cipher with the size of the
            MAC been given in bits. This class uses CFB mode as the basis for the
            MAC generation.
            <p>
            Note: the size of the MAC must be at least 24 bits (FIPS Publication 81),
            or 16 bits if being used as a data authenticator (FIPS Publication 113),
            and in general should be less than the size of the block cipher as it reduces
            the chance of an exhaustive attack (see Handbook of Applied Cryptography).
            </p>
            @param cipher the cipher to be used as the basis of the MAC generation.
            @param cfbBitSize the size of an output block produced by the CFB mode.
            @param macSizeInBits the size of the MAC in bits, must be a multiple of 8.
            @param padding a padding to be used.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Macs.CfbBlockCipherMac.Reset">
            Reset the mac generator.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Macs.CMac">
            CMAC - as specified at www.nuee.nagoya-u.ac.jp/labs/tiwata/omac/omac.html
            <p>
            CMAC is analogous to OMAC1 - see also en.wikipedia.org/wiki/CMAC
            </p><p>
            CMAC is a NIST recomendation - see 
            csrc.nist.gov/CryptoToolkit/modes/800-38_Series_Publications/SP800-38B.pdf
            </p><p>
            CMAC/OMAC1 is a blockcipher-based message authentication code designed and
            analyzed by Tetsu Iwata and Kaoru Kurosawa.
            </p><p>
            CMAC/OMAC1 is a simple variant of the CBC MAC (Cipher Block Chaining Message 
            Authentication Code). OMAC stands for One-Key CBC MAC.
            </p><p>
            It supports 128- or 64-bits block ciphers, with any key size, and returns
            a MAC with dimension less or equal to the block size of the underlying 
            cipher.
            </p>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Macs.CMac.#ctor(Org.BouncyCastle2.Crypto.IBlockCipher)">
             create a standard MAC based on a CBC block cipher (64 or 128 bit block).
             This will produce an authentication code the length of the block size
             of the cipher.
            
             @param cipher the cipher to be used as the basis of the MAC generation.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Macs.CMac.#ctor(Org.BouncyCastle2.Crypto.IBlockCipher,System.Int32)">
             create a standard MAC based on a block cipher with the size of the
             MAC been given in bits.
             <p/>
             Note: the size of the MAC must be at least 24 bits (FIPS Publication 81),
             or 16 bits if being used as a data authenticator (FIPS Publication 113),
             and in general should be less than the size of the block cipher as it reduces
             the chance of an exhaustive attack (see Handbook of Applied Cryptography).
            
             @param cipher        the cipher to be used as the basis of the MAC generation.
             @param macSizeInBits the size of the MAC in bits, must be a multiple of 8 and @lt;= 128.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Macs.CMac.Reset">
            Reset the mac generator.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Macs.GMac">
            <summary>
            The GMAC specialisation of Galois/Counter mode (GCM) detailed in NIST Special Publication
            800-38D.
            </summary>
            <remarks>
            GMac is an invocation of the GCM mode where no data is encrypted (i.e. all input data to the Mac
            is processed as additional authenticated data with the underlying GCM block cipher).
            </remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Macs.GMac.#ctor(Org.BouncyCastle2.Crypto.Modes.GcmBlockCipher)">
            <summary>
            Creates a GMAC based on the operation of a block cipher in GCM mode.
            </summary>
            <remarks>
            This will produce an authentication code the length of the block size of the cipher.
            </remarks>
            <param name="cipher">the cipher to be used in GCM mode to generate the MAC.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Macs.GMac.#ctor(Org.BouncyCastle2.Crypto.Modes.GcmBlockCipher,System.Int32)">
            <summary>
            Creates a GMAC based on the operation of a 128 bit block cipher in GCM mode.
            </summary>
            <remarks>
            This will produce an authentication code the length of the block size of the cipher.
            </remarks>
            <param name="cipher">the cipher to be used in GCM mode to generate the MAC.</param>
            <param name="macSizeBits">the mac size to generate, in bits. Must be a multiple of 8, between 32 and 128 (inclusive).
            Sizes less than 96 are not recommended, but are supported for specialized applications.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Macs.GMac.Init(Org.BouncyCastle2.Crypto.ICipherParameters)">
            <summary>
            Initialises the GMAC - requires a <see cref="T:Org.BouncyCastle2.Crypto.Parameters.ParametersWithIV"/> 
            providing a <see cref="T:Org.BouncyCastle2.Crypto.Parameters.KeyParameter"/> and a nonce.
            </summary>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Macs.Gost28147Mac">
            implementation of GOST 28147-89 MAC
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Macs.HMac">
             HMAC implementation based on RFC2104
            
             H(K XOR opad, H(K XOR ipad, text))
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Macs.HMac.Reset">
            Reset the mac generator.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Macs.ISO9797Alg3Mac">
             DES based CBC Block Cipher MAC according to ISO9797, algorithm 3 (ANSI X9.19 Retail MAC)
            
             This could as well be derived from CBCBlockCipherMac, but then the property mac in the base
             class must be changed to protected
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Macs.ISO9797Alg3Mac.#ctor(Org.BouncyCastle2.Crypto.IBlockCipher)">
             create a Retail-MAC based on a CBC block cipher. This will produce an
             authentication code of the length of the block size of the cipher.
            
             @param cipher the cipher to be used as the basis of the MAC generation. This must
             be DESEngine.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Macs.ISO9797Alg3Mac.#ctor(Org.BouncyCastle2.Crypto.IBlockCipher,Org.BouncyCastle2.Crypto.Paddings.IBlockCipherPadding)">
             create a Retail-MAC based on a CBC block cipher. This will produce an
             authentication code of the length of the block size of the cipher.
            
             @param cipher the cipher to be used as the basis of the MAC generation.
             @param padding the padding to be used to complete the last block.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Macs.ISO9797Alg3Mac.#ctor(Org.BouncyCastle2.Crypto.IBlockCipher,System.Int32)">
            create a Retail-MAC based on a block cipher with the size of the
            MAC been given in bits. This class uses single DES CBC mode as the basis for the
            MAC generation.
            <p>
            Note: the size of the MAC must be at least 24 bits (FIPS Publication 81),
            or 16 bits if being used as a data authenticator (FIPS Publication 113),
            and in general should be less than the size of the block cipher as it reduces
            the chance of an exhaustive attack (see Handbook of Applied Cryptography).
            </p>
            @param cipher the cipher to be used as the basis of the MAC generation.
            @param macSizeInBits the size of the MAC in bits, must be a multiple of 8.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Macs.ISO9797Alg3Mac.#ctor(Org.BouncyCastle2.Crypto.IBlockCipher,System.Int32,Org.BouncyCastle2.Crypto.Paddings.IBlockCipherPadding)">
            create a standard MAC based on a block cipher with the size of the
            MAC been given in bits. This class uses single DES CBC mode as the basis for the
            MAC generation. The final block is decrypted and then encrypted using the
            middle and right part of the key.
            <p>
            Note: the size of the MAC must be at least 24 bits (FIPS Publication 81),
            or 16 bits if being used as a data authenticator (FIPS Publication 113),
            and in general should be less than the size of the block cipher as it reduces
            the chance of an exhaustive attack (see Handbook of Applied Cryptography).
            </p>
            @param cipher the cipher to be used as the basis of the MAC generation.
            @param macSizeInBits the size of the MAC in bits, must be a multiple of 8.
            @param padding the padding to be used to complete the last block.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Macs.ISO9797Alg3Mac.Reset">
            Reset the mac generator.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Macs.Poly1305">
            <summary>
            Poly1305 message authentication code, designed by D. J. Bernstein.
            </summary>
            <remarks>
            Poly1305 computes a 128-bit (16 bytes) authenticator, using a 128 bit nonce and a 256 bit key
            consisting of a 128 bit key applied to an underlying cipher, and a 128 bit key (with 106
            effective key bits) used in the authenticator.
            
            The polynomial calculation in this implementation is adapted from the public domain <a
            href="https://github.com/floodyberry/poly1305-donna">poly1305-donna-unrolled</a> C implementation
            by Andrew M (@floodyberry).
            </remarks>
            <seealso cref="T:Org.BouncyCastle2.Crypto.Generators.Poly1305KeyGenerator"/>
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Macs.Poly1305.r0">
            Polynomial key 
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Macs.Poly1305.r1">
            Polynomial key 
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Macs.Poly1305.r2">
            Polynomial key 
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Macs.Poly1305.r3">
            Polynomial key 
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Macs.Poly1305.r4">
            Polynomial key 
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Macs.Poly1305.s1">
            Precomputed 5 * r[1..4] 
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Macs.Poly1305.s2">
            Precomputed 5 * r[1..4] 
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Macs.Poly1305.s3">
            Precomputed 5 * r[1..4] 
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Macs.Poly1305.s4">
            Precomputed 5 * r[1..4] 
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Macs.Poly1305.k0">
            Encrypted nonce 
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Macs.Poly1305.k1">
            Encrypted nonce 
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Macs.Poly1305.k2">
            Encrypted nonce 
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Macs.Poly1305.k3">
            Encrypted nonce 
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Macs.Poly1305.currentBlock">
            Current block of buffered input 
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Macs.Poly1305.currentBlockOffset">
            Current offset in input buffer 
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Macs.Poly1305.h0">
            Polynomial accumulator 
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Macs.Poly1305.h1">
            Polynomial accumulator 
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Macs.Poly1305.h2">
            Polynomial accumulator 
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Macs.Poly1305.h3">
            Polynomial accumulator 
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Macs.Poly1305.h4">
            Polynomial accumulator 
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Macs.Poly1305.#ctor">
            Constructs a Poly1305 MAC, where the key passed to init() will be used directly.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Macs.Poly1305.#ctor(Org.BouncyCastle2.Crypto.IBlockCipher)">
            Constructs a Poly1305 MAC, using a 128 bit block cipher.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Macs.Poly1305.Init(Org.BouncyCastle2.Crypto.ICipherParameters)">
            <summary>
            Initialises the Poly1305 MAC.
            </summary>
            <param name="parameters">a {@link ParametersWithIV} containing a 128 bit nonce and a {@link KeyParameter} with
                     a 256 bit key complying to the {@link Poly1305KeyGenerator Poly1305 key format}.</param>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Macs.SipHash">
            <summary>
            Implementation of SipHash as specified in "SipHash: a fast short-input PRF", by Jean-Philippe
            Aumasson and Daniel J. Bernstein (https://131002.net/siphash/siphash.pdf).
            </summary>
            <remarks>
            "SipHash is a family of PRFs SipHash-c-d where the integer parameters c and d are the number of
            compression rounds and the number of finalization rounds. A compression round is identical to a
            finalization round and this round function is called SipRound. Given a 128-bit key k and a
            (possibly empty) byte string m, SipHash-c-d returns a 64-bit value..."
            </remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Macs.SipHash.#ctor">
            <summary>SipHash-2-4</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Macs.SipHash.#ctor(System.Int32,System.Int32)">
            <summary>SipHash-c-d</summary>
            <param name="c">the number of compression rounds</param>
            <param name="d">the number of finalization rounds</param>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Macs.SkeinMac">
            <summary>
            Implementation of the Skein parameterised MAC function in 256, 512 and 1024 bit block sizes,
            based on the <see cref="T:Org.BouncyCastle2.Crypto.Engines.ThreefishEngine">Threefish</see> tweakable block cipher.
            </summary>
            <remarks>
            This is the 1.3 version of Skein defined in the Skein hash function submission to the NIST SHA-3
            competition in October 2010.
            <p/>
            Skein was designed by Niels Ferguson - Stefan Lucks - Bruce Schneier - Doug Whiting - Mihir
            Bellare - Tadayoshi Kohno - Jon Callas - Jesse Walker.
            </remarks>
            <seealso cref="T:Org.BouncyCastle2.Crypto.Digests.SkeinEngine"/>
            <seealso cref="T:Org.BouncyCastle2.Crypto.Parameters.SkeinParameters"/>
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Macs.SkeinMac.SKEIN_256">
            <summary>
            256 bit block size - Skein-256
            </summary>
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Macs.SkeinMac.SKEIN_512">
            <summary>
            512 bit block size - Skein-512
            </summary>
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Macs.SkeinMac.SKEIN_1024">
            <summary>
            1024 bit block size - Skein-1024
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Macs.SkeinMac.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a Skein MAC with an internal state size and output size.
            </summary>
            <param name="stateSizeBits">the internal state size in bits - one of <see cref="F:Org.BouncyCastle2.Crypto.Macs.SkeinMac.SKEIN_256"/> <see cref="F:Org.BouncyCastle2.Crypto.Macs.SkeinMac.SKEIN_512"/> or
                                  <see cref="F:Org.BouncyCastle2.Crypto.Macs.SkeinMac.SKEIN_1024"/>.</param>
            <param name="digestSizeBits">the output/MAC size to produce in bits, which must be an integral number of
                                 bytes.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Macs.SkeinMac.Init(Org.BouncyCastle2.Crypto.ICipherParameters)">
            <summary>
            Optionally initialises the Skein digest with the provided parameters.
            </summary>
            See <see cref="T:Org.BouncyCastle2.Crypto.Parameters.SkeinParameters"></see> for details on the parameterisation of the Skein hash function.
            <param name="parameters">the parameters to apply to this engine, or <code>null</code> to use no parameters.</param>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.MaxBytesExceededException">
            <summary>
            This exception is thrown whenever a cipher requires a change of key, iv
            or similar after x amount of bytes enciphered
            </summary>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Modes.CbcBlockCipher">
            implements Cipher-Block-Chaining (CBC) mode on top of a simple cipher.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.CbcBlockCipher.#ctor(Org.BouncyCastle2.Crypto.IBlockCipher)">
             Basic constructor.
            
             @param cipher the block cipher to be used as the basis of chaining.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.CbcBlockCipher.GetUnderlyingCipher">
             return the underlying block cipher that we are wrapping.
            
             @return the underlying block cipher that we are wrapping.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.CbcBlockCipher.Init(System.Boolean,Org.BouncyCastle2.Crypto.ICipherParameters)">
             Initialise the cipher and, possibly, the initialisation vector (IV).
             If an IV isn't passed as part of the parameter, the IV will be all zeros.
            
             @param forEncryption if true the cipher is initialised for
              encryption, if false for decryption.
             @param param the key and other data required by the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.Modes.CbcBlockCipher.AlgorithmName">
             return the algorithm name and mode.
            
             @return the name of the underlying algorithm followed by "/CBC".
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.CbcBlockCipher.GetBlockSize">
             return the block size of the underlying cipher.
            
             @return the block size of the underlying cipher.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.CbcBlockCipher.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Process one block of input from the array in and write it to
             the out array.
            
             @param in the array containing the input data.
             @param inOff offset into the in array the data starts at.
             @param out the array the output data will be copied into.
             @param outOff the offset into the out array the output will start at.
             @exception DataLengthException if there isn't enough data in in, or
             space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
             @return the number of bytes processed and produced.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.CbcBlockCipher.Reset">
            reset the chaining vector back to the IV and reset the underlying
            cipher.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.CbcBlockCipher.EncryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Do the appropriate chaining step for CBC mode encryption.
            
             @param in the array containing the data to be encrypted.
             @param inOff offset into the in array the data starts at.
             @param out the array the encrypted data will be copied into.
             @param outOff the offset into the out array the output will start at.
             @exception DataLengthException if there isn't enough data in in, or
             space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
             @return the number of bytes processed and produced.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.CbcBlockCipher.DecryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Do the appropriate chaining step for CBC mode decryption.
            
             @param in the array containing the data to be decrypted.
             @param inOff offset into the in array the data starts at.
             @param out the array the decrypted data will be copied into.
             @param outOff the offset into the out array the output will start at.
             @exception DataLengthException if there isn't enough data in in, or
             space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
             @return the number of bytes processed and produced.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Modes.CcmBlockCipher">
            Implements the Counter with Cipher Block Chaining mode (CCM) detailed in
            NIST Special Publication 800-38C.
            <p>
            <b>Note</b>: this mode is a packet mode - it needs all the data up front.
            </p>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.CcmBlockCipher.#ctor(Org.BouncyCastle2.Crypto.IBlockCipher)">
             Basic constructor.
            
             @param cipher the block cipher to be used.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.CcmBlockCipher.GetUnderlyingCipher">
             return the underlying block cipher that we are wrapping.
            
             @return the underlying block cipher that we are wrapping.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.CcmBlockCipher.GetMac">
             Returns a byte array containing the mac calculated as part of the
             last encrypt or decrypt operation.
            
             @return the last mac calculated.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.CcmBlockCipher.ProcessPacket(System.Byte[],System.Int32,System.Int32)">
             Process a packet of data for either CCM decryption or encryption.
            
             @param in data for processing.
             @param inOff offset at which data starts in the input array.
             @param inLen length of the data in the input array.
             @return a byte array containing the processed input..
             @throws IllegalStateException if the cipher is not appropriately set up.
             @throws InvalidCipherTextException if the input data is truncated or the mac check fails.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.CcmBlockCipher.ProcessPacket(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
             Process a packet of data for either CCM decryption or encryption.
            
             @param in data for processing.
             @param inOff offset at which data starts in the input array.
             @param inLen length of the data in the input array.
             @param output output array.
             @param outOff offset into output array to start putting processed bytes.
             @return the number of bytes added to output.
             @throws IllegalStateException if the cipher is not appropriately set up.
             @throws InvalidCipherTextException if the input data is truncated or the mac check fails.
             @throws DataLengthException if output buffer too short.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Modes.CfbBlockCipher">
            implements a Cipher-FeedBack (CFB) mode on top of a simple cipher.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.CfbBlockCipher.#ctor(Org.BouncyCastle2.Crypto.IBlockCipher,System.Int32)">
             Basic constructor.
            
             @param cipher the block cipher to be used as the basis of the
             feedback mode.
             @param blockSize the block size in bits (note: a multiple of 8)
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.CfbBlockCipher.GetUnderlyingCipher">
             return the underlying block cipher that we are wrapping.
            
             @return the underlying block cipher that we are wrapping.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.CfbBlockCipher.Init(System.Boolean,Org.BouncyCastle2.Crypto.ICipherParameters)">
             Initialise the cipher and, possibly, the initialisation vector (IV).
             If an IV isn't passed as part of the parameter, the IV will be all zeros.
             An IV which is too short is handled in FIPS compliant fashion.
            
             @param forEncryption if true the cipher is initialised for
              encryption, if false for decryption.
             @param param the key and other data required by the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.Modes.CfbBlockCipher.AlgorithmName">
             return the algorithm name and mode.
            
             @return the name of the underlying algorithm followed by "/CFB"
             and the block size in bits.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.CfbBlockCipher.GetBlockSize">
             return the block size we are operating at.
            
             @return the block size we are operating at (in bytes).
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.CfbBlockCipher.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Process one block of input from the array in and write it to
             the out array.
            
             @param in the array containing the input data.
             @param inOff offset into the in array the data starts at.
             @param out the array the output data will be copied into.
             @param outOff the offset into the out array the output will start at.
             @exception DataLengthException if there isn't enough data in in, or
             space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
             @return the number of bytes processed and produced.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.CfbBlockCipher.EncryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Do the appropriate processing for CFB mode encryption.
            
             @param in the array containing the data to be encrypted.
             @param inOff offset into the in array the data starts at.
             @param out the array the encrypted data will be copied into.
             @param outOff the offset into the out array the output will start at.
             @exception DataLengthException if there isn't enough data in in, or
             space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
             @return the number of bytes processed and produced.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.CfbBlockCipher.DecryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Do the appropriate processing for CFB mode decryption.
            
             @param in the array containing the data to be decrypted.
             @param inOff offset into the in array the data starts at.
             @param out the array the encrypted data will be copied into.
             @param outOff the offset into the out array the output will start at.
             @exception DataLengthException if there isn't enough data in in, or
             space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
             @return the number of bytes processed and produced.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.CfbBlockCipher.Reset">
            reset the chaining vector back to the IV and reset the underlying
            cipher.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Modes.CtsBlockCipher">
            A Cipher Text Stealing (CTS) mode cipher. CTS allows block ciphers to
            be used to produce cipher text which is the same outLength as the plain text.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.CtsBlockCipher.#ctor(Org.BouncyCastle2.Crypto.IBlockCipher)">
             Create a buffered block cipher that uses Cipher Text Stealing
            
             @param cipher the underlying block cipher this buffering object wraps.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.CtsBlockCipher.GetUpdateOutputSize(System.Int32)">
             return the size of the output buffer required for an update of 'length' bytes.
            
             @param length the outLength of the input.
             @return the space required to accommodate a call to update
             with length bytes of input.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.CtsBlockCipher.GetOutputSize(System.Int32)">
             return the size of the output buffer required for an update plus a
             doFinal with an input of length bytes.
            
             @param length the outLength of the input.
             @return the space required to accommodate a call to update and doFinal
             with length bytes of input.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.CtsBlockCipher.ProcessByte(System.Byte,System.Byte[],System.Int32)">
             process a single byte, producing an output block if necessary.
            
             @param in the input byte.
             @param out the space for any output that might be produced.
             @param outOff the offset from which the output will be copied.
             @return the number of output bytes copied to out.
             @exception DataLengthException if there isn't enough space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.CtsBlockCipher.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
             process an array of bytes, producing output if necessary.
            
             @param in the input byte array.
             @param inOff the offset at which the input data starts.
             @param length the number of bytes to be copied out of the input array.
             @param out the space for any output that might be produced.
             @param outOff the offset from which the output will be copied.
             @return the number of output bytes copied to out.
             @exception DataLengthException if there isn't enough space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.CtsBlockCipher.DoFinal(System.Byte[],System.Int32)">
             Process the last block in the buffer.
            
             @param out the array the block currently being held is copied into.
             @param outOff the offset at which the copying starts.
             @return the number of output bytes copied to out.
             @exception DataLengthException if there is insufficient space in out for
             the output.
             @exception InvalidOperationException if the underlying cipher is not
             initialised.
             @exception InvalidCipherTextException if cipher text decrypts wrongly (in
             case the exception will never Get thrown).
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Modes.EaxBlockCipher">
            A Two-Pass Authenticated-Encryption Scheme Optimized for Simplicity and 
            Efficiency - by M. Bellare, P. Rogaway, D. Wagner.
            
            http://www.cs.ucdavis.edu/~rogaway/papers/eax.pdf
            
            EAX is an AEAD scheme based on CTR and OMAC1/CMAC, that uses a single block 
            cipher to encrypt and authenticate data. It's on-line (the length of a 
            message isn't needed to begin processing it), has good performances, it's
            simple and provably secure (provided the underlying block cipher is secure).
            
            Of course, this implementations is NOT thread-safe.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.EaxBlockCipher.#ctor(Org.BouncyCastle2.Crypto.IBlockCipher)">
             Constructor that accepts an instance of a block cipher engine.
            
             @param cipher the engine to use
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Modes.GcmBlockCipher">
            <summary>
            Implements the Galois/Counter mode (GCM) detailed in
            NIST Special Publication 800-38D.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.GcmBlockCipher.Init(System.Boolean,Org.BouncyCastle2.Crypto.ICipherParameters)">
            <remarks>
            MAC sizes from 32 bits to 128 bits (must be a multiple of 8) are supported. The default is 128 bits.
            Sizes less than 96 are not recommended, but are supported for specialized applications.
            </remarks>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Modes.GcmSivBlockCipher">
            GCM-SIV Mode.
            <p>It should be noted that the specified limit of 2<sup>36</sup> bytes is not supported. This is because all bytes are
            cached in a <b>ByteArrayOutputStream</b> object (which has a limit of a little less than 2<sup>31</sup> bytes),
            and are output on the <b>DoFinal</b>() call (which can only process a maximum of 2<sup>31</sup> bytes).</p>
            <p>The practical limit of 2<sup>31</sup> - 24 bytes is policed, and attempts to breach the limit will be rejected</p>
            <p>In order to properly support the higher limit, an extended form of <b>ByteArrayOutputStream</b> would be needed
            which would use multiple arrays to store the data. In addition, a new <b>doOutput</b> method would be required (similar
            to that in <b>XOF</b> digests), which would allow the data to be output over multiple calls. Alternatively an extended
            form of <b>ByteArrayInputStream</b> could be used to deliver the data.</p>
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Modes.GcmSivBlockCipher.BUFLEN">
            <summary>The buffer length.</summary>
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Modes.GcmSivBlockCipher.HALFBUFLEN">
            <summary>The halfBuffer length.</summary>
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Modes.GcmSivBlockCipher.NONCELEN">
            <summary>The nonce length.</summary>
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Modes.GcmSivBlockCipher.MAX_DATALEN">
            The maximum data length (AEAD/PlainText). Due to implementation constraints this is restricted to the maximum
            array length (https://programming.guide/java/array-maximum-length.html) minus the BUFLEN to allow for the MAC
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Modes.GcmSivBlockCipher.MASK">
            The top bit mask.
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Modes.GcmSivBlockCipher.ADD">
            The addition constant.
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Modes.GcmSivBlockCipher.INIT">
            The initialisation flag.
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Modes.GcmSivBlockCipher.AEAD_COMPLETE">
            The aeadComplete flag.
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Modes.GcmSivBlockCipher.theCipher">
            The cipher.
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Modes.GcmSivBlockCipher.theMultiplier">
            The multiplier.
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Modes.GcmSivBlockCipher.theGHash">
            The gHash buffer.
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Modes.GcmSivBlockCipher.theReverse">
            The reverse buffer.
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Modes.GcmSivBlockCipher.theAEADHasher">
            The aeadHasher.
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Modes.GcmSivBlockCipher.theDataHasher">
            The dataHasher.
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Modes.GcmSivBlockCipher.thePlain">
            The plainDataStream.
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Modes.GcmSivBlockCipher.theEncData">
            The encryptedDataStream (decryption only).
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Modes.GcmSivBlockCipher.forEncryption">
            Are we encrypting?
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Modes.GcmSivBlockCipher.theInitialAEAD">
            The initialAEAD.
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Modes.GcmSivBlockCipher.theNonce">
            The nonce.
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Modes.GcmSivBlockCipher.theFlags">
            The flags.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.GcmSivBlockCipher.#ctor">
            Constructor.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.GcmSivBlockCipher.#ctor(Org.BouncyCastle2.Crypto.IBlockCipher)">
            Constructor.
            @param pCipher the underlying cipher
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.GcmSivBlockCipher.#ctor(Org.BouncyCastle2.Crypto.IBlockCipher,Org.BouncyCastle2.Crypto.Modes.Gcm.IGcmMultiplier)">
            Constructor.
            @param pCipher the underlying cipher
            @param pMultiplier the multiplier
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.GcmSivBlockCipher.CheckAeadStatus(System.Int32)">
            check AEAD status.
            @param pLen the aeadLength
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.GcmSivBlockCipher.CheckStatus(System.Int32)">
            check status.
            @param pLen the dataLength
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.GcmSivBlockCipher.ResetStreams">
            Reset Streams.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.GcmSivBlockCipher.bufLength(System.Byte[])">
            Obtain buffer length (allowing for null).
            @param pBuffer the buffere
            @return the length
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.GcmSivBlockCipher.CheckBuffer(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            Check buffer.
            @param pBuffer the buffer
            @param pOffset the offset
            @param pLen the length
            @param pOutput is this an output buffer?
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.GcmSivBlockCipher.encryptPlain(System.Byte[],System.Byte[],System.Int32)">
            encrypt data stream.
            @param pCounter the counter
            @param pTarget the target buffer
            @param pOffset the target offset
            @return the length of data encrypted
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.GcmSivBlockCipher.decryptPlain">
            decrypt data stream.
            @throws InvalidCipherTextException on data too short or mac check failed
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.GcmSivBlockCipher.calculateTag">
            calculate tag.
            @return the calculated tag
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.GcmSivBlockCipher.completePolyVal">
            complete polyVAL.
            @return the calculated value
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.GcmSivBlockCipher.gHashLengths">
            process lengths.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.GcmSivBlockCipher.gHASH(System.Byte[])">
            perform the next GHASH step.
            @param pNext the next value
        </member>
        <!-- Badly formed XML comment ignored for member "M:Org.BouncyCastle2.Crypto.Modes.GcmSivBlockCipher.fillReverse(System.Byte[],System.Int32,System.Int32,System.Byte[])" -->
        <member name="M:Org.BouncyCastle2.Crypto.Modes.GcmSivBlockCipher.xorBlock(System.Byte[],System.Byte[])">
            xor a full block buffer.
            @param pLeft the left operand and result
            @param pRight the right operand
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.GcmSivBlockCipher.xorBlock(System.Byte[],System.Byte[],System.Int32,System.Int32)">
            xor a partial block buffer.
            @param pLeft the left operand and result
            @param pRight the right operand
            @param pOffset the offset in the right operand
            @param pLength the length of data in the right operand
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.GcmSivBlockCipher.incrementCounter(System.Byte[])">
            increment the counter.
            @param pCounter the counter to increment
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.GcmSivBlockCipher.mulX(System.Byte[])">
            multiply by X.
            @param pValue the value to adjust
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.GcmSivBlockCipher.deriveKeys(Org.BouncyCastle2.Crypto.Parameters.KeyParameter)">
            Derive Keys.
            @param pKey the keyGeneration key
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Modes.GcmSivBlockCipher.GcmSivHasher">
            Hash Control.
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Modes.GcmSivBlockCipher.GcmSivHasher.theBuffer">
            Cache.
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Modes.GcmSivBlockCipher.GcmSivHasher.theByte">
            Single byte cache.
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Modes.GcmSivBlockCipher.GcmSivHasher.numActive">
            Count of active bytes in cache.
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Modes.GcmSivBlockCipher.GcmSivHasher.numHashed">
            Count of hashed bytes.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.GcmSivBlockCipher.GcmSivHasher.getBytesProcessed">
            Obtain the count of bytes hashed.
            @return the count
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.GcmSivBlockCipher.GcmSivHasher.Reset">
            Reset the hasher.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.GcmSivBlockCipher.GcmSivHasher.updateHash(System.Byte)">
            update hash.
            @param pByte the byte
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.GcmSivBlockCipher.GcmSivHasher.updateHash(System.Byte[],System.Int32,System.Int32)">
            update hash.
            @param pBuffer the buffer
            @param pOffset the offset within the buffer
            @param pLen the length of data
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.GcmSivBlockCipher.GcmSivHasher.completeHash">
            complete hash.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Modes.GOfbBlockCipher">
            implements the GOST 28147 OFB counter mode (GCTR).
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.GOfbBlockCipher.#ctor(Org.BouncyCastle2.Crypto.IBlockCipher)">
             Basic constructor.
            
             @param cipher the block cipher to be used as the basis of the
             counter mode (must have a 64 bit block size).
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.GOfbBlockCipher.GetUnderlyingCipher">
             return the underlying block cipher that we are wrapping.
            
             @return the underlying block cipher that we are wrapping.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.GOfbBlockCipher.Init(System.Boolean,Org.BouncyCastle2.Crypto.ICipherParameters)">
             Initialise the cipher and, possibly, the initialisation vector (IV).
             If an IV isn't passed as part of the parameter, the IV will be all zeros.
             An IV which is too short is handled in FIPS compliant fashion.
            
             @param encrypting if true the cipher is initialised for
              encryption, if false for decryption.
             @param parameters the key and other data required by the cipher.
             @exception ArgumentException if the parameters argument is inappropriate.
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.Modes.GOfbBlockCipher.AlgorithmName">
             return the algorithm name and mode.
            
             @return the name of the underlying algorithm followed by "/GCTR"
             and the block size in bits
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.GOfbBlockCipher.GetBlockSize">
             return the block size we are operating at (in bytes).
            
             @return the block size we are operating at (in bytes).
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.GOfbBlockCipher.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Process one block of input from the array in and write it to
             the out array.
            
             @param in the array containing the input data.
             @param inOff offset into the in array the data starts at.
             @param out the array the output data will be copied into.
             @param outOff the offset into the out array the output will start at.
             @exception DataLengthException if there isn't enough data in in, or
             space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
             @return the number of bytes processed and produced.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.GOfbBlockCipher.Reset">
            reset the feedback vector back to the IV and reset the underlying
            cipher.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Modes.IAeadBlockCipher">
            <summary>An IAeadCipher based on an IBlockCipher.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.IAeadBlockCipher.GetBlockSize">
            <returns>The block size for this cipher, in bytes.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.IAeadBlockCipher.GetUnderlyingCipher">
            <summary>The block cipher underlying this algorithm.</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Modes.IAeadCipher">
            <summary>
            A cipher mode that includes authenticated encryption with a streaming mode and optional
            associated data.
            </summary>
            <remarks>
            Implementations of this interface may operate in a packet mode (where all input data is
            buffered and processed during the call to DoFinal, or in a streaming mode (where output
            data is incrementally produced with each call to ProcessByte or ProcessBytes. This is
            important to consider during decryption: in a streaming mode, unauthenticated plaintext
            data may be output prior to the call to DoFinal that results in an authentication failure.
            The higher level protocol utilising this cipher must ensure the plaintext data is handled
            appropriately until the end of data is reached and the entire ciphertext is authenticated.
            </remarks>
            <see cref="T:Org.BouncyCastle2.Crypto.Parameters.AeadParameters"/>
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.Modes.IAeadCipher.AlgorithmName">
            <summary>The name of the algorithm this cipher implements.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.IAeadCipher.Init(System.Boolean,Org.BouncyCastle2.Crypto.ICipherParameters)">
            <summary>Initialise the cipher.</summary>
            <remarks>Parameter can either be an AeadParameters or a ParametersWithIV object.</remarks>
            <param name="forEncryption">Initialise for encryption if true, for decryption if false.</param>
            <param name="parameters">The key or other data required by the cipher.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.IAeadCipher.ProcessAadByte(System.Byte)">
            <summary>Add a single byte to the associated data check.</summary>
            <remarks>If the implementation supports it, this will be an online operation and will not retain the associated data.</remarks>
            <param name="input">The byte to be processed.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.IAeadCipher.ProcessAadBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>Add a sequence of bytes to the associated data check.</summary>
            <remarks>If the implementation supports it, this will be an online operation and will not retain the associated data.</remarks>
            <param name="inBytes">The input byte array.</param>
            <param name="inOff">The offset into the input array where the data to be processed starts.</param>
            <param name="len">The number of bytes to be processed.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.IAeadCipher.ProcessByte(System.Byte,System.Byte[],System.Int32)">
             Encrypt/decrypt a single byte.
            
             @param input the byte to be processed.
             @param outBytes the output buffer the processed byte goes into.
             @param outOff the offset into the output byte array the processed data starts at.
             @return the number of bytes written to out.
             @exception DataLengthException if the output buffer is too small.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.IAeadCipher.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
             Process a block of bytes from in putting the result into out.
            
             @param inBytes the input byte array.
             @param inOff the offset into the in array where the data to be processed starts.
             @param len the number of bytes to be processed.
             @param outBytes the output buffer the processed bytes go into.
             @param outOff the offset into the output byte array the processed data starts at.
             @return the number of bytes written to out.
             @exception DataLengthException if the output buffer is too small.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.IAeadCipher.DoFinal(System.Byte[],System.Int32)">
             Finish the operation either appending or verifying the MAC at the end of the data.
            
             @param outBytes space for any resulting output data.
             @param outOff offset into out to start copying the data at.
             @return number of bytes written into out.
             @throws InvalidOperationException if the cipher is in an inappropriate state.
             @throws InvalidCipherTextException if the MAC fails to match.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.IAeadCipher.GetMac">
             Return the value of the MAC associated with the last stream processed.
            
             @return MAC for plaintext data.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.IAeadCipher.GetUpdateOutputSize(System.Int32)">
             Return the size of the output buffer required for a ProcessBytes
             an input of len bytes.
            
             @param len the length of the input.
             @return the space required to accommodate a call to ProcessBytes
             with len bytes of input.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.IAeadCipher.GetOutputSize(System.Int32)">
             Return the size of the output buffer required for a ProcessBytes plus a
             DoFinal with an input of len bytes.
            
             @param len the length of the input.
             @return the space required to accommodate a call to ProcessBytes and DoFinal
             with len bytes of input.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.IAeadCipher.Reset">
            <summary>
            Reset the cipher to the same state as it was after the last init (if there was one).
            </summary>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Modes.OcbBlockCipher">
            An implementation of <a href="http://tools.ietf.org/html/rfc7253">RFC 7253 on The OCB
            Authenticated-Encryption Algorithm</a>, licensed per:
            
            <blockquote><p><a href="http://www.cs.ucdavis.edu/~rogaway/ocb/license1.pdf">License for
            Open-Source Software Implementations of OCB</a> (Jan 9, 2013) - 'License 1'<br/>
            Under this license, you are authorized to make, use, and distribute open-source software
            implementations of OCB. This license terminates for you if you sue someone over their open-source
            software implementation of OCB claiming that you have a patent covering their implementation.
            </p><p>
            This is a non-binding summary of a legal document (the link above). The parameters of the license
            are specified in the license document and that document is controlling.</p></blockquote>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Modes.OfbBlockCipher">
            implements a Output-FeedBack (OFB) mode on top of a simple cipher.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.OfbBlockCipher.#ctor(Org.BouncyCastle2.Crypto.IBlockCipher,System.Int32)">
             Basic constructor.
            
             @param cipher the block cipher to be used as the basis of the
             feedback mode.
             @param blockSize the block size in bits (note: a multiple of 8)
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.OfbBlockCipher.GetUnderlyingCipher">
             return the underlying block cipher that we are wrapping.
            
             @return the underlying block cipher that we are wrapping.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.OfbBlockCipher.Init(System.Boolean,Org.BouncyCastle2.Crypto.ICipherParameters)">
             Initialise the cipher and, possibly, the initialisation vector (IV).
             If an IV isn't passed as part of the parameter, the IV will be all zeros.
             An IV which is too short is handled in FIPS compliant fashion.
            
             @param forEncryption if true the cipher is initialised for
              encryption, if false for decryption.
             @param param the key and other data required by the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.Modes.OfbBlockCipher.AlgorithmName">
             return the algorithm name and mode.
            
             @return the name of the underlying algorithm followed by "/OFB"
             and the block size in bits
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.OfbBlockCipher.GetBlockSize">
             return the block size we are operating at (in bytes).
            
             @return the block size we are operating at (in bytes).
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.OfbBlockCipher.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Process one block of input from the array in and write it to
             the out array.
            
             @param in the array containing the input data.
             @param inOff offset into the in array the data starts at.
             @param out the array the output data will be copied into.
             @param outOff the offset into the out array the output will start at.
             @exception DataLengthException if there isn't enough data in in, or
             space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
             @return the number of bytes processed and produced.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.OfbBlockCipher.Reset">
            reset the feedback vector back to the IV and reset the underlying
            cipher.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Modes.OpenPgpCfbBlockCipher">
                * Implements OpenPGP's rather strange version of Cipher-FeedBack (CFB) mode
                * on top of a simple cipher. This class assumes the IV has been prepended
                * to the data stream already, and just accomodates the reset after
                * (blockSize + 2) bytes have been read.
                * <p>
                * For further info see <a href="http://www.ietf.org/rfc/rfc2440.html">RFC 2440</a>.
            	* </p>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.OpenPgpCfbBlockCipher.#ctor(Org.BouncyCastle2.Crypto.IBlockCipher)">
             Basic constructor.
            
             @param cipher the block cipher to be used as the basis of the
             feedback mode.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.OpenPgpCfbBlockCipher.GetUnderlyingCipher">
             return the underlying block cipher that we are wrapping.
            
             @return the underlying block cipher that we are wrapping.
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.Modes.OpenPgpCfbBlockCipher.AlgorithmName">
             return the algorithm name and mode.
            
             @return the name of the underlying algorithm followed by "/PGPCFB"
             and the block size in bits.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.OpenPgpCfbBlockCipher.GetBlockSize">
             return the block size we are operating at.
            
             @return the block size we are operating at (in bytes).
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.OpenPgpCfbBlockCipher.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Process one block of input from the array in and write it to
             the out array.
            
             @param in the array containing the input data.
             @param inOff offset into the in array the data starts at.
             @param out the array the output data will be copied into.
             @param outOff the offset into the out array the output will start at.
             @exception DataLengthException if there isn't enough data in in, or
             space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
             @return the number of bytes processed and produced.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.OpenPgpCfbBlockCipher.Reset">
            reset the chaining vector back to the IV and reset the underlying
            cipher.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.OpenPgpCfbBlockCipher.Init(System.Boolean,Org.BouncyCastle2.Crypto.ICipherParameters)">
             Initialise the cipher and, possibly, the initialisation vector (IV).
             If an IV isn't passed as part of the parameter, the IV will be all zeros.
             An IV which is too short is handled in FIPS compliant fashion.
            
             @param forEncryption if true the cipher is initialised for
              encryption, if false for decryption.
             @param parameters the key and other data required by the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.OpenPgpCfbBlockCipher.EncryptByte(System.Byte,System.Int32)">
            Encrypt one byte of data according to CFB mode.
            @param data the byte to encrypt
            @param blockOff offset in the current block
            @returns the encrypted byte
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.OpenPgpCfbBlockCipher.EncryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Do the appropriate processing for CFB IV mode encryption.
            
             @param in the array containing the data to be encrypted.
             @param inOff offset into the in array the data starts at.
             @param out the array the encrypted data will be copied into.
             @param outOff the offset into the out array the output will start at.
             @exception DataLengthException if there isn't enough data in in, or
             space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
             @return the number of bytes processed and produced.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.OpenPgpCfbBlockCipher.DecryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Do the appropriate processing for CFB IV mode decryption.
            
             @param in the array containing the data to be decrypted.
             @param inOff offset into the in array the data starts at.
             @param out the array the encrypted data will be copied into.
             @param outOff the offset into the out array the output will start at.
             @exception DataLengthException if there isn't enough data in in, or
             space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
             @return the number of bytes processed and produced.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Modes.SicBlockCipher">
            Implements the Segmented Integer Counter (SIC) mode on top of a simple
            block cipher.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.SicBlockCipher.#ctor(Org.BouncyCastle2.Crypto.IBlockCipher)">
             Basic constructor.
            
             @param c the block cipher to be used.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Modes.SicBlockCipher.GetUnderlyingCipher">
             return the underlying block cipher that we are wrapping.
            
             @return the underlying block cipher that we are wrapping.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Operators.X509Utilities.GetDigestAlgName(Org.BouncyCastle2.Asn1.DerObjectIdentifier)">
            Return the digest algorithm using one of the standard JCA string
            representations rather than the algorithm identifier (if possible).
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Operators.Asn1SignatureFactory">
            <summary>
            Calculator factory class for signature generation in ASN.1 based profiles that use an AlgorithmIdentifier to preserve
            signature algorithm details.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Operators.Asn1SignatureFactory.#ctor(System.String,Org.BouncyCastle2.Crypto.AsymmetricKeyParameter)">
            <summary>
            Base constructor.
            </summary>
            <param name="algorithm">The name of the signature algorithm to use.</param>
            <param name="privateKey">The private key to be used in the signing operation.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Operators.Asn1SignatureFactory.#ctor(System.String,Org.BouncyCastle2.Crypto.AsymmetricKeyParameter,Org.BouncyCastle2.Security.SecureRandom)">
            <summary>
            Constructor which also specifies a source of randomness to be used if one is required.
            </summary>
            <param name="algorithm">The name of the signature algorithm to use.</param>
            <param name="privateKey">The private key to be used in the signing operation.</param>
            <param name="random">The source of randomness to be used in signature calculation.</param>
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.Operators.Asn1SignatureFactory.SignatureAlgNames">
            <summary>
            Allows enumeration of the signature names supported by the verifier provider.
            </summary>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Operators.Asn1VerifierFactory">
            <summary>
            Verifier class for signature verification in ASN.1 based profiles that use an AlgorithmIdentifier to preserve
            signature algorithm details.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Operators.Asn1VerifierFactory.#ctor(System.String,Org.BouncyCastle2.Crypto.AsymmetricKeyParameter)">
            <summary>
            Base constructor.
            </summary>
            <param name="algorithm">The name of the signature algorithm to use.</param>
            <param name="publicKey">The public key to be used in the verification operation.</param>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Operators.Asn1VerifierFactoryProvider">
            <summary>
            Provider class which supports dynamic creation of signature verifiers.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Operators.Asn1VerifierFactoryProvider.#ctor(Org.BouncyCastle2.Crypto.AsymmetricKeyParameter)">
            <summary>
            Base constructor - specify the public key to be used in verification.
            </summary>
            <param name="publicKey">The public key to be used in creating verifiers provided by this object.</param>
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.Operators.Asn1VerifierFactoryProvider.SignatureAlgNames">
            <summary>
            Allows enumeration of the signature names supported by the verifier provider.
            </summary>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Paddings.IBlockCipherPadding">
            Block cipher padders are expected to conform to this interface
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Paddings.IBlockCipherPadding.Init(Org.BouncyCastle2.Security.SecureRandom)">
             Initialise the padder.
            
             @param param parameters, if any required.
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.Paddings.IBlockCipherPadding.PaddingName">
             Return the name of the algorithm the cipher implements.
            
             @return the name of the algorithm the cipher implements.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Paddings.IBlockCipherPadding.AddPadding(System.Byte[],System.Int32)">
            add the pad bytes to the passed in block, returning the
            number of bytes added.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Paddings.IBlockCipherPadding.PadCount(System.Byte[])">
            return the number of pad bytes present in the block.
            @exception InvalidCipherTextException if the padding is badly formed
            or invalid.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Paddings.ISO10126d2Padding">
            A padder that adds ISO10126-2 padding to a block.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Paddings.ISO10126d2Padding.Init(Org.BouncyCastle2.Security.SecureRandom)">
             Initialise the padder.
            
             @param random a SecureRandom if available.
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.Paddings.ISO10126d2Padding.PaddingName">
             Return the name of the algorithm the cipher implements.
            
             @return the name of the algorithm the cipher implements.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Paddings.ISO10126d2Padding.AddPadding(System.Byte[],System.Int32)">
            add the pad bytes to the passed in block, returning the
            number of bytes added.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Paddings.ISO10126d2Padding.PadCount(System.Byte[])">
            return the number of pad bytes present in the block.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Paddings.ISO7816d4Padding">
            A padder that adds the padding according to the scheme referenced in
            ISO 7814-4 - scheme 2 from ISO 9797-1. The first byte is 0x80, rest is 0x00
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Paddings.ISO7816d4Padding.Init(Org.BouncyCastle2.Security.SecureRandom)">
             Initialise the padder.
            
             @param random - a SecureRandom if available.
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.Paddings.ISO7816d4Padding.PaddingName">
             Return the name of the algorithm the padder implements.
            
             @return the name of the algorithm the padder implements.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Paddings.ISO7816d4Padding.AddPadding(System.Byte[],System.Int32)">
            add the pad bytes to the passed in block, returning the
            number of bytes added.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Paddings.ISO7816d4Padding.PadCount(System.Byte[])">
            return the number of pad bytes present in the block.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Paddings.PaddedBufferedBlockCipher">
            A wrapper class that allows block ciphers to be used to process data in
            a piecemeal fashion with padding. The PaddedBufferedBlockCipher
            outputs a block only when the buffer is full and more data is being added,
            or on a doFinal (unless the current block in the buffer is a pad block).
            The default padding mechanism used is the one outlined in Pkcs5/Pkcs7.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Paddings.PaddedBufferedBlockCipher.#ctor(Org.BouncyCastle2.Crypto.IBlockCipher,Org.BouncyCastle2.Crypto.Paddings.IBlockCipherPadding)">
             Create a buffered block cipher with the desired padding.
            
             @param cipher the underlying block cipher this buffering object wraps.
             @param padding the padding type.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Paddings.PaddedBufferedBlockCipher.#ctor(Org.BouncyCastle2.Crypto.IBlockCipher)">
             Create a buffered block cipher Pkcs7 padding
            
             @param cipher the underlying block cipher this buffering object wraps.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Paddings.PaddedBufferedBlockCipher.Init(System.Boolean,Org.BouncyCastle2.Crypto.ICipherParameters)">
             initialise the cipher.
            
             @param forEncryption if true the cipher is initialised for
              encryption, if false for decryption.
             @param param the key and other data required by the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Paddings.PaddedBufferedBlockCipher.GetOutputSize(System.Int32)">
             return the minimum size of the output buffer required for an update
             plus a doFinal with an input of len bytes.
            
             @param len the length of the input.
             @return the space required to accommodate a call to update and doFinal
             with len bytes of input.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Paddings.PaddedBufferedBlockCipher.GetUpdateOutputSize(System.Int32)">
             return the size of the output buffer required for an update
             an input of len bytes.
            
             @param len the length of the input.
             @return the space required to accommodate a call to update
             with len bytes of input.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Paddings.PaddedBufferedBlockCipher.ProcessByte(System.Byte,System.Byte[],System.Int32)">
             process a single byte, producing an output block if necessary.
            
             @param in the input byte.
             @param out the space for any output that might be produced.
             @param outOff the offset from which the output will be copied.
             @return the number of output bytes copied to out.
             @exception DataLengthException if there isn't enough space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Paddings.PaddedBufferedBlockCipher.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
             process an array of bytes, producing output if necessary.
            
             @param in the input byte array.
             @param inOff the offset at which the input data starts.
             @param len the number of bytes to be copied out of the input array.
             @param out the space for any output that might be produced.
             @param outOff the offset from which the output will be copied.
             @return the number of output bytes copied to out.
             @exception DataLengthException if there isn't enough space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Paddings.PaddedBufferedBlockCipher.DoFinal(System.Byte[],System.Int32)">
             Process the last block in the buffer. If the buffer is currently
             full and padding needs to be added a call to doFinal will produce
             2 * GetBlockSize() bytes.
            
             @param out the array the block currently being held is copied into.
             @param outOff the offset at which the copying starts.
             @return the number of output bytes copied to out.
             @exception DataLengthException if there is insufficient space in out for
             the output or we are decrypting and the input is not block size aligned.
             @exception InvalidOperationException if the underlying cipher is not
             initialised.
             @exception InvalidCipherTextException if padding is expected and not found.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Paddings.Pkcs7Padding">
            A padder that adds Pkcs7/Pkcs5 padding to a block.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Paddings.Pkcs7Padding.Init(Org.BouncyCastle2.Security.SecureRandom)">
             Initialise the padder.
            
             @param random - a SecureRandom if available.
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.Paddings.Pkcs7Padding.PaddingName">
             Return the name of the algorithm the cipher implements.
            
             @return the name of the algorithm the cipher implements.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Paddings.Pkcs7Padding.AddPadding(System.Byte[],System.Int32)">
            add the pad bytes to the passed in block, returning the
            number of bytes added.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Paddings.Pkcs7Padding.PadCount(System.Byte[])">
            return the number of pad bytes present in the block.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Paddings.TbcPadding">
            <summary> A padder that adds Trailing-Bit-Compliment padding to a block.
            <p>
            This padding pads the block out compliment of the last bit
            of the plain text.
            </p>
            </summary>
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.Paddings.TbcPadding.PaddingName">
            <summary> Return the name of the algorithm the cipher implements.</summary>
            <returns> the name of the algorithm the cipher implements.
            </returns>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Paddings.TbcPadding.Init(Org.BouncyCastle2.Security.SecureRandom)">
            <summary> Initialise the padder.</summary>
            <param name="random">- a SecureRandom if available.
            </param>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Paddings.TbcPadding.AddPadding(System.Byte[],System.Int32)">
            <summary> add the pad bytes to the passed in block, returning the
            number of bytes added.
            <p>
            Note: this assumes that the last block of plain text is always
            passed to it inside in. i.e. if inOff is zero, indicating the
            entire block is to be overwritten with padding the value of in
            should be the same as the last block of plain text.
            </p>
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Paddings.TbcPadding.PadCount(System.Byte[])">
            <summary> return the number of pad bytes present in the block.</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Paddings.X923Padding">
            A padder that adds X9.23 padding to a block - if a SecureRandom is
            passed in random padding is assumed, otherwise padding with zeros is used.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Paddings.X923Padding.Init(Org.BouncyCastle2.Security.SecureRandom)">
             Initialise the padder.
            
             @param random a SecureRandom if one is available.
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.Paddings.X923Padding.PaddingName">
             Return the name of the algorithm the cipher implements.
            
             @return the name of the algorithm the cipher implements.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Paddings.X923Padding.AddPadding(System.Byte[],System.Int32)">
            add the pad bytes to the passed in block, returning the
            number of bytes added.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Paddings.X923Padding.PadCount(System.Byte[])">
            return the number of pad bytes present in the block.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Paddings.ZeroBytePadding">
            <summary> A padder that adds Null byte padding to a block.</summary>
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.Paddings.ZeroBytePadding.PaddingName">
             <summary> Return the name of the algorithm the cipher implements.
            
             </summary>
             <returns> the name of the algorithm the cipher implements.
             </returns>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Paddings.ZeroBytePadding.Init(Org.BouncyCastle2.Security.SecureRandom)">
             <summary> Initialise the padder.
            
             </summary>
             <param name="random">- a SecureRandom if available.
             </param>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Paddings.ZeroBytePadding.AddPadding(System.Byte[],System.Int32)">
            <summary> add the pad bytes to the passed in block, returning the
            number of bytes added.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Paddings.ZeroBytePadding.PadCount(System.Byte[])">
            <summary> return the number of pad bytes present in the block.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Parameters.AeadParameters.#ctor(Org.BouncyCastle2.Crypto.Parameters.KeyParameter,System.Int32,System.Byte[])">
             Base constructor.
            
             @param key key to be used by underlying cipher
             @param macSize macSize in bits
             @param nonce nonce to be used
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Parameters.AeadParameters.#ctor(Org.BouncyCastle2.Crypto.Parameters.KeyParameter,System.Int32,System.Byte[],System.Byte[])">
             Base constructor.
            
             @param key key to be used by underlying cipher
             @param macSize macSize in bits
             @param nonce nonce to be used
             @param associatedText associated text, if any
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Parameters.DesEdeParameters.IsWeakKey(System.Byte[],System.Int32,System.Int32)">
             return true if the passed in key is a DES-EDE weak key.
            
             @param key bytes making up the key
             @param offset offset into the byte array the key starts at
             @param length number of bytes making up the key
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Parameters.DesEdeParameters.IsWeakKey(System.Byte[],System.Int32)">
             return true if the passed in key is a DES-EDE weak key.
            
             @param key bytes making up the key
             @param offset offset into the byte array the key starts at
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Parameters.DesEdeParameters.IsRealEdeKey(System.Byte[],System.Int32)">
             return true if the passed in key is a real 2/3 part DES-EDE key.
            
             @param key bytes making up the key
             @param offset offset into the byte array the key starts at
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Parameters.DesEdeParameters.IsReal2Key(System.Byte[],System.Int32)">
             return true if the passed in key is a real 2 part DES-EDE key.
            
             @param key bytes making up the key
             @param offset offset into the byte array the key starts at
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Parameters.DesEdeParameters.IsReal3Key(System.Byte[],System.Int32)">
             return true if the passed in key is a real 3 part DES-EDE key.
            
             @param key bytes making up the key
             @param offset offset into the byte array the key starts at
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Parameters.DesParameters.IsWeakKey(System.Byte[],System.Int32)">
            DES has 16 weak keys.  This method will check
            if the given DES key material is weak or semi-weak.
            Key material that is too short is regarded as weak.
            <p>
            See <a href="http://www.counterpane.com/applied.html">"Applied
            Cryptography"</a> by Bruce Schneier for more information.
            </p>
            @return true if the given DES key material is weak or semi-weak,
                false otherwise.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Parameters.DesParameters.SetOddParity(System.Byte[])">
             DES Keys use the LSB as the odd parity bit.  This can
             be used to check for corrupt keys.
            
             @param bytes the byte array to set the parity on.
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.Parameters.DHParameters.M">
            <summary>The minimum bitlength of the private value.</summary>
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.Parameters.DHParameters.L">
            <summary>The bitlength of the private value.</summary>
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.Parameters.ElGamalParameters.G">
            return the generator - g
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.Parameters.ElGamalParameters.L">
            return private value limit - l
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Parameters.HkdfParameters">
            Parameter class for the HkdfBytesGenerator class.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Parameters.HkdfParameters.#ctor(System.Byte[],System.Byte[],System.Byte[])">
             Generates parameters for HKDF, specifying both the optional salt and
             optional info. Step 1: Extract won't be skipped.
            
             @param ikm  the input keying material or seed
             @param salt the salt to use, may be null for a salt for hashLen zeros
             @param info the info to use, may be null for an info field of zero bytes
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Parameters.HkdfParameters.SkipExtractParameters(System.Byte[],System.Byte[])">
             Factory method that makes the HKDF skip the extract part of the key
             derivation function.
            
             @param ikm  the input keying material or seed, directly used for step 2:
                         Expand
             @param info the info to use, may be null for an info field of zero bytes
             @return HKDFParameters that makes the implementation skip step 1
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Parameters.HkdfParameters.GetIkm">
             Returns the input keying material or seed.
            
             @return the keying material
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.Parameters.HkdfParameters.SkipExtract">
             Returns if step 1: extract has to be skipped or not
            
             @return true for skipping, false for no skipping of step 1
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Parameters.HkdfParameters.GetSalt">
             Returns the salt, or null if the salt should be generated as a byte array
             of HashLen zeros.
            
             @return the salt, or null
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Parameters.HkdfParameters.GetInfo">
             Returns the info field, which may be empty (null is converted to empty).
            
             @return the info field, never null
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Parameters.IesParameters">
            parameters for using an integrated cipher in stream mode.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Parameters.IesParameters.#ctor(System.Byte[],System.Byte[],System.Int32)">
            @param derivation the derivation parameter for the KDF function.
            @param encoding the encoding parameter for the KDF function.
            @param macKeySize the size of the MAC key (in bits).
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Parameters.IesWithCipherParameters.#ctor(System.Byte[],System.Byte[],System.Int32,System.Int32)">
            @param derivation the derivation parameter for the KDF function.
            @param encoding the encoding parameter for the KDF function.
            @param macKeySize the size of the MAC key (in bits).
            @param cipherKeySize the size of the associated Cipher key (in bits).
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Parameters.Iso18033KdfParameters">
            parameters for Key derivation functions for ISO-18033
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Parameters.KdfParameters">
            parameters for Key derivation functions for IEEE P1363a
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Parameters.NaccacheSternKeyParameters">
             Public key parameters for NaccacheStern cipher. For details on this cipher,
             please see
            
             http://www.gemplus.com/smart/rd/publications/pdf/NS98pkcs.pdf
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Parameters.NaccacheSternKeyParameters.#ctor(System.Boolean,Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger,System.Int32)">
            @param privateKey
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.Parameters.NaccacheSternKeyParameters.G">
            @return Returns the g.
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.Parameters.NaccacheSternKeyParameters.LowerSigmaBound">
            @return Returns the lowerSigmaBound.
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.Parameters.NaccacheSternKeyParameters.Modulus">
            @return Returns the n.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Parameters.SkeinParameters">
            <summary>
            Parameters for the Skein hash function - a series of byte[] strings identified by integer tags.
            </summary>
            <remarks>
            Parameterised Skein can be used for:
            <ul> 
            <li>MAC generation, by providing a <see cref="M:Org.BouncyCastle2.Crypto.Parameters.SkeinParameters.Builder.SetKey(System.Byte[])">key</see>.</li>
            <li>Randomised hashing, by providing a <see cref="M:Org.BouncyCastle2.Crypto.Parameters.SkeinParameters.Builder.SetNonce(System.Byte[])">nonce</see>.</li>
            <li>A hash function for digital signatures, associating a
            <see cref="M:Org.BouncyCastle2.Crypto.Parameters.SkeinParameters.Builder.SetPublicKey(System.Byte[])">public key</see> with the message digest.</li>
            <li>A key derivation function, by providing a
            <see cref="M:Org.BouncyCastle2.Crypto.Parameters.SkeinParameters.Builder.SetKeyIdentifier(System.Byte[])">key identifier</see>.</li>
            <li>Personalised hashing, by providing a
            <see cref="M:Org.BouncyCastle2.Crypto.Parameters.SkeinParameters.Builder.SetPersonalisation(System.DateTime,System.String,System.String)">recommended format</see> or
            <see cref="M:Org.BouncyCastle2.Crypto.Parameters.SkeinParameters.Builder.SetPersonalisation(System.Byte[])">arbitrary</see> personalisation string.</li>
            </ul>
            </remarks>
            <seealso cref="T:Org.BouncyCastle2.Crypto.Digests.SkeinEngine"/>
            <seealso cref="T:Org.BouncyCastle2.Crypto.Digests.SkeinDigest"/>
            <seealso cref="T:Org.BouncyCastle2.Crypto.Macs.SkeinMac"/>
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Parameters.SkeinParameters.PARAM_TYPE_KEY">
            <summary>
            The parameter type for a secret key, supporting MAC or KDF functions: 0
            </summary>
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Parameters.SkeinParameters.PARAM_TYPE_CONFIG">
            <summary>
            The parameter type for the Skein configuration block: 4
            </summary>
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Parameters.SkeinParameters.PARAM_TYPE_PERSONALISATION">
            <summary>
            The parameter type for a personalisation string: 8
            </summary>
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Parameters.SkeinParameters.PARAM_TYPE_PUBLIC_KEY">
            <summary>
            The parameter type for a public key: 12
            </summary>
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Parameters.SkeinParameters.PARAM_TYPE_KEY_IDENTIFIER">
            <summary>
            The parameter type for a key identifier string: 16
            </summary>
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Parameters.SkeinParameters.PARAM_TYPE_NONCE">
            <summary>
            The parameter type for a nonce: 20
            </summary>
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Parameters.SkeinParameters.PARAM_TYPE_MESSAGE">
            <summary>
            The parameter type for the message: 48
            </summary>
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Parameters.SkeinParameters.PARAM_TYPE_OUTPUT">
            <summary>
            The parameter type for the output transformation: 63
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Parameters.SkeinParameters.GetParameters">
            <summary>
            Obtains a map of type (int) to value (byte[]) for the parameters tracked in this object.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Parameters.SkeinParameters.GetKey">
            <summary>
            Obtains the value of the <see cref="F:Org.BouncyCastle2.Crypto.Parameters.SkeinParameters.PARAM_TYPE_KEY">key parameter</see>, or <code>null</code> if not
            set.
            </summary>
            <returns>The key.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Parameters.SkeinParameters.GetPersonalisation">
            <summary>
            Obtains the value of the <see cref="F:Org.BouncyCastle2.Crypto.Parameters.SkeinParameters.PARAM_TYPE_PERSONALISATION">personalisation parameter</see>, or
            <code>null</code> if not set.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Parameters.SkeinParameters.GetPublicKey">
            <summary>
            Obtains the value of the <see cref="F:Org.BouncyCastle2.Crypto.Parameters.SkeinParameters.PARAM_TYPE_PUBLIC_KEY">public key parameter</see>, or
            <code>null</code> if not set.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Parameters.SkeinParameters.GetKeyIdentifier">
            <summary>
            Obtains the value of the <see cref="F:Org.BouncyCastle2.Crypto.Parameters.SkeinParameters.PARAM_TYPE_KEY_IDENTIFIER">key identifier parameter</see>, or
            <code>null</code> if not set.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Parameters.SkeinParameters.GetNonce">
            <summary>
            Obtains the value of the <see cref="F:Org.BouncyCastle2.Crypto.Parameters.SkeinParameters.PARAM_TYPE_NONCE">nonce parameter</see>, or <code>null</code> if
            not set.
            </summary>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Parameters.SkeinParameters.Builder">
            <summary>
            A builder for <see cref="T:Org.BouncyCastle2.Crypto.Parameters.SkeinParameters"/>.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Parameters.SkeinParameters.Builder.Set(System.Int32,System.Byte[])">
            <summary>
            Sets a parameters to apply to the Skein hash function.
            </summary>
            <remarks>
            Parameter types must be in the range 0,5..62, and cannot use the value 48
            (reserved for message body).
            <p/>
            Parameters with type &lt; 48 are processed before
            the message content, parameters with type &gt; 48
            are processed after the message and prior to output.
            </remarks>
            <param name="type">the type of the parameter, in the range 5..62.</param>
            <param name="value">the byte sequence of the parameter.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Parameters.SkeinParameters.Builder.SetKey(System.Byte[])">
            <summary>
            Sets the <see cref="F:Org.BouncyCastle2.Crypto.Parameters.SkeinParameters.PARAM_TYPE_KEY"/> parameter.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Parameters.SkeinParameters.Builder.SetPersonalisation(System.Byte[])">
            <summary>
            Sets the <see cref="F:Org.BouncyCastle2.Crypto.Parameters.SkeinParameters.PARAM_TYPE_PERSONALISATION"/> parameter.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Parameters.SkeinParameters.Builder.SetPersonalisation(System.DateTime,System.String,System.String)">
            <summary>
            Implements the recommended personalisation format for Skein defined in Section 4.11 of
            the Skein 1.3 specification.
            </summary>
            <remarks>
            The format is <code>YYYYMMDD email@address distinguisher</code>, encoded to a byte
            sequence using UTF-8 encoding.
            </remarks>
            <param name="date">the date the personalised application of the Skein was defined.</param>
            <param name="emailAddress">the email address of the creation of the personalised application.</param>
            <param name="distinguisher">an arbitrary personalisation string distinguishing the application.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Parameters.SkeinParameters.Builder.SetPublicKey(System.Byte[])">
            <summary>
            Sets the <see cref="F:Org.BouncyCastle2.Crypto.Parameters.SkeinParameters.PARAM_TYPE_KEY_IDENTIFIER"/> parameter.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Parameters.SkeinParameters.Builder.SetKeyIdentifier(System.Byte[])">
            <summary>
            Sets the <see cref="F:Org.BouncyCastle2.Crypto.Parameters.SkeinParameters.PARAM_TYPE_KEY_IDENTIFIER"/> parameter.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Parameters.SkeinParameters.Builder.SetNonce(System.Byte[])">
            <summary>
            Sets the <see cref="F:Org.BouncyCastle2.Crypto.Parameters.SkeinParameters.PARAM_TYPE_NONCE"/> parameter.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Parameters.SkeinParameters.Builder.Build">
            <summary>
            Constructs a new <see cref="T:Org.BouncyCastle2.Crypto.Parameters.SkeinParameters"/> instance with the parameters provided to this
            builder.
            </summary>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Parameters.TweakableBlockCipherParameters">
            <summary>
            Parameters for tweakable block ciphers.
            </summary>
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.Parameters.TweakableBlockCipherParameters.Key">
            <summary>
            Gets the key.
            </summary>
            <value>the key to use, or <code>null</code> to use the current key.</value>
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.Parameters.TweakableBlockCipherParameters.Tweak">
            <summary>
            Gets the tweak value.
            </summary>
            <value>The tweak to use, or <code>null</code> to use the current tweak.</value>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.PbeParametersGenerator">
            super class for all Password Based Encyrption (Pbe) parameter generator classes.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.PbeParametersGenerator.#ctor">
            base constructor.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.PbeParametersGenerator.Init(System.Byte[],System.Byte[],System.Int32)">
             initialise the Pbe generator.
            
             @param password the password converted into bytes (see below).
             @param salt the salt to be mixed with the password.
             @param iterationCount the number of iterations the "mixing" function
             is to be applied for.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.PbeParametersGenerator.GetPassword">
             return the password byte array.
            
             @return the password byte array.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.PbeParametersGenerator.GetSalt">
             return the salt byte array.
            
             @return the salt byte array.
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.PbeParametersGenerator.IterationCount">
             return the iteration count.
            
             @return the iteration count.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.PbeParametersGenerator.GenerateDerivedParameters(System.Int32)">
             Generate derived parameters for a key of length keySize.
            
             @param keySize the length, in bits, of the key required.
             @return a parameters object representing a key.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.PbeParametersGenerator.GenerateDerivedParameters(System.Int32,System.Int32)">
             Generate derived parameters for a key of length keySize, and
             an initialisation vector (IV) of length ivSize.
            
             @param keySize the length, in bits, of the key required.
             @param ivSize the length, in bits, of the iv required.
             @return a parameters object representing a key and an IV.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.PbeParametersGenerator.GenerateDerivedMacParameters(System.Int32)">
             Generate derived parameters for a key of length keySize, specifically
             for use with a MAC.
            
             @param keySize the length, in bits, of the key required.
             @return a parameters object representing a key.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.PbeParametersGenerator.Pkcs5PasswordToBytes(System.Char[])">
             converts a password to a byte array according to the scheme in
             Pkcs5 (ascii, no padding)
            
             @param password a character array representing the password.
             @return a byte array representing the password.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.PbeParametersGenerator.Pkcs5PasswordToUtf8Bytes(System.Char[])">
             converts a password to a byte array according to the scheme in
             PKCS5 (UTF-8, no padding)
            
             @param password a character array representing the password.
             @return a byte array representing the password.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.PbeParametersGenerator.Pkcs12PasswordToBytes(System.Char[])">
             converts a password to a byte array according to the scheme in
             Pkcs12 (unicode, big endian, 2 zero pad bytes at the end).
            
             @param password a character array representing the password.
             @return a byte array representing the password.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Prng.BasicEntropySourceProvider">
            An EntropySourceProvider where entropy generation is based on a SecureRandom output using SecureRandom.generateSeed().
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Prng.BasicEntropySourceProvider.#ctor(Org.BouncyCastle2.Security.SecureRandom,System.Boolean)">
             Create a entropy source provider based on the passed in SecureRandom.
            
             @param secureRandom the SecureRandom to base EntropySource construction on.
             @param isPredictionResistant boolean indicating if the SecureRandom is based on prediction resistant entropy or not (true if it is).
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Prng.BasicEntropySourceProvider.Get(System.Int32)">
             Return an entropy source that will create bitsRequired bits of entropy on
             each invocation of getEntropy().
            
             @param bitsRequired size (in bits) of entropy to be created by the provided source.
             @return an EntropySource that generates bitsRequired bits of entropy on each call to its getEntropy() method.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Prng.CryptoApiRandomGenerator">
            <summary>
            Uses RandomNumberGenerator.Create() to get randomness generator
            </summary>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Prng.DigestRandomGenerator">
            Random generation based on the digest with counter. Calling AddSeedMaterial will
            always increase the entropy of the hash.
            <p>
            Internal access to the digest is synchronized so a single one of these can be shared.
            </p>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Prng.Drbg.CtrSP800Drbg">
            A SP800-90A CTR DRBG.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Prng.Drbg.CtrSP800Drbg.#ctor(Org.BouncyCastle2.Crypto.IBlockCipher,System.Int32,System.Int32,Org.BouncyCastle2.Crypto.IEntropySource,System.Byte[],System.Byte[])">
            Construct a SP800-90A CTR DRBG.
            <p>
            Minimum entropy requirement is the security strength requested.
            </p>
            @param engine underlying block cipher to use to support DRBG
            @param keySizeInBits size of the key to use with the block cipher.
            @param securityStrength security strength required (in bits)
            @param entropySource source of entropy to use for seeding/reseeding.
            @param personalizationString personalization string to distinguish this DRBG (may be null).
            @param nonce nonce to further distinguish this DRBG (may be null).
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.Prng.Drbg.CtrSP800Drbg.BlockSize">
             Return the block size (in bits) of the DRBG.
            
             @return the number of bits produced on each internal round of the DRBG.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Prng.Drbg.CtrSP800Drbg.Generate(System.Byte[],System.Byte[],System.Boolean)">
             Populate a passed in array with random data.
            
             @param output output array for generated bits.
             @param additionalInput additional input to be added to the DRBG in this step.
             @param predictionResistant true if a reseed should be forced, false otherwise.
            
             @return number of bits generated, -1 if a reseed required.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Prng.Drbg.CtrSP800Drbg.Reseed(System.Byte[])">
             Reseed the DRBG.
            
             @param additionalInput additional input to be added to the DRBG in this step.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Prng.Drbg.CtrSP800Drbg.PadKey(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Pad out a key for TDEA, setting odd parity for each byte.
            
             @param keyMaster
             @param keyOff
             @param tmp
             @param tmpOff
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Prng.Drbg.DrbgUtilities.HashDF(Org.BouncyCastle2.Crypto.IDigest,System.Byte[],System.Int32)">
            Used by both Dual EC and Hash.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Prng.Drbg.HashSP800Drbg">
            A SP800-90A Hash DRBG.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Prng.Drbg.HashSP800Drbg.#ctor(Org.BouncyCastle2.Crypto.IDigest,System.Int32,Org.BouncyCastle2.Crypto.IEntropySource,System.Byte[],System.Byte[])">
            Construct a SP800-90A Hash DRBG.
            <p>
            Minimum entropy requirement is the security strength requested.
            </p>
            @param digest  source digest to use for DRB stream.
            @param securityStrength security strength required (in bits)
            @param entropySource source of entropy to use for seeding/reseeding.
            @param personalizationString personalization string to distinguish this DRBG (may be null).
            @param nonce nonce to further distinguish this DRBG (may be null).
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.Prng.Drbg.HashSP800Drbg.BlockSize">
             Return the block size (in bits) of the DRBG.
            
             @return the number of bits produced on each internal round of the DRBG.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Prng.Drbg.HashSP800Drbg.Generate(System.Byte[],System.Byte[],System.Boolean)">
             Populate a passed in array with random data.
            
             @param output output array for generated bits.
             @param additionalInput additional input to be added to the DRBG in this step.
             @param predictionResistant true if a reseed should be forced, false otherwise.
            
             @return number of bits generated, -1 if a reseed required.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Prng.Drbg.HashSP800Drbg.Reseed(System.Byte[])">
             Reseed the DRBG.
            
             @param additionalInput additional input to be added to the DRBG in this step.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Prng.Drbg.HMacSP800Drbg">
            A SP800-90A HMAC DRBG.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Prng.Drbg.HMacSP800Drbg.#ctor(Org.BouncyCastle2.Crypto.IMac,System.Int32,Org.BouncyCastle2.Crypto.IEntropySource,System.Byte[],System.Byte[])">
            Construct a SP800-90A Hash DRBG.
            <p>
            Minimum entropy requirement is the security strength requested.
            </p>
            @param hMac Hash MAC to base the DRBG on.
            @param securityStrength security strength required (in bits)
            @param entropySource source of entropy to use for seeding/reseeding.
            @param personalizationString personalization string to distinguish this DRBG (may be null).
            @param nonce nonce to further distinguish this DRBG (may be null).
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.Prng.Drbg.HMacSP800Drbg.BlockSize">
             Return the block size (in bits) of the DRBG.
            
             @return the number of bits produced on each round of the DRBG.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Prng.Drbg.HMacSP800Drbg.Generate(System.Byte[],System.Byte[],System.Boolean)">
             Populate a passed in array with random data.
            
             @param output output array for generated bits.
             @param additionalInput additional input to be added to the DRBG in this step.
             @param predictionResistant true if a reseed should be forced, false otherwise.
            
             @return number of bits generated, -1 if a reseed required.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Prng.Drbg.HMacSP800Drbg.Reseed(System.Byte[])">
             Reseed the DRBG.
            
             @param additionalInput additional input to be added to the DRBG in this step.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Prng.Drbg.ISP80090Drbg">
            Interface to SP800-90A deterministic random bit generators.
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.Prng.Drbg.ISP80090Drbg.BlockSize">
             Return the block size of the DRBG.
            
             @return the block size (in bits) produced by each round of the DRBG.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Prng.Drbg.ISP80090Drbg.Generate(System.Byte[],System.Byte[],System.Boolean)">
             Populate a passed in array with random data.
            
             @param output output array for generated bits.
             @param additionalInput additional input to be added to the DRBG in this step.
             @param predictionResistant true if a reseed should be forced, false otherwise.
            
             @return number of bits generated, -1 if a reseed required.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Prng.Drbg.ISP80090Drbg.Reseed(System.Byte[])">
             Reseed the DRBG.
            
             @param additionalInput additional input to be added to the DRBG in this step.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Prng.EntropyUtilities.GenerateSeed(Org.BouncyCastle2.Crypto.IEntropySource,System.Int32)">
             Generate numBytes worth of entropy from the passed in entropy source.
            
             @param entropySource the entropy source to request the data from.
             @param numBytes the number of bytes of entropy requested.
             @return a byte array populated with the random data.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Prng.IRandomGenerator">
            <remarks>Generic interface for objects generating random bytes.</remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Prng.IRandomGenerator.AddSeedMaterial(System.Byte[])">
            <summary>Add more seed material to the generator.</summary>
            <param name="seed">A byte array to be mixed into the generator's state.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Prng.IRandomGenerator.AddSeedMaterial(System.Int64)">
            <summary>Add more seed material to the generator.</summary>
            <param name="seed">A long value to be mixed into the generator's state.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Prng.IRandomGenerator.NextBytes(System.Byte[])">
            <summary>Fill byte array with random values.</summary>
            <param name="bytes">Array to be filled.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Prng.IRandomGenerator.NextBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>Fill byte array with random values.</summary>
            <param name="bytes">Array to receive bytes.</param>
            <param name="start">Index to start filling at.</param>
            <param name="len">Length of segment to fill.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Prng.SP800SecureRandom.Reseed(System.Byte[])">
            <summary>Force a reseed of the DRBG.</summary>
            <param name="additionalInput">optional additional input</param>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Prng.SP800SecureRandomBuilder">
            Builder class for making SecureRandom objects based on SP 800-90A Deterministic Random Bit Generators (DRBG).
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Prng.SP800SecureRandomBuilder.#ctor">
            Basic constructor, creates a builder using an EntropySourceProvider based on the default SecureRandom with
            predictionResistant set to false.
            <p>
            Any SecureRandom created from a builder constructed like this will make use of input passed to SecureRandom.setSeed() if
            the default SecureRandom does for its generateSeed() call.
            </p>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Prng.SP800SecureRandomBuilder.#ctor(Org.BouncyCastle2.Security.SecureRandom,System.Boolean)">
            Construct a builder with an EntropySourceProvider based on the passed in SecureRandom and the passed in value
            for prediction resistance.
            <p>
            Any SecureRandom created from a builder constructed like this will make use of input passed to SecureRandom.setSeed() if
            the passed in SecureRandom does for its generateSeed() call.
            </p>
            @param entropySource
            @param predictionResistant
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Prng.SP800SecureRandomBuilder.#ctor(Org.BouncyCastle2.Crypto.IEntropySourceProvider)">
            Create a builder which makes creates the SecureRandom objects from a specified entropy source provider.
            <p>
            <b>Note:</b> If this constructor is used any calls to setSeed() in the resulting SecureRandom will be ignored.
            </p>
            @param entropySourceProvider a provider of EntropySource objects.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Prng.SP800SecureRandomBuilder.SetPersonalizationString(System.Byte[])">
            Set the personalization string for DRBG SecureRandoms created by this builder
            @param personalizationString  the personalisation string for the underlying DRBG.
            @return the current builder.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Prng.SP800SecureRandomBuilder.SetSecurityStrength(System.Int32)">
             Set the security strength required for DRBGs used in building SecureRandom objects.
            
             @param securityStrength the security strength (in bits)
             @return the current builder.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Prng.SP800SecureRandomBuilder.SetEntropyBitsRequired(System.Int32)">
             Set the amount of entropy bits required for seeding and reseeding DRBGs used in building SecureRandom objects.
            
             @param entropyBitsRequired the number of bits of entropy to be requested from the entropy source on each seed/reseed.
             @return the current builder.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Prng.SP800SecureRandomBuilder.BuildHash(Org.BouncyCastle2.Crypto.IDigest,System.Byte[],System.Boolean)">
             Build a SecureRandom based on a SP 800-90A Hash DRBG.
            
             @param digest digest algorithm to use in the DRBG underneath the SecureRandom.
             @param nonce  nonce value to use in DRBG construction.
             @param predictionResistant specify whether the underlying DRBG in the resulting SecureRandom should reseed on each request for bytes.
             @return a SecureRandom supported by a Hash DRBG.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Prng.SP800SecureRandomBuilder.BuildCtr(Org.BouncyCastle2.Crypto.IBlockCipher,System.Int32,System.Byte[],System.Boolean)">
             Build a SecureRandom based on a SP 800-90A CTR DRBG.
            
             @param cipher the block cipher to base the DRBG on.
             @param keySizeInBits key size in bits to be used with the block cipher.
             @param nonce nonce value to use in DRBG construction.
             @param predictionResistant  specify whether the underlying DRBG in the resulting SecureRandom should reseed on each request for bytes.
             @return  a SecureRandom supported by a CTR DRBG.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Prng.SP800SecureRandomBuilder.BuildHMac(Org.BouncyCastle2.Crypto.IMac,System.Byte[],System.Boolean)">
             Build a SecureRandom based on a SP 800-90A HMAC DRBG.
            
             @param hMac HMAC algorithm to use in the DRBG underneath the SecureRandom.
             @param nonce  nonce value to use in DRBG construction.
             @param predictionResistant specify whether the underlying DRBG in the resulting SecureRandom should reseed on each request for bytes.
             @return a SecureRandom supported by a HMAC DRBG.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Prng.X931Rng.#ctor(Org.BouncyCastle2.Crypto.IBlockCipher,System.Byte[],Org.BouncyCastle2.Crypto.IEntropySource)">
            
             @param engine
             @param entropySource
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Prng.X931Rng.Generate(System.Byte[],System.Boolean)">
             Populate a passed in array with random data.
            
             @param output output array for generated bits.
             @param predictionResistant true if a reseed should be forced, false otherwise.
            
             @return number of bits generated, -1 if a reseed required.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Prng.X931Rng.Reseed">
            Reseed the RNG.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Prng.X931SecureRandomBuilder.#ctor">
            Basic constructor, creates a builder using an EntropySourceProvider based on the default SecureRandom with
            predictionResistant set to false.
            <p>
            Any SecureRandom created from a builder constructed like this will make use of input passed to SecureRandom.setSeed() if
            the default SecureRandom does for its generateSeed() call.
            </p>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Prng.X931SecureRandomBuilder.#ctor(Org.BouncyCastle2.Security.SecureRandom,System.Boolean)">
            Construct a builder with an EntropySourceProvider based on the passed in SecureRandom and the passed in value
            for prediction resistance.
            <p>
            Any SecureRandom created from a builder constructed like this will make use of input passed to SecureRandom.setSeed() if
            the passed in SecureRandom does for its generateSeed() call.
            </p>
            @param entropySource
            @param predictionResistant
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Prng.X931SecureRandomBuilder.#ctor(Org.BouncyCastle2.Crypto.IEntropySourceProvider)">
            Create a builder which makes creates the SecureRandom objects from a specified entropy source provider.
            <p>
            <b>Note:</b> If this constructor is used any calls to setSeed() in the resulting SecureRandom will be ignored.
            </p>
            @param entropySourceProvider a provider of EntropySource objects.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Prng.X931SecureRandomBuilder.Build(Org.BouncyCastle2.Crypto.IBlockCipher,Org.BouncyCastle2.Crypto.Parameters.KeyParameter,System.Boolean)">
             Construct a X9.31 secure random generator using the passed in engine and key. If predictionResistant is true the
             generator will be reseeded on each request.
            
             @param engine a block cipher to use as the operator.
             @param key the block cipher key to initialise engine with.
             @param predictionResistant true if engine to be reseeded on each use, false otherwise.
             @return a SecureRandom.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Signers.DsaDigestSigner.Update(System.Byte)">
            update the internal digest with the byte b
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Signers.DsaDigestSigner.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
            update the internal digest with the byte array in
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Signers.DsaDigestSigner.GenerateSignature">
            Generate a signature for the message we've been loaded with using
            the key we were initialised with.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Signers.DsaDigestSigner.VerifySignature(System.Byte[])">
            <returns>true if the internal state represents the signature described in the passed in array.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Signers.DsaDigestSigner.Reset">
            <summary>Reset the internal state</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Signers.DsaSigner">
            The Digital Signature Algorithm - as described in "Handbook of Applied
            Cryptography", pages 452 - 453.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Signers.DsaSigner.#ctor">
            Default configuration, random K values.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Signers.DsaSigner.#ctor(Org.BouncyCastle2.Crypto.Signers.IDsaKCalculator)">
             Configuration with an alternate, possibly deterministic calculator of K.
            
             @param kCalculator a K value calculator.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Signers.DsaSigner.GenerateSignature(System.Byte[])">
             Generate a signature for the given message using the key we were
             initialised with. For conventional DSA the message should be a SHA-1
             hash of the message of interest.
            
             @param message the message that will be verified later.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Signers.DsaSigner.VerifySignature(System.Byte[],Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger)">
            return true if the value r and s represent a DSA signature for
            the passed in message for standard DSA the message should be a
            SHA-1 hash of the real message to be verified.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Signers.ECDsaSigner">
            EC-DSA as described in X9.62
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Signers.ECDsaSigner.#ctor">
            Default configuration, random K values.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Signers.ECDsaSigner.#ctor(Org.BouncyCastle2.Crypto.Signers.IDsaKCalculator)">
             Configuration with an alternate, possibly deterministic calculator of K.
            
             @param kCalculator a K value calculator.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Signers.ECDsaSigner.GenerateSignature(System.Byte[])">
             Generate a signature for the given message using the key we were
             initialised with. For conventional DSA the message should be a SHA-1
             hash of the message of interest.
            
             @param message the message that will be verified later.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Signers.ECDsaSigner.VerifySignature(System.Byte[],Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger)">
            return true if the value r and s represent a DSA signature for
            the passed in message (for standard DSA the message should be
            a SHA-1 hash of the real message to be verified).
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Signers.ECGost3410Signer">
            GOST R 34.10-2001 Signature Algorithm
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Signers.ECGost3410Signer.GenerateSignature(System.Byte[])">
             generate a signature for the given message using the key we were
             initialised with. For conventional GOST3410 the message should be a GOST3411
             hash of the message of interest.
            
             @param message the message that will be verified later.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Signers.ECGost3410Signer.VerifySignature(System.Byte[],Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger)">
            return true if the value r and s represent a GOST3410 signature for
            the passed in message (for standard GOST3410 the message should be
            a GOST3411 hash of the real message to be verified).
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Signers.ECNRSigner">
            EC-NR as described in IEEE 1363-2000
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Signers.ECNRSigner.GenerateSignature(System.Byte[])">
             generate a signature for the given message using the key we were
             initialised with.  Generally, the order of the curve should be at
             least as long as the hash of the message of interest, and with
             ECNR it *must* be at least as long.
            
             @param digest  the digest to be signed.
             @exception DataLengthException if the digest is longer than the key allows
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Signers.ECNRSigner.VerifySignature(System.Byte[],Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger)">
             return true if the value r and s represent a signature for the
             message passed in. Generally, the order of the curve should be at
             least as long as the hash of the message of interest, and with
             ECNR, it *must* be at least as long.  But just in case the signer
             applied mod(n) to the longer digest, this implementation will
             apply mod(n) during verification.
            
             @param digest  the digest to be verified.
             @param r       the r value of the signature.
             @param s       the s value of the signature.
             @exception DataLengthException if the digest is longer than the key allows
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Signers.GenericSigner.Init(System.Boolean,Org.BouncyCastle2.Crypto.ICipherParameters)">
             initialise the signer for signing or verification.
            
             @param forSigning
                        true if for signing, false otherwise
             @param parameters
                        necessary parameters.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Signers.GenericSigner.Update(System.Byte)">
            update the internal digest with the byte b
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Signers.GenericSigner.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
            update the internal digest with the byte array in
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Signers.GenericSigner.GenerateSignature">
            Generate a signature for the message we've been loaded with using the key
            we were initialised with.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Signers.GenericSigner.VerifySignature(System.Byte[])">
            return true if the internal state represents the signature described in
            the passed in array.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Signers.Gost3410DigestSigner.Update(System.Byte)">
            update the internal digest with the byte b
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Signers.Gost3410DigestSigner.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
            update the internal digest with the byte array in
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Signers.Gost3410DigestSigner.GenerateSignature">
            Generate a signature for the message we've been loaded with using
            the key we were initialised with.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Signers.Gost3410DigestSigner.VerifySignature(System.Byte[])">
            <returns>true if the internal state represents the signature described in the passed in array.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Signers.Gost3410DigestSigner.Reset">
            <summary>Reset the internal state</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Signers.Gost3410Signer">
            Gost R 34.10-94 Signature Algorithm
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Signers.Gost3410Signer.GenerateSignature(System.Byte[])">
             generate a signature for the given message using the key we were
             initialised with. For conventional Gost3410 the message should be a Gost3411
             hash of the message of interest.
            
             @param message the message that will be verified later.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Signers.Gost3410Signer.VerifySignature(System.Byte[],Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger)">
            return true if the value r and s represent a Gost3410 signature for
            the passed in message for standard Gost3410 the message should be a
            Gost3411 hash of the real message to be verified.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Signers.HMacDsaKCalculator">
            A deterministic K calculator based on the algorithm in section 3.2 of RFC 6979.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Signers.HMacDsaKCalculator.#ctor(Org.BouncyCastle2.Crypto.IDigest)">
             Base constructor.
            
             @param digest digest to build the HMAC on.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Signers.HMacDsaKCalculator.InitAdditionalInput0(Org.BouncyCastle2.Crypto.Macs.HMac)">
            <summary>Supports use of additional input.</summary>
            <remarks>
            RFC 6979 3.6. Additional data may be added to the input of HMAC [..]. A use case may be a protocol that
            requires a non-deterministic signature algorithm on a system that does not have access to a high-quality
            random source. It suffices that the additional data[..] is non-repeating(e.g., a signature counter or a
            monotonic clock) to ensure "random-looking" signatures are indistinguishable, in a cryptographic way, from
            plain (EC)DSA signatures.
            <para/>
            By default there is no additional input. Override this method to supply additional input, bearing in mind
            that this calculator may be used for many signatures.
            </remarks>
            <param name="hmac0">The <see cref="T:Org.BouncyCastle2.Crypto.Macs.HMac"/> to which the additional input should be added.</param>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Signers.IDsaEncoding">
            <summary>
            An interface for different encoding formats for DSA signatures.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Signers.IDsaEncoding.Decode(Org.BouncyCastle2.Math.BigInteger,System.Byte[])">
            <summary>Decode the (r, s) pair of a DSA signature.</summary>
            <param name="n">The order of the group that r, s belong to.</param>
            <param name="encoding">An encoding of the (r, s) pair of a DSA signature.</param>
            <returns>The (r, s) of a DSA signature, stored in an array of exactly two elements, r followed by s.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Signers.IDsaEncoding.Encode(Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger)">
            <summary>Encode the (r, s) pair of a DSA signature.</summary>
            <param name="n">The order of the group that r, s belong to.</param>
            <param name="r">The r value of a DSA signature.</param>
            <param name="s">The s value of a DSA signature.</param>
            <returns>An encoding of the DSA signature given by the provided (r, s) pair.</returns>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Signers.IDsaKCalculator">
            Interface define calculators of K values for DSA/ECDSA.
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.Signers.IDsaKCalculator.IsDeterministic">
             Return true if this calculator is deterministic, false otherwise.
            
             @return true if deterministic, otherwise false.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Signers.IDsaKCalculator.Init(Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Security.SecureRandom)">
             Non-deterministic initialiser.
            
             @param n the order of the DSA group.
             @param random a source of randomness.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Signers.IDsaKCalculator.Init(Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger,System.Byte[])">
             Deterministic initialiser.
            
             @param n the order of the DSA group.
             @param d the DSA private value.
             @param message the message being signed.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Signers.IDsaKCalculator.NextK">
             Return the next valid value of K.
            
             @return a K value.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Signers.Iso9796d2Signer">
            <summary> ISO9796-2 - mechanism using a hash function with recovery (scheme 1)</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Signers.Iso9796d2Signer.GetRecoveredMessage">
            <summary>
            Return a reference to the recoveredMessage message.
            </summary>
            <returns>The full/partial recoveredMessage message.</returns>
            <seealso cref="M:Org.BouncyCastle2.Crypto.ISignerWithRecovery.GetRecoveredMessage"/>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Signers.Iso9796d2Signer.#ctor(Org.BouncyCastle2.Crypto.IAsymmetricBlockCipher,Org.BouncyCastle2.Crypto.IDigest,System.Boolean)">
            <summary>
            Generate a signer with either implicit or explicit trailers for ISO9796-2.
            </summary>
            <param name="cipher">base cipher to use for signature creation/verification</param>
            <param name="digest">digest to use.</param>
            <param name="isImplicit">whether or not the trailer is implicit or gives the hash.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Signers.Iso9796d2Signer.#ctor(Org.BouncyCastle2.Crypto.IAsymmetricBlockCipher,Org.BouncyCastle2.Crypto.IDigest)">
             <summary> Constructor for a signer with an explicit digest trailer.
            
             </summary>
             <param name="cipher">cipher to use.
             </param>
             <param name="digest">digest to sign with.
             </param>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Signers.Iso9796d2Signer.IsSameAs(System.Byte[],System.Byte[])">
            <summary> compare two byte arrays - constant time.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Signers.Iso9796d2Signer.ClearBlock(System.Byte[])">
            <summary> clear possible sensitive data</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Signers.Iso9796d2Signer.Update(System.Byte)">
            <summary> update the internal digest with the byte b</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Signers.Iso9796d2Signer.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
            <summary> update the internal digest with the byte array in</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Signers.Iso9796d2Signer.Reset">
            <summary> reset the internal state</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Signers.Iso9796d2Signer.GenerateSignature">
            <summary> Generate a signature for the loaded message using the key we were
            initialised with.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Signers.Iso9796d2Signer.VerifySignature(System.Byte[])">
            <summary> return true if the signature represents a ISO9796-2 signature
            for the passed in message.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Signers.Iso9796d2Signer.HasFullMessage">
            <summary>
            Return true if the full message was recoveredMessage.
            </summary>
            <returns> true on full message recovery, false otherwise.</returns>
            <seealso cref="M:Org.BouncyCastle2.Crypto.ISignerWithRecovery.HasFullMessage"/>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Signers.PssSigner">
            <summary> RSA-PSS as described in Pkcs# 1 v 2.1.
            <p>
            Note: the usual value for the salt length is the number of
            bytes in the hash function.</p>
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Signers.PssSigner.#ctor(Org.BouncyCastle2.Crypto.IAsymmetricBlockCipher,Org.BouncyCastle2.Crypto.IDigest,System.Int32)">
            <summary>Basic constructor</summary>
            <param name="cipher">the asymmetric cipher to use.</param>
            <param name="digest">the digest to use.</param>
            <param name="saltLen">the length of the salt to use (in bytes).</param>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Signers.PssSigner.#ctor(Org.BouncyCastle2.Crypto.IAsymmetricBlockCipher,Org.BouncyCastle2.Crypto.IDigest,System.Byte[])">
            <summary>Basic constructor</summary>
            <param name="cipher">the asymmetric cipher to use.</param>
            <param name="digest">the digest to use.</param>
            <param name="salt">the fixed salt to be used.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Signers.PssSigner.ClearBlock(System.Byte[])">
            <summary> clear possible sensitive data</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Signers.PssSigner.Update(System.Byte)">
            <summary> update the internal digest with the byte b</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Signers.PssSigner.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
            <summary> update the internal digest with the byte array in</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Signers.PssSigner.Reset">
            <summary> reset the internal state</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Signers.PssSigner.GenerateSignature">
            <summary> Generate a signature for the message we've been loaded with using
            the key we were initialised with.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Signers.PssSigner.VerifySignature(System.Byte[])">
            <summary> return true if the internal state represents the signature described
            in the passed in array.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Signers.PssSigner.ItoOSP(System.Int32,System.Byte[])">
            <summary> int to octet string.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Signers.PssSigner.MaskGeneratorFunction1(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary> mask generator function, as described in Pkcs1v2.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Signers.RsaDigestSigner.#cctor">
            <summary>
            Load oid table.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Signers.RsaDigestSigner.Init(System.Boolean,Org.BouncyCastle2.Crypto.ICipherParameters)">
             Initialise the signer for signing or verification.
            
             @param forSigning true if for signing, false otherwise
             @param param necessary parameters.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Signers.RsaDigestSigner.Update(System.Byte)">
            update the internal digest with the byte b
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Signers.RsaDigestSigner.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
            update the internal digest with the byte array in
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Signers.RsaDigestSigner.GenerateSignature">
            Generate a signature for the message we've been loaded with using
            the key we were initialised with.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Signers.RsaDigestSigner.VerifySignature(System.Byte[])">
            return true if the internal state represents the signature described
            in the passed in array.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Signers.SM2Signer">
            <summary>The SM2 Digital Signature algorithm.</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Signers.X931Signer">
            X9.31-1998 - signing using a hash.
            <p>
            The message digest hash, H, is encapsulated to form a byte string as follows
            </p>
            <pre>
            EB = 06 || PS || 0xBA || H || TRAILER
            </pre>
            where PS is a string of bytes all of value 0xBB of length such that |EB|=|n|, and TRAILER is the ISO/IEC 10118 part numberâ€  for the digest. The byte string, EB, is converted to an integer value, the message representative, f.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Signers.X931Signer.#ctor(Org.BouncyCastle2.Crypto.IAsymmetricBlockCipher,Org.BouncyCastle2.Crypto.IDigest,System.Boolean)">
             Generate a signer with either implicit or explicit trailers for X9.31.
            
             @param cipher base cipher to use for signature creation/verification
             @param digest digest to use.
             @param implicit whether or not the trailer is implicit or gives the hash.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Signers.X931Signer.#ctor(Org.BouncyCastle2.Crypto.IAsymmetricBlockCipher,Org.BouncyCastle2.Crypto.IDigest)">
             Constructor for a signer with an explicit digest trailer.
            
             @param cipher cipher to use.
             @param digest digest to sign with.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Signers.X931Signer.ClearBlock(System.Byte[])">
            <summary> clear possible sensitive data</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Signers.X931Signer.Update(System.Byte)">
            update the internal digest with the byte b
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Signers.X931Signer.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
            update the internal digest with the byte array in
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Signers.X931Signer.Reset">
            reset the internal state
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Signers.X931Signer.GenerateSignature">
            generate a signature for the loaded message using the key we were
            initialised with.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Signers.X931Signer.VerifySignature(System.Byte[])">
            return true if the signature represents a ISO9796-2 signature
            for the passed in message.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.SimpleBlockResult">
            <summary>
            A simple block result object which just carries a byte array.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.SimpleBlockResult.#ctor(System.Byte[])">
            <summary>
            Base constructor - a wrapper for the passed in byte array.
            </summary>
            <param name="result">The byte array to be wrapped.</param>
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.SimpleBlockResult.Length">
            <summary>
            Return the number of bytes in the result
            </summary>
            <value>The length of the result in bytes.</value>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.SimpleBlockResult.Collect">
            <summary>
            Return the final result of the operation.
            </summary>
            <returns>A block of bytes, representing the result of an operation.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.SimpleBlockResult.Collect(System.Byte[],System.Int32)">
            <summary>
            Store the final result of the operation by copying it into the destination array.
            </summary>
            <returns>The number of bytes copied into destination.</returns>
            <param name="destination">The byte array to copy the result into.</param>
            <param name="offset">The offset into destination to start copying the result at.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.AbstractTlsCipherFactory.CreateCipher(Org.BouncyCastle2.Crypto.Tls.TlsContext,System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.AbstractTlsPeer.Cancel">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Tls.AlertDescription">
            <summary>
            RFC 5246 7.2
            </summary>
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Tls.AlertDescription.close_notify">
            This message notifies the recipient that the sender will not send any more messages on this
            connection. Note that as of TLS 1.1, failure to properly close a connection no longer
            requires that a session not be resumed. This is a change from TLS 1.0 ("The session becomes
            unresumable if any connection is terminated without proper close_notify messages with level
            equal to warning.") to conform with widespread implementation practice.
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Tls.AlertDescription.unexpected_message">
            An inappropriate message was received. This alert is always fatal and should never be
            observed in communication between proper implementations.
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Tls.AlertDescription.bad_record_mac">
            This alert is returned if a record is received with an incorrect MAC. This alert also MUST be
            returned if an alert is sent because a TLSCiphertext decrypted in an invalid way: either it
            wasn't an even multiple of the block length, or its padding values, when checked, weren't
            correct. This message is always fatal and should never be observed in communication between
            proper implementations (except when messages were corrupted in the network).
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Tls.AlertDescription.decryption_failed">
            This alert was used in some earlier versions of TLS, and may have permitted certain attacks
            against the CBC mode [CBCATT]. It MUST NOT be sent by compliant implementations.
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Tls.AlertDescription.record_overflow">
            A TLSCiphertext record was received that had a length more than 2^14+2048 bytes, or a record
            decrypted to a TLSCompressed record with more than 2^14+1024 bytes. This message is always
            fatal and should never be observed in communication between proper implementations (except
            when messages were corrupted in the network).
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Tls.AlertDescription.decompression_failure">
            The decompression function received improper input (e.g., data that would expand to excessive
            length). This message is always fatal and should never be observed in communication between
            proper implementations.
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Tls.AlertDescription.handshake_failure">
            Reception of a handshake_failure alert message indicates that the sender was unable to
            negotiate an acceptable set of security parameters given the options available. This is a
            fatal error.
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Tls.AlertDescription.no_certificate">
            This alert was used in SSLv3 but not any version of TLS. It MUST NOT be sent by compliant
            implementations.
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Tls.AlertDescription.bad_certificate">
            A certificate was corrupt, contained signatures that did not verify correctly, etc.
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Tls.AlertDescription.unsupported_certificate">
            A certificate was of an unsupported type.
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Tls.AlertDescription.certificate_revoked">
            A certificate was revoked by its signer.
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Tls.AlertDescription.certificate_expired">
            A certificate has expired or is not currently valid.
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Tls.AlertDescription.certificate_unknown">
            Some other (unspecified) issue arose in processing the certificate, rendering it
            unacceptable.
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Tls.AlertDescription.illegal_parameter">
            A field in the handshake was out of range or inconsistent with other fields. This message is
            always fatal.
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Tls.AlertDescription.unknown_ca">
            A valid certificate chain or partial chain was received, but the certificate was not accepted
            because the CA certificate could not be located or couldn't be matched with a known, trusted
            CA. This message is always fatal.
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Tls.AlertDescription.access_denied">
            A valid certificate was received, but when access control was applied, the sender decided not
            to proceed with negotiation. This message is always fatal.
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Tls.AlertDescription.decode_error">
            A message could not be decoded because some field was out of the specified range or the
            length of the message was incorrect. This message is always fatal and should never be
            observed in communication between proper implementations (except when messages were corrupted
            in the network).
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Tls.AlertDescription.decrypt_error">
            A handshake cryptographic operation failed, including being unable to correctly verify a
            signature or validate a Finished message. This message is always fatal.
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Tls.AlertDescription.export_restriction">
            This alert was used in some earlier versions of TLS. It MUST NOT be sent by compliant
            implementations.
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Tls.AlertDescription.protocol_version">
            The protocol version the client has attempted to negotiate is recognized but not supported.
            (For example, old protocol versions might be avoided for security reasons.) This message is
            always fatal.
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Tls.AlertDescription.insufficient_security">
            Returned instead of handshake_failure when a negotiation has failed specifically because the
            server requires ciphers more secure than those supported by the client. This message is
            always fatal.
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Tls.AlertDescription.internal_error">
            An internal error unrelated to the peer or the correctness of the protocol (such as a memory
            allocation failure) makes it impossible to continue. This message is always fatal.
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Tls.AlertDescription.user_canceled">
            This handshake is being canceled for some reason unrelated to a protocol failure. If the user
            cancels an operation after the handshake is complete, just closing the connection by sending
            a close_notify is more appropriate. This alert should be followed by a close_notify. This
            message is generally a warning.
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Tls.AlertDescription.no_renegotiation">
            Sent by the client in response to a hello request or by the server in response to a client
            hello after initial handshaking. Either of these would normally lead to renegotiation; when
            that is not appropriate, the recipient should respond with this alert. At that point, the
            original requester can decide whether to proceed with the connection. One case where this
            would be appropriate is where a server has spawned a process to satisfy a request; the
            process might receive security parameters (key length, authentication, etc.) at startup, and
            it might be difficult to communicate changes to these parameters after that point. This
            message is always a warning.
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Tls.AlertDescription.unsupported_extension">
            Sent by clients that receive an extended server hello containing an extension that they did
            not put in the corresponding client hello. This message is always fatal.
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Tls.AlertDescription.certificate_unobtainable">
            This alert is sent by servers who are unable to retrieve a certificate chain from the URL
            supplied by the client (see Section 3.3). This message MAY be fatal - for example if client
            authentication is required by the server for the handshake to continue and the server is
            unable to retrieve the certificate chain, it may send a fatal alert.
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Tls.AlertDescription.unrecognized_name">
            This alert is sent by servers that receive a server_name extension request, but do not
            recognize the server name. This message MAY be fatal.
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Tls.AlertDescription.bad_certificate_status_response">
            This alert is sent by clients that receive an invalid certificate status response (see
            Section 3.6). This message is always fatal.
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Tls.AlertDescription.bad_certificate_hash_value">
            This alert is sent by servers when a certificate hash does not match a client provided
            certificate_hash. This message is always fatal.
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Tls.AlertDescription.unknown_psk_identity">
            If the server does not recognize the PSK identity, it MAY respond with an
            "unknown_psk_identity" alert message.
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Tls.AlertDescription.inappropriate_fallback">
            If TLS_FALLBACK_SCSV appears in ClientHello.cipher_suites and the highest protocol version
            supported by the server is higher than the version indicated in ClientHello.client_version,
            the server MUST respond with a fatal inappropriate_fallback alert [..].
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Tls.AlertLevel">
            <summary>
            RFC 5246 7.2
            </summary>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Tls.ByteQueue">
            <remarks>
            A queue for bytes.
            <p>
            This file could be more optimized.
            </p>
            </remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.ByteQueue.NextTwoPow(System.Int32)">
            <returns>The smallest number which can be written as 2^x which is bigger than i.</returns>
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Tls.ByteQueue.DefaultCapacity">
            The initial size for our buffer.
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Tls.ByteQueue.databuf">
            The buffer where we store our data.
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Tls.ByteQueue.skipped">
            How many bytes at the beginning of the buffer are skipped.
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Tls.ByteQueue.available">
            How many bytes in the buffer are valid data.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.ByteQueue.AddData(System.Byte[],System.Int32,System.Int32)">
            <summary>Add some data to our buffer.</summary>
            <param name="data">A byte-array to read data from.</param>
            <param name="offset">How many bytes to skip at the beginning of the array.</param>
            <param name="len">How many bytes to read from the array.</param>
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.Tls.ByteQueue.Available">
            <summary>The number of bytes which are available in this buffer.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.ByteQueue.CopyTo(System.IO.Stream,System.Int32)">
            <summary>Copy some bytes from the beginning of the data to the provided <c cref="T:System.IO.Stream">Stream</c>.</summary>
            <param name="output">The <c cref="T:System.IO.Stream">Stream</c> to copy the bytes to.</param>
            <param name="length">How many bytes to copy.</param>
            <exception cref="T:System.InvalidOperationException">If insufficient data is available.</exception>
            <exception cref="T:System.IO.IOException">If there is a problem copying the data.</exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.ByteQueue.Read(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>Read data from the buffer.</summary>
            <param name="buf">The buffer where the read data will be copied to.</param>
            <param name="offset">How many bytes to skip at the beginning of buf.</param>
            <param name="len">How many bytes to read at all.</param>
            <param name="skip">How many bytes from our data to skip.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.ByteQueue.ReadFrom(System.Int32)">
            <summary>Return a <c cref="T:System.IO.MemoryStream">MemoryStream</c> over some bytes at the beginning of the data.</summary>
            <param name="length">How many bytes will be readable.</param>
            <returns>A <c cref="T:System.IO.MemoryStream">MemoryStream</c> over the data.</returns>
            <exception cref="T:System.InvalidOperationException">If insufficient data is available.</exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.ByteQueue.RemoveData(System.Int32)">
            <summary>Remove some bytes from our data from the beginning.</summary>
            <param name="i">How many bytes to remove.</param>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Tls.Certificate">
             Parsing and encoding of a <i>Certificate</i> struct from RFC 4346.
             <p/>
             <pre>
             opaque ASN.1Cert&lt;2^24-1&gt;;
            
             struct {
                 ASN.1Cert certificate_list&lt;0..2^24-1&gt;;
             } Certificate;
             </pre>
            
             @see Org.BouncyCastle2.Asn1.X509.X509CertificateStructure
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Tls.Certificate.mCertificateList">
            The certificates.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.Certificate.GetCertificateList">
            @return an array of {@link org.BouncyCastle2.asn1.x509.Certificate} representing a certificate
                    chain.
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.Tls.Certificate.IsEmpty">
            @return <code>true</code> if this certificate chain contains no certificates, or
                    <code>false</code> otherwise.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.Certificate.Encode(System.IO.Stream)">
             Encode this {@link Certificate} to a {@link Stream}.
            
             @param output the {@link Stream} to encode to.
             @throws IOException
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.Certificate.Parse(System.IO.Stream)">
             Parse a {@link Certificate} from a {@link Stream}.
            
             @param input the {@link Stream} to parse from.
             @return a {@link Certificate} object.
             @throws IOException
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Tls.CertificateRequest">
             Parsing and encoding of a <i>CertificateRequest</i> struct from RFC 4346.
             <p/>
             <pre>
             struct {
                 ClientCertificateType certificate_types&lt;1..2^8-1&gt;;
                 DistinguishedName certificate_authorities&lt;3..2^16-1&gt;
             } CertificateRequest;
             </pre>
            
             @see ClientCertificateType
             @see X509Name
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.CertificateRequest.#ctor(System.Byte[],System.Collections.IList,System.Collections.IList)">
            @param certificateTypes       see {@link ClientCertificateType} for valid constants.
            @param certificateAuthorities an {@link IList} of {@link X509Name}.
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.Tls.CertificateRequest.CertificateTypes">
            @return an array of certificate types
            @see {@link ClientCertificateType}
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.Tls.CertificateRequest.SupportedSignatureAlgorithms">
            @return an {@link IList} of {@link SignatureAndHashAlgorithm} (or null before TLS 1.2).
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.Tls.CertificateRequest.CertificateAuthorities">
            @return an {@link IList} of {@link X509Name}
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.CertificateRequest.Encode(System.IO.Stream)">
             Encode this {@link CertificateRequest} to a {@link Stream}.
            
             @param output the {@link Stream} to encode to.
             @throws IOException
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.CertificateRequest.Parse(Org.BouncyCastle2.Crypto.Tls.TlsContext,System.IO.Stream)">
            Parse a {@link CertificateRequest} from a {@link Stream}.
            
            @param context
                       the {@link TlsContext} of the current connection.
            @param input
                       the {@link Stream} to parse from.
            @return a {@link CertificateRequest} object.
            @throws IOException
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.CertificateStatus.Encode(System.IO.Stream)">
            Encode this {@link CertificateStatus} to a {@link Stream}.
            
            @param output
                       the {@link Stream} to encode to.
            @throws IOException
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.CertificateStatus.Parse(System.IO.Stream)">
            Parse a {@link CertificateStatus} from a {@link Stream}.
            
            @param input
                       the {@link Stream} to parse from.
            @return a {@link CertificateStatus} object.
            @throws IOException
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.CertificateStatusRequest.Encode(System.IO.Stream)">
            Encode this {@link CertificateStatusRequest} to a {@link Stream}.
            
            @param output
                       the {@link Stream} to encode to.
            @throws IOException
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.CertificateStatusRequest.Parse(System.IO.Stream)">
            Parse a {@link CertificateStatusRequest} from a {@link Stream}.
            
            @param input
                       the {@link Stream} to parse from.
            @return a {@link CertificateStatusRequest} object.
            @throws IOException
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Tls.CertificateType">
            RFC 6091 
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.CertificateUrl.#ctor(System.Byte,System.Collections.IList)">
            @param type
                       see {@link CertChainType} for valid constants.
            @param urlAndHashList
                       a {@link IList} of {@link UrlAndHash}.
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.Tls.CertificateUrl.Type">
            @return {@link CertChainType}
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.Tls.CertificateUrl.UrlAndHashList">
            @return an {@link IList} of {@link UrlAndHash} 
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.CertificateUrl.Encode(System.IO.Stream)">
             Encode this {@link CertificateUrl} to a {@link Stream}.
            
             @param output the {@link Stream} to encode to.
             @throws IOException
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.CertificateUrl.parse(Org.BouncyCastle2.Crypto.Tls.TlsContext,System.IO.Stream)">
            Parse a {@link CertificateUrl} from a {@link Stream}.
            
            @param context
                       the {@link TlsContext} of the current connection.
            @param input
                       the {@link Stream} to parse from.
            @return a {@link CertificateUrl} object.
            @throws IOException
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Tls.Chacha20Poly1305">
            draft-ietf-tls-chacha20-poly1305-04
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.Chacha20Poly1305.#ctor(Org.BouncyCastle2.Crypto.Tls.TlsContext)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.Chacha20Poly1305.EncodePlaintext(System.Int64,System.Byte,System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.Chacha20Poly1305.DecodeCiphertext(System.Int64,System.Byte,System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.Chacha20Poly1305.GetAdditionalData(System.Int64,System.Byte,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Tls.CipherSuite">
            <summary>
            RFC 2246 A.5
            </summary>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Tls.CipherType">
            <summary>RFC 2246</summary>
            <remarks>
            Note that the values here are implementation-specific and arbitrary. It is recommended not to
            depend on the particular values (e.g. serialization).
            </remarks>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Tls.CombinedHash">
            A combined hash, which implements md5(m) || sha1(m).
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.CombinedHash.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
            @see org.BouncyCastle2.crypto.Digest#update(byte[], int, int)
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.CombinedHash.DoFinal(System.Byte[],System.Int32)">
            @see org.BouncyCastle2.crypto.Digest#doFinal(byte[], int)
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.CombinedHash.Reset">
            @see org.BouncyCastle2.crypto.Digest#reset()
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Tls.CompressionMethod">
            <summary>
            RFC 2246 6.1
            </summary>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Tls.ConnectionEnd">
            <summary>RFC 2246</summary>
            <remarks>
            Note that the values here are implementation-specific and arbitrary. It is recommended not to
            depend on the particular values (e.g. serialization).
            </remarks>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Tls.ContentType">
            RFC 2246 6.2.1
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.DatagramTransport.GetReceiveLimit">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.DatagramTransport.GetSendLimit">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.DatagramTransport.Receive(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.DatagramTransport.Send(System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.DefaultTlsCipherFactory.CreateCipher(Org.BouncyCastle2.Crypto.Tls.TlsContext,System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.DefaultTlsCipherFactory.CreateAESCipher(Org.BouncyCastle2.Crypto.Tls.TlsContext,System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.DefaultTlsCipherFactory.CreateCamelliaCipher(Org.BouncyCastle2.Crypto.Tls.TlsContext,System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.DefaultTlsCipherFactory.CreateChaCha20Poly1305(Org.BouncyCastle2.Crypto.Tls.TlsContext)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.DefaultTlsCipherFactory.CreateCipher_Aes_Ccm(Org.BouncyCastle2.Crypto.Tls.TlsContext,System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.DefaultTlsCipherFactory.CreateCipher_Aes_Gcm(Org.BouncyCastle2.Crypto.Tls.TlsContext,System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.DefaultTlsCipherFactory.CreateCipher_Aes_Ocb(Org.BouncyCastle2.Crypto.Tls.TlsContext,System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.DefaultTlsCipherFactory.CreateCipher_Camellia_Gcm(Org.BouncyCastle2.Crypto.Tls.TlsContext,System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.DefaultTlsCipherFactory.CreateDesEdeCipher(Org.BouncyCastle2.Crypto.Tls.TlsContext,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.DefaultTlsCipherFactory.CreateNullCipher(Org.BouncyCastle2.Crypto.Tls.TlsContext,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.DefaultTlsCipherFactory.CreateRC4Cipher(Org.BouncyCastle2.Crypto.Tls.TlsContext,System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.DefaultTlsCipherFactory.CreateSeedCipher(Org.BouncyCastle2.Crypto.Tls.TlsContext,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.DefaultTlsCipherFactory.CreateHMacDigest(System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.DefaultTlsDHVerifier.#ctor">
            <summary>Accept various standard DH groups with 'P' at least <c>DefaultMinimumPrimeBits</c> bits.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.DefaultTlsDHVerifier.#ctor(System.Int32)">
            <summary>Accept various standard DH groups with 'P' at least the specified number of bits.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.DefaultTlsDHVerifier.#ctor(System.Collections.IList,System.Int32)">
            <summary>Accept a custom set of group parameters, subject to a minimum bitlength for 'P'.</summary>
            <param name="groups">An <c>IList</c> of acceptable <c>DHParameters</c>.</param>
            <param name="minimumPrimeBits">The minimum acceptable bitlength of the 'P' parameter.</param>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Tls.DeferredHash">
            Buffers input until the hash algorithm is determined.
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.Tls.DigitallySigned.Algorithm">
            @return a {@link SignatureAndHashAlgorithm} (or null before TLS 1.2).
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.DigitallySigned.Encode(System.IO.Stream)">
            Encode this {@link DigitallySigned} to a {@link Stream}.
            
            @param output
                       the {@link Stream} to encode to.
            @throws IOException
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.DigitallySigned.Parse(Org.BouncyCastle2.Crypto.Tls.TlsContext,System.IO.Stream)">
            Parse a {@link DigitallySigned} from a {@link Stream}.
            
            @param context
                       the {@link TlsContext} of the current connection.
            @param input
                       the {@link Stream} to parse from.
            @return a {@link DigitallySigned} object.
            @throws IOException
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.DtlsHandshakeRetransmit.ReceivedHandshakeRecord(System.Int32,System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.DtlsRecordLayer.Send(System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.DtlsReliableHandshake.CheckInboundFlight">
            Check that there are no "extra" messages left in the current inbound flight
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Tls.DtlsReplayWindow">
            RFC 4347 4.1.2.5 Anti-replay
            <p/>
            Support fast rejection of duplicate records by maintaining a sliding receive window
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.DtlsReplayWindow.ShouldDiscard(System.Int64)">
             Check whether a received record with the given sequence number should be rejected as a duplicate.
            
             @param seq the 48-bit DTLSPlainText.sequence_number field of a received record.
             @return true if the record should be discarded without further processing.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.DtlsReplayWindow.ReportAuthenticated(System.Int64)">
             Report that a received record with the given sequence number passed authentication checks.
            
             @param seq the 48-bit DTLSPlainText.sequence_number field of an authenticated record.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.DtlsReplayWindow.Reset">
            When a new epoch begins, sequence numbers begin again at 0
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Tls.ECBasisType">
            <summary>RFC 4492 5.4. (Errata ID: 2389)</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Tls.ECCurveType">
            <summary>
            RFC 4492 5.4
            </summary>
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Tls.ECCurveType.explicit_prime">
            Indicates the elliptic curve domain parameters are conveyed verbosely, and the
            underlying finite field is a prime field.
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Tls.ECCurveType.explicit_char2">
            Indicates the elliptic curve domain parameters are conveyed verbosely, and the
            underlying finite field is a characteristic-2 field.
        </member>
        <member name="F:Org.BouncyCastle2.Crypto.Tls.ECCurveType.named_curve">
            Indicates that a named curve is used. This option SHOULD be used when applicable.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Tls.ECPointFormat">
            <summary>
            RFC 4492 5.1.2
            </summary>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Tls.EncryptionAlgorithm">
            <summary>RFC 2246</summary>
            <remarks>
            Note that the values here are implementation-specific and arbitrary. It is recommended not to
            depend on the particular values (e.g. serialization).
            </remarks>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Tls.ExporterLabel">
            <summary>RFC 5705</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Tls.HashAlgorithm">
            <summary>RFC 5246 7.4.1.4.1</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.HeartbeatExtension.Encode(System.IO.Stream)">
            Encode this {@link HeartbeatExtension} to a {@link Stream}.
            
            @param output
                       the {@link Stream} to encode to.
            @throws IOException
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.HeartbeatExtension.Parse(System.IO.Stream)">
            Parse a {@link HeartbeatExtension} from a {@link Stream}.
            
            @param input
                       the {@link Stream} to parse from.
            @return a {@link HeartbeatExtension} object.
            @throws IOException
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.HeartbeatMessage.Encode(Org.BouncyCastle2.Crypto.Tls.TlsContext,System.IO.Stream)">
            Encode this {@link HeartbeatMessage} to a {@link Stream}.
            
            @param output
                       the {@link Stream} to encode to.
            @throws IOException
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.HeartbeatMessage.Parse(System.IO.Stream)">
            Parse a {@link HeartbeatMessage} from a {@link Stream}.
            
            @param input
                       the {@link Stream} to parse from.
            @return a {@link HeartbeatMessage} object.
            @throws IOException
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Tls.KeyExchangeAlgorithm">
            <summary>RFC 2246</summary>
            <remarks>
            Note that the values here are implementation-specific and arbitrary. It is recommended not to
            depend on the particular values (e.g. serialization).
            </remarks>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Tls.MacAlgorithm">
            <summary>RFC 2246</summary>
            <remarks>
            Note that the values here are implementation-specific and arbitrary. It is recommended not to
            depend on the particular values (e.g. serialization).
            </remarks>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Tls.NamedCurve">
            <summary>
            RFC 4492 5.1.1
            The named curves defined here are those specified in SEC 2 [13]. Note that many of
            these curves are also recommended in ANSI X9.62 [7] and FIPS 186-2 [11]. Values 0xFE00
            through 0xFEFF are reserved for private use. Values 0xFF01 and 0xFF02 indicate that the
            client supports arbitrary prime and characteristic-2 curves, respectively (the curve
            parameters must be encoded explicitly in ECParameters).
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.NewSessionTicket.Encode(System.IO.Stream)">
             Encode this {@link NewSessionTicket} to a {@link Stream}.
            
             @param output the {@link Stream} to encode to.
             @throws IOException
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.NewSessionTicket.Parse(System.IO.Stream)">
             Parse a {@link NewSessionTicket} from a {@link Stream}.
            
             @param input the {@link Stream} to parse from.
             @return a {@link NewSessionTicket} object.
             @throws IOException
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Tls.OcspStatusRequest">
            RFC 3546 3.6
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.OcspStatusRequest.#ctor(System.Collections.IList,Org.BouncyCastle2.Asn1.X509.X509Extensions)">
            @param responderIDList
                       an {@link IList} of {@link ResponderID}, specifying the list of trusted OCSP
                       responders. An empty list has the special meaning that the responders are
                       implicitly known to the server - e.g., by prior arrangement.
            @param requestExtensions
                       OCSP request extensions. A null value means that there are no extensions.
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.Tls.OcspStatusRequest.ResponderIDList">
            @return an {@link IList} of {@link ResponderID}
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.Tls.OcspStatusRequest.RequestExtensions">
            @return OCSP request extensions
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.OcspStatusRequest.Encode(System.IO.Stream)">
            Encode this {@link OcspStatusRequest} to a {@link Stream}.
            
            @param output
                       the {@link Stream} to encode to.
            @throws IOException
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.OcspStatusRequest.Parse(System.IO.Stream)">
            Parse a {@link OcspStatusRequest} from a {@link Stream}.
            
            @param input
                       the {@link Stream} to parse from.
            @return an {@link OcspStatusRequest} object.
            @throws IOException
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Tls.PrfAlgorithm">
            <summary>RFC 5246</summary>
            <remarks>
            Note that the values here are implementation-specific and arbitrary. It is recommended not to
            depend on the particular values (e.g. serialization).
            </remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.ProtocolVersion.Get(System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Tls.RecordStream">
            <summary>An implementation of the TLS 1.0/1.1/1.2 record layer, allowing downgrade to SSLv3.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.RecordStream.SetRestrictReadVersion(System.Boolean)">
            RFC 5246 E.1. "Earlier versions of the TLS specification were not fully clear on what the
            record layer version number (TLSPlaintext.version) should contain when sending ClientHello
            (i.e., before it is known which version of the protocol will be employed). Thus, TLS servers
            compliant with this specification MUST accept any value {03,XX} as the record layer version
            number for ClientHello."
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.Tls.SecurityParameters.Entity">
            @return {@link ConnectionEnd}
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.Tls.SecurityParameters.CipherSuite">
            @return {@link CipherSuite}
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.Tls.SecurityParameters.CompressionAlgorithm">
            @return {@link CompressionMethod}
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.Tls.SecurityParameters.PrfAlgorithm">
            @return {@link PRFAlgorithm}
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.ServerName.Encode(System.IO.Stream)">
            Encode this {@link ServerName} to a {@link Stream}.
            
            @param output
                       the {@link Stream} to encode to.
            @throws IOException
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.ServerName.Parse(System.IO.Stream)">
            Parse a {@link ServerName} from a {@link Stream}.
            
            @param input
                       the {@link Stream} to parse from.
            @return a {@link ServerName} object.
            @throws IOException
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.ServerNameList.#ctor(System.Collections.IList)">
            @param serverNameList an {@link IList} of {@link ServerName}.
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.Tls.ServerNameList.ServerNames">
            @return an {@link IList} of {@link ServerName}.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.ServerNameList.Encode(System.IO.Stream)">
            Encode this {@link ServerNameList} to a {@link Stream}.
            
            @param output
                       the {@link Stream} to encode to.
            @throws IOException
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.ServerNameList.Parse(System.IO.Stream)">
            Parse a {@link ServerNameList} from a {@link Stream}.
            
            @param input
                       the {@link Stream} to parse from.
            @return a {@link ServerNameList} object.
            @throws IOException
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.ServerSrpParams.Encode(System.IO.Stream)">
            Encode this {@link ServerSRPParams} to an {@link OutputStream}.
            
            @param output
                       the {@link OutputStream} to encode to.
            @throws IOException
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.ServerSrpParams.Parse(System.IO.Stream)">
            Parse a {@link ServerSRPParams} from an {@link InputStream}.
            
            @param input
                       the {@link InputStream} to parse from.
            @return a {@link ServerSRPParams} object.
            @throws IOException
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Tls.SignatureAlgorithm">
            RFC 5246 7.4.1.4.1 (in RFC 2246, there were no specific values assigned)
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Tls.SignatureAndHashAlgorithm">
            RFC 5246 7.4.1.4.1
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.SignatureAndHashAlgorithm.#ctor(System.Byte,System.Byte)">
            @param hash      {@link HashAlgorithm}
            @param signature {@link SignatureAlgorithm}
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.Tls.SignatureAndHashAlgorithm.Hash">
            @return {@link HashAlgorithm}
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.Tls.SignatureAndHashAlgorithm.Signature">
            @return {@link SignatureAlgorithm}
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.SignatureAndHashAlgorithm.Encode(System.IO.Stream)">
             Encode this {@link SignatureAndHashAlgorithm} to a {@link Stream}.
            
             @param output the {@link Stream} to encode to.
             @throws IOException
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.SignatureAndHashAlgorithm.Parse(System.IO.Stream)">
             Parse a {@link SignatureAndHashAlgorithm} from a {@link Stream}.
            
             @param input the {@link Stream} to parse from.
             @return a {@link SignatureAndHashAlgorithm} object.
             @throws IOException
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Tls.SimulatedTlsSrpIdentityManager">
            An implementation of {@link TlsSRPIdentityManager} that simulates the existence of "unknown" identities
            to obscure the fact that there is no verifier for them. 
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.SimulatedTlsSrpIdentityManager.GetRfc5054Default(Org.BouncyCastle2.Crypto.Parameters.Srp6GroupParameters,System.Byte[])">
             Create a {@link SimulatedTlsSRPIdentityManager} that implements the algorithm from RFC 5054 2.5.1.3
            
             @param group the {@link SRP6GroupParameters} defining the group that SRP is operating in
             @param seedKey the secret "seed key" referred to in RFC 5054 2.5.1.3
             @return an instance of {@link SimulatedTlsSRPIdentityManager}
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Tls.Ssl3Mac">
            HMAC implementation based on original internet draft for HMAC (RFC 2104)
            
            The difference is that padding is concatentated versus XORed with the key
            
            H(K + opad, H(K + ipad, text))
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.Ssl3Mac.#ctor(Org.BouncyCastle2.Crypto.IDigest)">
            Base constructor for one of the standard digest algorithms that the byteLength of
            the algorithm is know for. Behaviour is undefined for digests other than MD5 or SHA1.
            
            @param digest the digest.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.Ssl3Mac.Reset">
            Reset the mac generator.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsAeadCipher.#ctor(Org.BouncyCastle2.Crypto.Tls.TlsContext,Org.BouncyCastle2.Crypto.Modes.IAeadBlockCipher,Org.BouncyCastle2.Crypto.Modes.IAeadBlockCipher,System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsAeadCipher.#ctor(Org.BouncyCastle2.Crypto.Tls.TlsContext,Org.BouncyCastle2.Crypto.Modes.IAeadBlockCipher,Org.BouncyCastle2.Crypto.Modes.IAeadBlockCipher,System.Int32,System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsAeadCipher.EncodePlaintext(System.Int64,System.Byte,System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsAeadCipher.DecodeCiphertext(System.Int64,System.Byte,System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsAeadCipher.GetAdditionalData(System.Int64,System.Byte,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsAgreementCredentials.GenerateAgreement(Org.BouncyCastle2.Crypto.AsymmetricKeyParameter)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsAuthentication.NotifyServerCertificate(Org.BouncyCastle2.Crypto.Tls.Certificate)">
            <summary>
            Called by the protocol handler to report the server certificate.
            </summary>
            <remarks>
            This method is responsible for certificate verification and validation
            </remarks>
            <param name="serverCertificate">The server <see cref="T:Org.BouncyCastle2.Crypto.Tls.Certificate"/> received</param>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsAuthentication.GetClientCredentials(Org.BouncyCastle2.Crypto.Tls.CertificateRequest)">
            <summary>
            Return client credentials in response to server's certificate request
            </summary>
            <param name="certificateRequest">
            A <see cref="T:Org.BouncyCastle2.Crypto.Tls.CertificateRequest"/> containing server certificate request details
            </param>
            <returns>
            A <see cref="T:Org.BouncyCastle2.Crypto.Tls.TlsCredentials"/> to be used for client authentication
            (or <c>null</c> for no client authentication)
            </returns>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Tls.TlsBlockCipher">
            <summary>
            A generic TLS 1.0-1.2 / SSLv3 block cipher. This can be used for AES or 3DES for example.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsBlockCipher.#ctor(Org.BouncyCastle2.Crypto.Tls.TlsContext,Org.BouncyCastle2.Crypto.IBlockCipher,Org.BouncyCastle2.Crypto.IBlockCipher,Org.BouncyCastle2.Crypto.IDigest,Org.BouncyCastle2.Crypto.IDigest,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsBlockCipher.DecodeCiphertext(System.Int64,System.Byte,System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsCipher.EncodePlaintext(System.Int64,System.Byte,System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsCipher.DecodeCiphertext(System.Int64,System.Byte,System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsCipherFactory.CreateCipher(Org.BouncyCastle2.Crypto.Tls.TlsContext,System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsClient.Init(Org.BouncyCastle2.Crypto.Tls.TlsClientContext)">
            <summary>
            Called at the start of a new TLS session, before any other methods.
            </summary>
            <param name="context">
            A <see cref="T:Org.BouncyCastle2.Crypto.Tls.TlsProtocolHandler"/>
            </param>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsClient.GetSessionToResume">
            <summary>Return the session this client wants to resume, if any.</summary>
            <remarks>Note that the peer's certificate chain for the session (if any) may need to be periodically revalidated.</remarks>
            <returns>
            A <see cref="T:Org.BouncyCastle2.Crypto.Tls.TlsSession"/> representing the resumable session to be used for this connection,
            or null to use a new session.
            </returns>
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.Tls.TlsClient.ClientHelloRecordLayerVersion">
            <summary>
            Return the <see cref="T:Org.BouncyCastle2.Crypto.Tls.ProtocolVersion"/> to use for the <c>TLSPlaintext.version</c> field prior to
            receiving the server version. NOTE: This method is <b>not</b> called for DTLS.
            </summary>
            <remarks>
            See RFC 5246 E.1.: "TLS clients that wish to negotiate with older servers MAY send any value
            {03,XX} as the record layer version number. Typical values would be {03,00}, the lowest
            version number supported by the client, and the value of ClientHello.client_version. No
            single value will guarantee interoperability with all old servers, but this is a complex
            topic beyond the scope of this document."
            </remarks>
            <returns>The <see cref="T:Org.BouncyCastle2.Crypto.Tls.ProtocolVersion"/> to use.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsClient.GetCipherSuites">
            <summary>
            Get the list of cipher suites that this client supports.
            </summary>
            <returns>
            An array of <see cref="T:Org.BouncyCastle2.Crypto.Tls.CipherSuite"/> values, each specifying a supported cipher suite.
            </returns>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsClient.GetCompressionMethods">
            <summary>
            Get the list of compression methods that this client supports.
            </summary>
            <returns>
            An array of <see cref="T:Org.BouncyCastle2.Crypto.Tls.CompressionMethod"/> values, each specifying a supported compression method.
            </returns>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsClient.GetClientExtensions">
            <summary>
            Get the (optional) table of client extensions to be included in (extended) client hello.
            </summary>
            <returns>
            A <see cref="T:System.Collections.IDictionary"/> (Int32 -> byte[]). May be null.
            </returns>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsClient.NotifyServerVersion(Org.BouncyCastle2.Crypto.Tls.ProtocolVersion)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsClient.NotifySessionID(System.Byte[])">
            <summary>
            Notifies the client of the session_id sent in the ServerHello.
            </summary>
            <param name="sessionID">An array of <see cref="T:System.Byte"/></param>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsClient.NotifySelectedCipherSuite(System.Int32)">
            <summary>
            Report the cipher suite that was selected by the server.
            </summary>
            <remarks>
            The protocol handler validates this value against the offered cipher suites
            <seealso cref="M:Org.BouncyCastle2.Crypto.Tls.TlsClient.GetCipherSuites"/>
            </remarks>
            <param name="selectedCipherSuite">
            A <see cref="T:Org.BouncyCastle2.Crypto.Tls.CipherSuite"/>
            </param>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsClient.NotifySelectedCompressionMethod(System.Byte)">
            <summary>
            Report the compression method that was selected by the server.
            </summary>
            <remarks>
            The protocol handler validates this value against the offered compression methods
            <seealso cref="M:Org.BouncyCastle2.Crypto.Tls.TlsClient.GetCompressionMethods"/>
            </remarks>
            <param name="selectedCompressionMethod">
            A <see cref="T:Org.BouncyCastle2.Crypto.Tls.CompressionMethod"/>
            </param>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsClient.ProcessServerExtensions(System.Collections.IDictionary)">
            <summary>
            Report the extensions from an extended server hello.
            </summary>
            <remarks>
            Will only be called if we returned a non-null result from <see cref="M:Org.BouncyCastle2.Crypto.Tls.TlsClient.GetClientExtensions"/>.
            </remarks>
            <param name="serverExtensions">
            A <see cref="T:System.Collections.IDictionary"/>  (Int32 -> byte[])
            </param>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsClient.ProcessServerSupplementalData(System.Collections.IList)">
            <param name="serverSupplementalData">A <see cref="T:System.Collections.IList">list</see> of <see cref="T:Org.BouncyCastle2.Crypto.Tls.SupplementalDataEntry"/></param>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsClient.GetKeyExchange">
            <summary>
            Return an implementation of <see cref="T:Org.BouncyCastle2.Crypto.Tls.TlsKeyExchange"/> to negotiate the key exchange
            part of the protocol.
            </summary>
            <returns>
            A <see cref="T:Org.BouncyCastle2.Crypto.Tls.TlsKeyExchange"/>
            </returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsClient.GetAuthentication">
            <summary>
            Return an implementation of <see cref="T:Org.BouncyCastle2.Crypto.Tls.TlsAuthentication"/> to handle authentication
            part of the protocol.
            </summary>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsClient.GetClientSupplementalData">
            <returns>A <see cref="T:System.Collections.IList">list</see> of <see cref="T:Org.BouncyCastle2.Crypto.Tls.SupplementalDataEntry"/></returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsClient.NotifyNewSessionTicket(Org.BouncyCastle2.Crypto.Tls.NewSessionTicket)">
            <summary>RFC 5077 3.3. NewSessionTicket Handshake Message</summary>
            <remarks>
            This method will be called (only) when a NewSessionTicket handshake message is received. The
            ticket is opaque to the client and clients MUST NOT examine the ticket under the assumption
            that it complies with e.g. <i>RFC 5077 4. Recommended Ticket Construction</i>.
            </remarks>
            <param name="newSessionTicket">The <see cref="T:Org.BouncyCastle2.Crypto.Tls.NewSessionTicket">ticket</see></param>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsClientProtocol.#ctor(System.IO.Stream,Org.BouncyCastle2.Security.SecureRandom)">
            Constructor for blocking mode.
            @param stream The bi-directional stream of data to/from the server
            @param secureRandom Random number generator for various cryptographic functions
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsClientProtocol.#ctor(System.IO.Stream,System.IO.Stream,Org.BouncyCastle2.Security.SecureRandom)">
            Constructor for blocking mode.
            @param input The stream of data from the server
            @param output The stream of data to the server
            @param secureRandom Random number generator for various cryptographic functions
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsClientProtocol.#ctor(Org.BouncyCastle2.Security.SecureRandom)">
            Constructor for non-blocking mode.<br/>
            <br/>
            When data is received, use {@link #offerInput(java.nio.ByteBuffer)} to
            provide the received ciphertext, then use
            {@link #readInput(byte[], int, int)} to read the corresponding cleartext.<br/>
            <br/>
            Similarly, when data needs to be sent, use
            {@link #offerOutput(byte[], int, int)} to provide the cleartext, then use
            {@link #readOutput(byte[], int, int)} to get the corresponding
            ciphertext.
            
            @param secureRandom
                       Random number generator for various cryptographic functions
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsClientProtocol.Connect(Org.BouncyCastle2.Crypto.Tls.TlsClient)">
             Initiates a TLS handshake in the role of client.<br/>
             <br/>
             In blocking mode, this will not return until the handshake is complete.
             In non-blocking mode, use {@link TlsPeer#NotifyHandshakeComplete()} to
             receive a callback when the handshake is complete.
            
             @param tlsClient The {@link TlsClient} to use for the handshake.
             @throws IOException If in blocking mode and handshake was not successful.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsCloseable.Close">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.Tls.TlsContext.ResumableSession">
            Used to get the resumable session, if any, used by this connection. Only available after the
            handshake has successfully completed.
            
            @return A {@link TlsSession} representing the resumable session used by this connection, or
                    null if no resumable session available.
            @see TlsPeer#NotifyHandshakeComplete()
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsContext.ExportKeyingMaterial(System.String,System.Byte[],System.Int32)">
             Export keying material according to RFC 5705: "Keying Material Exporters for TLS".
            
             @param asciiLabel    indicates which application will use the exported keys.
             @param context_value allows the application using the exporter to mix its own data with the TLS PRF for
                                  the exporter output.
             @param length        the number of bytes to generate
             @return a pseudorandom bit string of 'length' bytes generated from the master_secret.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Tls.TlsDHKeyExchange">
            <summary>(D)TLS DH key exchange.</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Tls.TlsDHVerifier">
            <summary>An interface for verifying that Diffie-Hellman parameters are acceptable.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsDHVerifier.Accept(Org.BouncyCastle2.Crypto.Parameters.DHParameters)">
            <summary>Verify that the given <c>DHParameters</c> are acceptable.</summary>
            <param name="dhParameters">The <c>DHParameters</c> to verify.</param>
            <returns>true if (and only if) the specified parameters are acceptable.</returns>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Tls.TlsECDheKeyExchange">
            <summary>(D)TLS ECDHE key exchange (see RFC 4492).</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Tls.TlsECDHKeyExchange">
            <summary>(D)TLS ECDH key exchange (see RFC 4492).</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsEncryptionCredentials.DecryptPreMasterSecret(System.Byte[])">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsExtensionsUtilities.AddClientCertificateTypeExtensionClient(System.Collections.IDictionary,System.Byte[])">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsExtensionsUtilities.AddClientCertificateTypeExtensionServer(System.Collections.IDictionary,System.Byte)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsExtensionsUtilities.AddHeartbeatExtension(System.Collections.IDictionary,Org.BouncyCastle2.Crypto.Tls.HeartbeatExtension)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsExtensionsUtilities.AddMaxFragmentLengthExtension(System.Collections.IDictionary,System.Byte)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsExtensionsUtilities.AddPaddingExtension(System.Collections.IDictionary,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsExtensionsUtilities.AddServerCertificateTypeExtensionClient(System.Collections.IDictionary,System.Byte[])">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsExtensionsUtilities.AddServerCertificateTypeExtensionServer(System.Collections.IDictionary,System.Byte)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsExtensionsUtilities.AddServerNameExtension(System.Collections.IDictionary,Org.BouncyCastle2.Crypto.Tls.ServerNameList)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsExtensionsUtilities.AddStatusRequestExtension(System.Collections.IDictionary,Org.BouncyCastle2.Crypto.Tls.CertificateStatusRequest)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsExtensionsUtilities.GetClientCertificateTypeExtensionClient(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsExtensionsUtilities.GetClientCertificateTypeExtensionServer(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsExtensionsUtilities.GetHeartbeatExtension(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsExtensionsUtilities.GetMaxFragmentLengthExtension(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsExtensionsUtilities.GetPaddingExtension(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsExtensionsUtilities.GetServerCertificateTypeExtensionClient(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsExtensionsUtilities.GetServerCertificateTypeExtensionServer(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsExtensionsUtilities.GetServerNameExtension(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsExtensionsUtilities.GetStatusRequestExtension(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsExtensionsUtilities.HasEncryptThenMacExtension(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsExtensionsUtilities.HasExtendedMasterSecretExtension(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsExtensionsUtilities.HasTruncatedHMacExtension(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsExtensionsUtilities.CreateCertificateTypeExtensionClient(System.Byte[])">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsExtensionsUtilities.CreateCertificateTypeExtensionServer(System.Byte)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsExtensionsUtilities.CreateHeartbeatExtension(Org.BouncyCastle2.Crypto.Tls.HeartbeatExtension)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsExtensionsUtilities.CreateMaxFragmentLengthExtension(System.Byte)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsExtensionsUtilities.CreatePaddingExtension(System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsExtensionsUtilities.CreateServerNameExtension(Org.BouncyCastle2.Crypto.Tls.ServerNameList)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsExtensionsUtilities.CreateStatusRequestExtension(Org.BouncyCastle2.Crypto.Tls.CertificateStatusRequest)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsExtensionsUtilities.ReadEmptyExtensionData(System.Byte[])">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsExtensionsUtilities.ReadCertificateTypeExtensionClient(System.Byte[])">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsExtensionsUtilities.ReadCertificateTypeExtensionServer(System.Byte[])">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsExtensionsUtilities.ReadEncryptThenMacExtension(System.Byte[])">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsExtensionsUtilities.ReadExtendedMasterSecretExtension(System.Byte[])">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsExtensionsUtilities.ReadHeartbeatExtension(System.Byte[])">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsExtensionsUtilities.ReadMaxFragmentLengthExtension(System.Byte[])">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsExtensionsUtilities.ReadPaddingExtension(System.Byte[])">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsExtensionsUtilities.ReadServerNameExtension(System.Byte[])">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsExtensionsUtilities.ReadStatusRequestExtension(System.Byte[])">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsExtensionsUtilities.ReadTruncatedHMacExtension(System.Byte[])">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Tls.TlsKeyExchange">
            <summary>
            A generic interface for key exchange implementations in (D)TLS.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsKeyExchange.SkipServerCredentials">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsKeyExchange.ProcessServerCredentials(Org.BouncyCastle2.Crypto.Tls.TlsCredentials)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsKeyExchange.ProcessServerCertificate(Org.BouncyCastle2.Crypto.Tls.Certificate)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsKeyExchange.GenerateServerKeyExchange">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsKeyExchange.SkipServerKeyExchange">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsKeyExchange.ProcessServerKeyExchange(System.IO.Stream)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsKeyExchange.ValidateCertificateRequest(Org.BouncyCastle2.Crypto.Tls.CertificateRequest)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsKeyExchange.SkipClientCredentials">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsKeyExchange.ProcessClientCredentials(Org.BouncyCastle2.Crypto.Tls.TlsCredentials)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsKeyExchange.ProcessClientCertificate(Org.BouncyCastle2.Crypto.Tls.Certificate)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsKeyExchange.GenerateClientKeyExchange(System.IO.Stream)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsKeyExchange.ProcessClientKeyExchange(System.IO.Stream)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsKeyExchange.GeneratePremasterSecret">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Tls.TlsMac">
            <summary>
            A generic TLS MAC implementation, acting as an HMAC based on some underlying Digest.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsMac.#ctor(Org.BouncyCastle2.Crypto.Tls.TlsContext,Org.BouncyCastle2.Crypto.IDigest,System.Byte[],System.Int32,System.Int32)">
             Generate a new instance of an TlsMac.
            
             @param context the TLS client context
             @param digest  The digest to use.
             @param key     A byte-array where the key for this MAC is located.
             @param keyOff  The number of bytes to skip, before the key starts in the buffer.
             @param keyLen  The length of the key.
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.Tls.TlsMac.MacSecret">
            @return the MAC write secret
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.Tls.TlsMac.Size">
            @return The output length of this MAC.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsMac.CalculateMac(System.Int64,System.Byte,System.Byte[],System.Int32,System.Int32)">
             Calculate the MAC for some given data.
            
             @param type    The message type of the message.
             @param message A byte-buffer containing the message.
             @param offset  The number of bytes to skip, before the message starts.
             @param length  The length of the message.
             @return A new byte-buffer containing the MAC value.
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Tls.TlsNoCloseNotifyException">
            <summary>
            This exception will be thrown(only) when the connection is closed by the peer without sending a
            <code cref="F:Org.BouncyCastle2.Crypto.Tls.AlertDescription.close_notify">close_notify</code> warning alert.
            </summary>
            <remarks>
            If this happens, the TLS protocol cannot rule out truncation of the connection data (potentially
            malicious). It may be possible to check for truncation via some property of a higher level protocol
            built upon TLS, e.g.the Content-Length header for HTTPS.
            </remarks>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Tls.TlsNullCipher">
            <summary>
            A NULL CipherSuite, with optional MAC.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsNullCipher.#ctor(Org.BouncyCastle2.Crypto.Tls.TlsContext,Org.BouncyCastle2.Crypto.IDigest,Org.BouncyCastle2.Crypto.IDigest)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsNullCipher.EncodePlaintext(System.Int64,System.Byte,System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsNullCipher.DecodeCiphertext(System.Int64,System.Byte,System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsPeer.Cancel">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsPeer.GetHandshakeTimeoutMillis">
            <summary>
            Specify the timeout, in milliseconds, to use for the complete handshake process.
            </summary>
            <remarks>
            Negative values are not allowed. A timeout of zero means an infinite timeout (i.e. the
            handshake will never time out). NOTE: Currently only respected by DTLS protocols.
            </remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsPeer.RequiresExtendedMasterSecret">
            <summary>
            This implementation supports RFC 7627 and will always negotiate the extended_master_secret
            extension where possible.
            </summary>
            <remarks>
            When connecting to a peer that does not offer/accept this extension, it is recommended to
            abort the handshake. This option is provided for interoperability with legacy peers,
            although some TLS features will be disabled in that case (see RFC 7627 5.4).
            </remarks>
            <returns>
            <code>true</code> if the handshake should be aborted when the peer does not negotiate the
            extended_master_secret extension, or <code>false</code> to support legacy interoperability.
            </returns>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsPeer.ShouldUseGmtUnixTime">
            <summary>
            draft-mathewson-no-gmtunixtime-00 2. "If existing users of a TLS implementation may rely on
            gmt_unix_time containing the current time, we recommend that implementors MAY provide the
            ability to set gmt_unix_time as an option only, off by default."
            </summary>
            <returns>
            <code>true</code> if the current time should be used in the gmt_unix_time field of
            Random, or <code>false</code> if gmt_unix_time should contain a cryptographically
            random value.
            </returns>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsPeer.NotifySecureRenegotiation(System.Boolean)">
            <summary>
            Report whether the server supports secure renegotiation
            </summary>
            <remarks>
            The protocol handler automatically processes the relevant extensions
            </remarks>
            <param name="secureRenegotiation">
            A <see cref="T:System.Boolean"/>, true if the server supports secure renegotiation
            </param>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsPeer.GetCompression">
            <summary>
            Return an implementation of <see cref="T:Org.BouncyCastle2.Crypto.Tls.TlsCompression"/> to handle record compression.
            </summary>
            <returns>A <see cref="T:Org.BouncyCastle2.Crypto.Tls.TlsCompression"/></returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsPeer.GetCipher">
            <summary>
            Return an implementation of <see cref="T:Org.BouncyCastle2.Crypto.Tls.TlsCipher"/> to use for encryption/decryption.
            </summary>
            <returns>A <see cref="T:Org.BouncyCastle2.Crypto.Tls.TlsCipher"/></returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsPeer.NotifyAlertRaised(System.Byte,System.Byte,System.String,System.Exception)">
            <summary>This method will be called when an alert is raised by the protocol.</summary>
            <param name="alertLevel"><see cref="T:Org.BouncyCastle2.Crypto.Tls.AlertLevel"/></param>
            <param name="alertDescription"><see cref="T:Org.BouncyCastle2.Crypto.Tls.AlertDescription"/></param>
            <param name="message">A human-readable message explaining what caused this alert. May be null.</param>
            <param name="cause">The <c>Exception</c> that caused this alert to be raised. May be null.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsPeer.NotifyAlertReceived(System.Byte,System.Byte)">
            <summary>This method will be called when an alert is received from the remote peer.</summary>
            <param name="alertLevel"><see cref="T:Org.BouncyCastle2.Crypto.Tls.AlertLevel"/></param>
            <param name="alertDescription"><see cref="T:Org.BouncyCastle2.Crypto.Tls.AlertDescription"/></param>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsPeer.NotifyHandshakeComplete">
            <summary>Notifies the peer that the handshake has been successfully completed.</summary>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsProtocol.ProcessChangeCipherSpec(System.Byte[],System.Int32,System.Int32)">
             This method is called, when a change cipher spec message is received.
            
             @throws IOException If the message has an invalid content or the handshake is not in the correct
             state.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsProtocol.ReadApplicationData(System.Byte[],System.Int32,System.Int32)">
             Read data from the network. The method will return immediately, if there is still some data
             left in the buffer, or block until some application data has been read from the network.
            
             @param buf    The buffer where the data will be copied to.
             @param offset The position where the data will be placed in the buffer.
             @param len    The maximum number of bytes to read.
             @return The number of bytes read.
             @throws IOException If something goes wrong during reading data.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsProtocol.WriteData(System.Byte[],System.Int32,System.Int32)">
             Send some application data to the remote system.
             <p/>
             The method will handle fragmentation internally.
            
             @param buf    The buffer with the data.
             @param offset The position in the buffer where the data is placed.
             @param len    The length of the data.
             @throws IOException If something goes wrong during sending.
        </member>
        <member name="P:Org.BouncyCastle2.Crypto.Tls.TlsProtocol.Stream">
            <summary>The secure bidirectional stream for this connection</summary>
            <remarks>Only allowed in blocking mode.</remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsProtocol.CloseInput">
            Should be called in non-blocking mode when the input data reaches EOF.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsProtocol.OfferInput(System.Byte[])">
            Equivalent to <code>OfferInput(input, 0, input.length)</code>
            @see TlsProtocol#OfferInput(byte[], int, int)
            @param input The input buffer to offer
            @throws IOException If an error occurs while decrypting or processing a record
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsProtocol.OfferInput(System.Byte[],System.Int32,System.Int32)">
            Offer input from an arbitrary source. Only allowed in non-blocking mode.<br/>
            <br/>
            This method will decrypt and process all records that are fully available.
            If only part of a record is available, the buffer will be retained until the
            remainder of the record is offered.<br/>
            <br/>
            If any records containing application data were processed, the decrypted data
            can be obtained using {@link #readInput(byte[], int, int)}. If any records
            containing protocol data were processed, a response may have been generated.
            You should always check to see if there is any available output after calling
            this method by calling {@link #getAvailableOutputBytes()}.
            @param input The input buffer to offer
            @param inputOff The offset within the input buffer that input begins
            @param inputLen The number of bytes of input being offered
            @throws IOException If an error occurs while decrypting or processing a record
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsProtocol.GetAvailableInputBytes">
            Gets the amount of received application data. A call to {@link #readInput(byte[], int, int)}
            is guaranteed to be able to return at least this much data.<br/>
            <br/>
            Only allowed in non-blocking mode.
            @return The number of bytes of available application data
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsProtocol.ReadInput(System.Byte[],System.Int32,System.Int32)">
            Retrieves received application data. Use {@link #getAvailableInputBytes()} to check
            how much application data is currently available. This method functions similarly to
            {@link InputStream#read(byte[], int, int)}, except that it never blocks. If no data
            is available, nothing will be copied and zero will be returned.<br/>
            <br/>
            Only allowed in non-blocking mode.
            @param buffer The buffer to hold the application data
            @param offset The start offset in the buffer at which the data is written
            @param length The maximum number of bytes to read
            @return The total number of bytes copied to the buffer. May be less than the
                     length specified if the length was greater than the amount of available data.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsProtocol.OfferOutput(System.Byte[],System.Int32,System.Int32)">
            Offer output from an arbitrary source. Only allowed in non-blocking mode.<br/>
            <br/>
            After this method returns, the specified section of the buffer will have been
            processed. Use {@link #readOutput(byte[], int, int)} to get the bytes to
            transmit to the other peer.<br/>
            <br/>
            This method must not be called until after the handshake is complete! Attempting
            to call it before the handshake is complete will result in an exception.
            @param buffer The buffer containing application data to encrypt
            @param offset The offset at which to begin reading data
            @param length The number of bytes of data to read
            @throws IOException If an error occurs encrypting the data, or the handshake is not complete
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsProtocol.GetAvailableOutputBytes">
            Gets the amount of encrypted data available to be sent. A call to
            {@link #readOutput(byte[], int, int)} is guaranteed to be able to return at
            least this much data.<br/>
            <br/>
            Only allowed in non-blocking mode.
            @return The number of bytes of available encrypted data
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsProtocol.ReadOutput(System.Byte[],System.Int32,System.Int32)">
            Retrieves encrypted data to be sent. Use {@link #getAvailableOutputBytes()} to check
            how much encrypted data is currently available. This method functions similarly to
            {@link InputStream#read(byte[], int, int)}, except that it never blocks. If no data
            is available, nothing will be copied and zero will be returned.<br/>
            <br/>
            Only allowed in non-blocking mode.
            @param buffer The buffer to hold the encrypted data
            @param offset The start offset in the buffer at which the data is written
            @param length The maximum number of bytes to read
            @return The total number of bytes copied to the buffer. May be less than the
                     length specified if the length was greater than the amount of available data.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsProtocol.Close">
             Closes this connection.
            
             @throws IOException If something goes wrong during closing.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsProtocol.AssertEmpty(System.IO.MemoryStream)">
             Make sure the InputStream 'buf' now empty. Fail otherwise.
            
             @param buf The InputStream to check.
             @throws IOException If 'buf' is not empty.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsProtocol.GetCurrentPrfHash(Org.BouncyCastle2.Crypto.Tls.TlsContext,Org.BouncyCastle2.Crypto.Tls.TlsHandshakeHash,System.Byte[])">
            'sender' only relevant to SSLv3
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsProtocolHandler.#ctor(System.IO.Stream,System.IO.Stream,Org.BouncyCastle2.Security.SecureRandom)">
            <remarks>Both streams can be the same object</remarks>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Tls.TlsRsaKeyExchange">
            <summary>(D)TLS and SSLv3 RSA key exchange.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsRsaUtilities.GenerateEncryptedPreMasterSecret(Org.BouncyCastle2.Crypto.Tls.TlsContext,Org.BouncyCastle2.Crypto.Parameters.RsaKeyParameters,System.IO.Stream)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsServer.NotifyClientVersion(Org.BouncyCastle2.Crypto.Tls.ProtocolVersion)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsServer.NotifyFallback(System.Boolean)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsServer.NotifyOfferedCipherSuites(System.Int32[])">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsServer.NotifyOfferedCompressionMethods(System.Byte[])">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsServer.ProcessClientExtensions(System.Collections.IDictionary)">
            <param name="clientExtensions">A <see cref="T:System.Collections.IDictionary"/> (Int32 -> byte[]). Will never be null.</param>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsServer.GetServerVersion">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsServer.GetSelectedCipherSuite">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsServer.GetSelectedCompressionMethod">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsServer.GetServerExtensions">
            <summary>
            Get the (optional) table of server extensions to be included in (extended) server hello.
            </summary>
            <returns>
            A <see cref="T:System.Collections.IDictionary"/> (Int32 -> byte[]). May be null.
            </returns>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsServer.GetServerSupplementalData">
            <returns>
            A <see cref="T:System.Collections.IList"/> (<see cref="T:Org.BouncyCastle2.Crypto.Tls.SupplementalDataEntry"/>). May be null.
            </returns>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsServer.GetCredentials">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsServer.GetCertificateStatus">
            <remarks>
            This method will be called (only) if the server included an extension of type
            "status_request" with empty "extension_data" in the extended server hello. See <i>RFC 3546
            3.6. Certificate Status Request</i>. If a non-null <see cref="T:Org.BouncyCastle2.Crypto.Tls.CertificateStatus"/> is returned, it
            is sent to the client as a handshake message of type "certificate_status".
            </remarks>
            <returns>A <see cref="T:Org.BouncyCastle2.Crypto.Tls.CertificateStatus"/> to be sent to the client (or null for none).</returns>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsServer.GetKeyExchange">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsServer.GetCertificateRequest">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsServer.ProcessClientSupplementalData(System.Collections.IList)">
            <param name="clientSupplementalData"><see cref="T:System.Collections.IList"/> (<see cref="T:Org.BouncyCastle2.Crypto.Tls.SupplementalDataEntry"/>)</param>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsServer.NotifyClientCertificate(Org.BouncyCastle2.Crypto.Tls.Certificate)">
            <summary>
            Called by the protocol handler to report the client certificate, only if <c>GetCertificateRequest</c>
            returned non-null.
            </summary>
            <remarks>Note: this method is responsible for certificate verification and validation.</remarks>
            <param name="clientCertificate">the effective client certificate (may be an empty chain).</param>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsServer.GetNewSessionTicket">
            <summary>RFC 5077 3.3. NewSessionTicket Handshake Message.</summary>
            <remarks>
            This method will be called (only) if a NewSessionTicket extension was sent by the server. See
            <i>RFC 5077 4. Recommended Ticket Construction</i> for recommended format and protection.
            </remarks>
            <returns>The <see cref="T:Org.BouncyCastle2.Crypto.Tls.NewSessionTicket">ticket</see>)</returns>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsSignerCredentials.GenerateCertificateSignature(System.Byte[])">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsSrpGroupVerifier.Accept(Org.BouncyCastle2.Crypto.Parameters.Srp6GroupParameters)">
            Check whether the given SRP group parameters are acceptable for use.
            
            @param group the {@link SRP6GroupParameters} to check
            @return true if (and only if) the specified group parameters are acceptable
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsSrpIdentityManager.GetLoginParameters(System.Byte[])">
            Lookup the {@link TlsSRPLoginParameters} corresponding to the specified identity.
            
            NOTE: To avoid "identity probing", unknown identities SHOULD be handled as recommended in RFC
            5054 2.5.1.3. {@link SimulatedTlsSRPIdentityManager} is provided for this purpose.
            
            @param identity
                       the SRP identity sent by the connecting client
            @return the {@link TlsSRPLoginParameters} for the specified identity, or else 'simulated'
                    parameters if the identity is not recognized. A null value is also allowed, but not
                    recommended.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsStreamCipher.#ctor(Org.BouncyCastle2.Crypto.Tls.TlsContext,Org.BouncyCastle2.Crypto.IStreamCipher,Org.BouncyCastle2.Crypto.IStreamCipher,Org.BouncyCastle2.Crypto.IDigest,Org.BouncyCastle2.Crypto.IDigest,System.Int32,System.Boolean)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsStreamCipher.DecodeCiphertext(System.Int64,System.Byte,System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsStreamCipher.CheckMac(System.Int64,System.Byte,System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Tls.TlsUtilities">
            <remarks>Some helper functions for MicroTLS.</remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsUtilities.AddSignatureAlgorithmsExtension(System.Collections.IDictionary,System.Collections.IList)">
             Add a 'signature_algorithms' extension to existing extensions.
            
             @param extensions                   A {@link Hashtable} to add the extension to.
             @param supportedSignatureAlgorithms {@link Vector} containing at least 1 {@link SignatureAndHashAlgorithm}.
             @throws IOException
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsUtilities.GetSignatureAlgorithmsExtension(System.Collections.IDictionary)">
             Get a 'signature_algorithms' extension from extensions.
            
             @param extensions A {@link Hashtable} to get the extension from, if it is present.
             @return A {@link Vector} containing at least 1 {@link SignatureAndHashAlgorithm}, or null.
             @throws IOException
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsUtilities.CreateSignatureAlgorithmsExtension(System.Collections.IList)">
             Create a 'signature_algorithms' extension value.
            
             @param supportedSignatureAlgorithms A {@link Vector} containing at least 1 {@link SignatureAndHashAlgorithm}.
             @return A byte array suitable for use as an extension value.
             @throws IOException
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.TlsUtilities.ReadSignatureAlgorithmsExtension(System.Byte[])">
             Read 'signature_algorithms' extension data.
            
             @param extensionData The extension data.
             @return A {@link Vector} containing at least 1 {@link SignatureAndHashAlgorithm}.
             @throws IOException
        </member>
        <member name="T:Org.BouncyCastle2.Crypto.Tls.UrlAndHash">
            RFC 6066 5.
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.UrlAndHash.Encode(System.IO.Stream)">
             Encode this {@link UrlAndHash} to a {@link Stream}.
            
             @param output the {@link Stream} to encode to.
             @throws IOException
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Tls.UrlAndHash.Parse(Org.BouncyCastle2.Crypto.Tls.TlsContext,System.IO.Stream)">
            Parse a {@link UrlAndHash} from a {@link Stream}.
            
            @param context
                       the {@link TlsContext} of the current connection.
            @param input
                       the {@link Stream} to parse from.
            @return a {@link UrlAndHash} object.
            @throws IOException
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Utilities.AlgorithmIdentifierFactory.GenerateEncryptionAlgID(Org.BouncyCastle2.Asn1.DerObjectIdentifier,System.Int32,Org.BouncyCastle2.Security.SecureRandom)">
             Create an AlgorithmIdentifier for the passed in encryption algorithm.
            
             @param encryptionOID OID for the encryption algorithm
             @param keySize key size in bits (-1 if unknown)
             @param random SecureRandom to use for parameter generation.
             @return a full AlgorithmIdentifier including parameters
             @throws IllegalArgumentException if encryptionOID cannot be matched
        </member>
        <member name="M:Org.BouncyCastle2.Crypto.Utilities.CipherKeyGeneratorFactory.CreateKeyGenerator(Org.BouncyCastle2.Asn1.DerObjectIdentifier,Org.BouncyCastle2.Security.SecureRandom)">
             Create a key generator for the passed in Object Identifier.
            
             @param algorithm the Object Identifier indicating the algorithn the generator is for.
             @param random a source of random to initialise the generator with.
             @return an initialised CipherKeyGenerator.
             @throws IllegalArgumentException if the algorithm cannot be identified.
        </member>
        <member name="M:Org.BouncyCastle2.Math.BigInteger.AddMagnitudes(System.Int32[],System.Int32[])">
            return a = a + b - b preserved.
        </member>
        <member name="M:Org.BouncyCastle2.Math.BigInteger.CompareTo(System.Int32,System.Int32[],System.Int32,System.Int32[])">
            unsigned comparison on two arrays - note the arrays may
            start with leading zeros.
        </member>
        <member name="M:Org.BouncyCastle2.Math.BigInteger.Divide(System.Int32[],System.Int32[])">
            return z = x / y - done in place (z value preserved, x contains the
            remainder)
        </member>
        <member name="M:Org.BouncyCastle2.Math.BigInteger.IsProbablePrime(System.Int32)">
            return whether or not a BigInteger is probably prime with a
            probability of 1 - (1/2)**certainty.
            <p>From Knuth Vol 2, pg 395.</p>
        </member>
        <member name="M:Org.BouncyCastle2.Math.BigInteger.ExtEuclid(Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger@)">
             Calculate the numbers u1, u2, and u3 such that:
            
             u1 * a + u2 * b = u3
            
             where u3 is the greatest common divider of a and b.
             a and b using the extended Euclid algorithm (refer p. 323
             of The Art of Computer Programming vol 2, 2nd ed).
             This also seems to have the side effect of calculating
             some form of multiplicative inverse.
            
             @param a    First number to calculate gcd for
             @param b    Second number to calculate gcd for
             @param u1Out      the return object for the u1 value
             @return     The greatest common divisor of a and b
        </member>
        <member name="M:Org.BouncyCastle2.Math.BigInteger.Square(System.Int32[],System.Int32[])">
            return w with w = x * x - w is assumed to have enough space.
        </member>
        <member name="M:Org.BouncyCastle2.Math.BigInteger.Multiply(System.Int32[],System.Int32[],System.Int32[])">
            return x with x = y * z - x is assumed to have enough space.
        </member>
        <member name="M:Org.BouncyCastle2.Math.BigInteger.GetMQuote">
            Calculate mQuote = -m^(-1) mod b with b = 2^32 (32 = word size)
        </member>
        <member name="M:Org.BouncyCastle2.Math.BigInteger.MultiplyMonty(System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.UInt32,System.Boolean)">
            Montgomery multiplication: a = x * y * R^(-1) mod m
            <br/>
            Based algorithm 14.36 of Handbook of Applied Cryptography.
            <br/>
            <li> m, x, y should have length n </li>
            <li> a should have length (n + 1) </li>
            <li> b = 2^32, R = b^n </li>
            <br/>
            The result is put in x
            <br/>
            NOTE: the indices of x, y, m, a different in HAC and in Java
        </member>
        <member name="M:Org.BouncyCastle2.Math.BigInteger.Remainder(System.Int32[],System.Int32[])">
            return x = x % y - done in place (y value preserved)
        </member>
        <member name="M:Org.BouncyCastle2.Math.BigInteger.ShiftLeft(System.Int32[],System.Int32)">
            do a left shift - this returns a new array.
        </member>
        <member name="M:Org.BouncyCastle2.Math.BigInteger.ShiftRightInPlace(System.Int32,System.Int32[],System.Int32)">
            do a right shift - this does it in place.
        </member>
        <member name="M:Org.BouncyCastle2.Math.BigInteger.ShiftRightOneInPlace(System.Int32,System.Int32[])">
            do a right shift by one - this does it in place.
        </member>
        <member name="M:Org.BouncyCastle2.Math.BigInteger.Subtract(System.Int32,System.Int32[],System.Int32,System.Int32[])">
            returns x = x - y - we assume x is >= y
        </member>
        <member name="T:Org.BouncyCastle2.Math.EC.Abc.SimpleBigDecimal">
            Class representing a simple version of a big decimal. A
            <code>SimpleBigDecimal</code> is basically a
            {@link java.math.BigInteger BigInteger} with a few digits on the right of
            the decimal point. The number of (binary) digits on the right of the decimal
            point is called the <code>scale</code> of the <code>SimpleBigDecimal</code>.
            Unlike in {@link java.math.BigDecimal BigDecimal}, the scale is not adjusted
            automatically, but must be set manually. All <code>SimpleBigDecimal</code>s
            taking part in the same arithmetic operation must have equal scale. The
            result of a multiplication of two <code>SimpleBigDecimal</code>s returns a
            <code>SimpleBigDecimal</code> with double scale.
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Abc.SimpleBigDecimal.GetInstance(Org.BouncyCastle2.Math.BigInteger,System.Int32)">
            Returns a <code>SimpleBigDecimal</code> representing the same numerical
            value as <code>value</code>.
            @param value The value of the <code>SimpleBigDecimal</code> to be
            created. 
            @param scale The scale of the <code>SimpleBigDecimal</code> to be
            created. 
            @return The such created <code>SimpleBigDecimal</code>.
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Abc.SimpleBigDecimal.#ctor(Org.BouncyCastle2.Math.BigInteger,System.Int32)">
            Constructor for <code>SimpleBigDecimal</code>. The value of the
            constructed <code>SimpleBigDecimal</code> Equals <code>bigInt / 
            2<sup>scale</sup></code>.
            @param bigInt The <code>bigInt</code> value parameter.
            @param scale The scale of the constructed <code>SimpleBigDecimal</code>.
        </member>
        <member name="T:Org.BouncyCastle2.Math.EC.Abc.Tnaf">
            Class holding methods for point multiplication based on the window
            &#964;-adic nonadjacent form (WTNAF). The algorithms are based on the
            paper "Improved Algorithms for Arithmetic on Anomalous Binary Curves"
            by Jerome A. Solinas. The paper first appeared in the Proceedings of
            Crypto 1997.
        </member>
        <member name="F:Org.BouncyCastle2.Math.EC.Abc.Tnaf.Width">
            The window width of WTNAF. The standard value of 4 is slightly less
            than optimal for running time, but keeps space requirements for
            precomputation low. For typical curves, a value of 5 or 6 results in
            a better running time. When changing this value, the
            <code>&#945;<sub>u</sub></code>'s must be computed differently, see
            e.g. "Guide to Elliptic Curve Cryptography", Darrel Hankerson,
            Alfred Menezes, Scott Vanstone, Springer-Verlag New York Inc., 2004,
            p. 121-122
        </member>
        <member name="F:Org.BouncyCastle2.Math.EC.Abc.Tnaf.Pow2Width">
            2<sup>4</sup>
        </member>
        <member name="F:Org.BouncyCastle2.Math.EC.Abc.Tnaf.Alpha0">
            The <code>&#945;<sub>u</sub></code>'s for <code>a=0</code> as an array
            of <code>ZTauElement</code>s.
        </member>
        <member name="F:Org.BouncyCastle2.Math.EC.Abc.Tnaf.Alpha0Tnaf">
            The <code>&#945;<sub>u</sub></code>'s for <code>a=0</code> as an array
            of TNAFs.
        </member>
        <member name="F:Org.BouncyCastle2.Math.EC.Abc.Tnaf.Alpha1">
            The <code>&#945;<sub>u</sub></code>'s for <code>a=1</code> as an array
            of <code>ZTauElement</code>s.
        </member>
        <member name="F:Org.BouncyCastle2.Math.EC.Abc.Tnaf.Alpha1Tnaf">
            The <code>&#945;<sub>u</sub></code>'s for <code>a=1</code> as an array
            of TNAFs.
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Abc.Tnaf.Norm(System.SByte,Org.BouncyCastle2.Math.EC.Abc.ZTauElement)">
            Computes the norm of an element <code>&#955;</code> of
            <code><b>Z</b>[&#964;]</code>.
            @param mu The parameter <code>&#956;</code> of the elliptic curve.
            @param lambda The element <code>&#955;</code> of
            <code><b>Z</b>[&#964;]</code>.
            @return The norm of <code>&#955;</code>.
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Abc.Tnaf.Norm(System.SByte,Org.BouncyCastle2.Math.EC.Abc.SimpleBigDecimal,Org.BouncyCastle2.Math.EC.Abc.SimpleBigDecimal)">
            Computes the norm of an element <code>&#955;</code> of
            <code><b>R</b>[&#964;]</code>, where <code>&#955; = u + v&#964;</code>
            and <code>u</code> and <code>u</code> are real numbers (elements of
            <code><b>R</b></code>). 
            @param mu The parameter <code>&#956;</code> of the elliptic curve.
            @param u The real part of the element <code>&#955;</code> of
            <code><b>R</b>[&#964;]</code>.
            @param v The <code>&#964;</code>-adic part of the element
            <code>&#955;</code> of <code><b>R</b>[&#964;]</code>.
            @return The norm of <code>&#955;</code>.
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Abc.Tnaf.Round(Org.BouncyCastle2.Math.EC.Abc.SimpleBigDecimal,Org.BouncyCastle2.Math.EC.Abc.SimpleBigDecimal,System.SByte)">
            Rounds an element <code>&#955;</code> of <code><b>R</b>[&#964;]</code>
            to an element of <code><b>Z</b>[&#964;]</code>, such that their difference
            has minimal norm. <code>&#955;</code> is given as
            <code>&#955; = &#955;<sub>0</sub> + &#955;<sub>1</sub>&#964;</code>.
            @param lambda0 The component <code>&#955;<sub>0</sub></code>.
            @param lambda1 The component <code>&#955;<sub>1</sub></code>.
            @param mu The parameter <code>&#956;</code> of the elliptic curve. Must
            equal 1 or -1.
            @return The rounded element of <code><b>Z</b>[&#964;]</code>.
            @throws ArgumentException if <code>lambda0</code> and
            <code>lambda1</code> do not have same scale.
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Abc.Tnaf.ApproximateDivisionByN(Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger,System.SByte,System.Int32,System.Int32)">
            Approximate division by <code>n</code>. For an integer
            <code>k</code>, the value <code>&#955; = s k / n</code> is
            computed to <code>c</code> bits of accuracy.
            @param k The parameter <code>k</code>.
            @param s The curve parameter <code>s<sub>0</sub></code> or
            <code>s<sub>1</sub></code>.
            @param vm The Lucas Sequence element <code>V<sub>m</sub></code>.
            @param a The parameter <code>a</code> of the elliptic curve.
            @param m The bit length of the finite field
            <code><b>F</b><sub>m</sub></code>.
            @param c The number of bits of accuracy, i.e. the scale of the returned
            <code>SimpleBigDecimal</code>.
            @return The value <code>&#955; = s k / n</code> computed to
            <code>c</code> bits of accuracy.
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Abc.Tnaf.TauAdicNaf(System.SByte,Org.BouncyCastle2.Math.EC.Abc.ZTauElement)">
            Computes the <code>&#964;</code>-adic NAF (non-adjacent form) of an
            element <code>&#955;</code> of <code><b>Z</b>[&#964;]</code>.
            @param mu The parameter <code>&#956;</code> of the elliptic curve.
            @param lambda The element <code>&#955;</code> of
            <code><b>Z</b>[&#964;]</code>.
            @return The <code>&#964;</code>-adic NAF of <code>&#955;</code>.
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Abc.Tnaf.Tau(Org.BouncyCastle2.Math.EC.AbstractF2mPoint)">
            Applies the operation <code>&#964;()</code> to an
            <code>AbstractF2mPoint</code>. 
            @param p The AbstractF2mPoint to which <code>&#964;()</code> is applied.
            @return <code>&#964;(p)</code>
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Abc.Tnaf.GetMu(Org.BouncyCastle2.Math.EC.AbstractF2mCurve)">
            Returns the parameter <code>&#956;</code> of the elliptic curve.
            @param curve The elliptic curve from which to obtain <code>&#956;</code>.
            The curve must be a Koblitz curve, i.e. <code>a</code> Equals
            <code>0</code> or <code>1</code> and <code>b</code> Equals
            <code>1</code>. 
            @return <code>&#956;</code> of the elliptic curve.
            @throws ArgumentException if the given ECCurve is not a Koblitz
            curve.
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Abc.Tnaf.GetLucas(System.SByte,System.Int32,System.Boolean)">
            Calculates the Lucas Sequence elements <code>U<sub>k-1</sub></code> and
            <code>U<sub>k</sub></code> or <code>V<sub>k-1</sub></code> and
            <code>V<sub>k</sub></code>.
            @param mu The parameter <code>&#956;</code> of the elliptic curve.
            @param k The index of the second element of the Lucas Sequence to be
            returned.
            @param doV If set to true, computes <code>V<sub>k-1</sub></code> and
            <code>V<sub>k</sub></code>, otherwise <code>U<sub>k-1</sub></code> and
            <code>U<sub>k</sub></code>.
            @return An array with 2 elements, containing <code>U<sub>k-1</sub></code>
            and <code>U<sub>k</sub></code> or <code>V<sub>k-1</sub></code>
            and <code>V<sub>k</sub></code>.
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Abc.Tnaf.GetTw(System.SByte,System.Int32)">
            Computes the auxiliary value <code>t<sub>w</sub></code>. If the width is
            4, then for <code>mu = 1</code>, <code>t<sub>w</sub> = 6</code> and for
            <code>mu = -1</code>, <code>t<sub>w</sub> = 10</code> 
            @param mu The parameter <code>&#956;</code> of the elliptic curve.
            @param w The window width of the WTNAF.
            @return the auxiliary value <code>t<sub>w</sub></code>
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Abc.Tnaf.GetSi(Org.BouncyCastle2.Math.EC.AbstractF2mCurve)">
            Computes the auxiliary values <code>s<sub>0</sub></code> and
            <code>s<sub>1</sub></code> used for partial modular reduction. 
            @param curve The elliptic curve for which to compute
            <code>s<sub>0</sub></code> and <code>s<sub>1</sub></code>.
            @throws ArgumentException if <code>curve</code> is not a
            Koblitz curve (Anomalous Binary Curve, ABC).
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Abc.Tnaf.PartModReduction(Org.BouncyCastle2.Math.BigInteger,System.Int32,System.SByte,Org.BouncyCastle2.Math.BigInteger[],System.SByte,System.SByte)">
            Partial modular reduction modulo
            <code>(&#964;<sup>m</sup> - 1)/(&#964; - 1)</code>.
            @param k The integer to be reduced.
            @param m The bitlength of the underlying finite field.
            @param a The parameter <code>a</code> of the elliptic curve.
            @param s The auxiliary values <code>s<sub>0</sub></code> and
            <code>s<sub>1</sub></code>.
            @param mu The parameter &#956; of the elliptic curve.
            @param c The precision (number of bits of accuracy) of the partial
            modular reduction.
            @return <code>&#961; := k partmod (&#964;<sup>m</sup> - 1)/(&#964; - 1)</code>
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Abc.Tnaf.MultiplyRTnaf(Org.BouncyCastle2.Math.EC.AbstractF2mPoint,Org.BouncyCastle2.Math.BigInteger)">
            Multiplies a {@link org.BouncyCastle2.math.ec.AbstractF2mPoint AbstractF2mPoint}
            by a <code>BigInteger</code> using the reduced <code>&#964;</code>-adic
            NAF (RTNAF) method.
            @param p The AbstractF2mPoint to Multiply.
            @param k The <code>BigInteger</code> by which to Multiply <code>p</code>.
            @return <code>k * p</code>
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Abc.Tnaf.MultiplyTnaf(Org.BouncyCastle2.Math.EC.AbstractF2mPoint,Org.BouncyCastle2.Math.EC.Abc.ZTauElement)">
            Multiplies a {@link org.BouncyCastle2.math.ec.AbstractF2mPoint AbstractF2mPoint}
            by an element <code>&#955;</code> of <code><b>Z</b>[&#964;]</code>
            using the <code>&#964;</code>-adic NAF (TNAF) method.
            @param p The AbstractF2mPoint to Multiply.
            @param lambda The element <code>&#955;</code> of
            <code><b>Z</b>[&#964;]</code>.
            @return <code>&#955; * p</code>
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Abc.Tnaf.MultiplyFromTnaf(Org.BouncyCastle2.Math.EC.AbstractF2mPoint,System.SByte[])">
            Multiplies a {@link org.BouncyCastle2.math.ec.AbstractF2mPoint AbstractF2mPoint}
            by an element <code>&#955;</code> of <code><b>Z</b>[&#964;]</code>
            using the <code>&#964;</code>-adic NAF (TNAF) method, given the TNAF
            of <code>&#955;</code>.
            @param p The AbstractF2mPoint to Multiply.
            @param u The the TNAF of <code>&#955;</code>..
            @return <code>&#955; * p</code>
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Abc.Tnaf.TauAdicWNaf(System.SByte,Org.BouncyCastle2.Math.EC.Abc.ZTauElement,System.SByte,Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.EC.Abc.ZTauElement[])">
            Computes the <code>[&#964;]</code>-adic window NAF of an element
            <code>&#955;</code> of <code><b>Z</b>[&#964;]</code>.
            @param mu The parameter &#956; of the elliptic curve.
            @param lambda The element <code>&#955;</code> of
            <code><b>Z</b>[&#964;]</code> of which to compute the
            <code>[&#964;]</code>-adic NAF.
            @param width The window width of the resulting WNAF.
            @param pow2w 2<sup>width</sup>.
            @param tw The auxiliary value <code>t<sub>w</sub></code>.
            @param alpha The <code>&#945;<sub>u</sub></code>'s for the window width.
            @return The <code>[&#964;]</code>-adic window NAF of
            <code>&#955;</code>.
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Abc.Tnaf.GetPreComp(Org.BouncyCastle2.Math.EC.AbstractF2mPoint,System.SByte)">
            Does the precomputation for WTNAF multiplication.
            @param p The <code>ECPoint</code> for which to do the precomputation.
            @param a The parameter <code>a</code> of the elliptic curve.
            @return The precomputation array for <code>p</code>. 
        </member>
        <member name="T:Org.BouncyCastle2.Math.EC.Abc.ZTauElement">
            Class representing an element of <code><b>Z</b>[&#964;]</code>. Let
            <code>&#955;</code> be an element of <code><b>Z</b>[&#964;]</code>. Then
            <code>&#955;</code> is given as <code>&#955; = u + v&#964;</code>. The
            components <code>u</code> and <code>v</code> may be used directly, there
            are no accessor methods.
            Immutable class.
        </member>
        <member name="F:Org.BouncyCastle2.Math.EC.Abc.ZTauElement.u">
            The &quot;real&quot; part of <code>&#955;</code>.
        </member>
        <member name="F:Org.BouncyCastle2.Math.EC.Abc.ZTauElement.v">
            The &quot;<code>&#964;</code>-adic&quot; part of <code>&#955;</code>.
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Abc.ZTauElement.#ctor(Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger)">
            Constructor for an element <code>&#955;</code> of
            <code><b>Z</b>[&#964;]</code>.
            @param u The &quot;real&quot; part of <code>&#955;</code>.
            @param v The &quot;<code>&#964;</code>-adic&quot; part of
            <code>&#955;</code>.
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Djb.Curve25519FieldElement.Sqrt">
            return a sqrt root - the routine verifies that the calculation returns the right value - if
            none exists it returns null.
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Djb.Curve25519Point.#ctor(Org.BouncyCastle2.Math.EC.ECCurve,Org.BouncyCastle2.Math.EC.ECFieldElement,Org.BouncyCastle2.Math.EC.ECFieldElement)">
            Create a point which encodes with point compression.
            
            @param curve the curve to use
            @param x affine x co-ordinate
            @param y affine y co-ordinate
            
            @deprecated Use ECCurve.CreatePoint to construct points
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Djb.Curve25519Point.#ctor(Org.BouncyCastle2.Math.EC.ECCurve,Org.BouncyCastle2.Math.EC.ECFieldElement,Org.BouncyCastle2.Math.EC.ECFieldElement,System.Boolean)">
            Create a point that encodes with or without point compresion.
            
            @param curve the curve to use
            @param x affine x co-ordinate
            @param y affine y co-ordinate
            @param withCompression if true encode with point compression
            
            @deprecated per-point compression property will be removed, refer {@link #getEncoded(bool)}
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.GM.SM2P256V1FieldElement.Sqrt">
            return a sqrt root - the routine verifies that the calculation returns the right value - if
            none exists it returns null.
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.GM.SM2P256V1Point.#ctor(Org.BouncyCastle2.Math.EC.ECCurve,Org.BouncyCastle2.Math.EC.ECFieldElement,Org.BouncyCastle2.Math.EC.ECFieldElement)">
            Create a point which encodes with point compression.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.GM.SM2P256V1Point.#ctor(Org.BouncyCastle2.Math.EC.ECCurve,Org.BouncyCastle2.Math.EC.ECFieldElement,Org.BouncyCastle2.Math.EC.ECFieldElement,System.Boolean)">
            Create a point that encodes with or without point compresion.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            @param withCompression
                       if true encode with point compression
            
            @deprecated per-point compression property will be removed, refer
                        {@link #getEncoded(bool)}
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Sec.SecP128R1FieldElement.Sqrt">
            return a sqrt root - the routine verifies that the calculation returns the right value - if
            none exists it returns null.
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Sec.SecP128R1Point.#ctor(Org.BouncyCastle2.Math.EC.ECCurve,Org.BouncyCastle2.Math.EC.ECFieldElement,Org.BouncyCastle2.Math.EC.ECFieldElement)">
            Create a point which encodes with point compression.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Sec.SecP128R1Point.#ctor(Org.BouncyCastle2.Math.EC.ECCurve,Org.BouncyCastle2.Math.EC.ECFieldElement,Org.BouncyCastle2.Math.EC.ECFieldElement,System.Boolean)">
            Create a point that encodes with or without point compresion.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            @param withCompression
                       if true encode with point compression
            
            @deprecated per-point compression property will be removed, refer
                        {@link #getEncoded(boolean)}
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Sec.SecP160K1Point.#ctor(Org.BouncyCastle2.Math.EC.ECCurve,Org.BouncyCastle2.Math.EC.ECFieldElement,Org.BouncyCastle2.Math.EC.ECFieldElement)">
            Create a point which encodes with point compression.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            
            @deprecated Use ECCurve.CreatePoint to construct points
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Sec.SecP160K1Point.#ctor(Org.BouncyCastle2.Math.EC.ECCurve,Org.BouncyCastle2.Math.EC.ECFieldElement,Org.BouncyCastle2.Math.EC.ECFieldElement,System.Boolean)">
            Create a point that encodes with or without point compresion.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            @param withCompression
                       if true encode with point compression
            
            @deprecated per-point compression property will be removed, refer
                        {@link #getEncoded(bool)}
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Sec.SecP160R1FieldElement.Sqrt">
            return a sqrt root - the routine verifies that the calculation returns the right value - if
            none exists it returns null.
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Sec.SecP160R1Point.#ctor(Org.BouncyCastle2.Math.EC.ECCurve,Org.BouncyCastle2.Math.EC.ECFieldElement,Org.BouncyCastle2.Math.EC.ECFieldElement)">
            Create a point which encodes with point compression.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            
            @deprecated Use ECCurve.CreatePoint to construct points
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Sec.SecP160R1Point.#ctor(Org.BouncyCastle2.Math.EC.ECCurve,Org.BouncyCastle2.Math.EC.ECFieldElement,Org.BouncyCastle2.Math.EC.ECFieldElement,System.Boolean)">
            Create a point that encodes with or without point compresion.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            @param withCompression
                       if true encode with point compression
            
            @deprecated per-point compression property will be removed, refer
                        {@link #getEncoded(bool)}
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Sec.SecP160R2FieldElement.Sqrt">
            return a sqrt root - the routine verifies that the calculation returns the right value - if
            none exists it returns null.
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Sec.SecP160R2Point.#ctor(Org.BouncyCastle2.Math.EC.ECCurve,Org.BouncyCastle2.Math.EC.ECFieldElement,Org.BouncyCastle2.Math.EC.ECFieldElement)">
            Create a point which encodes with point compression.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            
            @deprecated Use ECCurve.CreatePoint to construct points
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Sec.SecP160R2Point.#ctor(Org.BouncyCastle2.Math.EC.ECCurve,Org.BouncyCastle2.Math.EC.ECFieldElement,Org.BouncyCastle2.Math.EC.ECFieldElement,System.Boolean)">
            Create a point that encodes with or without point compresion.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            @param withCompression
                       if true encode with point compression
            
            @deprecated per-point compression property will be removed, refer
                        {@link #getEncoded(bool)}
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Sec.SecP192K1FieldElement.Sqrt">
            return a sqrt root - the routine verifies that the calculation returns the right value - if
            none exists it returns null.
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Sec.SecP192K1Point.#ctor(Org.BouncyCastle2.Math.EC.ECCurve,Org.BouncyCastle2.Math.EC.ECFieldElement,Org.BouncyCastle2.Math.EC.ECFieldElement)">
            Create a point which encodes with point compression.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Sec.SecP192K1Point.#ctor(Org.BouncyCastle2.Math.EC.ECCurve,Org.BouncyCastle2.Math.EC.ECFieldElement,Org.BouncyCastle2.Math.EC.ECFieldElement,System.Boolean)">
            Create a point that encodes with or without point compresion.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            @param withCompression
                       if true encode with point compression
            
            @deprecated per-point compression property will be removed, refer
                        {@link #getEncoded(bool)}
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Sec.SecP192R1FieldElement.Sqrt">
            return a sqrt root - the routine verifies that the calculation returns the right value - if
            none exists it returns null.
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Sec.SecP192R1Point.#ctor(Org.BouncyCastle2.Math.EC.ECCurve,Org.BouncyCastle2.Math.EC.ECFieldElement,Org.BouncyCastle2.Math.EC.ECFieldElement)">
            Create a point which encodes with point compression.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Sec.SecP192R1Point.#ctor(Org.BouncyCastle2.Math.EC.ECCurve,Org.BouncyCastle2.Math.EC.ECFieldElement,Org.BouncyCastle2.Math.EC.ECFieldElement,System.Boolean)">
            Create a point that encodes with or without point compresion.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            @param withCompression
                       if true encode with point compression
            
            @deprecated per-point compression property will be removed, refer
                        {@link #getEncoded(bool)}
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Sec.SecP224K1FieldElement.Sqrt">
            return a sqrt root - the routine verifies that the calculation returns the right value - if
            none exists it returns null.
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Sec.SecP224K1Point.#ctor(Org.BouncyCastle2.Math.EC.ECCurve,Org.BouncyCastle2.Math.EC.ECFieldElement,Org.BouncyCastle2.Math.EC.ECFieldElement)">
            Create a point which encodes with point compression.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Sec.SecP224K1Point.#ctor(Org.BouncyCastle2.Math.EC.ECCurve,Org.BouncyCastle2.Math.EC.ECFieldElement,Org.BouncyCastle2.Math.EC.ECFieldElement,System.Boolean)">
            Create a point that encodes with or without point compresion.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            @param withCompression
                       if true encode with point compression
            
            @deprecated per-point compression property will be removed, refer
                        {@link #getEncoded(bool)}
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Sec.SecP224R1FieldElement.Sqrt">
            return a sqrt root - the routine verifies that the calculation returns the right value - if
            none exists it returns null.
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Sec.SecP224R1Point.#ctor(Org.BouncyCastle2.Math.EC.ECCurve,Org.BouncyCastle2.Math.EC.ECFieldElement,Org.BouncyCastle2.Math.EC.ECFieldElement)">
            Create a point which encodes with point compression.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Sec.SecP224R1Point.#ctor(Org.BouncyCastle2.Math.EC.ECCurve,Org.BouncyCastle2.Math.EC.ECFieldElement,Org.BouncyCastle2.Math.EC.ECFieldElement,System.Boolean)">
            Create a point that encodes with or without point compresion.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            @param withCompression
                       if true encode with point compression
            
            @deprecated per-point compression property will be removed, refer
                        {@link #getEncoded(bool)}
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Sec.SecP256K1FieldElement.Sqrt">
            return a sqrt root - the routine verifies that the calculation returns the right value - if
            none exists it returns null.
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Sec.SecP256K1Point.#ctor(Org.BouncyCastle2.Math.EC.ECCurve,Org.BouncyCastle2.Math.EC.ECFieldElement,Org.BouncyCastle2.Math.EC.ECFieldElement)">
            Create a point which encodes with point compression.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Sec.SecP256K1Point.#ctor(Org.BouncyCastle2.Math.EC.ECCurve,Org.BouncyCastle2.Math.EC.ECFieldElement,Org.BouncyCastle2.Math.EC.ECFieldElement,System.Boolean)">
            Create a point that encodes with or without point compresion.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            @param withCompression
                       if true encode with point compression
            
            @deprecated per-point compression property will be removed, refer
                        {@link #getEncoded(bool)}
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Sec.SecP256R1FieldElement.Sqrt">
            return a sqrt root - the routine verifies that the calculation returns the right value - if
            none exists it returns null.
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Sec.SecP256R1Point.#ctor(Org.BouncyCastle2.Math.EC.ECCurve,Org.BouncyCastle2.Math.EC.ECFieldElement,Org.BouncyCastle2.Math.EC.ECFieldElement)">
            Create a point which encodes with point compression.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Sec.SecP256R1Point.#ctor(Org.BouncyCastle2.Math.EC.ECCurve,Org.BouncyCastle2.Math.EC.ECFieldElement,Org.BouncyCastle2.Math.EC.ECFieldElement,System.Boolean)">
            Create a point that encodes with or without point compresion.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            @param withCompression
                       if true encode with point compression
            
            @deprecated per-point compression property will be removed, refer
                        {@link #getEncoded(bool)}
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Sec.SecP384R1FieldElement.Sqrt">
            return a sqrt root - the routine verifies that the calculation returns the right value - if
            none exists it returns null.
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Sec.SecP384R1Point.#ctor(Org.BouncyCastle2.Math.EC.ECCurve,Org.BouncyCastle2.Math.EC.ECFieldElement,Org.BouncyCastle2.Math.EC.ECFieldElement)">
            Create a point which encodes with point compression.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Sec.SecP384R1Point.#ctor(Org.BouncyCastle2.Math.EC.ECCurve,Org.BouncyCastle2.Math.EC.ECFieldElement,Org.BouncyCastle2.Math.EC.ECFieldElement,System.Boolean)">
            Create a point that encodes with or without point compresion.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            @param withCompression
                       if true encode with point compression
            
            @deprecated per-point compression property will be removed, refer
                        {@link #getEncoded(bool)}
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Sec.SecP521R1FieldElement.Sqrt">
            return a sqrt root - the routine verifies that the calculation returns the right value - if
            none exists it returns null.
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Sec.SecP521R1Point.#ctor(Org.BouncyCastle2.Math.EC.ECCurve,Org.BouncyCastle2.Math.EC.ECFieldElement,Org.BouncyCastle2.Math.EC.ECFieldElement)">
            Create a point which encodes with point compression.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Sec.SecP521R1Point.#ctor(Org.BouncyCastle2.Math.EC.ECCurve,Org.BouncyCastle2.Math.EC.ECFieldElement,Org.BouncyCastle2.Math.EC.ECFieldElement,System.Boolean)">
            Create a point that encodes with or without point compresion.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            @param withCompression
                       if true encode with point compression
            
            @deprecated per-point compression property will be removed, refer
                        {@link #getEncoded(bool)}
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Sec.SecT113R1Point.#ctor(Org.BouncyCastle2.Math.EC.ECCurve,Org.BouncyCastle2.Math.EC.ECFieldElement,Org.BouncyCastle2.Math.EC.ECFieldElement)">
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Sec.SecT113R1Point.#ctor(Org.BouncyCastle2.Math.EC.ECCurve,Org.BouncyCastle2.Math.EC.ECFieldElement,Org.BouncyCastle2.Math.EC.ECFieldElement,System.Boolean)">
            @deprecated per-point compression property will be removed, refer {@link #getEncoded(bool)}
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Sec.SecT113R2Point.#ctor(Org.BouncyCastle2.Math.EC.ECCurve,Org.BouncyCastle2.Math.EC.ECFieldElement,Org.BouncyCastle2.Math.EC.ECFieldElement)">
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Sec.SecT113R2Point.#ctor(Org.BouncyCastle2.Math.EC.ECCurve,Org.BouncyCastle2.Math.EC.ECFieldElement,Org.BouncyCastle2.Math.EC.ECFieldElement,System.Boolean)">
            @deprecated per-point compression property will be removed, refer {@link #getEncoded(bool)}
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Sec.SecT131R1Point.#ctor(Org.BouncyCastle2.Math.EC.ECCurve,Org.BouncyCastle2.Math.EC.ECFieldElement,Org.BouncyCastle2.Math.EC.ECFieldElement)">
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Sec.SecT131R1Point.#ctor(Org.BouncyCastle2.Math.EC.ECCurve,Org.BouncyCastle2.Math.EC.ECFieldElement,Org.BouncyCastle2.Math.EC.ECFieldElement,System.Boolean)">
            @deprecated per-point compression property will be removed, refer {@link #getEncoded(bool)}
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Sec.SecT131R2Point.#ctor(Org.BouncyCastle2.Math.EC.ECCurve,Org.BouncyCastle2.Math.EC.ECFieldElement,Org.BouncyCastle2.Math.EC.ECFieldElement)">
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Sec.SecT131R2Point.#ctor(Org.BouncyCastle2.Math.EC.ECCurve,Org.BouncyCastle2.Math.EC.ECFieldElement,Org.BouncyCastle2.Math.EC.ECFieldElement,System.Boolean)">
            @deprecated per-point compression property will be removed, refer {@link #getEncoded(bool)}
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Sec.SecT163K1Point.#ctor(Org.BouncyCastle2.Math.EC.ECCurve,Org.BouncyCastle2.Math.EC.ECFieldElement,Org.BouncyCastle2.Math.EC.ECFieldElement)">
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Sec.SecT163K1Point.#ctor(Org.BouncyCastle2.Math.EC.ECCurve,Org.BouncyCastle2.Math.EC.ECFieldElement,Org.BouncyCastle2.Math.EC.ECFieldElement,System.Boolean)">
            @deprecated per-point compression property will be removed, refer {@link #getEncoded(bool)}
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Sec.SecT163R1Point.#ctor(Org.BouncyCastle2.Math.EC.ECCurve,Org.BouncyCastle2.Math.EC.ECFieldElement,Org.BouncyCastle2.Math.EC.ECFieldElement)">
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Sec.SecT163R1Point.#ctor(Org.BouncyCastle2.Math.EC.ECCurve,Org.BouncyCastle2.Math.EC.ECFieldElement,Org.BouncyCastle2.Math.EC.ECFieldElement,System.Boolean)">
            @deprecated per-point compression property will be removed, refer {@link #getEncoded(bool)}
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Sec.SecT163R2Point.#ctor(Org.BouncyCastle2.Math.EC.ECCurve,Org.BouncyCastle2.Math.EC.ECFieldElement,Org.BouncyCastle2.Math.EC.ECFieldElement)">
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Sec.SecT163R2Point.#ctor(Org.BouncyCastle2.Math.EC.ECCurve,Org.BouncyCastle2.Math.EC.ECFieldElement,Org.BouncyCastle2.Math.EC.ECFieldElement,System.Boolean)">
            @deprecated per-point compression property will be removed, refer {@link #getEncoded(bool)}
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Sec.SecT193R1Point.#ctor(Org.BouncyCastle2.Math.EC.ECCurve,Org.BouncyCastle2.Math.EC.ECFieldElement,Org.BouncyCastle2.Math.EC.ECFieldElement)">
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Sec.SecT193R1Point.#ctor(Org.BouncyCastle2.Math.EC.ECCurve,Org.BouncyCastle2.Math.EC.ECFieldElement,Org.BouncyCastle2.Math.EC.ECFieldElement,System.Boolean)">
            @deprecated per-point compression property will be removed, refer {@link #getEncoded(bool)}
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Sec.SecT193R2Point.#ctor(Org.BouncyCastle2.Math.EC.ECCurve,Org.BouncyCastle2.Math.EC.ECFieldElement,Org.BouncyCastle2.Math.EC.ECFieldElement)">
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Sec.SecT193R2Point.#ctor(Org.BouncyCastle2.Math.EC.ECCurve,Org.BouncyCastle2.Math.EC.ECFieldElement,Org.BouncyCastle2.Math.EC.ECFieldElement,System.Boolean)">
            @deprecated per-point compression property will be removed, refer {@link #getEncoded(bool)}
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Sec.SecT233K1Point.#ctor(Org.BouncyCastle2.Math.EC.ECCurve,Org.BouncyCastle2.Math.EC.ECFieldElement,Org.BouncyCastle2.Math.EC.ECFieldElement)">
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Sec.SecT233K1Point.#ctor(Org.BouncyCastle2.Math.EC.ECCurve,Org.BouncyCastle2.Math.EC.ECFieldElement,Org.BouncyCastle2.Math.EC.ECFieldElement,System.Boolean)">
            @deprecated per-point compression property will be removed, refer {@link #getEncoded(bool)}
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Sec.SecT233R1Point.#ctor(Org.BouncyCastle2.Math.EC.ECCurve,Org.BouncyCastle2.Math.EC.ECFieldElement,Org.BouncyCastle2.Math.EC.ECFieldElement)">
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Sec.SecT233R1Point.#ctor(Org.BouncyCastle2.Math.EC.ECCurve,Org.BouncyCastle2.Math.EC.ECFieldElement,Org.BouncyCastle2.Math.EC.ECFieldElement,System.Boolean)">
            @deprecated per-point compression property will be removed, refer {@link #getEncoded(bool)}
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Sec.SecT239K1Point.#ctor(Org.BouncyCastle2.Math.EC.ECCurve,Org.BouncyCastle2.Math.EC.ECFieldElement,Org.BouncyCastle2.Math.EC.ECFieldElement)">
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Sec.SecT239K1Point.#ctor(Org.BouncyCastle2.Math.EC.ECCurve,Org.BouncyCastle2.Math.EC.ECFieldElement,Org.BouncyCastle2.Math.EC.ECFieldElement,System.Boolean)">
            @deprecated per-point compression property will be removed, refer {@link #getEncoded(bool)}
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Sec.SecT283K1Point.#ctor(Org.BouncyCastle2.Math.EC.ECCurve,Org.BouncyCastle2.Math.EC.ECFieldElement,Org.BouncyCastle2.Math.EC.ECFieldElement)">
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Sec.SecT283K1Point.#ctor(Org.BouncyCastle2.Math.EC.ECCurve,Org.BouncyCastle2.Math.EC.ECFieldElement,Org.BouncyCastle2.Math.EC.ECFieldElement,System.Boolean)">
            @deprecated per-point compression property will be removed, refer {@link #getEncoded(bool)}
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Sec.SecT283R1Point.#ctor(Org.BouncyCastle2.Math.EC.ECCurve,Org.BouncyCastle2.Math.EC.ECFieldElement,Org.BouncyCastle2.Math.EC.ECFieldElement)">
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Sec.SecT283R1Point.#ctor(Org.BouncyCastle2.Math.EC.ECCurve,Org.BouncyCastle2.Math.EC.ECFieldElement,Org.BouncyCastle2.Math.EC.ECFieldElement,System.Boolean)">
            @deprecated per-point compression property will be removed, refer {@link #getEncoded(bool)}
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Sec.SecT409K1Point.#ctor(Org.BouncyCastle2.Math.EC.ECCurve,Org.BouncyCastle2.Math.EC.ECFieldElement,Org.BouncyCastle2.Math.EC.ECFieldElement)">
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Sec.SecT409K1Point.#ctor(Org.BouncyCastle2.Math.EC.ECCurve,Org.BouncyCastle2.Math.EC.ECFieldElement,Org.BouncyCastle2.Math.EC.ECFieldElement,System.Boolean)">
            @deprecated per-point compression property will be removed, refer {@link #getEncoded(bool)}
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Sec.SecT409R1Point.#ctor(Org.BouncyCastle2.Math.EC.ECCurve,Org.BouncyCastle2.Math.EC.ECFieldElement,Org.BouncyCastle2.Math.EC.ECFieldElement)">
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Sec.SecT409R1Point.#ctor(Org.BouncyCastle2.Math.EC.ECCurve,Org.BouncyCastle2.Math.EC.ECFieldElement,Org.BouncyCastle2.Math.EC.ECFieldElement,System.Boolean)">
            @deprecated per-point compression property will be removed, refer {@link #getEncoded(bool)}
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Sec.SecT571K1Point.#ctor(Org.BouncyCastle2.Math.EC.ECCurve,Org.BouncyCastle2.Math.EC.ECFieldElement,Org.BouncyCastle2.Math.EC.ECFieldElement)">
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Sec.SecT571K1Point.#ctor(Org.BouncyCastle2.Math.EC.ECCurve,Org.BouncyCastle2.Math.EC.ECFieldElement,Org.BouncyCastle2.Math.EC.ECFieldElement,System.Boolean)">
            @deprecated per-point compression property will be removed, refer {@link #getEncoded(bool)}
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Sec.SecT571R1Point.#ctor(Org.BouncyCastle2.Math.EC.ECCurve,Org.BouncyCastle2.Math.EC.ECFieldElement,Org.BouncyCastle2.Math.EC.ECFieldElement)">
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Custom.Sec.SecT571R1Point.#ctor(Org.BouncyCastle2.Math.EC.ECCurve,Org.BouncyCastle2.Math.EC.ECFieldElement,Org.BouncyCastle2.Math.EC.ECFieldElement,System.Boolean)">
            @deprecated per-point compression property will be removed, refer {@link #getEncoded(bool)}
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.ECAlgorithms.ReferenceMultiply(Org.BouncyCastle2.Math.EC.ECPoint,Org.BouncyCastle2.Math.BigInteger)">
            Simple shift-and-add multiplication. Serves as reference implementation to verify (possibly
            faster) implementations, and for very small scalars. CAUTION: This implementation is NOT
            constant-time in any way. It is only intended to be used for diagnostics.
            
            @param p
                       The point to multiply.
            @param k
                       The multiplier.
            @return The result of the point multiplication <code>kP</code>.
        </member>
        <member name="T:Org.BouncyCastle2.Math.EC.ECCurve">
            <remarks>Base class for an elliptic curve.</remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.ECCurve.Precompute(Org.BouncyCastle2.Math.EC.ECPoint,System.String,Org.BouncyCastle2.Math.EC.Multiplier.IPreCompCallback)">
            Compute a <code>PreCompInfo</code> for a point on this curve, under a given name. Used by
            <code>ECMultiplier</code>s to save the precomputation for this <code>ECPoint</code> for use
            by subsequent multiplication.
            
            @param point
                       The <code>ECPoint</code> to store precomputations for.
            @param name
                       A <code>String</code> used to index precomputations of different types.
            @param callback
                       Called to calculate the <code>PreCompInfo</code>.
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.ECCurve.NormalizeAll(Org.BouncyCastle2.Math.EC.ECPoint[])">
            Normalization ensures that any projective coordinate is 1, and therefore that the x, y
            coordinates reflect those of the equivalent point in an affine coordinate system. Where more
            than one point is to be normalized, this method will generally be more efficient than
            normalizing each point separately.
            
            @param points
                       An array of points that will be updated in place with their normalized versions,
                       where necessary
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.ECCurve.NormalizeAll(Org.BouncyCastle2.Math.EC.ECPoint[],System.Int32,System.Int32,Org.BouncyCastle2.Math.EC.ECFieldElement)">
            Normalization ensures that any projective coordinate is 1, and therefore that the x, y
            coordinates reflect those of the equivalent point in an affine coordinate system. Where more
            than one point is to be normalized, this method will generally be more efficient than
            normalizing each point separately. An (optional) z-scaling factor can be applied; effectively
            each z coordinate is scaled by this value prior to normalization (but only one
            actual multiplication is needed).
            
            @param points
                       An array of points that will be updated in place with their normalized versions,
                       where necessary
            @param off
                       The start of the range of points to normalize
            @param len
                       The length of the range of points to normalize
            @param iso
                       The (optional) z-scaling factor - can be null
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.ECCurve.CreateCacheSafeLookupTable(Org.BouncyCastle2.Math.EC.ECPoint[],System.Int32,System.Int32)">
            Create a cache-safe lookup table for the specified sequence of points. All the points MUST
            belong to this <code>ECCurve</code> instance, and MUST already be normalized.
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.ECCurve.GetMultiplier">
             Sets the default <code>ECMultiplier</code>, unless already set.
            
             We avoid locking for performance reasons, so there is no uniqueness guarantee.
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.ECCurve.DecodePoint(System.Byte[])">
            Decode a point on this curve from its ASN.1 encoding. The different
            encodings are taken account of, including point compression for
            <code>F<sub>p</sub></code> (X9.62 s 4.2.1 pg 17).
            @return The decoded point.
        </member>
        <member name="T:Org.BouncyCastle2.Math.EC.FpCurve">
            Elliptic curve over Fp
        </member>
        <member name="F:Org.BouncyCastle2.Math.EC.AbstractF2mCurve.si">
            The auxiliary values <code>s<sub>0</sub></code> and
            <code>s<sub>1</sub></code> used for partial modular reduction for
            Koblitz curves.
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.AbstractF2mCurve.SolveQuadraticEquation(Org.BouncyCastle2.Math.EC.ECFieldElement)">
             Solves a quadratic equation <code>z<sup>2</sup> + z = beta</code>(X9.62
             D.1.6) The other solution is <code>z + 1</code>.
            
             @param beta
                        The value to solve the quadratic equation for.
             @return the solution for <code>z<sup>2</sup> + z = beta</code> or
                     <code>null</code> if no solution exists.
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.AbstractF2mCurve.GetSi">
            @return the auxiliary values <code>s<sub>0</sub></code> and
            <code>s<sub>1</sub></code> used for partial modular reduction for
            Koblitz curves.
        </member>
        <member name="P:Org.BouncyCastle2.Math.EC.AbstractF2mCurve.IsKoblitz">
            Returns true if this is a Koblitz curve (ABC curve).
            @return true if this is a Koblitz curve (ABC curve), false otherwise
        </member>
        <member name="T:Org.BouncyCastle2.Math.EC.F2mCurve">
            Elliptic curves over F2m. The Weierstrass equation is given by
            <code>y<sup>2</sup> + xy = x<sup>3</sup> + ax<sup>2</sup> + b</code>.
        </member>
        <member name="F:Org.BouncyCastle2.Math.EC.F2mCurve.m">
            The exponent <code>m</code> of <code>F<sub>2<sup>m</sup></sub></code>.
        </member>
        <member name="F:Org.BouncyCastle2.Math.EC.F2mCurve.k1">
            TPB: The integer <code>k</code> where <code>x<sup>m</sup> +
            x<sup>k</sup> + 1</code> represents the reduction polynomial
            <code>f(z)</code>.<br/>
            PPB: The integer <code>k1</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.<br/>
        </member>
        <member name="F:Org.BouncyCastle2.Math.EC.F2mCurve.k2">
            TPB: Always set to <code>0</code><br/>
            PPB: The integer <code>k2</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.<br/>
        </member>
        <member name="F:Org.BouncyCastle2.Math.EC.F2mCurve.k3">
            TPB: Always set to <code>0</code><br/>
            PPB: The integer <code>k3</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.<br/>
        </member>
        <member name="F:Org.BouncyCastle2.Math.EC.F2mCurve.m_infinity">
            The point at infinity on this curve.
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.F2mCurve.#ctor(System.Int32,System.Int32,Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger)">
            Constructor for Trinomial Polynomial Basis (TPB).
            @param m  The exponent <code>m</code> of
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param k The integer <code>k</code> where <code>x<sup>m</sup> +
            x<sup>k</sup> + 1</code> represents the reduction
            polynomial <code>f(z)</code>.
            @param a The coefficient <code>a</code> in the Weierstrass equation
            for non-supersingular elliptic curves over
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param b The coefficient <code>b</code> in the Weierstrass equation
            for non-supersingular elliptic curves over
            <code>F<sub>2<sup>m</sup></sub></code>.
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.F2mCurve.#ctor(System.Int32,System.Int32,Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger)">
            Constructor for Trinomial Polynomial Basis (TPB).
            @param m  The exponent <code>m</code> of
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param k The integer <code>k</code> where <code>x<sup>m</sup> +
            x<sup>k</sup> + 1</code> represents the reduction
            polynomial <code>f(z)</code>.
            @param a The coefficient <code>a</code> in the Weierstrass equation
            for non-supersingular elliptic curves over
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param b The coefficient <code>b</code> in the Weierstrass equation
            for non-supersingular elliptic curves over
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param order The order of the main subgroup of the elliptic curve.
            @param cofactor The cofactor of the elliptic curve, i.e.
            <code>#E<sub>a</sub>(F<sub>2<sup>m</sup></sub>) = h * n</code>.
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.F2mCurve.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger)">
            Constructor for Pentanomial Polynomial Basis (PPB).
            @param m  The exponent <code>m</code> of
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param k1 The integer <code>k1</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.
            @param k2 The integer <code>k2</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.
            @param k3 The integer <code>k3</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.
            @param a The coefficient <code>a</code> in the Weierstrass equation
            for non-supersingular elliptic curves over
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param b The coefficient <code>b</code> in the Weierstrass equation
            for non-supersingular elliptic curves over
            <code>F<sub>2<sup>m</sup></sub></code>.
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.F2mCurve.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger)">
            Constructor for Pentanomial Polynomial Basis (PPB).
            @param m  The exponent <code>m</code> of
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param k1 The integer <code>k1</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.
            @param k2 The integer <code>k2</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.
            @param k3 The integer <code>k3</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.
            @param a The coefficient <code>a</code> in the Weierstrass equation
            for non-supersingular elliptic curves over
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param b The coefficient <code>b</code> in the Weierstrass equation
            for non-supersingular elliptic curves over
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param order The order of the main subgroup of the elliptic curve.
            @param cofactor The cofactor of the elliptic curve, i.e.
            <code>#E<sub>a</sub>(F<sub>2<sup>m</sup></sub>) = h * n</code>.
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.F2mCurve.IsTrinomial">
             Return true if curve uses a Trinomial basis.
            
             @return true if curve Trinomial, false otherwise.
        </member>
        <member name="P:Org.BouncyCastle2.Math.EC.FpFieldElement.FieldName">
             return the field name for this field.
            
             @return the string "Fp".
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.FpFieldElement.Sqrt">
            return a sqrt root - the routine verifies that the calculation
            returns the right value - if none exists it returns null.
        </member>
        <member name="T:Org.BouncyCastle2.Math.EC.F2mFieldElement">
            Class representing the Elements of the finite field
            <code>F<sub>2<sup>m</sup></sub></code> in polynomial basis (PB)
            representation. Both trinomial (Tpb) and pentanomial (Ppb) polynomial
            basis representations are supported. Gaussian normal basis (GNB)
            representation is not supported.
        </member>
        <member name="F:Org.BouncyCastle2.Math.EC.F2mFieldElement.Gnb">
            Indicates gaussian normal basis representation (GNB). Number chosen
            according to X9.62. GNB is not implemented at present.
        </member>
        <member name="F:Org.BouncyCastle2.Math.EC.F2mFieldElement.Tpb">
            Indicates trinomial basis representation (Tpb). Number chosen
            according to X9.62.
        </member>
        <member name="F:Org.BouncyCastle2.Math.EC.F2mFieldElement.Ppb">
            Indicates pentanomial basis representation (Ppb). Number chosen
            according to X9.62.
        </member>
        <member name="F:Org.BouncyCastle2.Math.EC.F2mFieldElement.representation">
            Tpb or Ppb.
        </member>
        <member name="F:Org.BouncyCastle2.Math.EC.F2mFieldElement.m">
            The exponent <code>m</code> of <code>F<sub>2<sup>m</sup></sub></code>.
        </member>
        <member name="F:Org.BouncyCastle2.Math.EC.F2mFieldElement.x">
            The <code>LongArray</code> holding the bits.
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.F2mFieldElement.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,Org.BouncyCastle2.Math.BigInteger)">
            Constructor for Ppb.
            @param m  The exponent <code>m</code> of
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param k1 The integer <code>k1</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.
            @param k2 The integer <code>k2</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.
            @param k3 The integer <code>k3</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.
            @param x The BigInteger representing the value of the field element.
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.F2mFieldElement.#ctor(System.Int32,System.Int32,Org.BouncyCastle2.Math.BigInteger)">
            Constructor for Tpb.
            @param m  The exponent <code>m</code> of
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param k The integer <code>k</code> where <code>x<sup>m</sup> +
            x<sup>k</sup> + 1</code> represents the reduction
            polynomial <code>f(z)</code>.
            @param x The BigInteger representing the value of the field element.
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.F2mFieldElement.CheckFieldElements(Org.BouncyCastle2.Math.EC.ECFieldElement,Org.BouncyCastle2.Math.EC.ECFieldElement)">
            Checks, if the ECFieldElements <code>a</code> and <code>b</code>
            are elements of the same field <code>F<sub>2<sup>m</sup></sub></code>
            (having the same representation).
            @param a field element.
            @param b field element to be compared.
            @throws ArgumentException if <code>a</code> and <code>b</code>
            are not elements of the same field
            <code>F<sub>2<sup>m</sup></sub></code> (having the same
            representation).
        </member>
        <member name="P:Org.BouncyCastle2.Math.EC.F2mFieldElement.Representation">
            @return the representation of the field
            <code>F<sub>2<sup>m</sup></sub></code>, either of
            {@link F2mFieldElement.Tpb} (trinomial
            basis representation) or
            {@link F2mFieldElement.Ppb} (pentanomial
            basis representation).
        </member>
        <member name="P:Org.BouncyCastle2.Math.EC.F2mFieldElement.M">
            @return the degree <code>m</code> of the reduction polynomial
            <code>f(z)</code>.
        </member>
        <member name="P:Org.BouncyCastle2.Math.EC.F2mFieldElement.K1">
            @return Tpb: The integer <code>k</code> where <code>x<sup>m</sup> +
            x<sup>k</sup> + 1</code> represents the reduction polynomial
            <code>f(z)</code>.<br/>
            Ppb: The integer <code>k1</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.<br/>
        </member>
        <member name="P:Org.BouncyCastle2.Math.EC.F2mFieldElement.K2">
            @return Tpb: Always returns <code>0</code><br/>
            Ppb: The integer <code>k2</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.<br/>
        </member>
        <member name="P:Org.BouncyCastle2.Math.EC.F2mFieldElement.K3">
            @return Tpb: Always set to <code>0</code><br/>
            Ppb: The integer <code>k3</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.<br/>
        </member>
        <member name="T:Org.BouncyCastle2.Math.EC.ECPoint">
            base class for points on elliptic curves.
        </member>
        <member name="P:Org.BouncyCastle2.Math.EC.ECPoint.AffineXCoord">
            Returns the affine x-coordinate after checking that this point is normalized.
            
            @return The affine x-coordinate of this point
            @throws IllegalStateException if the point is not normalized
        </member>
        <member name="P:Org.BouncyCastle2.Math.EC.ECPoint.AffineYCoord">
            Returns the affine y-coordinate after checking that this point is normalized
            
            @return The affine y-coordinate of this point
            @throws IllegalStateException if the point is not normalized
        </member>
        <member name="P:Org.BouncyCastle2.Math.EC.ECPoint.XCoord">
            Returns the x-coordinate.
            
            Caution: depending on the curve's coordinate system, this may not be the same value as in an
            affine coordinate system; use Normalize() to get a point where the coordinates have their
            affine values, or use AffineXCoord if you expect the point to already have been normalized.
            
            @return the x-coordinate of this point
        </member>
        <member name="P:Org.BouncyCastle2.Math.EC.ECPoint.YCoord">
            Returns the y-coordinate.
            
            Caution: depending on the curve's coordinate system, this may not be the same value as in an
            affine coordinate system; use Normalize() to get a point where the coordinates have their
            affine values, or use AffineYCoord if you expect the point to already have been normalized.
            
            @return the y-coordinate of this point
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.ECPoint.Normalize">
            Normalization ensures that any projective coordinate is 1, and therefore that the x, y
            coordinates reflect those of the equivalent point in an affine coordinate system.
            
            @return a new ECPoint instance representing the same point, but with normalized coordinates
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.ECPointBase.GetEncoded(System.Boolean)">
            return the field element encoded with point compression. (S 4.3.6)
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.ECPointBase.Multiply(Org.BouncyCastle2.Math.BigInteger)">
            Multiplies this <code>ECPoint</code> by the given number.
            @param k The multiplicator.
            @return <code>k * this</code>.
        </member>
        <member name="T:Org.BouncyCastle2.Math.EC.FpPoint">
            Elliptic curve points over Fp
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.FpPoint.#ctor(Org.BouncyCastle2.Math.EC.ECCurve,Org.BouncyCastle2.Math.EC.ECFieldElement,Org.BouncyCastle2.Math.EC.ECFieldElement)">
             Create a point which encodes without point compression.
            
             @param curve the curve to use
             @param x affine x co-ordinate
             @param y affine y co-ordinate
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.FpPoint.#ctor(Org.BouncyCastle2.Math.EC.ECCurve,Org.BouncyCastle2.Math.EC.ECFieldElement,Org.BouncyCastle2.Math.EC.ECFieldElement,System.Boolean)">
             Create a point that encodes with or without point compression.
            
             @param curve the curve to use
             @param x affine x co-ordinate
             @param y affine y co-ordinate
             @param withCompression if true encode with point compression
        </member>
        <member name="T:Org.BouncyCastle2.Math.EC.F2mPoint">
            Elliptic curve points over F2m
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.F2mPoint.#ctor(Org.BouncyCastle2.Math.EC.ECCurve,Org.BouncyCastle2.Math.EC.ECFieldElement,Org.BouncyCastle2.Math.EC.ECFieldElement)">
            @param curve base curve
            @param x x point
            @param y y point
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.F2mPoint.#ctor(Org.BouncyCastle2.Math.EC.ECCurve,Org.BouncyCastle2.Math.EC.ECFieldElement,Org.BouncyCastle2.Math.EC.ECFieldElement,System.Boolean)">
            @param curve base curve
            @param x x point
            @param y y point
            @param withCompression true if encode with point compression.
        </member>
        <member name="T:Org.BouncyCastle2.Math.EC.Multiplier.ECMultiplier">
            Interface for classes encapsulating a point multiplication algorithm
            for <code>ECPoint</code>s.
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Multiplier.ECMultiplier.Multiply(Org.BouncyCastle2.Math.EC.ECPoint,Org.BouncyCastle2.Math.BigInteger)">
            Multiplies the <code>ECPoint p</code> by <code>k</code>, i.e.
            <code>p</code> is added <code>k</code> times to itself.
            @param p The <code>ECPoint</code> to be multiplied.
            @param k The factor by which <code>p</code> is multiplied.
            @return <code>p</code> multiplied by <code>k</code>.
        </member>
        <member name="T:Org.BouncyCastle2.Math.EC.Multiplier.FixedPointPreCompInfo">
            Class holding precomputation data for fixed-point multiplications.
        </member>
        <member name="F:Org.BouncyCastle2.Math.EC.Multiplier.FixedPointPreCompInfo.m_lookupTable">
            Lookup table for the precomputed <code>ECPoint</code>s used for a fixed point multiplication.
        </member>
        <member name="F:Org.BouncyCastle2.Math.EC.Multiplier.FixedPointPreCompInfo.m_width">
            The width used for the precomputation. If a larger width precomputation
            is already available this may be larger than was requested, so calling
            code should refer to the actual width.
        </member>
        <member name="T:Org.BouncyCastle2.Math.EC.Multiplier.PreCompInfo">
            Interface for classes storing precomputation data for multiplication
            algorithms. Used as a Memento (see GOF patterns) for
            <code>WNafMultiplier</code>.
        </member>
        <member name="T:Org.BouncyCastle2.Math.EC.Multiplier.WNafL2RMultiplier">
            Class implementing the WNAF (Window Non-Adjacent Form) multiplication
            algorithm.
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Multiplier.WNafL2RMultiplier.MultiplyPositive(Org.BouncyCastle2.Math.EC.ECPoint,Org.BouncyCastle2.Math.BigInteger)">
            Multiplies <code>this</code> by an integer <code>k</code> using the
            Window NAF method.
            @param k The integer by which <code>this</code> is multiplied.
            @return A new <code>ECPoint</code> which equals <code>this</code>
            multiplied by <code>k</code>.
        </member>
        <member name="T:Org.BouncyCastle2.Math.EC.Multiplier.WNafPreCompInfo">
            Class holding precomputation data for the WNAF (Window Non-Adjacent Form)
            algorithm.
        </member>
        <member name="F:Org.BouncyCastle2.Math.EC.Multiplier.WNafPreCompInfo.m_preComp">
            Array holding the precomputed <code>ECPoint</code>s used for a Window
            NAF multiplication.
        </member>
        <member name="F:Org.BouncyCastle2.Math.EC.Multiplier.WNafPreCompInfo.m_preCompNeg">
            Array holding the negations of the precomputed <code>ECPoint</code>s used
            for a Window NAF multiplication.
        </member>
        <member name="F:Org.BouncyCastle2.Math.EC.Multiplier.WNafPreCompInfo.m_twice">
            Holds an <code>ECPoint</code> representing Twice(this). Used for the
            Window NAF multiplication to create or extend the precomputed values.
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Multiplier.WNafUtilities.GenerateWindowNaf(System.Int32,Org.BouncyCastle2.Math.BigInteger)">
            Computes the Window NAF (non-adjacent Form) of an integer.
            @param width The width <code>w</code> of the Window NAF. The width is
            defined as the minimal number <code>w</code>, such that for any
            <code>w</code> consecutive digits in the resulting representation, at
            most one is non-zero.
            @param k The integer of which the Window NAF is computed.
            @return The Window NAF of the given width, such that the following holds:
            <code>k = &amp;sum;<sub>i=0</sub><sup>l-1</sup> k<sub>i</sub>2<sup>i</sup>
            </code>, where the <code>k<sub>i</sub></code> denote the elements of the
            returned <code>byte[]</code>.
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Multiplier.WNafUtilities.GetWindowSize(System.Int32)">
            Determine window width to use for a scalar multiplication of the given size.
            
            @param bits the bit-length of the scalar to multiply by
            @return the window size to use
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Multiplier.WNafUtilities.GetWindowSize(System.Int32,System.Int32)">
            Determine window width to use for a scalar multiplication of the given size.
            
            @param bits the bit-length of the scalar to multiply by
            @param maxWidth the maximum window width to return 
            @return the window size to use
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Multiplier.WNafUtilities.GetWindowSize(System.Int32,System.Int32[])">
            Determine window width to use for a scalar multiplication of the given size.
            
            @param bits the bit-length of the scalar to multiply by
            @param windowSizeCutoffs a monotonically increasing list of bit sizes at which to increment the window width
            @return the window size to use
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Multiplier.WNafUtilities.GetWindowSize(System.Int32,System.Int32[],System.Int32)">
            Determine window width to use for a scalar multiplication of the given size.
            
            @param bits the bit-length of the scalar to multiply by
            @param windowSizeCutoffs a monotonically increasing list of bit sizes at which to increment the window width
            @param maxWidth the maximum window width to return 
            @return the window size to use
        </member>
        <member name="T:Org.BouncyCastle2.Math.EC.Multiplier.WTauNafMultiplier">
            Class implementing the WTNAF (Window
            <code>&#964;</code>-adic Non-Adjacent Form) algorithm.
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Multiplier.WTauNafMultiplier.MultiplyPositive(Org.BouncyCastle2.Math.EC.ECPoint,Org.BouncyCastle2.Math.BigInteger)">
            Multiplies a {@link org.BouncyCastle2.math.ec.AbstractF2mPoint AbstractF2mPoint}
            by <code>k</code> using the reduced <code>&#964;</code>-adic NAF (RTNAF)
            method.
            @param p The AbstractF2mPoint to multiply.
            @param k The integer by which to multiply <code>k</code>.
            @return <code>p</code> multiplied by <code>k</code>.
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Multiplier.WTauNafMultiplier.MultiplyWTnaf(Org.BouncyCastle2.Math.EC.AbstractF2mPoint,Org.BouncyCastle2.Math.EC.Abc.ZTauElement,System.SByte,System.SByte)">
            Multiplies a {@link org.BouncyCastle2.math.ec.AbstractF2mPoint AbstractF2mPoint}
            by an element <code>&#955;</code> of <code><b>Z</b>[&#964;]</code> using
            the <code>&#964;</code>-adic NAF (TNAF) method.
            @param p The AbstractF2mPoint to multiply.
            @param lambda The element <code>&#955;</code> of
            <code><b>Z</b>[&#964;]</code> of which to compute the
            <code>[&#964;]</code>-adic NAF.
            @return <code>p</code> multiplied by <code>&#955;</code>.
        </member>
        <member name="M:Org.BouncyCastle2.Math.EC.Multiplier.WTauNafMultiplier.MultiplyFromWTnaf(Org.BouncyCastle2.Math.EC.AbstractF2mPoint,System.SByte[])">
            Multiplies a {@link org.BouncyCastle2.math.ec.AbstractF2mPoint AbstractF2mPoint}
            by an element <code>&#955;</code> of <code><b>Z</b>[&#964;]</code>
            using the window <code>&#964;</code>-adic NAF (TNAF) method, given the
            WTNAF of <code>&#955;</code>.
            @param p The AbstractF2mPoint to multiply.
            @param u The the WTNAF of <code>&#955;</code>..
            @return <code>&#955; * p</code>
        </member>
        <member name="T:Org.BouncyCastle2.Math.EC.Multiplier.WTauNafPreCompInfo">
            Class holding precomputation data for the WTNAF (Window
            <code>&#964;</code>-adic Non-Adjacent Form) algorithm.
        </member>
        <member name="F:Org.BouncyCastle2.Math.EC.Multiplier.WTauNafPreCompInfo.m_preComp">
            Array holding the precomputed <code>AbstractF2mPoint</code>s used for the
            WTNAF multiplication in <code>
            {@link org.BouncyCastle2.math.ec.multiplier.WTauNafMultiplier.multiply()
            WTauNafMultiplier.multiply()}</code>.
        </member>
        <member name="T:Org.BouncyCastle2.Math.Primes">
            Utility methods for generating primes and testing for primality.
        </member>
        <member name="T:Org.BouncyCastle2.Math.Primes.MROutput">
            Used to return the output from the
            {@linkplain Primes#enhancedMRProbablePrimeTest(BigInteger, SecureRandom, int) Enhanced
            Miller-Rabin Probabilistic Primality Test}
        </member>
        <member name="T:Org.BouncyCastle2.Math.Primes.STOutput">
            Used to return the output from the {@linkplain Primes#generateSTRandomPrime(Digest, int, byte[]) Shawe-Taylor Random_Prime Routine} 
        </member>
        <member name="M:Org.BouncyCastle2.Math.Primes.GenerateSTRandomPrime(Org.BouncyCastle2.Crypto.IDigest,System.Int32,System.Byte[])">
            FIPS 186-4 C.6 Shawe-Taylor Random_Prime Routine
            
            Construct a provable prime number using a hash function.
            
            @param hash
                       the {@link Digest} instance to use (as "Hash()"). Cannot be null.
            @param length
                       the length (in bits) of the prime to be generated. Must be at least 2.
            @param inputSeed
                       the seed to be used for the generation of the requested prime. Cannot be null or
                       empty.
            @return an {@link STOutput} instance containing the requested prime.
        </member>
        <member name="M:Org.BouncyCastle2.Math.Primes.EnhancedMRProbablePrimeTest(Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Security.SecureRandom,System.Int32)">
            FIPS 186-4 C.3.2 Enhanced Miller-Rabin Probabilistic Primality Test
            
            Run several iterations of the Miller-Rabin algorithm with randomly-chosen bases. This is an
            alternative to {@link #isMRProbablePrime(BigInteger, SecureRandom, int)} that provides more
            information about a composite candidate, which may be useful when generating or validating
            RSA moduli.
            
            @param candidate
                       the {@link BigInteger} instance to test for primality.
            @param random
                       the source of randomness to use to choose bases.
            @param iterations
                       the number of randomly-chosen bases to perform the test for.
            @return an {@link MROutput} instance that can be further queried for details.
        </member>
        <member name="M:Org.BouncyCastle2.Math.Primes.HasAnySmallFactors(Org.BouncyCastle2.Math.BigInteger)">
            A fast check for small divisors, up to some implementation-specific limit.
            
            @param candidate
                       the {@link BigInteger} instance to test for division by small factors.
            
            @return <code>true</code> if the candidate is found to have any small factors,
                    <code>false</code> otherwise.
        </member>
        <member name="M:Org.BouncyCastle2.Math.Primes.IsMRProbablePrime(Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Security.SecureRandom,System.Int32)">
            FIPS 186-4 C.3.1 Miller-Rabin Probabilistic Primality Test
            
            Run several iterations of the Miller-Rabin algorithm with randomly-chosen bases.
            
            @param candidate
                       the {@link BigInteger} instance to test for primality.
            @param random
                       the source of randomness to use to choose bases.
            @param iterations
                       the number of randomly-chosen bases to perform the test for.
            @return <code>false</code> if any witness to compositeness is found amongst the chosen bases
                    (so <code>candidate</code> is definitely NOT prime), or else <code>true</code>
                    (indicating primality with some probability dependent on the number of iterations
                    that were performed).
        </member>
        <member name="M:Org.BouncyCastle2.Math.Primes.IsMRProbablePrimeToBase(Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger)">
            FIPS 186-4 C.3.1 Miller-Rabin Probabilistic Primality Test (to a fixed base).
            
            Run a single iteration of the Miller-Rabin algorithm against the specified base.
            
            @param candidate
                       the {@link BigInteger} instance to test for primality.
            @param baseValue
                       the base value to use for this iteration.
            @return <code>false</code> if the specified base is a witness to compositeness (so
                    <code>candidate</code> is definitely NOT prime), or else <code>true</code>.
        </member>
        <member name="T:Org.BouncyCastle2.Ocsp.BasicOcspResp">
            <remarks>
            <code>
            BasicOcspResponse ::= SEQUENCE {
            	tbsResponseData		ResponseData,
            	signatureAlgorithm	AlgorithmIdentifier,
            	signature			BIT STRING,
            	certs				[0] EXPLICIT SEQUENCE OF Certificate OPTIONAL
            }
            </code>
            </remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Ocsp.BasicOcspResp.GetTbsResponseData">
            <returns>The DER encoding of the tbsResponseData field.</returns>
            <exception cref="T:Org.BouncyCastle2.Ocsp.OcspException">In the event of an encoding error.</exception>
        </member>
        <member name="M:Org.BouncyCastle2.Ocsp.BasicOcspResp.GetCertificates(System.String)">
            <returns>The certificates, if any, associated with the response.</returns>
            <exception cref="T:Org.BouncyCastle2.Ocsp.OcspException">In the event of an encoding error.</exception>
        </member>
        <member name="M:Org.BouncyCastle2.Ocsp.BasicOcspResp.Verify(Org.BouncyCastle2.Crypto.AsymmetricKeyParameter)">
            <summary>
            Verify the signature against the tbsResponseData object we contain.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Ocsp.BasicOcspResp.GetEncoded">
            <returns>The ASN.1 encoded representation of this object.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Ocsp.CertificateID.#ctor(System.String,Org.BouncyCastle2.X509.X509Certificate,Org.BouncyCastle2.Math.BigInteger)">
            create from an issuer certificate and the serial number of the
            certificate it signed.
            @exception OcspException if any problems occur creating the id fields.
        </member>
        <member name="P:Org.BouncyCastle2.Ocsp.CertificateID.SerialNumber">
            return the serial number for the certificate associated
            with this request.
        </member>
        <member name="M:Org.BouncyCastle2.Ocsp.CertificateID.DeriveCertificateID(Org.BouncyCastle2.Ocsp.CertificateID,Org.BouncyCastle2.Math.BigInteger)">
             Create a new CertificateID for a new serial number derived from a previous one
             calculated for the same CA certificate.
            
             @param original the previously calculated CertificateID for the CA.
             @param newSerialNumber the serial number for the new certificate of interest.
            
             @return a new CertificateID for newSerialNumber
        </member>
        <member name="T:Org.BouncyCastle2.Ocsp.OcspReq">
             <pre>
             OcspRequest     ::=     SEQUENCE {
                   tbsRequest                  TBSRequest,
                   optionalSignature   [0]     EXPLICIT Signature OPTIONAL }
            
               TBSRequest      ::=     SEQUENCE {
                   version             [0]     EXPLICIT Version DEFAULT v1,
                   requestorName       [1]     EXPLICIT GeneralName OPTIONAL,
                   requestList                 SEQUENCE OF Request,
                   requestExtensions   [2]     EXPLICIT Extensions OPTIONAL }
            
               Signature       ::=     SEQUENCE {
                   signatureAlgorithm      AlgorithmIdentifier,
                   signature               BIT STRING,
                   certs               [0] EXPLICIT SEQUENCE OF Certificate OPTIONAL}
            
               Version         ::=             INTEGER  {  v1(0) }
            
               Request         ::=     SEQUENCE {
                   reqCert                     CertID,
                   singleRequestExtensions     [0] EXPLICIT Extensions OPTIONAL }
            
               CertID          ::=     SEQUENCE {
                   hashAlgorithm       AlgorithmIdentifier,
                   issuerNameHash      OCTET STRING, -- Hash of Issuer's DN
                   issuerKeyHash       OCTET STRING, -- Hash of Issuers public key
                   serialNumber        CertificateSerialNumber }
             </pre>
        </member>
        <member name="M:Org.BouncyCastle2.Ocsp.OcspReq.GetTbsRequest">
            Return the DER encoding of the tbsRequest field.
            @return DER encoding of tbsRequest
            @throws OcspException in the event of an encoding error.
        </member>
        <member name="P:Org.BouncyCastle2.Ocsp.OcspReq.SignatureAlgOid">
            return the object identifier representing the signature algorithm
        </member>
        <member name="M:Org.BouncyCastle2.Ocsp.OcspReq.GetCertificates(System.String)">
             If the request is signed return a possibly empty CertStore containing the certificates in the
             request. If the request is not signed the method returns null.
            
             @return null if not signed, a CertStore otherwise
             @throws OcspException
        </member>
        <member name="P:Org.BouncyCastle2.Ocsp.OcspReq.IsSigned">
             Return whether or not this request is signed.
            
             @return true if signed false otherwise.
        </member>
        <member name="M:Org.BouncyCastle2.Ocsp.OcspReq.Verify(Org.BouncyCastle2.Crypto.AsymmetricKeyParameter)">
            Verify the signature against the TBSRequest object we contain.
        </member>
        <member name="M:Org.BouncyCastle2.Ocsp.OcspReq.GetEncoded">
            return the ASN.1 encoded representation of this object.
        </member>
        <member name="M:Org.BouncyCastle2.Ocsp.OcspResp.GetEncoded">
            return the ASN.1 encoded representation of this object.
        </member>
        <member name="T:Org.BouncyCastle2.Ocsp.RespID">
            Carrier for a ResponderID.
        </member>
        <member name="T:Org.BouncyCastle2.Ocsp.RevokedStatus">
            wrapper for the RevokedInfo object
        </member>
        <member name="P:Org.BouncyCastle2.Ocsp.RevokedStatus.RevocationReason">
            return the revocation reason. Note: this field is optional, test for it
            with hasRevocationReason() first.
            @exception InvalidOperationException if a reason is asked for and none is avaliable
        </member>
        <member name="M:Org.BouncyCastle2.Ocsp.SingleResp.GetCertStatus">
             Return the status object for the response - null indicates good.
            
             @return the status object for the response, null if it is good.
        </member>
        <member name="P:Org.BouncyCastle2.Ocsp.SingleResp.NextUpdate">
             return the NextUpdate value - note: this is an optional field so may
             be returned as null.
            
             @return nextUpdate, or null if not present.
        </member>
        <member name="T:Org.BouncyCastle2.Ocsp.UnknownStatus">
            wrapper for the UnknownInfo object
        </member>
        <member name="T:Org.BouncyCastle2.Security.AgreementUtilities">
            <remarks>
             Utility class for creating IBasicAgreement objects from their names/Oids
            </remarks>
        </member>
        <member name="T:Org.BouncyCastle2.Security.CipherUtilities">
            <remarks>
             Cipher Utility class contains methods that can not be specifically grouped into other classes.
            </remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Security.CipherUtilities.GetObjectIdentifier(System.String)">
            <summary>
            Returns a ObjectIdentifier for a give encoding.
            </summary>
            <param name="mechanism">A string representation of the encoding.</param>
            <returns>A DerObjectIdentifier, null if the Oid is not available.</returns>
        </member>
        <member name="T:Org.BouncyCastle2.Security.DigestUtilities">
            <remarks>
             Utility class for creating IDigest objects from their names/Oids
            </remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Security.DigestUtilities.GetObjectIdentifier(System.String)">
            <summary>
            Returns a ObjectIdentifier for a given digest mechanism.
            </summary>
            <param name="mechanism">A string representation of the digest meanism.</param>
            <returns>A DerObjectIdentifier, null if the Oid is not available.</returns>
        </member>
        <member name="T:Org.BouncyCastle2.Security.MacUtilities">
            <remarks>
             Utility class for creating HMac object from their names/Oids
            </remarks>
        </member>
        <member name="T:Org.BouncyCastle2.Security.PbeUtilities">
             <summary>
            
             </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Security.PbeUtilities.GetObjectIdentifier(System.String)">
            <summary>
            Returns a ObjectIdentifier for a give encoding.
            </summary>
            <param name="mechanism">A string representation of the encoding.</param>
            <returns>A DerObjectIdentifier, null if the Oid is not available.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Security.SecureRandom.GetInstance(System.String)">
            <summary>
            Create and auto-seed an instance based on the given algorithm.
            </summary>
            <remarks>Equivalent to GetInstance(algorithm, true)</remarks>
            <param name="algorithm">e.g. "SHA256PRNG"</param>
        </member>
        <member name="M:Org.BouncyCastle2.Security.SecureRandom.GetInstance(System.String,System.Boolean)">
            <summary>
            Create an instance based on the given algorithm, with optional auto-seeding
            </summary>
            <param name="algorithm">e.g. "SHA256PRNG"</param>
            <param name="autoSeed">If true, the instance will be auto-seeded.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Security.SecureRandom.#ctor(System.Byte[])">
            <remarks>
            To replicate existing predictable output, replace with GetInstance("SHA1PRNG", false), followed by SetSeed(seed)
            </remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Security.SecureRandom.#ctor(Org.BouncyCastle2.Crypto.Prng.IRandomGenerator)">
            <summary>Use the specified instance of IRandomGenerator as random source.</summary>
            <remarks>
            This constructor performs no seeding of either the <c>IRandomGenerator</c> or the
            constructed <c>SecureRandom</c>. It is the responsibility of the client to provide
            proper seed material as necessary/appropriate for the given <c>IRandomGenerator</c>
            implementation.
            </remarks>
            <param name="generator">The source to generate all random bytes from.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Security.SecurityUtilityException.#ctor">
            base constructor.
        </member>
        <member name="M:Org.BouncyCastle2.Security.SecurityUtilityException.#ctor(System.String)">
             create a SecurityUtilityException with the given message.
            
             @param message the message to be carried with the exception.
        </member>
        <member name="T:Org.BouncyCastle2.Security.SignerUtilities">
            <summary>
             Signer Utility class contains methods that can not be specifically grouped into other classes.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Security.SignerUtilities.GetObjectIdentifier(System.String)">
            <summary>
            Returns an ObjectIdentifier for a given encoding.
            </summary>
            <param name="mechanism">A string representation of the encoding.</param>
            <returns>A DerObjectIdentifier, null if the OID is not available.</returns>
        </member>
        <member name="T:Org.BouncyCastle2.Security.WrapperUtilities">
            <remarks>
             Utility class for creating IWrapper objects from their names/Oids
            </remarks>
        </member>
        <member name="T:Org.BouncyCastle2.OpenSsl.MiscPemGenerator">
            PEM generator for the original set of PEM objects used in Open SSL.
        </member>
        <member name="T:Org.BouncyCastle2.OpenSsl.PemWriter">
            <remarks>General purpose writer for OpenSSL PEM objects.</remarks>
        </member>
        <member name="M:Org.BouncyCastle2.OpenSsl.PemWriter.#ctor(System.IO.TextWriter)">
            <param name="writer">The TextWriter object to write the output to.</param>
        </member>
        <member name="T:Org.BouncyCastle2.Pkcs.Pkcs10CertificationRequest">
             <remarks>
             A class for verifying and creating Pkcs10 Certification requests.
             </remarks>
             <code>
             CertificationRequest ::= Sequence {
               certificationRequestInfo  CertificationRequestInfo,
               signatureAlgorithm        AlgorithmIdentifier{{ SignatureAlgorithms }},
               signature                 BIT STRING
             }
            
             CertificationRequestInfo ::= Sequence {
               version             Integer { v1(0) } (v1,...),
               subject             Name,
               subjectPKInfo   SubjectPublicKeyInfo{{ PKInfoAlgorithms }},
               attributes          [0] Attributes{{ CRIAttributes }}
              }
            
              Attributes { ATTRIBUTE:IOSet } ::= Set OF Attr{{ IOSet }}
            
              Attr { ATTRIBUTE:IOSet } ::= Sequence {
                type    ATTRIBUTE.&amp;id({IOSet}),
                values  Set SIZE(1..MAX) OF ATTRIBUTE.&amp;Type({IOSet}{\@type})
              }
             </code>
             see <a href="http://www.rsasecurity.com/rsalabs/node.asp?id=2132"/>
        </member>
        <member name="M:Org.BouncyCastle2.Pkcs.Pkcs10CertificationRequest.#ctor(System.String,Org.BouncyCastle2.Asn1.X509.X509Name,Org.BouncyCastle2.Crypto.AsymmetricKeyParameter,Org.BouncyCastle2.Asn1.Asn1Set,Org.BouncyCastle2.Crypto.AsymmetricKeyParameter)">
             <summary>
             Instantiate a Pkcs10CertificationRequest object with the necessary credentials.
             </summary>
            <param name="signatureAlgorithm">Name of Sig Alg.</param>
             <param name="subject">X509Name of subject eg OU="My unit." O="My Organisatioin" C="au" </param>
             <param name="publicKey">Public Key to be included in cert reqest.</param>
             <param name="attributes">ASN1Set of Attributes.</param>
             <param name="signingKey">Matching Private key for nominated (above) public key to be used to sign the request.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Pkcs.Pkcs10CertificationRequest.#ctor(Org.BouncyCastle2.Crypto.ISignatureFactory,Org.BouncyCastle2.Asn1.X509.X509Name,Org.BouncyCastle2.Crypto.AsymmetricKeyParameter,Org.BouncyCastle2.Asn1.Asn1Set,Org.BouncyCastle2.Crypto.AsymmetricKeyParameter)">
             <summary>
             Instantiate a Pkcs10CertificationRequest object with the necessary credentials.
             </summary>
            <param name="signatureFactory">The factory for signature calculators to sign the PKCS#10 request with.</param>
             <param name="subject">X509Name of subject eg OU="My unit." O="My Organisatioin" C="au" </param>
             <param name="publicKey">Public Key to be included in cert reqest.</param>
             <param name="attributes">ASN1Set of Attributes.</param>
             <param name="signingKey">Ignored.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Pkcs.Pkcs10CertificationRequest.#ctor(Org.BouncyCastle2.Crypto.ISignatureFactory,Org.BouncyCastle2.Asn1.X509.X509Name,Org.BouncyCastle2.Crypto.AsymmetricKeyParameter,Org.BouncyCastle2.Asn1.Asn1Set)">
             <summary>
             Instantiate a Pkcs10CertificationRequest object with the necessary credentials.
             </summary>
            <param name="signatureFactory">The factory for signature calculators to sign the PKCS#10 request with.</param>
             <param name="subject">X509Name of subject eg OU="My unit." O="My Organisatioin" C="au" </param>
             <param name="publicKey">Public Key to be included in cert reqest.</param>
             <param name="attributes">ASN1Set of Attributes.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Pkcs.Pkcs10CertificationRequest.GetPublicKey">
            <summary>
            Get the public key.
            </summary>
            <returns>The public key.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Pkcs.Pkcs10CertificationRequest.Verify">
            <summary>
            Verify Pkcs10 Cert Request is valid.
            </summary>
            <returns>true = valid.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Pkcs.Pkcs10CertificationRequest.GetRequestedExtensions">
            <summary>
            Returns X509Extensions if the Extensions Request attribute can be found and returns the extensions block.
            </summary>
            <returns>X509Extensions block or null if one cannot be found.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Pkcs.Pkcs12Store.GetCertificate(System.String)">
            simply return the cert entry for the private key
        </member>
        <member name="T:Org.BouncyCastle2.Pkcs.PkcsException">
            <summary>
            Base exception for PKCS related issues.
            </summary>
        </member>
        <member name="T:Org.BouncyCastle2.Pkcs.PkcsIOException">
            <summary>
            Base exception for parsing related issues in the PKCS namespace.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Pkcs.PrivateKeyInfoFactory.CreatePrivateKeyInfo(Org.BouncyCastle2.Crypto.AsymmetricKeyParameter,Org.BouncyCastle2.Asn1.Asn1Set)">
             Create a PrivateKeyInfo representation of a private key with attributes.
            
             @param privateKey the key to be encoded into the info object.
             @param attributes the set of attributes to be included.
             @return the appropriate PrivateKeyInfo
             @throws java.io.IOException on an error encoding the key
        </member>
        <member name="P:Org.BouncyCastle2.Pkix.CertStatus.RevocationDate">
            <summary>
            Returns the revocationDate.
            </summary>
        </member>
        <member name="P:Org.BouncyCastle2.Pkix.CertStatus.Status">
            <summary>
            Returns the certStatus.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixAttrCertChecker.GetSupportedExtensions">
            Returns an immutable <code>Set</code> of X.509 attribute certificate
            extensions that this <code>PkixAttrCertChecker</code> supports or
            <code>null</code> if no extensions are supported.
            <p>
            Each element of the set is a <code>String</code> representing the
            Object Identifier (OID) of the X.509 extension that is supported.
            </p>
            <p>
            All X.509 attribute certificate extensions that a
            <code>PkixAttrCertChecker</code> might possibly be able to process
            should be included in the set.
            </p>
            
            @return an immutable <code>Set</code> of X.509 extension OIDs (in
                    <code>String</code> format) supported by this
                    <code>PkixAttrCertChecker</code>, or <code>null</code> if no
                    extensions are supported
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixAttrCertChecker.Check(Org.BouncyCastle2.X509.IX509AttributeCertificate,Org.BouncyCastle2.Pkix.PkixCertPath,Org.BouncyCastle2.Pkix.PkixCertPath,System.Collections.ICollection)">
            Performs checks on the specified attribute certificate. Every handled
            extension is rmeoved from the <code>unresolvedCritExts</code>
            collection.
            
            @param attrCert The attribute certificate to be checked.
            @param certPath The certificate path which belongs to the attribute
                       certificate issuer public key certificate.
            @param holderCertPath The certificate path which belongs to the holder
                       certificate.
            @param unresolvedCritExts a <code>Collection</code> of OID strings
                       representing the current set of unresolved critical extensions
            @throws CertPathValidatorException if the specified attribute certificate
                        does not pass the check.
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixAttrCertChecker.Clone">
            Returns a clone of this object.
            
            @return a copy of this <code>PkixAttrCertChecker</code>
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixAttrCertPathBuilder.Build(Org.BouncyCastle2.Pkix.PkixBuilderParameters)">
             Build and validate a CertPath using the given parameter.
            
             @param params PKIXBuilderParameters object containing all information to
                        build the CertPath
        </member>
        <member name="T:Org.BouncyCastle2.Pkix.PkixAttrCertPathValidator">
            CertPathValidatorSpi implementation for X.509 Attribute Certificates la RFC 3281.
            
            @see org.BouncyCastle2.x509.ExtendedPkixParameters
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixAttrCertPathValidator.Validate(Org.BouncyCastle2.Pkix.PkixCertPath,Org.BouncyCastle2.Pkix.PkixParameters)">
            Validates an attribute certificate with the given certificate path.
            
            <p>
            <code>params</code> must be an instance of
            <code>ExtendedPkixParameters</code>.
            </p><p>
            The target constraints in the <code>params</code> must be an
            <code>X509AttrCertStoreSelector</code> with at least the attribute
            certificate criterion set. Obey that also target informations may be
            necessary to correctly validate this attribute certificate.
            </p><p>
            The attribute certificate issuer must be added to the trusted attribute
            issuers with {@link ExtendedPkixParameters#setTrustedACIssuers(Set)}.
            </p>
            @param certPath The certificate path which belongs to the attribute
                       certificate issuer public key certificate.
            @param params The PKIX parameters.
            @return A <code>PKIXCertPathValidatorResult</code> of the result of
                    validating the <code>certPath</code>.
            @throws InvalidAlgorithmParameterException if <code>params</code> is
                        inappropriate for this validator.
            @throws CertPathValidatorException if the verification fails.
        </member>
        <member name="T:Org.BouncyCastle2.Pkix.PkixBuilderParameters">
            <summary>
            Summary description for PkixBuilderParameters.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixBuilderParameters.GetInstance(Org.BouncyCastle2.Pkix.PkixParameters)">
             Returns an instance of <code>PkixBuilderParameters</code>.
             <p>
             This method can be used to get a copy from other
             <code>PKIXBuilderParameters</code>, <code>PKIXParameters</code>,
             and <code>ExtendedPKIXParameters</code> instances.
             </p>
            
             @param pkixParams The PKIX parameters to create a copy of.
             @return An <code>PkixBuilderParameters</code> instance.
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixBuilderParameters.GetExcludedCerts">
            <summary>
            Excluded certificates are not used for building a certification path.
            </summary>
            <returns>the excluded certificates.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixBuilderParameters.SetExcludedCerts(Org.BouncyCastle2.Utilities.Collections.ISet)">
            <summary>
            Sets the excluded certificates which are not used for building a
            certification path. If the <code>ISet</code> is <code>null</code> an
            empty set is assumed.
            </summary>
            <remarks>
            The given set is cloned to protect it against subsequent modifications.
            </remarks>
            <param name="excludedCerts">The excluded certificates to set.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixBuilderParameters.SetParams(Org.BouncyCastle2.Pkix.PkixParameters)">
            Can alse handle <code>ExtendedPKIXBuilderParameters</code> and
            <code>PKIXBuilderParameters</code>.
            
            @param params Parameters to set.
            @see org.BouncyCastle2.x509.ExtendedPKIXParameters#setParams(java.security.cert.PKIXParameters)
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixBuilderParameters.Clone">
             Makes a copy of this <code>PKIXParameters</code> object. Changes to the
             copy will not affect the original and vice versa.
            
             @return a copy of this <code>PKIXParameters</code> object
        </member>
        <member name="T:Org.BouncyCastle2.Pkix.PkixCertPath">
             An immutable sequence of certificates (a certification path).<br />
             <br />
             This is an abstract class that defines the methods common to all CertPaths.
             Subclasses can handle different kinds of certificates (X.509, PGP, etc.).<br />
             <br />
             All CertPath objects have a type, a list of Certificates, and one or more
             supported encodings. Because the CertPath class is immutable, a CertPath
             cannot change in any externally visible way after being constructed. This
             stipulation applies to all public fields and methods of this class and any
             added or overridden by subclasses.<br />
             <br />
             The type is a string that identifies the type of Certificates in the
             certification path. For each certificate cert in a certification path
             certPath, cert.getType().equals(certPath.getType()) must be true.<br />
             <br />
             The list of Certificates is an ordered List of zero or more Certificates.
             This List and all of the Certificates contained in it must be immutable.<br />
             <br />
             Each CertPath object must support one or more encodings so that the object
             can be translated into a byte array for storage or transmission to other
             parties. Preferably, these encodings should be well-documented standards
             (such as PKCS#7). One of the encodings supported by a CertPath is considered
             the default encoding. This encoding is used if no encoding is explicitly
             requested (for the {@link #getEncoded()} method, for instance).<br />
             <br />
             All CertPath objects are also Serializable. CertPath objects are resolved
             into an alternate {@link CertPathRep} object during serialization. This
             allows a CertPath object to be serialized into an equivalent representation
             regardless of its underlying implementation.<br />
             <br />
             CertPath objects can be created with a CertificateFactory or they can be
             returned by other classes, such as a CertPathBuilder.<br />
             <br />
             By convention, X.509 CertPaths (consisting of X509Certificates), are ordered
             starting with the target certificate and ending with a certificate issued by
             the trust anchor. That is, the issuer of one certificate is the subject of
             the following one. The certificate representing the
             {@link TrustAnchor TrustAnchor} should not be included in the certification
             path. Unvalidated X.509 CertPaths may not follow these conventions. PKIX
             CertPathValidators will detect any departure from these conventions that
             cause the certification path to be invalid and throw a
             CertPathValidatorException.<br />
             <br />
             <strong>Concurrent Access</strong><br />
             <br />
             All CertPath objects must be thread-safe. That is, multiple threads may
             concurrently invoke the methods defined in this class on a single CertPath
             object (or more than one) with no ill effects. This is also true for the List
             returned by CertPath.getCertificates.<br />
             <br />
             Requiring CertPath objects to be immutable and thread-safe allows them to be
             passed around to various pieces of code without worrying about coordinating
             access. Providing this thread-safety is generally not difficult, since the
             CertPath and List objects in question are immutable.
            
             @see CertificateFactory
             @see CertPathBuilder
            <summary>
            CertPath implementation for X.509 certificates.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixCertPath.SortCerts(System.Collections.IList)">
            @param certs
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixCertPath.#ctor(System.Collections.ICollection)">
             Creates a CertPath of the specified type.
             This constructor is protected because most users should use
             a CertificateFactory to create CertPaths.
             @param type the standard name of the type of Certificatesin this path
            
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixCertPath.#ctor(System.IO.Stream,System.String)">
             Creates a CertPath of the specified type.
             This constructor is protected because most users should use
             a CertificateFactory to create CertPaths.
            
             @param type the standard name of the type of Certificatesin this path
            
        </member>
        <member name="P:Org.BouncyCastle2.Pkix.PkixCertPath.Encodings">
             Returns an iteration of the encodings supported by this
             certification path, with the default encoding
             first. Attempts to modify the returned Iterator via its
             remove method result in an UnsupportedOperationException.
            
             @return an Iterator over the names of the supported encodings (as Strings)
            
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixCertPath.Equals(System.Object)">
             Compares this certification path for equality with the specified object.
             Two CertPaths are equal if and only if their types are equal and their
             certificate Lists (and by implication the Certificates in those Lists)
             are equal. A CertPath is never equal to an object that is not a CertPath.<br />
             <br />
             This algorithm is implemented by this method. If it is overridden, the
             behavior specified here must be maintained.
            
             @param other
                        the object to test for equality with this certification path
            
             @return true if the specified object is equal to this certification path,
                     false otherwise
            
             @see Object#hashCode() Object.hashCode()
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixCertPath.GetEncoded">
             Returns the encoded form of this certification path, using
             the default encoding.
            
             @return the encoded bytes
             @exception CertificateEncodingException if an encoding error occurs
            
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixCertPath.GetEncoded(System.String)">
             Returns the encoded form of this certification path, using
             the specified encoding.
            
             @param encoding the name of the encoding to use
             @return the encoded bytes
             @exception CertificateEncodingException if an encoding error
             occurs or the encoding requested is not supported
            
        </member>
        <member name="P:Org.BouncyCastle2.Pkix.PkixCertPath.Certificates">
            <summary>
            Returns the list of certificates in this certification
            path.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixCertPath.ToAsn1Object(Org.BouncyCastle2.X509.X509Certificate)">
             Return a DERObject containing the encoded certificate.
            
             @param cert the X509Certificate object to be encoded
            
             @return the DERObject
            
        </member>
        <member name="T:Org.BouncyCastle2.Pkix.PkixCertPathBuilder">
             Implements the PKIX CertPathBuilding algorithm for BouncyCastle2.
            
             @see CertPathBuilderSpi
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixCertPathBuilder.Build(Org.BouncyCastle2.Pkix.PkixBuilderParameters)">
             Build and validate a CertPath using the given parameter.
            
             @param params PKIXBuilderParameters object containing all information to
                        build the CertPath
        </member>
        <member name="T:Org.BouncyCastle2.Pkix.PkixCertPathBuilderException">
            <summary>
            Summary description for PkixCertPathBuilderException.
            </summary>
        </member>
        <member name="T:Org.BouncyCastle2.Pkix.PkixCertPathBuilderResult">
            <summary>
            Summary description for PkixCertPathBuilderResult.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixCertPathChecker.Init(System.Boolean)">
                     * Initializes the internal state of this <code>PKIXCertPathChecker</code>.
                     * <p>
                     * The <code>forward</code> flag specifies the order that certificates
                     * will be passed to the {@link #check check} method (forward or reverse). A
                     * <code>PKIXCertPathChecker</code> <b>must</b> support reverse checking
                     * and <b>may</b> support forward checking.
            		 * </p>
                     * 
                     * @param forward
                     *            the order that certificates are presented to the
                     *            <code>check</code> method. If <code>true</code>,
                     *            certificates are presented from target to most-trusted CA
                     *            (forward); if <code>false</code>, from most-trusted CA to
                     *            target (reverse).
                     * @exception CertPathValidatorException
                     *                if this <code>PKIXCertPathChecker</code> is unable to
                     *                check certificates in the specified order; it should never
                     *                be thrown if the forward flag is false since reverse
                     *                checking must be supported
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixCertPathChecker.IsForwardCheckingSupported">
            Indicates if forward checking is supported. Forward checking refers to
            the ability of the <code>PKIXCertPathChecker</code> to perform its
            checks when certificates are presented to the <code>check</code> method
            in the forward direction (from target to most-trusted CA).
            
            @return <code>true</code> if forward checking is supported,
                    <code>false</code> otherwise
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixCertPathChecker.GetSupportedExtensions">
                     * Returns an immutable <code>Set</code> of X.509 certificate extensions
                     * that this <code>PKIXCertPathChecker</code> supports (i.e. recognizes,
                     * is able to process), or <code>null</code> if no extensions are
                     * supported.
                     * <p>
                     * Each element of the set is a <code>String</code> representing the
                     * Object Identifier (OID) of the X.509 extension that is supported. The OID
                     * is represented by a set of nonnegative integers separated by periods.
                     * </p><p>
                     * All X.509 certificate extensions that a <code>PKIXCertPathChecker</code>
                     * might possibly be able to process should be included in the set.
            		 * </p>
                     * 
                     * @return an immutable <code>Set</code> of X.509 extension OIDs (in
                     *         <code>String</code> format) supported by this
                     *         <code>PKIXCertPathChecker</code>, or <code>null</code> if no
                     *         extensions are supported
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixCertPathChecker.Check(Org.BouncyCastle2.X509.X509Certificate,Org.BouncyCastle2.Utilities.Collections.ISet)">
            Performs the check(s) on the specified certificate using its internal
            state and removes any critical extensions that it processes from the
            specified collection of OID strings that represent the unresolved
            critical extensions. The certificates are presented in the order
            specified by the <code>init</code> method.
            
            @param cert
                       the <code>Certificate</code> to be checked
            @param unresolvedCritExts
                       a <code>Collection</code> of OID strings representing the
                       current set of unresolved critical extensions
            @exception CertPathValidatorException
                           if the specified certificate does not pass the check
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixCertPathChecker.Clone">
            Returns a clone of this object. Calls the <code>Object.clone()</code>
            method. All subclasses which maintain state must support and override
            this method, if necessary.
            
            @return a copy of this <code>PKIXCertPathChecker</code>
        </member>
        <member name="T:Org.BouncyCastle2.Pkix.PkixCertPathValidator">
            The <i>Service Provider Interface</i> (<b>SPI</b>)
            for the {@link CertPathValidator CertPathValidator} class. All
            <code>CertPathValidator</code> implementations must include a class (the
            SPI class) that extends this class (<code>CertPathValidatorSpi</code>)
            and implements all of its methods. In general, instances of this class
            should only be accessed through the <code>CertPathValidator</code> class.
            For details, see the Java Cryptography Architecture.<br />
            <br />
            <b>Concurrent Access</b><br />
            <br />
            Instances of this class need not be protected against concurrent
            access from multiple threads. Threads that need to access a single
            <code>CertPathValidatorSpi</code> instance concurrently should synchronize
            amongst themselves and provide the necessary locking before calling the
            wrapping <code>CertPathValidator</code> object.<br />
            <br />
            However, implementations of <code>CertPathValidatorSpi</code> may still
            encounter concurrency issues, since multiple threads each
            manipulating a different <code>CertPathValidatorSpi</code> instance need not
            synchronize.
            <summary>
            CertPathValidatorSpi implementation for X.509 Certificate validation a la RFC
            3280.
            </summary>
        </member>
        <member name="T:Org.BouncyCastle2.Pkix.PkixCertPathValidatorException">
             An exception indicating one of a variety of problems encountered when 
             validating a certification path. <br />
             <br />
             A <code>CertPathValidatorException</code> provides support for wrapping
             exceptions. The {@link #getCause getCause} method returns the throwable, 
             if any, that caused this exception to be thrown. <br />
             <br />
             A <code>CertPathValidatorException</code> may also include the 
             certification path that was being validated when the exception was thrown 
             and the index of the certificate in the certification path that caused the 
             exception to be thrown. Use the {@link #getCertPath getCertPath} and
             {@link #getIndex getIndex} methods to retrieve this information.<br />
             <br />
             <b>Concurrent Access</b><br />
             <br />
             Unless otherwise specified, the methods defined in this class are not
             thread-safe. Multiple threads that need to access a single
             object concurrently should synchronize amongst themselves and
             provide the necessary locking. Multiple threads each manipulating
             separate objects need not synchronize.
            
             @see CertPathValidator
            
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixCertPathValidatorException.#ctor(System.String)">
            <summary>
            Creates a <code>PkixCertPathValidatorException</code> with the given detail
            message. A detail message is a <code>String</code> that describes this
            particular exception. 
            </summary>
            <param name="message">the detail message</param>
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixCertPathValidatorException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a <code>PkixCertPathValidatorException</code> with the specified
            detail message and cause.
            </summary>
            <param name="message">the detail message</param>
            <param name="cause">the cause (which is saved for later retrieval by the
            {@link #getCause getCause()} method). (A <code>null</code>
            value is permitted, and indicates that the cause is
            nonexistent or unknown.)</param>
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixCertPathValidatorException.#ctor(System.String,System.Exception,Org.BouncyCastle2.Pkix.PkixCertPath,System.Int32)">
            <summary>
            Creates a <code>PkixCertPathValidatorException</code> with the specified
            detail message, cause, certification path, and index.
            </summary>
            <param name="message">the detail message (or <code>null</code> if none)</param>
            <param name="cause">the cause (or <code>null</code> if none)</param>
            <param name="certPath">the certification path that was in the process of being
            validated when the error was encountered</param>
            <param name="index">the index of the certificate in the certification path that</param>																																																																																   * 
        </member>
        <member name="P:Org.BouncyCastle2.Pkix.PkixCertPathValidatorException.Message">
            <summary>
            Returns the detail message for this <code>CertPathValidatorException</code>.
            </summary>
            <returns>the detail message, or <code>null</code> if neither the message nor cause were specified</returns>
        </member>
        <member name="P:Org.BouncyCastle2.Pkix.PkixCertPathValidatorException.CertPath">
            Returns the certification path that was being validated when the
            exception was thrown.
            
            @return the <code>CertPath</code> that was being validated when the
                    exception was thrown (or <code>null</code> if not specified)
        </member>
        <member name="P:Org.BouncyCastle2.Pkix.PkixCertPathValidatorException.Index">
            Returns the index of the certificate in the certification path that
            caused the exception to be thrown. Note that the list of certificates in
            a <code>CertPath</code> is zero based. If no index has been set, -1 is
            returned.
            
            @return the index that has been set, or -1 if none has been set
        </member>
        <member name="T:Org.BouncyCastle2.Pkix.PkixCertPathValidatorResult">
            <summary>
            Summary description for PkixCertPathValidatorResult.
            </summary>
        </member>
        <member name="T:Org.BouncyCastle2.Pkix.PkixCertPathValidatorUtilities">
            <summary>
            Summary description for PkixCertPathValidatorUtilities.
            </summary>
        </member>
        <member name="F:Org.BouncyCastle2.Pkix.PkixCertPathValidatorUtilities.KEY_CERT_SIGN">
            <summary>
            key usage bits
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixCertPathValidatorUtilities.FindTrustAnchor(Org.BouncyCastle2.X509.X509Certificate,Org.BouncyCastle2.Utilities.Collections.ISet)">
            <summary>
            Search the given Set of TrustAnchor's for one that is the
            issuer of the given X509 certificate.
            </summary>
            <param name="cert">the X509 certificate</param>
            <param name="trustAnchors">a Set of TrustAnchor's</param>
            <returns>the <code>TrustAnchor</code> object if found or
            <code>null</code> if not.
            </returns>
            @exception
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixCertPathValidatorUtilities.GetIssuerPrincipal(System.Object)">
            <summary>
            Returns the issuer of an attribute certificate or certificate.
            </summary>
            <param name="cert">The attribute certificate or certificate.</param>
            <returns>The issuer as <code>X500Principal</code>.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixCertPathValidatorUtilities.GetNextWorkingKey(System.Collections.IList,System.Int32)">
             Return the next working key inheriting DSA parameters if necessary.
             <p>
             This methods inherits DSA parameters from the indexed certificate or
             previous certificates in the certificate chain to the returned
             <code>PublicKey</code>. The list is searched upwards, meaning the end
             certificate is at position 0 and previous certificates are following.
             </p>
             <p>
             If the indexed certificate does not contain a DSA key this method simply
             returns the public key. If the DSA key already contains DSA parameters
             the key is also only returned.
             </p>
            
             @param certs The certification path.
             @param index The index of the certificate which contains the public key
                        which should be extended with DSA parameters.
             @return The public key of the certificate in list position
                     <code>index</code> extended with DSA parameters if applicable.
             @throws Exception if DSA parameters cannot be inherited.
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixCertPathValidatorUtilities.FindCertificates(Org.BouncyCastle2.X509.Store.X509CertStoreSelector,System.Collections.IList)">
            <summary>
            Return a Collection of all certificates or attribute certificates found
            in the X509Store's that are matching the certSelect criteriums.
            </summary>
            <param name="certSelect">a {@link Selector} object that will be used to select
            the certificates</param>
            <param name="certStores">a List containing only X509Store objects. These
            are used to search for certificates.</param>
            <returns>a Collection of all found <see cref="T:Org.BouncyCastle2.X509.X509Certificate"/> or
            <see cref="T:Org.BouncyCastle2.X509.IX509AttributeCertificate"/> objects.
            May be empty but never <code>null</code>.</returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixCertPathValidatorUtilities.GetCrlIssuersFromDistributionPoint(Org.BouncyCastle2.Asn1.X509.DistributionPoint,System.Collections.ICollection,Org.BouncyCastle2.X509.Store.X509CrlStoreSelector,Org.BouncyCastle2.Pkix.PkixParameters)">
             Add the CRL issuers from the cRLIssuer field of the distribution point or
             from the certificate if not given to the issuer criterion of the
             <code>selector</code>.
             <p>
             The <code>issuerPrincipals</code> are a collection with a single
             <code>X500Principal</code> for <code>X509Certificate</code>s. For
             {@link X509AttributeCertificate}s the issuer may contain more than one
             <code>X500Principal</code>.
             </p>
            
             @param dp The distribution point.
             @param issuerPrincipals The issuers of the certificate or attribute
                        certificate which contains the distribution point.
             @param selector The CRL selector.
             @param pkixParams The PKIX parameters containing the cert stores.
             @throws Exception if an exception occurs while processing.
             @throws ClassCastException if <code>issuerPrincipals</code> does not
             contain only <code>X500Principal</code>s.
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixCertPathValidatorUtilities.GetCompleteCrls(Org.BouncyCastle2.Asn1.X509.DistributionPoint,System.Object,System.DateTime,Org.BouncyCastle2.Pkix.PkixParameters)">
             Fetches complete CRLs according to RFC 3280.
            
             @param dp The distribution point for which the complete CRL
             @param cert The <code>X509Certificate</code> or
                        {@link org.BouncyCastle2.x509.X509AttributeCertificate} for
                        which the CRL should be searched.
             @param currentDate The date for which the delta CRLs must be valid.
             @param paramsPKIX The extended PKIX parameters.
             @return A <code>Set</code> of <code>X509CRL</code>s with complete
                     CRLs.
             @throws Exception if an exception occurs while picking the CRLs
                         or no CRLs are found.
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixCertPathValidatorUtilities.GetDeltaCrls(System.DateTime,Org.BouncyCastle2.Pkix.PkixParameters,Org.BouncyCastle2.X509.X509Crl)">
             Fetches delta CRLs according to RFC 3280 section 5.2.4.
            
             @param currentDate The date for which the delta CRLs must be valid.
             @param paramsPKIX The extended PKIX parameters.
             @param completeCRL The complete CRL the delta CRL is for.
             @return A <code>Set</code> of <code>X509CRL</code>s with delta CRLs.
             @throws Exception if an exception occurs while picking the delta
                         CRLs.
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixCertPathValidatorUtilities.FindIssuerCerts(Org.BouncyCastle2.X509.X509Certificate,Org.BouncyCastle2.Pkix.PkixBuilderParameters)">
             Find the issuer certificates of a given certificate.
            
             @param cert
                        The certificate for which an issuer should be found.
             @param pkixParams
             @return A <code>Collection</code> object containing the issuer
                     <code>X509Certificate</code>s. Never <code>null</code>.
            
             @exception Exception
                            if an error occurs.
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixCertPathValidatorUtilities.GetExtensionValue(Org.BouncyCastle2.X509.IX509Extension,Org.BouncyCastle2.Asn1.DerObjectIdentifier)">
            <summary>
            Extract the value of the given extension, if it exists.
            </summary>
            <param name="ext">The extension object.</param>
            <param name="oid">The object identifier to obtain.</param>
            <returns>Asn1Object</returns>
            <exception cref="T:System.Exception">if the extension cannot be read.</exception>
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixCrlUtilities.FindCrls(Org.BouncyCastle2.X509.Store.X509CrlStoreSelector,System.Collections.IList)">
            <summary>
            crl checking
            Return a Collection of all CRLs found in the X509Store's that are
            matching the crlSelect criteriums.
            </summary>
            <param name="crlSelect">a {@link X509CRLStoreSelector} object that will be used
            to select the CRLs</param>
            <param name="crlStores">a List containing only {@link org.BouncyCastle2.x509.X509Store
            X509Store} objects. These are used to search for CRLs</param>
            <returns>a Collection of all found {@link X509CRL X509CRL} objects. May be
            empty but never <code>null</code>.
            </returns>
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixNameConstraintValidator.IntersectIP(Org.BouncyCastle2.Utilities.Collections.ISet,Org.BouncyCastle2.Utilities.Collections.ISet)">
             Returns the intersection of the permitted IP ranges in
             <code>permitted</code> with <code>ip</code>.
            
             @param permitted A <code>Set</code> of permitted IP addresses with
                              their subnet mask as byte arrays.
             @param ips       The IP address with its subnet mask.
             @return The <code>Set</code> of permitted IP ranges intersected with
                     <code>ip</code>.
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixNameConstraintValidator.UnionIP(Org.BouncyCastle2.Utilities.Collections.ISet,System.Byte[])">
             Returns the union of the excluded IP ranges in <code>excluded</code>
             with <code>ip</code>.
            
             @param excluded A <code>Set</code> of excluded IP addresses with their
                             subnet mask as byte arrays.
             @param ip       The IP address with its subnet mask.
             @return The <code>Set</code> of excluded IP ranges unified with
                     <code>ip</code> as byte arrays.
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixNameConstraintValidator.UnionIPRange(System.Byte[],System.Byte[])">
             Calculates the union if two IP ranges.
            
             @param ipWithSubmask1 The first IP address with its subnet mask.
             @param ipWithSubmask2 The second IP address with its subnet mask.
             @return A <code>Set</code> with the union of both addresses.
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixNameConstraintValidator.IntersectIPRange(System.Byte[],System.Byte[])">
             Calculates the interesction if two IP ranges.
            
             @param ipWithSubmask1 The first IP address with its subnet mask.
             @param ipWithSubmask2 The second IP address with its subnet mask.
             @return A <code>Set</code> with the single IP address with its subnet
                     mask as a byte array or an empty <code>Set</code>.
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixNameConstraintValidator.IpWithSubnetMask(System.Byte[],System.Byte[])">
             Concatenates the IP address with its subnet mask.
            
             @param ip         The IP address.
             @param subnetMask Its subnet mask.
             @return The concatenated IP address with its subnet mask.
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixNameConstraintValidator.ExtractIPsAndSubnetMasks(System.Byte[],System.Byte[])">
             Splits the IP addresses and their subnet mask.
            
             @param ipWithSubmask1 The first IP address with the subnet mask.
             @param ipWithSubmask2 The second IP address with the subnet mask.
             @return An array with two elements. Each element contains the IP address
                     and the subnet mask in this order.
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixNameConstraintValidator.MinMaxIPs(System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
             Based on the two IP addresses and their subnet masks the IP range is
             computed for each IP address - subnet mask pair and returned as the
             minimum IP address and the maximum address of the range.
            
             @param ip1         The first IP address.
             @param subnetmask1 The subnet mask of the first IP address.
             @param ip2         The second IP address.
             @param subnetmask2 The subnet mask of the second IP address.
             @return A array with two elements. The first/second element contains the
                     min and max IP address of the first/second IP address and its
                     subnet mask.
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixNameConstraintValidator.IsIPConstrained(System.Byte[],System.Byte[])">
             Checks if the IP address <code>ip</code> is constrained by
             <code>constraint</code>.
            
             @param constraint The constraint. This is an IP address concatenated with
                               its subnetmask.
             @param ip         The IP address.
             @return <code>true</code> if constrained, <code>false</code>
                     otherwise.
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixNameConstraintValidator.CheckPermittedIP(Org.BouncyCastle2.Utilities.Collections.ISet,System.Byte[])">
             Checks if the IP <code>ip</code> is included in the permitted ISet
             <code>permitted</code>.
            
             @param permitted A <code>Set</code> of permitted IP addresses with
                              their subnet mask as byte arrays.
             @param ip        The IP address.
             @throws PkixNameConstraintValidatorException
                      if the IP is not permitted.
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixNameConstraintValidator.CheckExcludedIP(Org.BouncyCastle2.Utilities.Collections.ISet,System.Byte[])">
             Checks if the IP <code>ip</code> is included in the excluded ISet
             <code>excluded</code>.
            
             @param excluded A <code>Set</code> of excluded IP addresses with their
                             subnet mask as byte arrays.
             @param ip       The IP address.
             @throws PkixNameConstraintValidatorException
                      if the IP is excluded.
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixNameConstraintValidator.UnionEmail(System.String,System.String,Org.BouncyCastle2.Utilities.Collections.ISet)">
             The common part of <code>email1</code> and <code>email2</code> is
             added to the union <code>union</code>. If <code>email1</code> and
             <code>email2</code> have nothing in common they are added both.
            
             @param email1 Email address constraint 1.
             @param email2 Email address constraint 2.
             @param union  The union.
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixNameConstraintValidator.IntersectEmail(System.String,System.String,Org.BouncyCastle2.Utilities.Collections.ISet)">
             The most restricting part from <code>email1</code> and
             <code>email2</code> is added to the intersection <code>intersect</code>.
            
             @param email1    Email address constraint 1.
             @param email2    Email address constraint 2.
             @param intersect The intersection.
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixNameConstraintValidator.checkPermitted(Org.BouncyCastle2.Asn1.X509.GeneralName)">
             Checks if the given GeneralName is in the permitted ISet.
            
             @param name The GeneralName
             @throws PkixNameConstraintValidatorException
                      If the <code>name</code>
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixNameConstraintValidator.checkExcluded(Org.BouncyCastle2.Asn1.X509.GeneralName)">
             Check if the given GeneralName is contained in the excluded ISet.
            
             @param name The GeneralName.
             @throws PkixNameConstraintValidatorException
                      If the <code>name</code> is
                      excluded.
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixNameConstraintValidator.IntersectPermittedSubtree(Org.BouncyCastle2.Asn1.Asn1Sequence)">
             Updates the permitted ISet of these name constraints with the intersection
             with the given subtree.
            
             @param permitted The permitted subtrees
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixNameConstraintValidator.AddExcludedSubtree(Org.BouncyCastle2.Asn1.X509.GeneralSubtree)">
             Adds a subtree to the excluded ISet of these name constraints.
            
             @param subtree A subtree with an excluded GeneralName.
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixNameConstraintValidator.Max(System.Byte[],System.Byte[])">
             Returns the maximum IP address.
            
             @param ip1 The first IP address.
             @param ip2 The second IP address.
             @return The maximum IP address.
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixNameConstraintValidator.Min(System.Byte[],System.Byte[])">
             Returns the minimum IP address.
            
             @param ip1 The first IP address.
             @param ip2 The second IP address.
             @return The minimum IP address.
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixNameConstraintValidator.CompareTo(System.Byte[],System.Byte[])">
             Compares IP address <code>ip1</code> with <code>ip2</code>. If ip1
             is equal to ip2 0 is returned. If ip1 is bigger 1 is returned, -1
             otherwise.
            
             @param ip1 The first IP address.
             @param ip2 The second IP address.
             @return 0 if ip1 is equal to ip2, 1 if ip1 is bigger, -1 otherwise.
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixNameConstraintValidator.Or(System.Byte[],System.Byte[])">
             Returns the logical OR of the IP addresses <code>ip1</code> and
             <code>ip2</code>.
            
             @param ip1 The first IP address.
             @param ip2 The second IP address.
             @return The OR of <code>ip1</code> and <code>ip2</code>.
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixNameConstraintValidator.StringifyIP(System.Byte[])">
             Stringifies an IPv4 or v6 address with subnet mask.
            
             @param ip The IP with subnet mask.
             @return The stringified IP address.
        </member>
        <member name="T:Org.BouncyCastle2.Pkix.PkixParameters">
            <summary>
            Summary description for PkixParameters.
            </summary>
        </member>
        <member name="F:Org.BouncyCastle2.Pkix.PkixParameters.PkixValidityModel">
            This is the default PKIX validity model. Actually there are two variants
            of this: The PKIX model and the modified PKIX model. The PKIX model
            verifies that all involved certificates must have been valid at the
            current time. The modified PKIX model verifies that all involved
            certificates were valid at the signing time. Both are indirectly choosen
            with the {@link PKIXParameters#setDate(java.util.Date)} method, so this
            methods sets the Date when <em>all</em> certificates must have been
            valid.
        </member>
        <member name="F:Org.BouncyCastle2.Pkix.PkixParameters.ChainValidityModel">
            This model uses the following validity model. Each certificate must have
            been valid at the moment where is was used. That means the end
            certificate must have been valid at the time the signature was done. The
            CA certificate which signed the end certificate must have been valid,
            when the end certificate was signed. The CA (or Root CA) certificate must
            have been valid, when the CA certificate was signed and so on. So the
            {@link PKIXParameters#setDate(java.util.Date)} method sets the time, when
            the <em>end certificate</em> must have been valid. <p/> It is used e.g.
            in the German signature law.
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixParameters.#ctor(Org.BouncyCastle2.Utilities.Collections.ISet)">
             Creates an instance of PKIXParameters with the specified Set of
             most-trusted CAs. Each element of the set is a TrustAnchor.<br />
             <br />
             Note that the Set is copied to protect against subsequent modifications.
            
             @param trustAnchors
                        a Set of TrustAnchors
            
             @exception InvalidAlgorithmParameterException
                            if the specified Set is empty
                            <code>(trustAnchors.isEmpty() == true)</code>
             @exception NullPointerException
                            if the specified Set is <code>null</code>
             @exception ClassCastException
                            if any of the elements in the Set are not of type
                            <code>java.security.cert.TrustAnchor</code>
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixParameters.GetTargetCertConstraints">
             Returns the required constraints on the target certificate. The
             constraints are returned as an instance of CertSelector. If
             <code>null</code>, no constraints are defined.<br />
             <br />
             Note that the CertSelector returned is cloned to protect against
             subsequent modifications.
            
             @return a CertSelector specifying the constraints on the target
                     certificate (or <code>null</code>)
            
             @see #setTargetCertConstraints(CertSelector)
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixParameters.SetTargetCertConstraints(Org.BouncyCastle2.X509.Store.IX509Selector)">
             Sets the required constraints on the target certificate. The constraints
             are specified as an instance of CertSelector. If null, no constraints are
             defined.<br />
             <br />
             Note that the CertSelector specified is cloned to protect against
             subsequent modifications.
            
             @param selector
                        a CertSelector specifying the constraints on the target
                        certificate (or <code>null</code>)
            
             @see #getTargetCertConstraints()
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixParameters.GetInitialPolicies">
             Returns an immutable Set of initial policy identifiers (OID strings),
             indicating that any one of these policies would be acceptable to the
             certificate user for the purposes of certification path processing. The
             default return value is an empty <code>Set</code>, which is
             interpreted as meaning that any policy would be acceptable.
            
             @return an immutable <code>Set</code> of initial policy OIDs in String
                     format, or an empty <code>Set</code> (implying any policy is
                     acceptable). Never returns <code>null</code>.
            
             @see #setInitialPolicies(java.util.Set)
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixParameters.SetInitialPolicies(Org.BouncyCastle2.Utilities.Collections.ISet)">
             Sets the <code>Set</code> of initial policy identifiers (OID strings),
             indicating that any one of these policies would be acceptable to the
             certificate user for the purposes of certification path processing. By
             default, any policy is acceptable (i.e. all policies), so a user that
             wants to allow any policy as acceptable does not need to call this
             method, or can call it with an empty <code>Set</code> (or
             <code>null</code>).<br />
             <br />
             Note that the Set is copied to protect against subsequent modifications.<br />
             <br />
            
             @param initialPolicies
                        a Set of initial policy OIDs in String format (or
                        <code>null</code>)
            
             @exception ClassCastException
                            if any of the elements in the set are not of type String
            
             @see #getInitialPolicies()
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixParameters.SetCertPathCheckers(System.Collections.IList)">
             Sets a <code>List</code> of additional certification path checkers. If
             the specified List contains an object that is not a PKIXCertPathChecker,
             it is ignored.<br />
             <br />
             Each <code>PKIXCertPathChecker</code> specified implements additional
             checks on a certificate. Typically, these are checks to process and
             verify private extensions contained in certificates. Each
             <code>PKIXCertPathChecker</code> should be instantiated with any
             initialization parameters needed to execute the check.<br />
             <br />
             This method allows sophisticated applications to extend a PKIX
             <code>CertPathValidator</code> or <code>CertPathBuilder</code>. Each
             of the specified PKIXCertPathCheckers will be called, in turn, by a PKIX
             <code>CertPathValidator</code> or <code>CertPathBuilder</code> for
             each certificate processed or validated.<br />
             <br />
             Regardless of whether these additional PKIXCertPathCheckers are set, a
             PKIX <code>CertPathValidator</code> or <code>CertPathBuilder</code>
             must perform all of the required PKIX checks on each certificate. The one
             exception to this rule is if the RevocationEnabled flag is set to false
             (see the {@link #setRevocationEnabled(boolean) setRevocationEnabled}
             method).<br />
             <br />
             Note that the List supplied here is copied and each PKIXCertPathChecker
             in the list is cloned to protect against subsequent modifications.
            
             @param checkers
                        a List of PKIXCertPathCheckers. May be null, in which case no
                        additional checkers will be used.
             @exception ClassCastException
                            if any of the elements in the list are not of type
                            <code>java.security.cert.PKIXCertPathChecker</code>
             @see #getCertPathCheckers()
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixParameters.GetCertPathCheckers">
             Returns the List of certification path checkers. Each PKIXCertPathChecker
             in the returned IList is cloned to protect against subsequent modifications.
            
             @return an immutable List of PKIXCertPathCheckers (may be empty, but not
                     <code>null</code>)
            
             @see #setCertPathCheckers(java.util.List)
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixParameters.AddCertPathChecker(Org.BouncyCastle2.Pkix.PkixCertPathChecker)">
             Adds a <code>PKIXCertPathChecker</code> to the list of certification
             path checkers. See the {@link #setCertPathCheckers setCertPathCheckers}
             method for more details.
             <p>
             Note that the <code>PKIXCertPathChecker</code> is cloned to protect
             against subsequent modifications.</p>
            
             @param checker a <code>PKIXCertPathChecker</code> to add to the list of
             checks. If <code>null</code>, the checker is ignored (not added to list).
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixParameters.SetParams(Org.BouncyCastle2.Pkix.PkixParameters)">
             Method to support <code>Clone()</code> under J2ME.
             <code>super.Clone()</code> does not exist and fields are not copied.
            
             @param params Parameters to set. If this are
                        <code>ExtendedPkixParameters</code> they are copied to.
        </member>
        <member name="P:Org.BouncyCastle2.Pkix.PkixParameters.IsUseDeltasEnabled">
            Whether delta CRLs should be used for checking the revocation status.
            Defaults to <code>false</code>.
        </member>
        <member name="P:Org.BouncyCastle2.Pkix.PkixParameters.ValidityModel">
            The validity model.
            @see #CHAIN_VALIDITY_MODEL
            @see #PKIX_VALIDITY_MODEL
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixParameters.SetStores(System.Collections.IList)">
             Sets the Bouncy Castle Stores for finding CRLs, certificates, attribute
             certificates or cross certificates.
             <p>
             The <code>IList</code> is cloned.
             </p>
            
             @param stores A list of stores to use.
             @see #getStores
             @throws ClassCastException if an element of <code>stores</code> is not
                         a {@link Store}.
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixParameters.AddStore(Org.BouncyCastle2.X509.Store.IX509Store)">
             Adds a Bouncy Castle {@link Store} to find CRLs, certificates, attribute
             certificates or cross certificates.
             <p>
             This method should be used to add local stores, like collection based
             X.509 stores, if available. Local stores should be considered first,
             before trying to use additional (remote) locations, because they do not
             need possible additional network traffic.
             </p><p>
             If <code>store</code> is <code>null</code> it is ignored.
             </p>
            
             @param store The store to add.
             @see #getStores
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixParameters.AddAdditionalStore(Org.BouncyCastle2.X509.Store.IX509Store)">
             Adds an additional Bouncy Castle {@link Store} to find CRLs, certificates,
             attribute certificates or cross certificates.
             <p>
             You should not use this method. This method is used for adding additional
             X.509 stores, which are used to add (remote) locations, e.g. LDAP, found
             during X.509 object processing, e.g. in certificates or CRLs. This method
             is used in PKIX certification path processing.
             </p><p>
             If <code>store</code> is <code>null</code> it is ignored.
             </p>
            
             @param store The store to add.
             @see #getStores()
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixParameters.GetAdditionalStores">
             Returns an <code>IList</code> of additional Bouncy Castle
             <code>Store</code>s used for finding CRLs, certificates, attribute
             certificates or cross certificates.
            
             @return an immutable <code>IList</code> of additional Bouncy Castle
                     <code>Store</code>s. Never <code>null</code>.
            
             @see #addAddionalStore(Store)
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixParameters.GetStores">
             Returns an <code>IList</code> of Bouncy Castle
             <code>Store</code>s used for finding CRLs, certificates, attribute
             certificates or cross certificates.
            
             @return an immutable <code>IList</code> of Bouncy Castle
                     <code>Store</code>s. Never <code>null</code>.
            
             @see #setStores(IList)
        </member>
        <member name="P:Org.BouncyCastle2.Pkix.PkixParameters.IsAdditionalLocationsEnabled">
             Returns if additional {@link X509Store}s for locations like LDAP found
             in certificates or CRLs should be used.
            
             @return Returns <code>true</code> if additional stores are used.
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixParameters.SetAdditionalLocationsEnabled(System.Boolean)">
             Sets if additional {@link X509Store}s for locations like LDAP found in
             certificates or CRLs should be used.
            
             @param enabled <code>true</code> if additional stores are used.
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixParameters.GetTargetConstraints">
             Returns the required constraints on the target certificate or attribute
             certificate. The constraints are returned as an instance of
             <code>IX509Selector</code>. If <code>null</code>, no constraints are
             defined.
            
             <p>
             The target certificate in a PKIX path may be a certificate or an
             attribute certificate.
             </p><p>
             Note that the <code>IX509Selector</code> returned is cloned to protect
             against subsequent modifications.
             </p>
             @return a <code>IX509Selector</code> specifying the constraints on the
                     target certificate or attribute certificate (or <code>null</code>)
             @see #setTargetConstraints
             @see X509CertStoreSelector
             @see X509AttributeCertStoreSelector
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixParameters.SetTargetConstraints(Org.BouncyCastle2.X509.Store.IX509Selector)">
             Sets the required constraints on the target certificate or attribute
             certificate. The constraints are specified as an instance of
             <code>IX509Selector</code>. If <code>null</code>, no constraints are
             defined.
             <p>
             The target certificate in a PKIX path may be a certificate or an
             attribute certificate.
             </p><p>
             Note that the <code>IX509Selector</code> specified is cloned to protect
             against subsequent modifications.
             </p>
            
             @param selector a <code>IX509Selector</code> specifying the constraints on
                        the target certificate or attribute certificate (or
                        <code>null</code>)
             @see #getTargetConstraints
             @see X509CertStoreSelector
             @see X509AttributeCertStoreSelector
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixParameters.GetTrustedACIssuers">
             Returns the trusted attribute certificate issuers. If attribute
             certificates is verified the trusted AC issuers must be set.
             <p>
             The returned <code>ISet</code> consists of <code>TrustAnchor</code>s.
             </p><p>
             The returned <code>ISet</code> is immutable. Never <code>null</code>
             </p>
            
             @return Returns an immutable set of the trusted AC issuers.
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixParameters.SetTrustedACIssuers(Org.BouncyCastle2.Utilities.Collections.ISet)">
             Sets the trusted attribute certificate issuers. If attribute certificates
             is verified the trusted AC issuers must be set.
             <p>
             The <code>trustedACIssuers</code> must be a <code>ISet</code> of
             <code>TrustAnchor</code>
             </p><p>
             The given set is cloned.
             </p>
            
             @param trustedACIssuers The trusted AC issuers to set. Is never
                        <code>null</code>.
             @throws ClassCastException if an element of <code>stores</code> is not
                         a <code>TrustAnchor</code>.
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixParameters.GetNecessaryACAttributes">
             Returns the necessary attributes which must be contained in an attribute
             certificate.
             <p>
             The returned <code>ISet</code> is immutable and contains
             <code>String</code>s with the OIDs.
             </p>
            
             @return Returns the necessary AC attributes.
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixParameters.SetNecessaryACAttributes(Org.BouncyCastle2.Utilities.Collections.ISet)">
             Sets the necessary which must be contained in an attribute certificate.
             <p>
             The <code>ISet</code> must contain <code>String</code>s with the
             OIDs.
             </p><p>
             The set is cloned.
             </p>
            
             @param necessaryACAttributes The necessary AC attributes to set.
             @throws ClassCastException if an element of
                         <code>necessaryACAttributes</code> is not a
                         <code>String</code>.
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixParameters.GetProhibitedACAttributes">
             Returns the attribute certificates which are not allowed.
             <p>
             The returned <code>ISet</code> is immutable and contains
             <code>String</code>s with the OIDs.
             </p>
            
             @return Returns the prohibited AC attributes. Is never <code>null</code>.
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixParameters.SetProhibitedACAttributes(Org.BouncyCastle2.Utilities.Collections.ISet)">
             Sets the attribute certificates which are not allowed.
             <p>
             The <code>ISet</code> must contain <code>String</code>s with the
             OIDs.
             </p><p>
             The set is cloned.
             </p>
            
             @param prohibitedACAttributes The prohibited AC attributes to set.
             @throws ClassCastException if an element of
                         <code>prohibitedACAttributes</code> is not a
                         <code>String</code>.
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixParameters.GetAttrCertCheckers">
             Returns the attribute certificate checker. The returned set contains
             {@link PKIXAttrCertChecker}s and is immutable.
            
             @return Returns the attribute certificate checker. Is never
                     <code>null</code>.
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixParameters.SetAttrCertCheckers(Org.BouncyCastle2.Utilities.Collections.ISet)">
             Sets the attribute certificate checkers.
             <p>
             All elements in the <code>ISet</code> must a {@link PKIXAttrCertChecker}.
             </p>
             <p>
             The given set is cloned.
             </p>
            
             @param attrCertCheckers The attribute certificate checkers to set. Is
                        never <code>null</code>.
             @throws ClassCastException if an element of <code>attrCertCheckers</code>
                         is not a <code>PKIXAttrCertChecker</code>.
        </member>
        <member name="T:Org.BouncyCastle2.Pkix.PkixPolicyNode">
            <summary>
            Summary description for PkixPolicyNode.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.PkixPolicyNode.#ctor(System.Collections.IList,System.Int32,Org.BouncyCastle2.Utilities.Collections.ISet,Org.BouncyCastle2.Pkix.PkixPolicyNode,Org.BouncyCastle2.Utilities.Collections.ISet,System.String,System.Boolean)">
            Constructors
        </member>
        <member name="T:Org.BouncyCastle2.Pkix.ReasonsMask">
            <summary>
            This class helps to handle CRL revocation reasons mask. Each CRL handles a
            certain set of revocation reasons.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.ReasonsMask.#ctor(System.Int32)">
            <summary>
            Constructs are reason mask with the reasons.
            </summary>
            <param name="reasons">The reasons.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.ReasonsMask.#ctor">
            <summary>
            A reason mask with no reason.
            </summary>
        </member>
        <member name="F:Org.BouncyCastle2.Pkix.ReasonsMask.AllReasons">
            <summary>
            A mask with all revocation reasons.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.ReasonsMask.AddReasons(Org.BouncyCastle2.Pkix.ReasonsMask)">
             Adds all reasons from the reasons mask to this mask.
            
             @param mask The reasons mask to add.
        </member>
        <member name="P:Org.BouncyCastle2.Pkix.ReasonsMask.IsAllReasons">
            <summary>
            Returns <code>true</code> if this reasons mask contains all possible
            reasons.
            </summary>
            <returns>true if this reasons mask contains all possible reasons.
            </returns>
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.ReasonsMask.Intersect(Org.BouncyCastle2.Pkix.ReasonsMask)">
            <summary>
            Intersects this mask with the given reasons mask.
            </summary>
            <param name="mask">mask The mask to intersect with.</param>
            <returns>The intersection of this and teh given mask.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.ReasonsMask.HasNewReasons(Org.BouncyCastle2.Pkix.ReasonsMask)">
            <summary>
            Returns <c>true</c> if the passed reasons mask has new reasons.
            </summary>
            <param name="mask">The reasons mask which should be tested for new reasons.</param>
            <returns><c>true</c> if the passed reasons mask has new reasons.</returns>
        </member>
        <member name="P:Org.BouncyCastle2.Pkix.ReasonsMask.Reasons">
            <summary>
            Returns the reasons in this mask.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.Rfc3280CertPathUtilities.ProcessCrlB2(Org.BouncyCastle2.Asn1.X509.DistributionPoint,System.Object,Org.BouncyCastle2.X509.X509Crl)">
             If the complete CRL includes an issuing distribution point (IDP) CRL
             extension check the following:
             <p>
             (i) If the distribution point name is present in the IDP CRL extension
             and the distribution field is present in the DP, then verify that one of
             the names in the IDP matches one of the names in the DP. If the
             distribution point name is present in the IDP CRL extension and the
             distribution field is omitted from the DP, then verify that one of the
             names in the IDP matches one of the names in the cRLIssuer field of the
             DP.
             </p>
             <p>
             (ii) If the onlyContainsUserCerts boolean is asserted in the IDP CRL
             extension, verify that the certificate does not include the basic
             constraints extension with the cA boolean asserted.
             </p>
             <p>
             (iii) If the onlyContainsCACerts boolean is asserted in the IDP CRL
             extension, verify that the certificate includes the basic constraints
             extension with the cA boolean asserted.
             </p>
             <p>
             (iv) Verify that the onlyContainsAttributeCerts boolean is not asserted.
             </p>
            
             @param dp   The distribution point.
             @param cert The certificate.
             @param crl  The CRL.
             @throws AnnotatedException if one of the conditions is not met or an error occurs.
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.Rfc3280CertPathUtilities.ProcessCrlB1(Org.BouncyCastle2.Asn1.X509.DistributionPoint,System.Object,Org.BouncyCastle2.X509.X509Crl)">
             If the DP includes cRLIssuer, then verify that the issuer field in the
             complete CRL matches cRLIssuer in the DP and that the complete CRL
             contains an
                  g distribution point extension with the indirectCRL
             boolean asserted. Otherwise, verify that the CRL issuer matches the
             certificate issuer.
            
             @param dp   The distribution point.
             @param cert The certificate ot attribute certificate.
             @param crl  The CRL for <code>cert</code>.
             @throws AnnotatedException if one of the above conditions does not apply or an error
                                        occurs.
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.Rfc3280CertPathUtilities.ProcessCrlF(Org.BouncyCastle2.X509.X509Crl,System.Object,Org.BouncyCastle2.X509.X509Certificate,Org.BouncyCastle2.Crypto.AsymmetricKeyParameter,Org.BouncyCastle2.Pkix.PkixParameters,System.Collections.IList)">
             Obtain and validate the certification path for the complete CRL issuer.
             If a key usage extension is present in the CRL issuer's certificate,
             verify that the cRLSign bit is set.
            
             @param crl                CRL which contains revocation information for the certificate
                                       <code>cert</code>.
             @param cert               The attribute certificate or certificate to check if it is
                                       revoked.
             @param defaultCRLSignCert The issuer certificate of the certificate <code>cert</code>.
             @param defaultCRLSignKey  The public key of the issuer certificate
                                       <code>defaultCRLSignCert</code>.
             @param paramsPKIX         paramsPKIX PKIX parameters.
             @param certPathCerts      The certificates on the certification path.
             @return A <code>Set</code> with all keys of possible CRL issuer
                     certificates.
             @throws AnnotatedException if the CRL is not valid or the status cannot be checked or
                                        some error occurs.
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.Rfc3280CertPathUtilities.CheckCrl(Org.BouncyCastle2.Asn1.X509.DistributionPoint,Org.BouncyCastle2.Pkix.PkixParameters,Org.BouncyCastle2.X509.X509Certificate,System.DateTime,Org.BouncyCastle2.X509.X509Certificate,Org.BouncyCastle2.Crypto.AsymmetricKeyParameter,Org.BouncyCastle2.Pkix.CertStatus,Org.BouncyCastle2.Pkix.ReasonsMask,System.Collections.IList)">
             Checks a distribution point for revocation information for the
             certificate <code>cert</code>.
            
             @param dp                 The distribution point to consider.
             @param paramsPKIX         PKIX parameters.
             @param cert               Certificate to check if it is revoked.
             @param validDate          The date when the certificate revocation status should be
                                       checked.
             @param defaultCRLSignCert The issuer certificate of the certificate <code>cert</code>.
             @param defaultCRLSignKey  The public key of the issuer certificate
                                       <code>defaultCRLSignCert</code>.
             @param certStatus         The current certificate revocation status.
             @param reasonMask         The reasons mask which is already checked.
             @param certPathCerts      The certificates of the certification path.
             @throws AnnotatedException if the certificate is revoked or the status cannot be checked
                                        or some error occurs.
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.Rfc3280CertPathUtilities.CheckCrls(Org.BouncyCastle2.Pkix.PkixParameters,Org.BouncyCastle2.X509.X509Certificate,System.DateTime,Org.BouncyCastle2.X509.X509Certificate,Org.BouncyCastle2.Crypto.AsymmetricKeyParameter,System.Collections.IList)">
             Checks a certificate if it is revoked.
            
             @param paramsPKIX       PKIX parameters.
             @param cert             Certificate to check if it is revoked.
             @param validDate        The date when the certificate revocation status should be
                                     checked.
             @param sign             The issuer certificate of the certificate <code>cert</code>.
             @param workingPublicKey The public key of the issuer certificate <code>sign</code>.
             @param certPathCerts    The certificates of the certification path.
             @throws AnnotatedException if the certificate is revoked or the status cannot be checked
                                        or some error occurs.
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.Rfc3280CertPathUtilities.ProcessCrlC(Org.BouncyCastle2.X509.X509Crl,Org.BouncyCastle2.X509.X509Crl,Org.BouncyCastle2.Pkix.PkixParameters)">
             If use-deltas is set, verify the issuer and scope of the delta CRL.
            
             @param deltaCRL    The delta CRL.
             @param completeCRL The complete CRL.
             @param pkixParams  The PKIX paramaters.
             @throws AnnotatedException if an exception occurs.
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.Rfc3281CertPathUtilities.CheckCrls(Org.BouncyCastle2.X509.IX509AttributeCertificate,Org.BouncyCastle2.Pkix.PkixParameters,Org.BouncyCastle2.X509.X509Certificate,System.DateTime,System.Collections.IList)">
            Checks if an attribute certificate is revoked.
            
            @param attrCert Attribute certificate to check if it is revoked.
            @param paramsPKIX PKIX parameters.
            @param issuerCert The issuer certificate of the attribute certificate
                       <code>attrCert</code>.
            @param validDate The date when the certificate revocation status should
                       be checked.
            @param certPathCerts The certificates of the certification path to be
                       checked.
            
            @throws CertPathValidatorException if the certificate is revoked or the
                        status cannot be checked or some error occurs.
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.Rfc3281CertPathUtilities.ProcessAttrCert1(Org.BouncyCastle2.X509.IX509AttributeCertificate,Org.BouncyCastle2.Pkix.PkixParameters)">
            Searches for a holder public key certificate and verifies its
            certification path.
            
            @param attrCert the attribute certificate.
            @param pkixParams The PKIX parameters.
            @return The certificate path of the holder certificate.
            @throws Exception if
                        <ul>
                        <li>no public key certificate can be found although holder
                        information is given by an entity name or a base certificate
                        ID</li>
                        <li>support classes cannot be created</li>
                        <li>no certification path for the public key certificate can
                        be built</li>
                        </ul>
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.Rfc3281CertPathUtilities.CheckCrl(Org.BouncyCastle2.Asn1.X509.DistributionPoint,Org.BouncyCastle2.X509.IX509AttributeCertificate,Org.BouncyCastle2.Pkix.PkixParameters,System.DateTime,Org.BouncyCastle2.X509.X509Certificate,Org.BouncyCastle2.Pkix.CertStatus,Org.BouncyCastle2.Pkix.ReasonsMask,System.Collections.IList)">
            
            Checks a distribution point for revocation information for the
            certificate <code>attrCert</code>.
            
            @param dp The distribution point to consider.
            @param attrCert The attribute certificate which should be checked.
            @param paramsPKIX PKIX parameters.
            @param validDate The date when the certificate revocation status should
                       be checked.
            @param issuerCert Certificate to check if it is revoked.
            @param reasonMask The reasons mask which is already checked.
            @param certPathCerts The certificates of the certification path to be
                       checked.
            @throws Exception if the certificate is revoked or the status
                        cannot be checked or some error occurs.
        </member>
        <member name="T:Org.BouncyCastle2.Pkix.TrustAnchor">
            <summary>
            A trust anchor or most-trusted Certification Authority (CA).
            
            This class represents a "most-trusted CA", which is used as a trust anchor
            for validating X.509 certification paths. A most-trusted CA includes the
            public key of the CA, the CA's name, and any constraints upon the set of
            paths which may be validated using this key. These parameters can be
            specified in the form of a trusted X509Certificate or as individual
            parameters.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.TrustAnchor.#ctor(Org.BouncyCastle2.X509.X509Certificate,System.Byte[])">
             <summary>
             Creates an instance of TrustAnchor with the specified X509Certificate and
             optional name constraints, which are intended to be used as additional
             constraints when validating an X.509 certification path.
            	The name constraints are specified as a byte array. This byte array
            	should contain the DER encoded form of the name constraints, as they
            	would appear in the NameConstraints structure defined in RFC 2459 and
            	X.509. The ASN.1 definition of this structure appears below.
            	
            	<pre>
            	NameConstraints ::= SEQUENCE {
            		permittedSubtrees       [0]     GeneralSubtrees OPTIONAL,
            		excludedSubtrees        [1]     GeneralSubtrees OPTIONAL }
            	   
             GeneralSubtrees ::= SEQUENCE SIZE (1..MAX) OF GeneralSubtree
             
            		GeneralSubtree ::= SEQUENCE {
            		base                    GeneralName,
            		minimum         [0]     BaseDistance DEFAULT 0,
            		maximum         [1]     BaseDistance OPTIONAL }
            		
            		BaseDistance ::= INTEGER (0..MAX)
            
            		GeneralName ::= CHOICE {
            		otherName                       [0]     OtherName,
            		rfc822Name                      [1]     IA5String,
            		dNSName                         [2]     IA5String,
            		x400Address                     [3]     ORAddress,
            		directoryName                   [4]     Name,
            		ediPartyName                    [5]     EDIPartyName,
            		uniformResourceIdentifier       [6]     IA5String,
            		iPAddress                       [7]     OCTET STRING,
            		registeredID                    [8]     OBJECT IDENTIFIER}
            	</pre>
            	
            	Note that the name constraints byte array supplied is cloned to protect
            	against subsequent modifications.
             </summary>
             <param name="trustedCert">a trusted X509Certificate</param>
             <param name="nameConstraints">a byte array containing the ASN.1 DER encoding of a
             NameConstraints extension to be used for checking name
             constraints. Only the value of the extension is included, not
             the OID or criticality flag. Specify null to omit the
             parameter.</param>
             <exception cref="T:System.ArgumentNullException">if the specified X509Certificate is null</exception>
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.TrustAnchor.#ctor(Org.BouncyCastle2.Asn1.X509.X509Name,Org.BouncyCastle2.Crypto.AsymmetricKeyParameter,System.Byte[])">
            <summary>
            Creates an instance of <c>TrustAnchor</c> where the
            most-trusted CA is specified as an X500Principal and public key.
            </summary>
            <remarks>
            <p>
            Name constraints are an optional parameter, and are intended to be used
            as additional constraints when validating an X.509 certification path.
            </p><p>
            The name constraints are specified as a byte array. This byte array
            contains the DER encoded form of the name constraints, as they
            would appear in the NameConstraints structure defined in RFC 2459
            and X.509. The ASN.1 notation for this structure is supplied in the
            documentation for the other constructors.
            </p><p>
            Note that the name constraints byte array supplied here is cloned to
            protect against subsequent modifications.
            </p>
            </remarks>
            <param name="caPrincipal">the name of the most-trusted CA as X509Name</param>
            <param name="pubKey">the public key of the most-trusted CA</param>
            <param name="nameConstraints">
            a byte array containing the ASN.1 DER encoding of a NameConstraints extension to
            be used for checking name constraints. Only the value of the extension is included,
            not the OID or criticality flag. Specify <c>null</c> to omit the parameter.
            </param>
            <exception cref="T:System.ArgumentNullException">
            if <c>caPrincipal</c> or <c>pubKey</c> is null
            </exception>
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.TrustAnchor.#ctor(System.String,Org.BouncyCastle2.Crypto.AsymmetricKeyParameter,System.Byte[])">
            <summary>
            Creates an instance of <code>TrustAnchor</code> where the most-trusted
            CA is specified as a distinguished name and public key. Name constraints
            are an optional parameter, and are intended to be used as additional
            constraints when validating an X.509 certification path.
            <br/>
            The name constraints are specified as a byte array. This byte array
            contains the DER encoded form of the name constraints, as they would
            appear in the NameConstraints structure defined in RFC 2459 and X.509.
            </summary>
            <param name="caName">the X.500 distinguished name of the most-trusted CA in RFC
            2253 string format</param>
            <param name="pubKey">the public key of the most-trusted CA</param>
            <param name="nameConstraints">a byte array containing the ASN.1 DER encoding of a
            NameConstraints extension to be used for checking name
            constraints. Only the value of the extension is included, not 
            the OID or criticality flag. Specify null to omit the 
            parameter.</param>
            throws NullPointerException, IllegalArgumentException
        </member>
        <member name="P:Org.BouncyCastle2.Pkix.TrustAnchor.TrustedCert">
            <summary>
            Returns the most-trusted CA certificate.
            </summary>
        </member>
        <member name="P:Org.BouncyCastle2.Pkix.TrustAnchor.CA">
            <summary>
            Returns the name of the most-trusted CA as an X509Name.
            </summary>
        </member>
        <member name="P:Org.BouncyCastle2.Pkix.TrustAnchor.CAName">
            <summary>
            Returns the name of the most-trusted CA in RFC 2253 string format.
            </summary>
        </member>
        <member name="P:Org.BouncyCastle2.Pkix.TrustAnchor.CAPublicKey">
            <summary>
            Returns the public key of the most-trusted CA.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.TrustAnchor.setNameConstraints(System.Byte[])">
            <summary>
            Decode the name constraints and clone them if not null.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Pkix.TrustAnchor.ToString">
            <summary>
            Returns a formatted string describing the <code>TrustAnchor</code>.
            </summary>
            <returns>a formatted string describing the <code>TrustAnchor</code></returns>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.AbstractTlsClient">
            <summary>Base class for a TLS client.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.AbstractTlsClient.AllowUnexpectedServerExtension(System.Int32,System.Byte[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.AbstractTlsClient.CheckForUnexpectedServerExtension(System.Collections.IDictionary,System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.AbstractTlsClient.GetPskIdentity">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.AbstractTlsClient.GetSrpIdentity">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.AbstractTlsClient.GetMultiCertStatusRequest">
            <returns>an <see cref="T:System.Collections.IList"/> of <see cref="T:Org.BouncyCastle2.Tls.CertificateStatusRequestItemV2"/> (or null).</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.AbstractTlsClient.GetSupportedGroups(System.Collections.IList)">
            <summary>The default <see cref="M:Org.BouncyCastle2.Tls.AbstractTlsClient.GetClientExtensions"/> implementation calls this to determine which named
            groups to include in the supported_groups extension for the ClientHello.</summary>
            <param name="namedGroupRoles">The <see cref="T:Org.BouncyCastle2.Tls.NamedGroupRole">named group roles</see> for which there should
            be at least one supported group. By default this is inferred from the offered cipher suites and signature
            algorithms.</param>
            <returns>an <see cref="T:System.Collections.IList"/> of <see cref="T:System.Int32"/>. See <see cref="T:Org.BouncyCastle2.Tls.NamedGroup"/> for group constants.
            </returns>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.AbstractTlsClient.NotifyHandshakeBeginning">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.AbstractTlsClient.GetClientExtensions">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.AbstractTlsClient.NotifyServerVersion(Org.BouncyCastle2.Tls.ProtocolVersion)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.AbstractTlsClient.NotifySelectedPsk(Org.BouncyCastle2.Tls.TlsPsk)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.AbstractTlsClient.ProcessServerExtensions(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.AbstractTlsClient.ProcessServerSupplementalData(System.Collections.IList)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.AbstractTlsClient.GetClientSupplementalData">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.AbstractTlsClient.NotifyNewSessionTicket(Org.BouncyCastle2.Tls.NewSessionTicket)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.AbstractTlsContext.HandshakeBeginning(Org.BouncyCastle2.Tls.TlsPeer)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.AbstractTlsContext.HandshakeComplete(Org.BouncyCastle2.Tls.TlsPeer,Org.BouncyCastle2.Tls.TlsSession)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.AbstractTlsKeyExchange">
            <summary>Base class for supporting a TLS key exchange implementation.</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.AbstractTlsKeyExchangeFactory">
            <summary>Base class for supporting a TLS key exchange factory implementation.</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.AbstractTlsPeer">
            <summary>Base class for a TLS client or server.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.AbstractTlsPeer.GetSupportedVersions">
            <summary>Get the <see cref="T:Org.BouncyCastle2.Tls.ProtocolVersion"/> values that are supported by this peer.</summary>
            <remarks>
            WARNING: Mixing DTLS and TLS versions in the returned array is currently NOT supported. Use a separate
            (sub-)class for each case.
            </remarks>
            <returns>an array of supported <see cref="T:Org.BouncyCastle2.Tls.ProtocolVersion"/> values.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.AbstractTlsPeer.Cancel">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.AbstractTlsPeer.NotifyHandshakeBeginning">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.AbstractTlsPeer.NotifySecureRenegotiation(System.Boolean)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.AbstractTlsPeer.GetKeyExchangeFactory">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.AbstractTlsPeer.NotifyHandshakeComplete">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.AbstractTlsServer">
            <summary>Base class for a TLS server.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.AbstractTlsServer.SelectCipherSuite(System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.AlertDescription">
            <summary>RFC 5246 7.2.</summary>
        </member>
        <member name="F:Org.BouncyCastle2.Tls.AlertDescription.close_notify">
            <summary>This message notifies the recipient that the sender will not send any more messages on this
            connection.</summary>
            <remarks>
            Note that as of TLS 1.1, failure to properly close a connection no longer requires that a session not be
            resumed. This is a change from TLS 1.0 ("The session becomes unresumable if any connection is terminated
            without proper close_notify messages with level equal to warning.") to conform with widespread
            implementation practice.
            </remarks>
        </member>
        <member name="F:Org.BouncyCastle2.Tls.AlertDescription.unexpected_message">
            <summary>An inappropriate message was received.</summary>
            <remarks>
            This alert is always fatal and should never be observed in communication between proper implementations.
            </remarks>
        </member>
        <member name="F:Org.BouncyCastle2.Tls.AlertDescription.bad_record_mac">
            <summary>This alert is returned if a record is received with an incorrect MAC.</summary>
            <remarks>
            This alert also MUST be returned if an alert is sent because a TLSCiphertext decrypted in an invalid way:
            either it wasn't an even multiple of the block length, or its padding values, when checked, weren't
            correct. This message is always fatal and should never be observed in communication between proper
            implementations (except when messages were corrupted in the network).
            </remarks>
        </member>
        <member name="F:Org.BouncyCastle2.Tls.AlertDescription.decryption_failed">
            <remarks>
            This alert was used in some earlier versions of TLS, and may have permitted certain attacks against the CBC
            mode [CBCATT]. It MUST NOT be sent by compliant implementations.
            </remarks>
        </member>
        <member name="F:Org.BouncyCastle2.Tls.AlertDescription.record_overflow">
            <summary>A TLSCiphertext record was received that had a length more than 2^14+2048 bytes, or a record
            decrypted to a TLSCompressed record with more than 2^14+1024 bytes.</summary>
            <remarks>
            This message is always fatal and should never be observed in communication between proper implementations
            (except when messages were corrupted in the network).
            </remarks>
        </member>
        <member name="F:Org.BouncyCastle2.Tls.AlertDescription.decompression_failure">
            <summary>The decompression function received improper input (e.g., data that would expand to excessive
            length).</summary>
            <remarks>
            This message is always fatal and should never be observed in communication between proper implementations.
            </remarks>
        </member>
        <member name="F:Org.BouncyCastle2.Tls.AlertDescription.handshake_failure">
            <summary>Reception of a handshake_failure alert message indicates that the sender was unable to negotiate
            an acceptable set of security parameters given the options available.</summary>
            <remarks>
            This is a fatal error.
            </remarks>
        </member>
        <member name="F:Org.BouncyCastle2.Tls.AlertDescription.no_certificate">
            <remarks>
            This alert was used in SSLv3 but not any version of TLS. It MUST NOT be sent by compliant implementations.
            </remarks>
        </member>
        <member name="F:Org.BouncyCastle2.Tls.AlertDescription.bad_certificate">
            <summary>A certificate was corrupt, contained signatures that did not verify correctly, etc.</summary>
        </member>
        <member name="F:Org.BouncyCastle2.Tls.AlertDescription.unsupported_certificate">
            <summary>A certificate was of an unsupported type.</summary>
        </member>
        <member name="F:Org.BouncyCastle2.Tls.AlertDescription.certificate_revoked">
            <summary>A certificate was revoked by its signer.</summary>
        </member>
        <member name="F:Org.BouncyCastle2.Tls.AlertDescription.certificate_expired">
            <summary>A certificate has expired or is not currently valid.</summary>
        </member>
        <member name="F:Org.BouncyCastle2.Tls.AlertDescription.certificate_unknown">
            <summary>Some other (unspecified) issue arose in processing the certificate, rendering it unacceptable.
            </summary>
        </member>
        <member name="F:Org.BouncyCastle2.Tls.AlertDescription.illegal_parameter">
            <summary>A field in the handshake was out of range or inconsistent with other fields.</summary>
            <remarks>
            This message is always fatal.
            </remarks>
        </member>
        <member name="F:Org.BouncyCastle2.Tls.AlertDescription.unknown_ca">
            <summary>A valid certificate chain or partial chain was received, but the certificate was not accepted
            because the CA certificate could not be located or couldn't be matched with a known, trusted CA.</summary>
            <remarks>
            This message is always fatal.
            </remarks>
        </member>
        <member name="F:Org.BouncyCastle2.Tls.AlertDescription.access_denied">
            <summary>A valid certificate was received, but when access control was applied, the sender decided not to
            proceed with negotiation.</summary>
            <remarks>
            This message is always fatal.
            </remarks>
        </member>
        <member name="F:Org.BouncyCastle2.Tls.AlertDescription.decode_error">
            <summary>A message could not be decoded because some field was out of the specified range or the length of
            the message was incorrect.</summary>
            <remarks>
            This message is always fatal and should never be observed in communication between proper
            implementations (except when messages were corrupted in the network).
            </remarks>
        </member>
        <member name="F:Org.BouncyCastle2.Tls.AlertDescription.decrypt_error">
            <summary>A handshake cryptographic operation failed, including being unable to correctly verify a signature
            or validate a Finished message.</summary>
            <remarks>
            This message is always fatal.
            </remarks>
        </member>
        <member name="F:Org.BouncyCastle2.Tls.AlertDescription.export_restriction">
            <remarks>
            This alert was used in some earlier versions of TLS. It MUST NOT be sent by compliant implementations.
            </remarks>
        </member>
        <member name="F:Org.BouncyCastle2.Tls.AlertDescription.protocol_version">
            <summary>The protocol version the client has attempted to negotiate is recognized but not supported.
            </summary>
            <remarks>
            (For example, old protocol versions might be avoided for security reasons.) This message is always fatal.
            </remarks>
        </member>
        <member name="F:Org.BouncyCastle2.Tls.AlertDescription.insufficient_security">
            <summary>Returned instead of handshake_failure when a negotiation has failed specifically because the
            server requires ciphers more secure than those supported by the client.</summary>
            <remarks>
            This message is always fatal.
            </remarks>
        </member>
        <member name="F:Org.BouncyCastle2.Tls.AlertDescription.internal_error">
            <summary>An internal error unrelated to the peer or the correctness of the protocol (such as a memory
            allocation failure) makes it impossible to continue.</summary>
            <remarks>
            This message is always fatal.
            </remarks>
        </member>
        <member name="F:Org.BouncyCastle2.Tls.AlertDescription.user_canceled">
            <summary>This handshake is being canceled for some reason unrelated to a protocol failure.</summary>
            <remarks>
            If the user cancels an operation after the handshake is complete, just closing the connection by sending a
            close_notify is more appropriate. This alert should be followed by a close_notify. This message is
            generally a warning.
            </remarks>
        </member>
        <member name="F:Org.BouncyCastle2.Tls.AlertDescription.no_renegotiation">
            <summary>Sent by the client in response to a hello request or by the server in response to a client hello
            after initial handshaking.</summary>
            <remarks>
            Either of these would normally lead to renegotiation; when that is not appropriate, the recipient should
            respond with this alert. At that point, the original requester can decide whether to proceed with the
            connection. One case where this would be appropriate is where a server has spawned a process to satisfy a
            request; the process might receive security parameters (key length, authentication, etc.) at startup, and
            it might be difficult to communicate changes to these parameters after that point. This message is always a
            warning.
            </remarks>
        </member>
        <member name="F:Org.BouncyCastle2.Tls.AlertDescription.unsupported_extension">
            <summary>Sent by clients that receive an extended server hello containing an extension that they did not
            put in the corresponding client hello.</summary>
            <remarks>
            This message is always fatal.
            </remarks>
        </member>
        <member name="F:Org.BouncyCastle2.Tls.AlertDescription.certificate_unobtainable">
            <summary>This alert is sent by servers who are unable to retrieve a certificate chain from the URL supplied
            by the client(see Section 3.3).</summary>
            <remarks>
            This message MAY be fatal - for example if client authentication is required by the server for the
            handshake to continue and the server is unable to retrieve the certificate chain, it may send a fatal
            alert.
            </remarks>
        </member>
        <member name="F:Org.BouncyCastle2.Tls.AlertDescription.unrecognized_name">
            <summary>This alert is sent by servers that receive a server_name extension request, but do not recognize
            the server name.</summary>
            <remarks>
            This message MAY be fatal.
            </remarks>
        </member>
        <member name="F:Org.BouncyCastle2.Tls.AlertDescription.bad_certificate_status_response">
            <summary>This alert is sent by clients that receive an invalid certificate status response (see Section 3.6
            ).</summary>
            <remarks>
            This message is always fatal.
            </remarks>
        </member>
        <member name="F:Org.BouncyCastle2.Tls.AlertDescription.bad_certificate_hash_value">
            <summary>This alert is sent by servers when a certificate hash does not match a client provided
            certificate_hash.</summary>
            <remarks>
            This message is always fatal.
            </remarks>
        </member>
        <member name="F:Org.BouncyCastle2.Tls.AlertDescription.unknown_psk_identity">
            <summary>If the server does not recognize the PSK identity, it MAY respond with an "unknown_psk_identity"
            alert message.</summary>
        </member>
        <member name="F:Org.BouncyCastle2.Tls.AlertDescription.no_application_protocol">
            <summary>In the event that the server supports no protocols that the client advertises, then the server
            SHALL respond with a fatal "no_application_protocol" alert.</summary>
        </member>
        <member name="F:Org.BouncyCastle2.Tls.AlertDescription.inappropriate_fallback">
            <summary>If TLS_FALLBACK_SCSV appears in ClientHello.cipher_suites and the highest protocol version
            supported by the server is higher than the version indicated in ClientHello.client_version, the server MUST
            respond with a fatal inappropriate_fallback alert[..].</summary>
        </member>
        <member name="F:Org.BouncyCastle2.Tls.AlertDescription.missing_extension">
            <summary>Sent by endpoints that receive a handshake message not containing an extension that is mandatory
            to send for the offered TLS version or other negotiated parameters.</summary>
        </member>
        <member name="F:Org.BouncyCastle2.Tls.AlertDescription.certificate_required">
            <summary>Sent by servers when a client certificate is desired but none was provided by the client.
            </summary>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.AlertLevel">
            <summary>RFC 5246 7.2</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.ByteQueue">
            <summary>A queue for bytes. This file could be more optimized.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.ByteQueue.NextTwoPow(System.Int32)">
            <returns>The smallest number which can be written as 2^x which is bigger than i.</returns>
        </member>
        <member name="F:Org.BouncyCastle2.Tls.ByteQueue.m_databuf">
            <summary>The buffer where we store our data.</summary>
        </member>
        <member name="F:Org.BouncyCastle2.Tls.ByteQueue.m_skipped">
            <summary>How many bytes at the beginning of the buffer are skipped.</summary>
        </member>
        <member name="F:Org.BouncyCastle2.Tls.ByteQueue.m_available">
            <summary>How many bytes in the buffer are valid data.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.ByteQueue.AddData(System.Byte[],System.Int32,System.Int32)">
            <summary>Add some data to our buffer.</summary>
            <param name="buf">A byte-array to read data from.</param>
            <param name="off">How many bytes to skip at the beginning of the array.</param>
            <param name="len">How many bytes to read from the array.</param>
        </member>
        <member name="P:Org.BouncyCastle2.Tls.ByteQueue.Available">
            <returns>The number of bytes which are available in this buffer.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.ByteQueue.CopyTo(System.IO.Stream,System.Int32)">
            <summary>Copy some bytes from the beginning of the data to the provided <see cref="T:System.IO.Stream"/>.</summary>
            <param name="output">The <see cref="T:System.IO.Stream"/> to copy the bytes to.</param>
            <param name="length">How many bytes to copy.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.ByteQueue.Read(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>Read data from the buffer.</summary>
            <param name="buf">The buffer where the read data will be copied to.</param>
            <param name="offset">How many bytes to skip at the beginning of buf.</param>
            <param name="len">How many bytes to read at all.</param>
            <param name="skip">How many bytes from our data to skip.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.ByteQueue.ReadHandshakeMessage(System.Int32)">
            <summary>Return a <see cref="T:Org.BouncyCastle2.Tls.HandshakeMessageInput"/> over some bytes at the beginning of the data.
            </summary>
            <param name="length">How many bytes will be readable.</param>
            <returns>A <see cref="T:Org.BouncyCastle2.Tls.HandshakeMessageInput"/> over the data.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.ByteQueue.RemoveData(System.Int32)">
            <summary>Remove some bytes from our data from the beginning.</summary>
            <param name="i">How many bytes to remove.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.ByteQueue.RemoveData(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>Remove data from the buffer.</summary>
            <param name="buf">The buffer where the removed data will be copied to.</param>
            <param name="off">How many bytes to skip at the beginning of buf.</param>
            <param name="len">How many bytes to read at all.</param>
            <param name="skip">How many bytes from our data to skip.</param>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.ByteQueueOutputStream">
            <summary>OutputStream based on a ByteQueue implementation.</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.CertChainType">
            <summary>Implementation of the RFC 3546 3.3. CertChainType.</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.Certificate">
            <summary>Parsing and encoding of a <i>Certificate</i> struct from RFC 4346.</summary>
            <remarks>
            <pre>
            opaque ASN.1Cert&lt;2^24-1&gt;;
            struct {
              ASN.1Cert certificate_list&lt;0..2^24-1&gt;;
            } Certificate;
            </pre>
            </remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Certificate.GetCertificateList">
            <returns>an array of <see cref="T:Org.BouncyCastle2.Tls.Crypto.TlsCertificate"/> representing a certificate chain.</returns>
        </member>
        <member name="P:Org.BouncyCastle2.Tls.Certificate.IsEmpty">
            <returns><c>true</c> if this certificate chain contains no certificates, or <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Certificate.Encode(Org.BouncyCastle2.Tls.TlsContext,System.IO.Stream,System.IO.Stream)">
            <summary>Encode this <see cref="T:Org.BouncyCastle2.Tls.Certificate"/> to a <see cref="T:System.IO.Stream"/>, and optionally calculate the
            "end point hash" (per RFC 5929's tls-server-end-point binding).</summary>
            <param name="context">the <see cref="T:Org.BouncyCastle2.Tls.TlsContext"/> of the current connection.</param>
            <param name="messageOutput">the <see cref="T:System.IO.Stream"/> to encode to.</param>
            <param name="endPointHashOutput">the <see cref="T:System.IO.Stream"/> to write the "end point hash" to (or null).
            </param>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Certificate.Parse(Org.BouncyCastle2.Tls.Certificate.ParseOptions,Org.BouncyCastle2.Tls.TlsContext,System.IO.Stream,System.IO.Stream)">
            <summary>Parse a <see cref="T:Org.BouncyCastle2.Tls.Certificate"/> from a <see cref="T:System.IO.Stream"/>.</summary>
            <param name="options">the <see cref="T:Org.BouncyCastle2.Tls.Certificate.ParseOptions"/> to apply during parsing.</param>
            <param name="context">the <see cref="T:Org.BouncyCastle2.Tls.TlsContext"/> of the current connection.</param>
            <param name="messageInput">the <see cref="T:System.IO.Stream"/> to parse from.</param>
            <param name="endPointHashOutput">the <see cref="T:System.IO.Stream"/> to write the "end point hash" to (or null).
            </param>
            <returns>a <see cref="T:Org.BouncyCastle2.Tls.Certificate"/> object.</returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.CertificateRequest">
            <summary>Parsing and encoding of a <i>CertificateRequest</i> struct from RFC 4346.</summary>
            <remarks>
            <pre>
            struct {
              ClientCertificateType certificate_types&lt;1..2^8-1&gt;;
              DistinguishedName certificate_authorities&lt;3..2^16-1&gt;;
            } CertificateRequest;
            </pre>
            Updated for RFC 5246:
            <pre>
            struct {
              ClientCertificateType certificate_types &lt;1..2 ^ 8 - 1&gt;;
              SignatureAndHashAlgorithm supported_signature_algorithms &lt;2 ^ 16 - 1&gt;;
              DistinguishedName certificate_authorities &lt;0..2 ^ 16 - 1&gt;;
            } CertificateRequest;
            </pre>
            Revised for RFC 8446:
            <pre>
            struct {
              opaque certificate_request_context &lt;0..2 ^ 8 - 1&gt;;
              Extension extensions &lt;2..2 ^ 16 - 1&gt;;
            } CertificateRequest;
            </pre>
            </remarks>
            <seealso cref="T:Org.BouncyCastle2.Tls.ClientCertificateType"/>
            <seealso cref="T:Org.BouncyCastle2.Asn1.X509.X509Name"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.CertificateRequest.CheckSupportedSignatureAlgorithms(System.Collections.IList,System.Int16)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.CertificateRequest.#ctor(System.Int16[],System.Collections.IList,System.Collections.IList)">
            <param name="certificateTypes">see <see cref="T:Org.BouncyCastle2.Tls.ClientCertificateType"/> for valid constants.</param>
            <param name="supportedSignatureAlgorithms"></param>
            <param name="certificateAuthorities">an <see cref="T:System.Collections.IList"/> of <see cref="T:Org.BouncyCastle2.Asn1.X509.X509Name"/>.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.CertificateRequest.#ctor(System.Byte[],System.Collections.IList,System.Collections.IList,System.Collections.IList)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="P:Org.BouncyCastle2.Tls.CertificateRequest.CertificateTypes">
            <returns>an array of certificate types</returns>
            <seealso cref="T:Org.BouncyCastle2.Tls.ClientCertificateType"/>
        </member>
        <member name="P:Org.BouncyCastle2.Tls.CertificateRequest.SupportedSignatureAlgorithms">
            <returns>an <see cref="T:System.Collections.IList"/> of <see cref="T:Org.BouncyCastle2.Tls.SignatureAndHashAlgorithm"/> (or null before TLS 1.2).
            </returns>
        </member>
        <member name="P:Org.BouncyCastle2.Tls.CertificateRequest.SupportedSignatureAlgorithmsCert">
            <returns>an optional <see cref="T:System.Collections.IList"/> of <see cref="T:Org.BouncyCastle2.Tls.SignatureAndHashAlgorithm"/>. May be non-null from
            TLS 1.3 onwards.</returns>
        </member>
        <member name="P:Org.BouncyCastle2.Tls.CertificateRequest.CertificateAuthorities">
            <returns>an <see cref="T:System.Collections.IList"/> of <see cref="T:Org.BouncyCastle2.Asn1.X509.X509Name"/>.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.CertificateRequest.Encode(Org.BouncyCastle2.Tls.TlsContext,System.IO.Stream)">
            <summary>Encode this <see cref="T:Org.BouncyCastle2.Tls.CertificateRequest"/> to a <see cref="T:System.IO.Stream"/>.</summary>
            <param name="context">the <see cref="T:Org.BouncyCastle2.Tls.TlsContext"/> of the current connection.</param>
            <param name="output">the <see cref="T:System.IO.Stream"/> to encode to.</param>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.CertificateRequest.Parse(Org.BouncyCastle2.Tls.TlsContext,System.IO.Stream)">
            <summary>Parse a <see cref="T:Org.BouncyCastle2.Tls.CertificateRequest"/> from a <see cref="T:System.IO.Stream"/></summary>
            <param name="context">the <see cref="T:Org.BouncyCastle2.Tls.TlsContext"/> of the current connection.</param>
            <param name="input">the <see cref="T:System.IO.Stream"/> to parse from.</param>
            <returns>a <see cref="T:Org.BouncyCastle2.Tls.CertificateRequest"/> object.</returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="P:Org.BouncyCastle2.Tls.CertificateStatus.OcspResponseList">
            <summary>an <see cref="T:System.Collections.IList"/> of (possibly null) <see cref="T:Org.BouncyCastle2.Asn1.Ocsp.OcspResponse"/>.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.CertificateStatus.Encode(System.IO.Stream)">
            <summary>Encode this <see cref="T:Org.BouncyCastle2.Tls.CertificateStatus"/> to a <see cref="T:System.IO.Stream"/>.</summary>
            <param name="output">the <see cref="T:System.IO.Stream"/> to encode to.</param>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.CertificateStatus.Parse(Org.BouncyCastle2.Tls.TlsContext,System.IO.Stream)">
            <summary>Parse a <see cref="T:Org.BouncyCastle2.Tls.CertificateStatus"/> from a <see cref="T:System.IO.Stream"/>.</summary>
            <param name="context">the <see cref="T:Org.BouncyCastle2.Tls.TlsContext"/> of the current connection.</param>
            <param name="input">the <see cref="T:System.IO.Stream"/> to parse from.</param>
            <returns>a <see cref="T:Org.BouncyCastle2.Tls.CertificateStatus"/> object.</returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.CertificateStatus.ParseOcspResponse(System.Byte[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.CertificateStatus.RequireStatusRequestVersion(System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.CertificateStatusRequest">
            <summary>Implementation of the RFC 3546 3.6. CertificateStatusRequest.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.CertificateStatusRequest.Encode(System.IO.Stream)">
            <summary>Encode this <see cref="T:Org.BouncyCastle2.Tls.CertificateStatusRequest"/> to a <see cref="T:System.IO.Stream"/>.</summary>
            <param name="output">the <see cref="T:System.IO.Stream"/> to encode to.</param>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.CertificateStatusRequest.Parse(System.IO.Stream)">
            <summary>Parse a <see cref="T:Org.BouncyCastle2.Tls.CertificateStatusRequest"/> from a <see cref="T:System.IO.Stream"/>.</summary>
            <param name="input">the <see cref="T:System.IO.Stream"/> to parse from.</param>
            <returns>a <see cref="T:Org.BouncyCastle2.Tls.CertificateStatusRequest"/> object.</returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.CertificateStatusRequestItemV2">
            <summary>Implementation of the RFC 6961 2.2. CertificateStatusRequestItemV2.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.CertificateStatusRequestItemV2.Encode(System.IO.Stream)">
            <summary>Encode this <see cref="T:Org.BouncyCastle2.Tls.CertificateStatusRequestItemV2"/> to a <see cref="T:System.IO.Stream"/>.</summary>
            <param name="output">the <see cref="T:System.IO.Stream"/> to encode to.</param>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.CertificateStatusRequestItemV2.Parse(System.IO.Stream)">
            <summary>Parse a <see cref="T:Org.BouncyCastle2.Tls.CertificateStatusRequestItemV2"/> from a <see cref="T:System.IO.Stream"/>.</summary>
            <param name="input">the <see cref="T:System.IO.Stream"/> to parse from.</param>
            <returns>a <see cref="T:Org.BouncyCastle2.Tls.CertificateStatusRequestItemV2"/> object.</returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.CertificateType">
            <summary>RFC 6091</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.CertificateUrl">
            <summary>RFC 3546 3.3</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.CertificateUrl.#ctor(System.Int16,System.Collections.IList)">
            <param name="type">see <see cref="T:Org.BouncyCastle2.Tls.CertChainType"/> for valid constants.</param>
            <param name="urlAndHashList">an <see cref="T:System.Collections.IList"/> of <see cref="T:Org.BouncyCastle2.Tls.UrlAndHash"/>.</param>
        </member>
        <member name="P:Org.BouncyCastle2.Tls.CertificateUrl.Type">
            <returns><see cref="T:Org.BouncyCastle2.Tls.CertChainType"/></returns>
        </member>
        <member name="P:Org.BouncyCastle2.Tls.CertificateUrl.UrlAndHashList">
            <returns>an <see cref="T:System.Collections.IList"/> of <see cref="T:Org.BouncyCastle2.Tls.UrlAndHash"/>.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.CertificateUrl.Encode(System.IO.Stream)">
            <summary>Encode this <see cref="T:Org.BouncyCastle2.Tls.CertificateUrl"/> to a <see cref="T:System.IO.Stream"/>.</summary>
            <param name="output">the <see cref="T:System.IO.Stream"/> to encode to.</param>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.CertificateUrl.Parse(Org.BouncyCastle2.Tls.TlsContext,System.IO.Stream)">
            <summary>Parse a <see cref="T:Org.BouncyCastle2.Tls.CertificateUrl"/> from a <see cref="T:System.IO.Stream"/>.</summary>
            <param name="context">the <see cref="T:Org.BouncyCastle2.Tls.TlsContext"/> of the current connection.</param>
            <param name="input">the <see cref="T:System.IO.Stream"/> to parse from.</param>
            <returns>a <see cref="T:Org.BouncyCastle2.Tls.CertificateUrl"/> object.</returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.ChannelBinding">
            <summary>RFC 5056</summary>
            <remarks>
            Note that the values here are implementation-specific and arbitrary. It is recommended not to depend on the
            particular values (e.g.serialization).
            </remarks>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.CipherSuite">
            <summary>RFC 2246 A.5</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.CipherType">
            <summary>RFC 2246</summary>
            <remarks>
            Note that the values here are implementation-specific and arbitrary. It is recommended not to depend on the
            particular values (e.g. serialization).
            </remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.ClientHello.Encode(Org.BouncyCastle2.Tls.TlsContext,System.IO.Stream)">
            <summary>Encode this <see cref="T:Org.BouncyCastle2.Tls.ClientHello"/> to a <see cref="T:System.IO.Stream"/>.</summary>
            <param name="context">the <see cref="T:Org.BouncyCastle2.Tls.TlsContext"/> of the current connection.</param>
            <param name="output">the <see cref="T:System.IO.Stream"/> to encode to.</param>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.ClientHello.Parse(System.IO.MemoryStream,System.IO.Stream)">
            <summary>Parse a <see cref="T:Org.BouncyCastle2.Tls.ClientHello"/> from a <see cref="T:System.IO.MemoryStream"/>.</summary>
            <param name="messageInput">the <see cref="T:System.IO.MemoryStream"/> to parse from.</param>
            <param name="dtlsOutput">for DTLS this should be non-null; the input is copied to this
            <see cref="T:System.IO.Stream"/>, minus the cookie field.</param>
            <returns>a <see cref="T:Org.BouncyCastle2.Tls.ClientHello"/> object.</returns>
            <exception cref="T:Org.BouncyCastle2.Tls.TlsFatalAlert"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.ClientHello.ImplParse(System.IO.MemoryStream,System.IO.Stream)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.CombinedHash">
            <summary>A combined hash, which implements md5(m) || sha1(m).</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.CompressionMethod">
            <summary>RFC 2246 6.1</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.ConnectionEnd">
            <summary>RFC 2246</summary>
            <remarks>
            Note that the values here are implementation-specific and arbitrary. It is recommended not to depend on the
            particular values(e.g.serialization).
            </remarks>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.ContentType">
            <summary>RFC 2246 6.2.1</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.Crypto.DHGroup">
            <summary>Carrier class for Diffie-Hellman group parameters.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.DHGroup.#ctor(Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger,System.Int32)">
            <summary>Base constructor with the prime factor of (p - 1).</summary>
            <param name="p">the prime modulus.</param>
            <param name="q">specifies the prime factor of (p - 1).</param>
            <param name="g">the base generator.</param>
            <param name="l"></param>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.Crypto.DHStandardGroups">
            <summary>Standard Diffie-Hellman groups from various IETF specifications.</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.Crypto.Impl.AbstractTlsCrypto">
            <summary>Base class for a TlsCrypto implementation that provides some needed methods from elsewhere in the impl
            package.</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.Crypto.Impl.AbstractTlsSecret">
            <summary>Base class for a TlsSecret implementation which captures common code and fields.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.Impl.AbstractTlsSecret.#ctor(System.Byte[])">
            <summary>Base constructor.</summary>
            <param name="data">the byte[] making up the secret value.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.Impl.AbstractTlsSecret.Encrypt(Org.BouncyCastle2.Tls.Crypto.TlsEncryptor)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.Crypto.Impl.BC.BcSsl3Hmac">
            <summary>HMAC implementation based on original internet draft for HMAC (RFC 2104).</summary>
            <remarks>
            The difference is that padding is concatenated versus XORed with the key, e.g:
            <code>H(K + opad, H(K + ipad, text))</code>
            </remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.Impl.BC.BcSsl3Hmac.#ctor(Org.BouncyCastle2.Crypto.IDigest)">
            <summary>Base constructor for one of the standard digest algorithms for which the byteLength is known.
            </summary>
            <remarks>
            Behaviour is undefined for digests other than MD5 or SHA1.
            </remarks>
            <param name="digest">the digest.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.Impl.BC.BcSsl3Hmac.Reset">
            Reset the mac generator.
        </member>
        <member name="T:Org.BouncyCastle2.Tls.Crypto.Impl.BC.BcTlsCertificate">
            <summary>Implementation class for a single X.509 certificate based on the BC light-weight API.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.Impl.BC.BcTlsCertificate.Convert(Org.BouncyCastle2.Tls.Crypto.Impl.BC.BcTlsCrypto,Org.BouncyCastle2.Tls.Crypto.TlsCertificate)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.Impl.BC.BcTlsCertificate.ParseCertificate(System.Byte[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.Impl.BC.BcTlsCertificate.#ctor(Org.BouncyCastle2.Tls.Crypto.Impl.BC.BcTlsCrypto,System.Byte[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.Impl.BC.BcTlsCertificate.CreateEncryptor(System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.Impl.BC.BcTlsCertificate.CreateVerifier(System.Int16)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.Impl.BC.BcTlsCertificate.CreateVerifier(System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.Impl.BC.BcTlsCertificate.GetEncoded">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.Impl.BC.BcTlsCertificate.GetExtension(Org.BouncyCastle2.Asn1.DerObjectIdentifier)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.Impl.BC.BcTlsCertificate.GetLegacySignatureAlgorithm">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.Impl.BC.BcTlsCertificate.GetPubKeyDH">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.Impl.BC.BcTlsCertificate.GetPubKeyDss">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.Impl.BC.BcTlsCertificate.GetPubKeyEC">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.Impl.BC.BcTlsCertificate.GetPubKeyEd25519">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.Impl.BC.BcTlsCertificate.GetPubKeyEd448">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.Impl.BC.BcTlsCertificate.GetPubKeyRsa">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.Impl.BC.BcTlsCertificate.SupportsSignatureAlgorithm(System.Int16)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.Impl.BC.BcTlsCertificate.SupportsSignatureAlgorithmCA(System.Int16)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.Impl.BC.BcTlsCertificate.CheckUsageInRole(System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.Impl.BC.BcTlsCertificate.GetPublicKey">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.Impl.BC.BcTlsCertificate.SupportsSignatureAlgorithm(System.Int16,System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.Impl.BC.BcTlsCertificate.ValidateKeyUsage(System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.Impl.BC.BcTlsCertificate.ValidateRsa_Pkcs1">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.Impl.BC.BcTlsCertificate.ValidateRsa_Pss_Pss(System.Int16)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.Impl.BC.BcTlsCertificate.ValidateRsa_Pss_Rsae">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.Crypto.Impl.BC.BcTlsCrypto">
            Class for providing cryptographic services for TLS based on implementations in the BC light-weight API.
            <p>
                This class provides default implementations for everything. If you need to customise it, extend the class
                and override the appropriate methods.
            </p>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.Crypto.Impl.BC.BcTlsDH">
            <summary>Support class for ephemeral Diffie-Hellman using the BC light-weight library.</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.Crypto.Impl.BC.BcTlsDHDomain">
            <summary>BC light-weight support class for Diffie-Hellman key pair generation and key agreement over a
            specified Diffie-Hellman configuration.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.Impl.BC.BcTlsDHDomain.DecodeParameter(System.Byte[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.Impl.BC.BcTlsDHDomain.DecodePublicKey(System.Byte[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.Crypto.Impl.BC.BcTlsDsaVerifier">
            <summary>Implementation class for the verification of the raw DSA signature type using the BC light-weight API.
            </summary>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.Crypto.Impl.BC.BcTlsDssVerifier">
            <summary>BC light-weight base class for the verifiers supporting the two DSA style algorithms from FIPS PUB
            186-4: DSA and ECDSA.</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.Crypto.Impl.BC.BcTlsECDH">
            <summary>Support class for ephemeral Elliptic Curve Diffie-Hellman using the BC light-weight library.</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.Crypto.Impl.BC.BcTlsECDomain">
            EC domain class for generating key pairs and performing key agreement.
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.Impl.BC.BcTlsECDomain.DecodePublicKey(System.Byte[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.Crypto.Impl.BC.BcTlsECDsa13Verifier">
            <summary>Implementation class for verification of ECDSA signatures in TLS 1.3+ using the BC light-weight API.
            </summary>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.Crypto.Impl.BC.BcTlsECDsaVerifier">
            <summary>Implementation class for the verification of the raw ECDSA signature type using the BC light-weight
            API.</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.Crypto.Impl.BC.BcTlsRsaPssVerifier">
            <summary>Operator supporting the verification of RSASSA-PSS signatures using the BC light-weight API.</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.Crypto.Impl.BC.BcTlsRsaVerifier">
            <summary>Operator supporting the verification of RSASSA-PKCS1-v1_5 signatures using the BC light-weight API.
            </summary>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.Crypto.Impl.BC.BcTlsSecret">
            <summary>BC light-weight support class for handling TLS secrets and deriving key material and other secrets
            from them.</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.Crypto.Impl.BC.BcX25519">
            <summary>Support class for X25519 using the BC light-weight library.</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.Crypto.Impl.BC.BcX448">
            <summary>Support class for X448 using the BC light-weight library.</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.Crypto.Impl.TlsAeadCipher">
            <summary>A generic TLS 1.2 AEAD cipher.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.Impl.TlsAeadCipher.#ctor(Org.BouncyCastle2.Tls.Crypto.TlsCryptoParameters,Org.BouncyCastle2.Tls.Crypto.Impl.TlsAeadCipherImpl,Org.BouncyCastle2.Tls.Crypto.Impl.TlsAeadCipherImpl,System.Int32,System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.Crypto.Impl.TlsAeadCipherImpl">
            <summary>Base interface for services supporting AEAD encryption/decryption.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.Impl.TlsAeadCipherImpl.SetKey(System.Byte[],System.Int32,System.Int32)">
            <summary>Set the key to be used by the AEAD cipher implementation supporting this service.</summary>
            <param name="key">array holding the AEAD cipher key.</param>
            <param name="keyOff">offset into the array the key starts at.</param>
            <param name="keyLen">length of the key in the array.</param>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.Impl.TlsAeadCipherImpl.Init(System.Byte[],System.Int32,System.Byte[])">
            <summary>Initialise the parameters for the AEAD operator.</summary>
            <param name="nonce">the nonce.</param>
            <param name="macSize">MAC size in bytes.</param>
            <param name="additionalData">any additional data to be included in the MAC calculation.</param>
            <exception cref="T:System.IO.IOException">if the parameters are inappropriate.</exception>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.Impl.TlsAeadCipherImpl.GetOutputSize(System.Int32)">
            <summary>Return the maximum size of the output for input of inputLength bytes.</summary>
            <param name="inputLength">the length (in bytes) of the proposed input.</param>
            <returns>the maximum size of the output.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.Impl.TlsAeadCipherImpl.DoFinal(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>Perform the cipher encryption/decryption returning the output in output.</summary>
            <remarks>
            Note: we have to use DoFinal() here as it is the only way to guarantee output from the underlying cipher.
            </remarks>
            <param name="input">array holding input data to the cipher.</param>
            <param name="inputOffset">offset into input array data starts at.</param>
            <param name="inputLength">length of the input data in the array.</param>
            <param name="output">array to hold the cipher output.</param>
            <param name="outputOffset">offset into output array to start saving output.</param>
            <returns>the amount of data written to output.</returns>
            <exception cref="T:System.IO.IOException">in case of failure.</exception>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.Crypto.Impl.TlsBlockCipher">
            <summary>A generic TLS 1.0-1.2 block cipher. This can be used for AES or 3DES for example.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.Impl.TlsBlockCipher.#ctor(Org.BouncyCastle2.Tls.Crypto.TlsCryptoParameters,Org.BouncyCastle2.Tls.Crypto.Impl.TlsBlockCipherImpl,Org.BouncyCastle2.Tls.Crypto.Impl.TlsBlockCipherImpl,Org.BouncyCastle2.Tls.Crypto.TlsHmac,Org.BouncyCastle2.Tls.Crypto.TlsHmac,System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.Crypto.Impl.TlsBlockCipherImpl">
            <summary>Interface for block cipher services.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.Impl.TlsBlockCipherImpl.SetKey(System.Byte[],System.Int32,System.Int32)">
            <summary>Set the key to be used by the block cipher implementation supporting this service.</summary>
            <param name="key">array holding the block cipher key.</param>
            <param name="keyOff">offset into the array the key starts at.</param>
            <param name="keyLen">length of the key in the array.</param>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.Impl.TlsBlockCipherImpl.Init(System.Byte[],System.Int32,System.Int32)">
            <summary>Initialise the parameters for operator.</summary>
            <param name="iv">array holding the initialization vector (IV).</param>
            <param name="ivOff">offset into the array the IV starts at.</param>
            <param name="ivLen">length of the IV in the array.</param>
            <exception cref="T:System.IO.IOException">if the parameters are inappropriate.</exception>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.Impl.TlsBlockCipherImpl.DoFinal(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>Perform the cipher encryption/decryption returning the output in output.</summary>
            <remarks>
            Note: we have to use DoFinal() here as it is the only way to guarantee output from the underlying cipher.
            </remarks>
            <param name="input">array holding input data to the cipher.</param>
            <param name="inputOffset">offset into input array data starts at.</param>
            <param name="inputLength">length of the input data in the array.</param>
            <param name="output">array to hold the cipher output.</param>
            <param name="outputOffset">offset into output array to start saving output.</param>
            <returns>the amount of data written to output.</returns>
            <exception cref="T:System.IO.IOException">in case of failure.</exception>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.Impl.TlsBlockCipherImpl.GetBlockSize">
            <summary>Return the blocksize (in bytes) of the underlying block cipher.</summary>
            <returns>the cipher's blocksize.</returns>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.Crypto.Impl.TlsImplUtilities">
            <summary>Useful utility methods.</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.Crypto.Impl.TlsNullCipher">
            <summary>The NULL cipher.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.Impl.TlsNullCipher.#ctor(Org.BouncyCastle2.Tls.Crypto.TlsCryptoParameters,Org.BouncyCastle2.Tls.Crypto.TlsHmac,Org.BouncyCastle2.Tls.Crypto.TlsHmac)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.Crypto.Impl.TlsSuiteHmac">
            <summary>A generic TLS MAC implementation, acting as an HMAC based on some underlying Digest.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.Impl.TlsSuiteHmac.#ctor(Org.BouncyCastle2.Tls.Crypto.TlsCryptoParameters,Org.BouncyCastle2.Tls.Crypto.TlsHmac)">
            <summary>Generate a new instance of a TlsMac.</summary>
            <param name="cryptoParams">the TLS client context specific crypto parameters.</param>
            <param name="mac">The MAC to use.</param>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.Crypto.Impl.TlsSuiteMac">
            <summary>Base interface for a generic TLS MAC implementation for use with a bulk cipher.</summary>
        </member>
        <member name="P:Org.BouncyCastle2.Tls.Crypto.Impl.TlsSuiteMac.Size">
            <summary>Return the output length (in bytes) of this MAC.</summary>
            <returns>The output length of this MAC.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.Impl.TlsSuiteMac.CalculateMac(System.Int64,System.Int16,System.Byte[],System.Int32,System.Int32)">
            <summary>Calculate the MAC for some given data.</summary>
            <param name="seqNo">The sequence number of the record.</param>
            <param name="type">The content type of the message.</param>
            <param name="message">A byte array containing the message.</param>
            <param name="offset">The number of bytes to skip, before the message starts.</param>
            <param name="length">The length of the message.</param>
            <returns>A new byte array containing the MAC value.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.Impl.TlsSuiteMac.CalculateMacConstantTime(System.Int64,System.Int16,System.Byte[],System.Int32,System.Int32,System.Int32,System.Byte[])">
            <summary>Constant time calculation of the MAC for some given data with a given expected length.</summary>
            <param name="seqNo">The sequence number of the record.</param>
            <param name="type">The content type of the message.</param>
            <param name="message">A byte array containing the message.</param>
            <param name="offset">The number of bytes to skip, before the message starts.</param>
            <param name="length">The length of the message.</param>
            <param name="expectedLength">The expected length of the full message.</param>
            <param name="randomData">Random data for padding out the MAC calculation if required.</param>
            <returns>A new byte array containing the MAC value.</returns>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.Crypto.Srp6Group">
            <summary>Carrier class for SRP-6 group parameters.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.Srp6Group.#ctor(Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger)">
            <summary>Base constructor.</summary>
            <param name="n">the n value.</param>
            <param name="g">the g value.</param>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.Crypto.Srp6StandardGroups">
            <summary>A selection of standard groups for SRP-6.</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.Crypto.TlsAgreement">
            <summary>Base interface for ephemeral key agreement calculator.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsAgreement.GenerateEphemeral">
            <summary>Generate an ephemeral key pair, returning the encoding of the public key.</summary>
            <returns>a byte encoding of the public key.</returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsAgreement.ReceivePeerValue(System.Byte[])">
            <summary>Pass in the public key for the peer to the agreement calculator.</summary>
            <param name="peerValue">a byte encoding of the peer public key.</param>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsAgreement.CalculateSecret">
            <summary>Calculate the agreed secret based on the calculator's current state.</summary>
            <returns>the calculated secret.</returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.Crypto.TlsCertificate">
            <summary>Interface providing the functional representation of a single X.509 certificate.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsCertificate.CreateEncryptor(System.Int32)">
            <summary>Return an encryptor based on the public key in this certificate.</summary>
            <param name="tlsCertificateRole"><see cref="T:Org.BouncyCastle2.Tls.Crypto.TlsCertificateRole"/></param>
            <returns>a <see cref="T:Org.BouncyCastle2.Tls.Crypto.TlsEncryptor"/> based on this certificate's public key.</returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsCertificate.CreateVerifier(System.Int16)">
            <param name="signatureAlgorithm"><see cref="T:Org.BouncyCastle2.Tls.SignatureAlgorithm"/></param>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsCertificate.CreateVerifier(System.Int32)">
            <param name="signatureScheme"><see cref="T:Org.BouncyCastle2.Tls.SignatureScheme"/></param>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsCertificate.GetEncoded">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsCertificate.GetExtension(Org.BouncyCastle2.Asn1.DerObjectIdentifier)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="P:Org.BouncyCastle2.Tls.Crypto.TlsCertificate.SigAlgOid">
            <returns>the OID of this certificate's 'signatureAlgorithm', as a string.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsCertificate.GetSigAlgParams">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsCertificate.GetLegacySignatureAlgorithm">
            <returns><see cref="T:Org.BouncyCastle2.Tls.SignatureAlgorithm"/></returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsCertificate.SupportsSignatureAlgorithm(System.Int16)">
            <param name="signatureAlgorithm"><see cref="T:Org.BouncyCastle2.Tls.SignatureAlgorithm"/></param>
            <returns>true if (and only if) this certificate can be used to verify the given signature algorithm.
            </returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsCertificate.SupportsSignatureAlgorithmCA(System.Int16)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsCertificate.CheckUsageInRole(System.Int32)">
            <param name="tlsCertificateRole"><see cref="T:Org.BouncyCastle2.Tls.Crypto.TlsCertificateRole"/></param>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.Crypto.TlsCipher">
            <summary>Base interface for a TLS bulk cipher.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsCipher.GetCiphertextDecodeLimit(System.Int32)">
            <summary>Return the maximum input size for a ciphertext given a maximum output size for the plaintext of
            plaintextLimit bytes.</summary>
            <param name="plaintextLimit">the maximum output size for the plaintext.</param>
            <returns>the maximum input size of the ciphertext for plaintextlimit bytes of output.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsCipher.GetCiphertextEncodeLimit(System.Int32,System.Int32)">
            <summary>Return the maximum output size for a ciphertext given an actual input plaintext size of
            plaintextLength bytes and a maximum input plaintext size of plaintextLimit bytes.</summary>
            <param name="plaintextLength">the actual input size for the plaintext.</param>
            <param name="plaintextLimit">the maximum input size for the plaintext.</param>
            <returns>the maximum output size of the ciphertext for plaintextlimit bytes of input.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsCipher.GetPlaintextLimit(System.Int32)">
            <summary>Return the maximum size for the plaintext given ciphertextlimit bytes of ciphertext.</summary>
            <param name="ciphertextLimit">the maximum number of bytes of ciphertext.</param>
            <returns>the maximum size of the plaintext for ciphertextlimit bytes of input.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsCipher.EncodePlaintext(System.Int64,System.Int16,Org.BouncyCastle2.Tls.ProtocolVersion,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>Encode the passed in plaintext using the current bulk cipher.</summary>
            <param name="seqNo">sequence number of the message represented by plaintext.</param>
            <param name="contentType">content type of the message represented by plaintext.</param>
            <param name="recordVersion"><see cref="T:Org.BouncyCastle2.Tls.ProtocolVersion"/> used for the record.</param>
            <param name="headerAllocation">extra bytes to allocate at start of returned byte array.</param>
            <param name="plaintext">array holding input plaintext to the cipher.</param>
            <param name="offset">offset into input array the plaintext starts at.</param>
            <param name="len">length of the plaintext in the array.</param>
            <returns>A <see cref="T:Org.BouncyCastle2.Tls.Crypto.TlsEncodeResult"/> containing the result of encoding (after 'headerAllocation' unused
            bytes).</returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsCipher.DecodeCiphertext(System.Int64,System.Int16,Org.BouncyCastle2.Tls.ProtocolVersion,System.Byte[],System.Int32,System.Int32)">
            <summary>Decode the passed in ciphertext using the current bulk cipher.</summary>
            <param name="seqNo">sequence number of the message represented by ciphertext.</param>
            <param name="recordType">content type used in the record for this message.</param>
            <param name="recordVersion"><see cref="T:Org.BouncyCastle2.Tls.ProtocolVersion"/> used for the record.</param>
            <param name="ciphertext">array holding input ciphertext to the cipher.</param>
            <param name="offset">offset into input array the ciphertext starts at.</param>
            <param name="len">length of the ciphertext in the array.</param>
            <returns>A <see cref="T:Org.BouncyCastle2.Tls.Crypto.TlsDecodeResult"/> containing the result of decoding.</returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsCipher.RekeyDecoder">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsCipher.RekeyEncoder">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.Crypto.TlsCrypto">
            <summary>Service and object creation interface for the primitive types and services that are associated with
            cryptography in the API.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsCrypto.HasAllRawSignatureAlgorithms">
            <summary>Return true if this TlsCrypto can perform raw signatures and verifications for all supported
            algorithms.</summary>
            <returns>true if this instance can perform raw signatures and verifications for all supported algorithms,
            false otherwise.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsCrypto.HasCryptoHashAlgorithm(System.Int32)">
            <summary>Return true if this TlsCrypto can support the passed in hash algorithm.</summary>
            <param name="cryptoHashAlgorithm">the algorithm of interest.</param>
            <returns>true if cryptoHashAlgorithm is supported, false otherwise.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsCrypto.HasCryptoSignatureAlgorithm(System.Int32)">
            <summary>Return true if this TlsCrypto can support the passed in signature algorithm (not necessarily in
            combination with EVERY hash algorithm).</summary>
            <param name="cryptoSignatureAlgorithm">the algorithm of interest.</param>
            <returns>true if cryptoSignatureAlgorithm is supported, false otherwise.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsCrypto.HasDHAgreement">
            <summary>Return true if this TlsCrypto can support DH key agreement.</summary>
            <returns>true if this instance can support DH key agreement, false otherwise.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsCrypto.HasECDHAgreement">
            <summary>Return true if this TlsCrypto can support ECDH key agreement.</summary>
            <returns>true if this instance can support ECDH key agreement, false otherwise.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsCrypto.HasEncryptionAlgorithm(System.Int32)">
            <summary>Return true if this TlsCrypto can support the passed in block/stream encryption algorithm.
            </summary>
            <param name="encryptionAlgorithm">the algorithm of interest.</param>
            <returns>true if encryptionAlgorithm is supported, false otherwise.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsCrypto.HasHkdfAlgorithm(System.Int32)">
            <summary>Return true if this TlsCrypto can support HKDF with the passed in hash algorithm.</summary>
            <param name="cryptoHashAlgorithm">the algorithm of interest.</param>
            <returns>true if HKDF is supported with cryptoHashAlgorithm, false otherwise.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsCrypto.HasMacAlgorithm(System.Int32)">
            <summary>Return true if this TlsCrypto can support the passed in MAC algorithm.</summary>
            <param name="macAlgorithm">the algorithm of interest.</param>
            <returns>true if macAlgorithm is supported, false otherwise.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsCrypto.HasNamedGroup(System.Int32)">
            <summary>Return true if this TlsCrypto supports the passed in <see cref="T:Org.BouncyCastle2.Tls.NamedGroup">named group</see>
            value.</summary>
            <returns>true if this instance supports the passed in <see cref="T:Org.BouncyCastle2.Tls.NamedGroup">named group</see> value.
            </returns>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsCrypto.HasRsaEncryption">
            <summary>Return true if this TlsCrypto can support RSA encryption/decryption.</summary>
            <returns>true if this instance can support RSA encryption/decryption, false otherwise.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsCrypto.HasSignatureAlgorithm(System.Int16)">
            <summary>Return true if this TlsCrypto can support the passed in signature algorithm (not necessarily in
            combination with EVERY hash algorithm).</summary>
            <returns>true if signatureAlgorithm is supported, false otherwise.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsCrypto.HasSignatureAndHashAlgorithm(Org.BouncyCastle2.Tls.SignatureAndHashAlgorithm)">
            <summary>Return true if this TlsCrypto can support the passed in signature algorithm.</summary>
            <param name="sigAndHashAlgorithm">the algorithm of interest.</param>
            <returns>true if sigAndHashAlgorithm is supported, false otherwise.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsCrypto.HasSignatureScheme(System.Int32)">
            <summary>Return true if this TlsCrypto can support the passed in signature scheme.</summary>
            <param name="signatureScheme">the scheme of interest.</param>
            <returns>true if signatureScheme is supported, false otherwise.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsCrypto.HasSrpAuthentication">
            <summary>Return true if this TlsCrypto can support SRP authentication.</summary>
            <returns>true if this instance can support SRP authentication, false otherwise.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsCrypto.CreateSecret(System.Byte[])">
            <summary>Create a TlsSecret object based on provided data.</summary>
            <param name="data">the data to base the TlsSecret on.</param>
            <returns>a TlsSecret based on the provided data.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsCrypto.GenerateRsaPreMasterSecret(Org.BouncyCastle2.Tls.ProtocolVersion)">
            <summary>Create a TlsSecret object containing a randomly-generated RSA PreMasterSecret</summary>
            <param name="clientVersion">the client version to place in the first 2 bytes</param>
            <returns>a TlsSecret containing the PreMasterSecret.</returns>
        </member>
        <member name="P:Org.BouncyCastle2.Tls.Crypto.TlsCrypto.SecureRandom">
            <summary>Return the primary (safest) SecureRandom for this crypto.</summary>
            <returns>a SecureRandom suitable for key generation.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsCrypto.CreateCertificate(System.Byte[])">
            <summary>Create a TlsCertificate from an ASN.1 binary encoding of an X.509 certificate.</summary>
            <param name="encoding">DER/BER encoding of the certificate of interest.</param>
            <returns>a TlsCertificate.</returns>
            <exception cref="T:System.IO.IOException">if there is an issue on decoding or constructing the certificate.</exception>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsCrypto.CreateCipher(Org.BouncyCastle2.Tls.Crypto.TlsCryptoParameters,System.Int32,System.Int32)">
            <summary>Create a cipher for the specified encryption and MAC algorithms.</summary>
            <remarks>
            See enumeration classes <see cref="T:Org.BouncyCastle2.Tls.EncryptionAlgorithm"/>, <see cref="T:Org.BouncyCastle2.Tls.MacAlgorithm"/> for appropriate
            argument values.
            </remarks>
            <param name="cryptoParams">context specific parameters.</param>
            <param name="encryptionAlgorithm">the encryption algorithm to be employed by the cipher.</param>
            <param name="macAlgorithm">the MAC algorithm to be employed by the cipher.</param>
            <returns>a <see cref="T:Org.BouncyCastle2.Tls.Crypto.TlsCipher"/> implementing the encryption and MAC algorithms.</returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsCrypto.CreateDHDomain(Org.BouncyCastle2.Tls.Crypto.TlsDHConfig)">
            <summary>Create a domain object supporting the domain parameters described in dhConfig.</summary>
            <param name="dhConfig">the config describing the DH parameters to use.</param>
            <returns>a TlsDHDomain supporting the parameters in dhConfig.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsCrypto.CreateECDomain(Org.BouncyCastle2.Tls.Crypto.TlsECConfig)">
            <summary>Create a domain object supporting the domain parameters described in ecConfig.</summary>
            <param name="ecConfig">the config describing the EC parameters to use.</param>
            <returns>a TlsECDomain supporting the parameters in ecConfig.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsCrypto.AdoptSecret(Org.BouncyCastle2.Tls.Crypto.TlsSecret)">
            <summary>Adopt the passed in secret, creating a new copy of it.</summary>
            <param name="secret">the secret to make a copy of.</param>
            <returns>a TlsSecret based on the original secret.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsCrypto.CreateHash(System.Int32)">
            <summary>Create a suitable hash for the hash algorithm identifier passed in.</summary>
            <remarks>
            See enumeration class <see cref="T:Org.BouncyCastle2.Tls.Crypto.CryptoHashAlgorithm"/> for appropriate argument values.
            </remarks>
            <param name="cryptoHashAlgorithm">the hash algorithm the hash needs to implement.</param>
            <returns>a <see cref="T:Org.BouncyCastle2.Tls.Crypto.TlsHash"/>.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsCrypto.CreateHmac(System.Int32)">
            <summary>Create a suitable HMAC for the MAC algorithm identifier passed in.</summary>
            <remarks>
            See enumeration class <see cref="T:Org.BouncyCastle2.Tls.MacAlgorithm"/> for appropriate argument values.
            </remarks>
            <param name="macAlgorithm">the MAC algorithm the HMAC needs to match.</param>
            <returns>a <see cref="T:Org.BouncyCastle2.Tls.Crypto.TlsHmac"/>.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsCrypto.CreateHmacForHash(System.Int32)">
            <summary>Create a suitable HMAC using the hash algorithm identifier passed in.</summary>
            <remarks>
            See enumeration class <see cref="T:Org.BouncyCastle2.Tls.Crypto.CryptoHashAlgorithm"/> for appropriate argument values.
            </remarks>
            <param name="cryptoHashAlgorithm">the hash algorithm the HMAC should use.</param>
            <returns>a <see cref="T:Org.BouncyCastle2.Tls.Crypto.TlsHmac"/>.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsCrypto.CreateNonceGenerator(System.Byte[])">
            <summary>Create a nonce generator.</summary>
            <remarks>
            Each call should construct a new generator, and the generator should be returned from this call only after
            automatically seeding from this <see cref="T:Org.BouncyCastle2.Tls.Crypto.TlsCrypto"/>'s entropy source, and from the provided additional
            seed material. The output of each returned generator must be completely independent of the others.
            </remarks>
            <param name="additionalSeedMaterial">context-specific seed material</param>
            <returns>a <see cref="T:Org.BouncyCastle2.Tls.Crypto.TlsNonceGenerator"/>.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsCrypto.CreateSrp6Client(Org.BouncyCastle2.Tls.Crypto.TlsSrpConfig)">
            <summary>Create an SRP-6 client.</summary>
            <param name="srpConfig">client config.</param>
            <returns>an initialised SRP6 client object.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsCrypto.CreateSrp6Server(Org.BouncyCastle2.Tls.Crypto.TlsSrpConfig,Org.BouncyCastle2.Math.BigInteger)">
            <summary>Create an SRP-6 server.</summary>
            <param name="srpConfig">server config.</param>
            <param name="srpVerifier">the SRP6 verifier value.</param>
            <returns>an initialised SRP6 server object.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsCrypto.CreateSrp6VerifierGenerator(Org.BouncyCastle2.Tls.Crypto.TlsSrpConfig)">
            <summary>Create an SRP-6 verifier generator.</summary>
            <param name="srpConfig">generator config.</param>
            <returns>an initialized SRP6 verifier generator.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsCrypto.HkdfInit(System.Int32)">
            <summary>Setup an initial "secret" for a chain of HKDF calls (RFC 5869), containing a string of HashLen
            zeroes.</summary>
            <param name="cryptoHashAlgorithm">the hash algorithm to instantiate HMAC with. See
            <see cref="T:Org.BouncyCastle2.Tls.Crypto.CryptoHashAlgorithm"/> for values.</param>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.Crypto.TlsCryptoParameters">
            <summary>Carrier class for context-related parameters needed for creating secrets and ciphers.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsCryptoParameters.#ctor(Org.BouncyCastle2.Tls.TlsContext)">
            <summary>Base constructor.</summary>
            <param name="context">the context for this parameters object.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsCryptoUtilities.HkdfExpandLabel(Org.BouncyCastle2.Tls.Crypto.TlsSecret,System.Int32,System.String,System.Byte[],System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.Crypto.TlsDHConfig">
            <summary>Basic config for Diffie-Hellman.</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.Crypto.TlsDHDomain">
            <summary>Domain interface to service factory for creating Diffie-Hellman operators.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsDHDomain.CreateDH">
            <summary>Return an agreement operator suitable for ephemeral Diffie-Hellman.</summary>
            <returns>a key agreement operator.</returns>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.Crypto.TlsECConfig">
            <summary>Carrier class for Elliptic Curve parameter configuration.</summary>
        </member>
        <member name="P:Org.BouncyCastle2.Tls.Crypto.TlsECConfig.NamedGroup">
            <summary>Return the group used.</summary>
            <returns>the <see cref="P:Org.BouncyCastle2.Tls.Crypto.TlsECConfig.NamedGroup">named group</see> used.</returns>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.Crypto.TlsECDomain">
            <summary>Domain interface to service factory for creating Elliptic-Curve (EC) based operators.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsECDomain.CreateECDH">
            <summary>Return an agreement operator suitable for ephemeral EC Diffie-Hellman.</summary>
            <returns>a key agreement operator.</returns>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.Crypto.TlsEncryptor">
            <summary>Base interface for an encryptor.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsEncryptor.Encrypt(System.Byte[],System.Int32,System.Int32)">
            <summary>Encrypt data from the passed in input array.</summary>
            <param name="input">byte array containing the input data.</param>
            <param name="inOff">offset into input where the data starts.</param>
            <param name="length">the length of the data to encrypt.</param>
            <returns>the encrypted data.</returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.Crypto.TlsHash">
            <summary>Interface for message digest, or hash, services.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsHash.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>Update the hash with the passed in input.</summary>
            <param name="input">input array containing the data.</param>
            <param name="inOff">offset into the input array the input starts at.</param>
            <param name="length">the length of the input data.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsHash.CalculateHash">
            <summary>Return calculated hash for any input passed in.</summary>
            <returns>the hash value.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsHash.CloneHash">
            <summary>Return a clone of this hash object representing its current state.</summary>
            <returns>a clone of the current hash.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsHash.Reset">
            <summary>Reset the hash underlying this service.</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.Crypto.TlsHmac">
            <summary>Interface for MAC services based on HMAC.</summary>
        </member>
        <member name="P:Org.BouncyCastle2.Tls.Crypto.TlsHmac.InternalBlockSize">
            <summary>Return the internal block size for the message digest underlying this HMAC service.</summary>
            <returns>the internal block size for the digest (in bytes).</returns>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.Crypto.TlsMac">
            <summary>Interface for MAC services.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsMac.SetKey(System.Byte[],System.Int32,System.Int32)">
            <summary>Set the key to be used by the MAC implementation supporting this service.</summary>
            <param name="key">array holding the MAC key.</param>
            <param name="keyOff">offset into the array the key starts at.</param>
            <param name="keyLen">length of the key in the array.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsMac.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>Update the MAC with the passed in input.</summary>
            <param name="input">input array containing the data.</param>
            <param name="inOff">offset into the input array the input starts at.</param>
            <param name="length">the length of the input data.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsMac.CalculateMac">
            <summary>Return calculated MAC for any input passed in.</summary>
            <returns>the MAC value.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsMac.CalculateMac(System.Byte[],System.Int32)">
            <summary>Write the calculated MAC to an output buffer.</summary>
            <param name="output">output array to write the MAC to.</param>
            <param name="outOff">offset into the output array to write the MAC to.</param>
        </member>
        <member name="P:Org.BouncyCastle2.Tls.Crypto.TlsMac.MacLength">
            <summary>Return the length of the MAC generated by this service.</summary>
            <returns>the MAC length.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsMac.Reset">
            <summary>Reset the MAC underlying this service.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsNonceGenerator.GenerateNonce(System.Int32)">
            <summary>Generate a nonce byte[] string.</summary>
            <param name="size">the length, in bytes, of the nonce to generate.</param>
            <returns>the nonce value.</returns>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.Crypto.TlsNullNullCipher">
            <summary>The cipher for TLS_NULL_WITH_NULL_NULL.</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.Crypto.TlsSecret">
            <summary>Interface supporting the generation of key material and other SSL/TLS secret values from PRFs.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsSecret.CalculateHmac(System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>Calculate an HMAC with this secret's data as the key.</summary>
            <param name="cryptoHashAlgorithm">the hash algorithm to instantiate HMAC with. See
            <see cref="T:Org.BouncyCastle2.Tls.Crypto.CryptoHashAlgorithm"/> for values.</param>
            <param name="buf">array containing the input data.</param>
            <param name="off">offset into the input array the input starts at.</param>
            <param name="len">the length of the input data.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsSecret.DeriveUsingPrf(System.Int32,System.String,System.Byte[],System.Int32)">
            <summary>Return a new secret based on applying a PRF to this one.</summary>
            <param name="prfAlgorithm">PRF algorithm to use.</param>
            <param name="label">the label details.</param>
            <param name="seed">the seed details.</param>
            <param name="length">the size (in bytes) of the secret to generate.</param>
            <returns>the new secret.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsSecret.Destroy">
            <summary>Destroy the internal state of the secret.</summary>
            <remarks>
            After this call, any attempt to use the <see cref="T:Org.BouncyCastle2.Tls.Crypto.TlsSecret"/> will result in an
            <see cref="T:System.InvalidOperationException"/> being thrown.
            </remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsSecret.Encrypt(Org.BouncyCastle2.Tls.Crypto.TlsEncryptor)">
            <summary>Return an encrypted copy of the data this secret is based on.</summary>
            <param name="encryptor">the encryptor to use for protecting the internal data.</param>
            <returns>an encrypted copy of this secret's internal data.</returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsSecret.Extract">
            <summary>Return the internal data from this secret.</summary>
            <remarks>
            The <see cref="T:Org.BouncyCastle2.Tls.Crypto.TlsSecret"/> does not keep a copy of the data. After this call, any attempt to use the
            <see cref="T:Org.BouncyCastle2.Tls.Crypto.TlsSecret"/> will result in an <see cref="T:System.InvalidOperationException"/> being thrown.
            </remarks>
            <returns>the secret's internal data.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsSecret.HkdfExpand(System.Int32,System.Byte[],System.Int32)">
            <summary>RFC 5869 HKDF-Expand function, with this secret's data as the pseudo-random key ('prk').</summary>
            <param name="cryptoHashAlgorithm">the hash algorithm to instantiate HMAC with. See
            <see cref="T:Org.BouncyCastle2.Tls.Crypto.CryptoHashAlgorithm"/> for values.</param>
            <param name="info">optional context and application specific information (can be zero-length).</param>
            <param name="length">length of output keying material in octets.</param>
            <returns> output keying material (of 'length' octets).</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsSecret.HkdfExtract(System.Int32,Org.BouncyCastle2.Tls.Crypto.TlsSecret)">
            <summary>RFC 5869 HKDF-Extract function, with this secret's data as the 'salt'.</summary>
            <remarks>
            The <see cref="T:Org.BouncyCastle2.Tls.Crypto.TlsSecret"/> does not keep a copy of the data. After this call, any attempt to use
            the <see cref="T:Org.BouncyCastle2.Tls.Crypto.TlsSecret"/> will result in an <see cref="T:System.InvalidOperationException"/> being thrown.
            </remarks>
            <param name="cryptoHashAlgorithm">the hash algorithm to instantiate HMAC with. See
            <see cref="T:Org.BouncyCastle2.Tls.Crypto.CryptoHashAlgorithm"/> for values.</param>
            <param name="ikm">input keying material.</param>
            <returns>a pseudo-random key (of HashLen octets).</returns>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.Crypto.TlsSigner">
            <summary>Base interface for a TLS signer that works on raw message digests.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsSigner.GenerateRawSignature(Org.BouncyCastle2.Tls.SignatureAndHashAlgorithm,System.Byte[])">
            <summary>Generate an encoded signature based on the passed in hash.</summary>
            <param name="algorithm">the signature algorithm to use.</param>
            <param name="hash">the hash calculated for the signature.</param>
            <returns>an encoded signature.</returns>
            <exception cref="T:System.IO.IOException">in case of an exception processing the hash.</exception>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsSigner.GetStreamSigner(Org.BouncyCastle2.Tls.SignatureAndHashAlgorithm)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.Crypto.TlsSrp6Client">
            <summary>Basic interface for an SRP-6 client implementation.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsSrp6Client.CalculateSecret(Org.BouncyCastle2.Math.BigInteger)">
            <summary>Generates the secret S given the server's credentials</summary>
            <param name="serverB">The server's credentials</param>
            <returns>Client's verification message for the server</returns>
            <exception cref="T:System.IO.IOException">If server's credentials are invalid</exception>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsSrp6Client.GenerateClientCredentials(System.Byte[],System.Byte[],System.Byte[])">
            <summary>Generates client's credentials given the client's salt, identity and password</summary>
            <param name="salt">The salt used in the client's verifier.</param>
            <param name="identity">The user's identity (eg. username)</param>
            <param name="password">The user's password</param>
            <returns>Client's public value to send to server</returns>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.Crypto.TlsSrp6Server">
            <summary>Basic interface for an SRP-6 server implementation.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsSrp6Server.GenerateServerCredentials">
            <summary>Generates the server's credentials that are to be sent to the client.</summary>
            <returns>The server's public value to the client</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsSrp6Server.CalculateSecret(Org.BouncyCastle2.Math.BigInteger)">
            <summary>Processes the client's credentials. If valid the shared secret is generated and returned.
            </summary>
            <param name="clientA">The client's credentials.</param>
            <returns>A shared secret <see cref="T:Org.BouncyCastle2.Math.BigInteger"/>.</returns>
            <exception cref="T:System.IO.IOException">If client's credentials are invalid.</exception>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.Crypto.TlsSrp6VerifierGenerator">
            <summary>Base interface for a generator for SRP-6 verifiers.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsSrp6VerifierGenerator.GenerateVerifier(System.Byte[],System.Byte[],System.Byte[])">
            <summary>Creates a new SRP-6 verifier value.</summary>
            <param name="salt">The salt to use, generally should be large and random</param>
            <param name="identity">The user's identifying information (eg. username)</param>
            <param name="password">The user's password</param>
            <returns>A new verifier for use in future SRP authentication</returns>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.Crypto.TlsSrpConfig">
            <summary>Basic config for SRP.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsSrpConfig.GetExplicitNG">
            <summary>Return the (N, g) values used in SRP-6.</summary>
            <returns>(N, g) as a BigInteger array (N=[0], g=[1]).</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsSrpConfig.SetExplicitNG(Org.BouncyCastle2.Math.BigInteger[])">
            <summary>Set the (N, g) values used for SRP-6.</summary>
            <param name="explicitNG">(N, g) as a BigInteger array (N=[0], g=[1]).</param>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsStreamSigner.GetOutputStream">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsStreamSigner.GetSignature">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsStreamVerifier.GetOutputStream">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsStreamVerifier.IsVerified">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.Crypto.TlsVerifier">
            <summary>Base interface for a TLS verifier that works with signatures and either raw message digests, or entire
            messages.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsVerifier.GetStreamVerifier(Org.BouncyCastle2.Tls.DigitallySigned)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Crypto.TlsVerifier.VerifyRawSignature(Org.BouncyCastle2.Tls.DigitallySigned,System.Byte[])">
            <summary>Return true if the passed in signature and hash represent a real signature.</summary>
            <param name="digitallySigned">the signature object containing the signature to be verified.</param>
            <param name="hash">the hash calculated for the signature.</param>
            <returns>true if signature verifies, false otherwise.</returns>
            <exception cref="T:System.IO.IOException">in case of an exception verifying signature.</exception>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.DatagramReceiver.GetReceiveLimit">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.DatagramReceiver.Receive(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.DatagramSender.GetSendLimit">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.DatagramSender.Send(System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.DatagramTransport">
            <summary>Base interface for an object sending and receiving DTLS data.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.DefaultTlsDHGroupVerifier.#ctor">
            <summary>Accept named groups and various standard DH groups with 'P' at least
            <see cref="F:Org.BouncyCastle2.Tls.DefaultTlsDHGroupVerifier.DefaultMinimumPrimeBits"/> bits.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.DefaultTlsDHGroupVerifier.#ctor(System.Int32)">
            <summary>Accept named groups and various standard DH groups with 'P' at least the specified number of bits.
            </summary>
            <param name="minimumPrimeBits">the minimum bitlength of 'P'.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.DefaultTlsDHGroupVerifier.#ctor(System.Collections.IList,System.Int32)">
            <summary>Accept named groups and a custom set of group parameters, subject to a minimum bitlength for 'P'.
            </summary>
            <param name="groups">a <see cref="T:System.Collections.IList">list</see> of acceptable <see cref="T:Org.BouncyCastle2.Tls.Crypto.DHGroup"/>s.</param>
            <param name="minimumPrimeBits">the minimum bitlength of 'P'.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.DefaultTlsServer.GetDsaSignerCredentials">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.DefaultTlsServer.GetECDsaSignerCredentials">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.DefaultTlsServer.GetRsaEncryptionCredentials">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.DefaultTlsServer.GetRsaSignerCredentials">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.DefaultTlsSrpConfigVerifier.#ctor">
            <summary>Accept only the group parameters specified in RFC 5054 Appendix A.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.DefaultTlsSrpConfigVerifier.#ctor(System.Collections.IList)">
            <summary>Specify a custom set of acceptable group parameters.</summary>
            <param name="groups">an <see cref="T:System.Collections.IList"/> of acceptable <see cref="T:Org.BouncyCastle2.Tls.Crypto.Srp6Group"/>.</param>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.DeferredHash">
            <summary>Buffers input until the hash algorithm is determined.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.DeferredHash.CopyBufferTo(System.IO.Stream)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.DigestInputBuffer.CopyInputTo(System.IO.Stream)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="P:Org.BouncyCastle2.Tls.DigitallySigned.Algorithm">
            <returns>a <see cref="T:Org.BouncyCastle2.Tls.SignatureAndHashAlgorithm"/> (or null before TLS 1.2).</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.DigitallySigned.Encode(System.IO.Stream)">
            <summary>Encode this <see cref="T:Org.BouncyCastle2.Tls.DigitallySigned"/> to a <see cref="T:System.IO.Stream"/>.</summary>
            <param name="output">the <see cref="T:System.IO.Stream"/> to encode to.</param>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.DigitallySigned.Parse(Org.BouncyCastle2.Tls.TlsContext,System.IO.Stream)">
            <summary>Parse a <see cref="T:Org.BouncyCastle2.Tls.DigitallySigned"/> from a <see cref="T:System.IO.Stream"/>.</summary>
            <param name="context">the <see cref="T:Org.BouncyCastle2.Tls.TlsContext"/> of the current connection.</param>
            <param name="input">the <see cref="T:System.IO.Stream"/> to parse from.</param>
            <returns>a <see cref="T:Org.BouncyCastle2.Tls.DigitallySigned"/> object.</returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.DtlsEpoch.AllocateSequenceNumber">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.DtlsHandshakeRetransmit.ReceivedHandshakeRecord(System.Int32,System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.DtlsRecordLayer.ReceiveClientHelloRecord(System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.DtlsRecordLayer.SendHelloVerifyRequestRecord(Org.BouncyCastle2.Tls.DatagramSender,System.Int64,System.Byte[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.DtlsRecordLayer.SendDatagram(Org.BouncyCastle2.Tls.DatagramSender,System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.DtlsRecordLayer.GetReceiveLimit">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.DtlsRecordLayer.GetSendLimit">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.DtlsRecordLayer.Receive(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.DtlsRecordLayer.Send(System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.DtlsRecordLayer.Close">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.DtlsRecordLayer.Warn(System.Int16,System.String)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.DtlsRecordLayer.RaiseAlert(System.Int16,System.Int16,System.String,System.Exception)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.DtlsRecordLayer.ReceiveDatagram(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.DtlsRecordLayer.ProcessRecord(System.Int32,System.Byte[],System.Byte[],System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.DtlsRecordLayer.ReceiveRecord(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.DtlsRecordLayer.SendHeartbeatMessage(Org.BouncyCastle2.Tls.HeartbeatMessage)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.DtlsRecordLayer.SendRecord(System.Int16,System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.DtlsReliableHandshake.ReadClientRequest(System.Byte[],System.Int32,System.Int32,System.IO.Stream)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.DtlsReliableHandshake.SendHelloVerifyRequest(Org.BouncyCastle2.Tls.DatagramSender,System.Int64,System.Byte[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.DtlsReliableHandshake.SendMessage(System.Int16,System.Byte[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.DtlsReliableHandshake.ReceiveMessage">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.DtlsReliableHandshake.ReceiveMessageBody(System.Int16)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.DtlsReliableHandshake.ReceiveMessageDelayedDigest(System.Int16)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.DtlsReliableHandshake.UpdateHandshakeMessagesDigest(Org.BouncyCastle2.Tls.DtlsReliableHandshake.Message)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.DtlsReliableHandshake.CheckInboundFlight">
            Check that there are no "extra" messages left in the current inbound flight
        </member>
        <member name="M:Org.BouncyCastle2.Tls.DtlsReliableHandshake.GetPendingMessage">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.DtlsReliableHandshake.ImplReceiveMessage">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.DtlsReliableHandshake.ProcessRecord(System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.DtlsReliableHandshake.ResendOutboundFlight">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.DtlsReliableHandshake.WriteMessage(Org.BouncyCastle2.Tls.DtlsReliableHandshake.Message)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.DtlsReliableHandshake.WriteHandshakeFragment(Org.BouncyCastle2.Tls.DtlsReliableHandshake.Message,System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.DtlsReplayWindow">
            RFC 4347 4.1.2.5 Anti-replay
            <p>
            Support fast rejection of duplicate records by maintaining a sliding receive window
            </p>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.DtlsReplayWindow.ShouldDiscard(System.Int64)">
            <summary>Check whether a received record with the given sequence number should be rejected as a duplicate.
            </summary>
            <param name="seq">the 48-bit DTLSPlainText.sequence_number field of a received record.</param>
            <returns>true if the record should be discarded without further processing.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.DtlsReplayWindow.ReportAuthenticated(System.Int64)">
            <summary>Report that a received record with the given sequence number passed authentication checks.
            </summary>
            <param name="seq">the 48-bit DTLSPlainText.sequence_number field of an authenticated record.</param>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.ECCurveType">
            <summary>RFC 4492 5.4</summary>
        </member>
        <member name="F:Org.BouncyCastle2.Tls.ECCurveType.explicit_prime">
            Indicates the elliptic curve domain parameters are conveyed verbosely, and the
            underlying finite field is a prime field.
        </member>
        <member name="F:Org.BouncyCastle2.Tls.ECCurveType.explicit_char2">
            Indicates the elliptic curve domain parameters are conveyed verbosely, and the
            underlying finite field is a characteristic-2 field.
        </member>
        <member name="F:Org.BouncyCastle2.Tls.ECCurveType.named_curve">
            Indicates that a named curve is used. This option SHOULD be used when applicable.
        </member>
        <member name="T:Org.BouncyCastle2.Tls.ECPointFormat">
            <summary>RFC 4492 5.1.2</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.EncryptionAlgorithm">
            <summary>RFC 2246</summary>
            <remarks>
            Note that the values here are implementation-specific and arbitrary. It is recommended not to depend on the
            particular values (e.g. serialization).
            </remarks>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.ExporterLabel">
            <summary>RFC 5705</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.HandshakeMessageOutput.Send(Org.BouncyCastle2.Tls.TlsProtocol,System.Int16,System.Byte[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.HandshakeMessageOutput.#ctor(System.Int16)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.HandshakeMessageOutput.#ctor(System.Int16,System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.HandshakeMessageOutput.Send(Org.BouncyCastle2.Tls.TlsProtocol)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.HashAlgorithm">
            <summary>RFC 5246 7.4.1.4.1</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.HeartbeatExtension.Encode(System.IO.Stream)">
            <summary>Encode this <see cref="T:Org.BouncyCastle2.Tls.HeartbeatExtension"/> to a <see cref="T:System.IO.Stream"/>.</summary>
            <param name="output">the <see cref="T:System.IO.Stream"/> to encode to.</param>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.HeartbeatExtension.Parse(System.IO.Stream)">
            <summary>Parse a <see cref="T:Org.BouncyCastle2.Tls.HeartbeatExtension"/> from a <see cref="T:System.IO.Stream"/>.</summary>
            <param name="input">the <see cref="T:System.IO.Stream"/> to parse from.</param>
            <returns>a <see cref="T:Org.BouncyCastle2.Tls.HeartbeatExtension"/> object.</returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.HeartbeatMessage.Encode(System.IO.Stream)">
            <summary>Encode this <see cref="T:Org.BouncyCastle2.Tls.HeartbeatMessage"/> to a <see cref="T:System.IO.Stream"/>.</summary>
            <param name="output">the <see cref="T:System.IO.Stream"/> to encode to.</param>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.HeartbeatMessage.Parse(System.IO.Stream)">
            <summary>Parse a <see cref="T:Org.BouncyCastle2.Tls.HeartbeatMessage"/> from a <see cref="T:System.IO.Stream"/>.</summary>
            <param name="input">the <see cref="T:System.IO.Stream"/> to parse from.</param>
            <returns>a <see cref="T:Org.BouncyCastle2.Tls.HeartbeatMessage"/> object.</returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.HeartbeatMessageType">
            <summary>RFC 6520 3.</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.IdentifierType">
            <summary>RFC 6066</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.KeyExchangeAlgorithm">
            <summary>RFC 2246</summary>
            <remarks>
            Note that the values here are implementation-specific and arbitrary. It is recommended not to depend on the
            particular values (e.g. serialization).
            </remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.KeyShareEntry.#ctor(System.Int32,System.Byte[])">
            <param name="namedGroup"><see cref="P:Org.BouncyCastle2.Tls.KeyShareEntry.NamedGroup"/></param>
            <param name="keyExchange"></param>
        </member>
        <member name="P:Org.BouncyCastle2.Tls.KeyShareEntry.NamedGroup">
            <returns><see cref="P:Org.BouncyCastle2.Tls.KeyShareEntry.NamedGroup"/></returns>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.KeyShareEntry.Encode(System.IO.Stream)">
            <summary>Encode this <see cref="T:Org.BouncyCastle2.Tls.KeyShareEntry"/> to a <see cref="T:System.IO.Stream"/>.</summary>
            <param name="output">the <see cref="T:System.IO.Stream"/> to encode to.</param>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.KeyShareEntry.Parse(System.IO.Stream)">
            <summary>Parse a <see cref="T:Org.BouncyCastle2.Tls.KeyShareEntry"/> from a <see cref="T:System.IO.Stream"/>.</summary>
            <param name="input">the <see cref="T:System.IO.Stream"/> to parse from.</param>
            <returns>a <see cref="T:Org.BouncyCastle2.Tls.KeyShareEntry"/> object.</returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.KeyUpdateRequest">
            <summary>RFC 8446 4.6.3</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.MacAlgorithm">
            <summary>RFC 2246</summary>
            <remarks>
            Note that the values here are implementation-specific and arbitrary. It is recommended not to depend on the
            particular values (e.g. serialization).
            </remarks>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.NamedGroup">
            <summary>RFC 7919</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.NamedGroupRole">
            <remarks>
            Note that the values here are implementation-specific and arbitrary. It is recommended not to depend on the
            particular values (e.g. serialization).
            </remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.NewSessionTicket.Encode(System.IO.Stream)">
            <summary>Encode this <see cref="T:Org.BouncyCastle2.Tls.NewSessionTicket"/> to a <see cref="T:System.IO.Stream"/>.</summary>
            <param name="output">the <see cref="T:System.IO.Stream"/> to encode to.</param>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.NewSessionTicket.Parse(System.IO.Stream)">
            <summary>Parse a <see cref="T:Org.BouncyCastle2.Tls.NewSessionTicket"/> from a <see cref="T:System.IO.Stream"/>.</summary>
            <param name="input">the <see cref="T:System.IO.Stream"/> to parse from.</param>
            <returns>a <see cref="T:Org.BouncyCastle2.Tls.NewSessionTicket"/> object.</returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.OcspStatusRequest">
            <summary>RFC 3546 3.6</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.OcspStatusRequest.#ctor(System.Collections.IList,Org.BouncyCastle2.Asn1.X509.X509Extensions)">
            <param name="responderIDList">an <see cref="T:System.Collections.IList"/> of <see cref="T:Org.BouncyCastle2.Asn1.Ocsp.ResponderID"/>, specifying the list of
            trusted OCSP responders. An empty list has the special meaning that the responders are implicitly known to
            the server - e.g., by prior arrangement.</param>
            <param name="requestExtensions">OCSP request extensions. A null value means that there are no extensions.
            </param>
        </member>
        <member name="P:Org.BouncyCastle2.Tls.OcspStatusRequest.ResponderIDList">
            <returns>an <see cref="T:System.Collections.IList"/> of <see cref="T:Org.BouncyCastle2.Asn1.Ocsp.ResponderID"/>.</returns>
        </member>
        <member name="P:Org.BouncyCastle2.Tls.OcspStatusRequest.RequestExtensions">
            <returns>OCSP request extensions.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.OcspStatusRequest.Encode(System.IO.Stream)">
            <summary>Encode this <see cref="T:Org.BouncyCastle2.Tls.OcspStatusRequest"/> to a <see cref="T:System.IO.Stream"/>.</summary>
            <param name="output">the <see cref="T:System.IO.Stream"/> to encode to.</param>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.OcspStatusRequest.Parse(System.IO.Stream)">
            <summary>Parse an <see cref="T:Org.BouncyCastle2.Tls.OcspStatusRequest"/> from a <see cref="T:System.IO.Stream"/>.</summary>
            <param name="input">the <see cref="T:System.IO.Stream"/> to parse from.</param>
            <returns>an <see cref="T:Org.BouncyCastle2.Tls.OcspStatusRequest"/> object.</returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.OfferedPsks.Encode(System.IO.Stream)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.OfferedPsks.EncodeBinders(System.IO.Stream,Org.BouncyCastle2.Tls.Crypto.TlsCrypto,Org.BouncyCastle2.Tls.TlsHandshakeHash,Org.BouncyCastle2.Tls.OfferedPsks.BindersConfig)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.OfferedPsks.GetBindersSize(Org.BouncyCastle2.Tls.TlsPsk[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.OfferedPsks.Parse(System.IO.Stream)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.PrfAlgorithm">
            <summary>RFC 5246</summary>
            <remarks>
            Note that the values here are implementation-specific and arbitrary. It is recommended not to depend on the
            particular values (e.g. serialization).
            </remarks>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.ProtocolName">
            <summary>RFC 7301 Represents a protocol name for use with ALPN.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.ProtocolName.Encode(System.IO.Stream)">
            <summary>Encode this <see cref="T:Org.BouncyCastle2.Tls.ProtocolName"/> to a <see cref="T:System.IO.Stream"/>.</summary>
            <param name="output">the <see cref="T:System.IO.Stream"/> to encode to.</param>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.ProtocolName.Parse(System.IO.Stream)">
            <summary>Parse a <see cref="T:Org.BouncyCastle2.Tls.ProtocolName"/> from a <see cref="T:System.IO.Stream"/>.</summary>
            <param name="input">the <see cref="T:System.IO.Stream"/> to parse from.</param>
            <returns>a <see cref="T:Org.BouncyCastle2.Tls.ProtocolName"/> object.</returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.RecordStream">
            <summary>An implementation of the TLS 1.0/1.1/1.2 record layer.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.RecordStream.NotifyChangeCipherSpecReceived">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.RecordStream.EnablePendingCipherRead(System.Boolean)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.RecordStream.EnablePendingCipherWrite">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.RecordStream.FinaliseHandshake">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.RecordStream.NotifyKeyUpdateReceived">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.RecordStream.NotifyKeyUpdateSent">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.RecordStream.PreviewRecordHeader(System.Byte[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.RecordStream.ReadFullRecord(System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.RecordStream.ReadRecord">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.RecordStream.DecodeAndVerify(System.Int16,Org.BouncyCastle2.Tls.ProtocolVersion,System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.RecordStream.WriteRecord(System.Int16,System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.RecordStream.Close">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.RecordStream.CheckChangeCipherSpec(System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.RecordStream.CheckRecordType(System.Byte[],System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.RecordStream.CheckLength(System.Int32,System.Int32,System.Int16)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.RecordStream.Record.FillTo(System.IO.Stream,System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.RecordStream.Record.ReadFragment(System.IO.Stream,System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.RecordStream.Record.ReadHeader(System.IO.Stream)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.RecordStream.SequenceNumber.NextValue(System.Int16)">
            <exception cref="T:Org.BouncyCastle2.Tls.TlsFatalAlert"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.ServerHello.Encode(Org.BouncyCastle2.Tls.TlsContext,System.IO.Stream)">
            <summary>Encode this <see cref="T:Org.BouncyCastle2.Tls.ServerHello"/> to a <see cref="T:System.IO.Stream"/>.</summary>
            <param name="context">the <see cref="T:Org.BouncyCastle2.Tls.TlsContext"/> of the current connection.</param>
            <param name="output">the <see cref="T:System.IO.Stream"/> to encode to.</param>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.ServerHello.Parse(System.IO.MemoryStream)">
            <summary>Parse a <see cref="T:Org.BouncyCastle2.Tls.ServerHello"/> from a <see cref="T:System.IO.MemoryStream"/>.</summary>
            <param name="input">the <see cref="T:System.IO.MemoryStream"/> to parse from.</param>
            <returns>a <see cref="T:Org.BouncyCastle2.Tls.ServerHello"/> object.</returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.ServerName">
            <summary>RFC 6066 3. Server Name Indication</summary>
            <remarks>
            Current implementation uses this guidance: "For backward compatibility, all future data structures associated
            with new NameTypes MUST begin with a 16-bit length field. TLS MAY treat provided server names as opaque data
            and pass the names and types to the application.". RFC 6066 specifies ASCII encoding for host_name (possibly
            using A-labels for IDNs), but note that the previous version (RFC 4366) specified UTF-8 encoding (see RFC 6066
            Appendix A). For maximum compatibility, it is recommended that client code tolerate receiving UTF-8 from the
            peer, but only generate ASCII itself.
            </remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.ServerName.Encode(System.IO.Stream)">
            <summary>Encode this <see cref="T:Org.BouncyCastle2.Tls.ServerName"/> to a <see cref="T:System.IO.Stream"/>.</summary>
            <param name="output">the <see cref="T:System.IO.Stream"/> to encode to.</param>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.ServerName.Parse(System.IO.Stream)">
            <summary>Parse a <see cref="T:Org.BouncyCastle2.Tls.ServerName"/> from a <see cref="T:System.IO.Stream"/>.</summary>
            <param name="input">the <see cref="T:System.IO.Stream"/> to parse from.</param>
            <returns>a <see cref="T:Org.BouncyCastle2.Tls.ServerName"/> object.</returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.ServerNameList.#ctor(System.Collections.IList)">
            <param name="serverNameList">an <see cref="T:System.Collections.IList"/> of <see cref="T:Org.BouncyCastle2.Tls.ServerName"/>.</param>
        </member>
        <member name="P:Org.BouncyCastle2.Tls.ServerNameList.ServerNames">
            <returns>an <see cref="T:System.Collections.IList"/> of <see cref="T:Org.BouncyCastle2.Tls.ServerName"/>.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.ServerNameList.Encode(System.IO.Stream)">
            <summary>Encode this <see cref="T:Org.BouncyCastle2.Tls.ServerNameList"/> to a <see cref="T:System.IO.Stream"/>.</summary>
            <param name="output">the <see cref="T:System.IO.Stream"/> to encode to .</param>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.ServerNameList.Parse(System.IO.Stream)">
            <summary>Parse a <see cref="T:Org.BouncyCastle2.Tls.ServerNameList"/> from a <see cref="T:System.IO.Stream"/>.</summary>
            <param name="input">the <see cref="T:System.IO.Stream"/> to parse from.</param>
            <returns>a <see cref="T:Org.BouncyCastle2.Tls.ServerNameList"/> object.</returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.ServerSrpParams.Encode(System.IO.Stream)">
            <summary>Encode this <see cref="T:Org.BouncyCastle2.Tls.ServerSrpParams"/> to a <see cref="T:System.IO.Stream"/>.</summary>
            <param name="output">the <see cref="T:System.IO.Stream"/> to encode to.</param>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.ServerSrpParams.Parse(System.IO.Stream)">
            <summary>Parse a <see cref="T:Org.BouncyCastle2.Tls.ServerSrpParams"/> from a <see cref="T:System.IO.Stream"/>.</summary>
            <param name="input">the <see cref="T:System.IO.Stream"/> to parse from.</param>
            <returns>a <see cref="T:Org.BouncyCastle2.Tls.ServerSrpParams"/> object.</returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.SessionParameters.Builder.SetServerExtensions(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.SessionParameters.ReadServerExtensions">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.SignatureAlgorithm">
            RFC 5246 7.4.1.4.1 (in RFC 2246, there were no specific values assigned)
        </member>
        <member name="T:Org.BouncyCastle2.Tls.SignatureAndHashAlgorithm">
            <summary>RFC 5246 7.4.1.4.1</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.SignatureAndHashAlgorithm.#ctor(System.Int16,System.Int16)">
            <param name="hash"><see cref="T:Org.BouncyCastle2.Tls.HashAlgorithm"/></param>
            <param name="signature"><see cref="T:Org.BouncyCastle2.Tls.SignatureAlgorithm"/></param>
        </member>
        <member name="P:Org.BouncyCastle2.Tls.SignatureAndHashAlgorithm.Hash">
            <returns><see cref="T:Org.BouncyCastle2.Tls.HashAlgorithm"/></returns>
        </member>
        <member name="P:Org.BouncyCastle2.Tls.SignatureAndHashAlgorithm.Signature">
            <returns><see cref="T:Org.BouncyCastle2.Tls.SignatureAlgorithm"/></returns>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.SignatureAndHashAlgorithm.Encode(System.IO.Stream)">
            <summary>Encode this <see cref="T:Org.BouncyCastle2.Tls.SignatureAndHashAlgorithm"/> to a <see cref="T:System.IO.Stream"/>.</summary>
            <param name="output">the <see cref="T:System.IO.Stream"/> to encode to.</param>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.SignatureAndHashAlgorithm.Parse(System.IO.Stream)">
            <summary>Parse a <see cref="T:Org.BouncyCastle2.Tls.SignatureAndHashAlgorithm"/> from a <see cref="T:System.IO.Stream"/>.</summary>
            <param name="input">the <see cref="T:System.IO.Stream"/> to parse from.</param>
            <returns>a <see cref="T:Org.BouncyCastle2.Tls.SignatureAndHashAlgorithm"/> object.</returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.SignatureScheme.GetNamedGroup(System.Int32)">
            For TLS 1.3+ usage, some signature schemes are constrained to use a particular
            ({@link NamedGroup}. Not relevant for TLS 1.2 and below.
        </member>
        <member name="T:Org.BouncyCastle2.Tls.SimulatedTlsSrpIdentityManager">
            <summary>An implementation of <see cref="T:Org.BouncyCastle2.Tls.TlsSrpIdentityManager"/> that simulates the existence of "unknown"
            identities to obscure the fact that there is no verifier for them.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.SimulatedTlsSrpIdentityManager.GetRfc5054Default(Org.BouncyCastle2.Tls.Crypto.TlsCrypto,Org.BouncyCastle2.Tls.Crypto.Srp6Group,System.Byte[])">
            <summary>Create a <see cref="T:Org.BouncyCastle2.Tls.SimulatedTlsSrpIdentityManager"/> that implements the algorithm from RFC 5054
            2.5.1.3.</summary>
            <param name="crypto"><see cref="T:Org.BouncyCastle2.Tls.Crypto.TlsCrypto"/></param>
            <param name="group">the <see cref="T:Org.BouncyCastle2.Tls.Crypto.Srp6Group"/> defining the group that SRP is operating in.</param>
            <param name="seedKey">the secret "seed key" referred to in RFC 5054 2.5.1.3.</param>
            <returns>an instance of <see cref="T:Org.BouncyCastle2.Tls.SimulatedTlsSrpIdentityManager"/>.</returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Ssl3Utilities.ReadEncryptedPms(System.IO.Stream)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.Ssl3Utilities.WriteEncryptedPms(System.Byte[],System.IO.Stream)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.TlsAuthentication">
            <summary>Base interface to provide TLS authentication credentials.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsAuthentication.NotifyServerCertificate(Org.BouncyCastle2.Tls.TlsServerCertificate)">
            <summary>Called by the protocol handler to report the server certificate.</summary>
            <remarks>
            Note: this method is responsible for certificate verification and validation.
            </remarks>
            <param name="serverCertificate">the server certificate received.</param>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsAuthentication.GetClientCredentials(Org.BouncyCastle2.Tls.CertificateRequest)">
            <summary>Return client credentials in response to server's certificate request.</summary>
            <remarks>
            The returned value may be null, or else it MUST implement <em>exactly one</em> of
            <see cref="T:Org.BouncyCastle2.Tls.TlsCredentialedAgreement"/>, <see cref="T:Org.BouncyCastle2.Tls.TlsCredentialedDecryptor"/>, or
            <see cref="T:Org.BouncyCastle2.Tls.TlsCredentialedSigner"/>, depending on the key exchange that was negotiated and the details of
            the <see cref="T:Org.BouncyCastle2.Tls.CertificateRequest"/>.
            </remarks>
            <param name="certificateRequest">details of the certificate request.</param>
            <returns>a <see cref="T:Org.BouncyCastle2.Tls.TlsCredentials"/> object or null for no client authentication.</returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsClient.GetSessionToResume">
            <summary>Return the session this client wants to resume, if any.</summary>
            <remarks>
            Note that the peer's certificate chain for the session (if any) may need to be periodically revalidated.
            </remarks>
            <returns>A <see cref="T:Org.BouncyCastle2.Tls.TlsSession"/> representing the resumable session to be used for this connection, or
            null to use a new session.</returns>
            <seealso cref="P:Org.BouncyCastle2.Tls.SessionParameters.PeerCertificate"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsClient.GetExternalPsks">
            <summary>Return the <see cref="T:Org.BouncyCastle2.Tls.TlsPskExternal">external PSKs</see> to offer in the ClientHello.</summary>
            <remarks>This will only be called when TLS 1.3 or higher is amongst the offered protocol versions.</remarks>
            <returns>an <see cref="T:System.Collections.IList"/> of <see cref="T:Org.BouncyCastle2.Tls.TlsPskExternal"/> instances, or null if none should be
            offered.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsClient.GetClientExtensions">
            <returns>(Int32 -> byte[])</returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsClient.GetEarlyKeyShareGroups">
            <summary>If this client is offering TLS 1.3 or higher, this method may be called to determine for which
            groups a key share should be included in the initial ClientHello.</summary>
            <remarks>
            Groups that were not included in the supported_groups extension (by <see cref="M:Org.BouncyCastle2.Tls.TlsClient.GetClientExtensions"/> will
            be ignored. The protocol will then add a suitable key_share extension to the ClientHello extensions.
            </remarks>
            <returns>an <see cref="T:System.Collections.IList"/> of <see cref="T:Org.BouncyCastle2.Tls.NamedGroup">named group</see> values, possibly empty or null.
            </returns>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsClient.NotifyServerVersion(Org.BouncyCastle2.Tls.ProtocolVersion)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsClient.NotifySessionToResume(Org.BouncyCastle2.Tls.TlsSession)">
            <summary>Notifies the client of the session that will be offered in ClientHello for resumption, if any.
            </summary>
            <remarks>
            This will be either the session returned from {@link #getSessionToResume()} or null if that session was
            unusable. NOTE: the actual negotiated session_id is notified by <see cref="M:Org.BouncyCastle2.Tls.TlsClient.NotifySessionID(System.Byte[])"/>.
            </remarks>
            <param name="session">The <see cref="T:Org.BouncyCastle2.Tls.TlsSession"/> representing the resumable session to be offered for
            this connection, or null if there is none.</param>
            <seealso cref="M:Org.BouncyCastle2.Tls.TlsClient.NotifySessionID(System.Byte[])"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsClient.NotifySessionID(System.Byte[])">
            <summary>Notifies the client of the session_id sent in the ServerHello.</summary>
            <param name="sessionID"/>
            <seealso cref="P:Org.BouncyCastle2.Tls.TlsContext.Session"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsClient.NotifySelectedPsk(Org.BouncyCastle2.Tls.TlsPsk)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsClient.ProcessServerExtensions(System.Collections.IDictionary)">
            <summary>The protocol implementation validates that any server extensions received correspond to client
            extensions sent.</summary>
            <remarks>
            If further processing of the server extensions is needed, it can be done in this callback. NOTE: This is
            not called for session resumption handshakes.
            </remarks>
            <param name="serverExtensions">(Int32 -> byte[])</param>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsClient.ProcessServerSupplementalData(System.Collections.IList)">
            <param name="serverSupplementalData">(SupplementalDataEntry)</param>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsClient.GetPskIdentity">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsClient.GetSrpIdentity">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsClient.GetDHGroupVerifier">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsClient.GetSrpConfigVerifier">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsClient.GetAuthentication">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsClient.GetClientSupplementalData">
            <returns>(SupplementalDataEntry)</returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsClient.NotifyNewSessionTicket(Org.BouncyCastle2.Tls.NewSessionTicket)">
            <summary>RFC 5077 3.3. NewSessionTicket Handshake Message</summary>
            <remarks>
            This method will be called (only) when a NewSessionTicket handshake message is received. The ticket is
            opaque to the client and clients MUST NOT examine the ticket under the assumption that it complies with e.g.
            RFC 5077 4. "Recommended Ticket Construction".
            </remarks>
            <param name="newSessionTicket">The ticket.</param>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.TlsClientContext">
            <summary>Marker interface to distinguish a TLS client context.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsClientProtocol.#ctor">
            <summary>Constructor for non-blocking mode.</summary>
            <remarks>
            When data is received, use <see cref="M:Org.BouncyCastle2.Tls.TlsProtocol.OfferInput(System.Byte[])"/> to provide the received ciphertext,
            then use <see cref="M:Org.BouncyCastle2.Tls.TlsProtocol.ReadInput(System.Byte[],System.Int32,System.Int32)"/> to read the corresponding cleartext.<br/><br/>
            Similarly, when data needs to be sent, use <see cref="M:Org.BouncyCastle2.Tls.TlsProtocol.WriteApplicationData(System.Byte[],System.Int32,System.Int32)"/>
            to provide the cleartext, then use <see cref="M:Org.BouncyCastle2.Tls.TlsProtocol.ReadOutput(System.Byte[],System.Int32,System.Int32)"/> to get the
            corresponding ciphertext.
            </remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsClientProtocol.#ctor(System.IO.Stream)">
            <summary>Constructor for blocking mode.</summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> of data to/from the server.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsClientProtocol.#ctor(System.IO.Stream,System.IO.Stream)">
            <summary>Constructor for blocking mode.</summary>
            <param name="input">The <see cref="T:System.IO.Stream"/> of data from the server.</param>
            <param name="output">The <see cref="T:System.IO.Stream"/> of data to the server.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsClientProtocol.Connect(Org.BouncyCastle2.Tls.TlsClient)">
            <summary>Initiates a TLS handshake in the role of client.</summary>
            <remarks>
            In blocking mode, this will not return until the handshake is complete. In non-blocking mode, use
            <see cref="M:Org.BouncyCastle2.Tls.TlsPeer.NotifyHandshakeComplete"/> to receive a callback when the handshake is complete.
            </remarks>
            <param name="tlsClient">The <see cref="T:Org.BouncyCastle2.Tls.TlsClient"/> to use for the handshake.</param>
            <exception cref="T:System.IO.IOException">If in blocking mode and handshake was not successful.</exception>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsClientProtocol.Handle13HandshakeMessage(System.Int16,Org.BouncyCastle2.Tls.HandshakeMessageInput)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsClientProtocol.HandleServerCertificate">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsClientProtocol.HandleSupplementalData(System.Collections.IList)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsClientProtocol.Process13HelloRetryRequest(Org.BouncyCastle2.Tls.ServerHello)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsClientProtocol.Process13ServerHello(Org.BouncyCastle2.Tls.ServerHello,System.Boolean)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsClientProtocol.Process13ServerHelloCoda(Org.BouncyCastle2.Tls.ServerHello,System.Boolean)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsClientProtocol.ProcessServerHello(Org.BouncyCastle2.Tls.ServerHello)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsClientProtocol.Receive13CertificateRequest(System.IO.MemoryStream,System.Boolean)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsClientProtocol.Receive13EncryptedExtensions(System.IO.MemoryStream)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsClientProtocol.Receive13NewSessionTicket(System.IO.MemoryStream)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsClientProtocol.Receive13ServerCertificate(System.IO.MemoryStream)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsClientProtocol.Receive13ServerCertificateVerify(System.IO.MemoryStream)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsClientProtocol.Receive13ServerFinished(System.IO.MemoryStream)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsClientProtocol.ReceiveCertificateRequest(System.IO.MemoryStream)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsClientProtocol.ReceiveNewSessionTicket(System.IO.MemoryStream)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsClientProtocol.ReceiveServerHelloMessage(System.IO.MemoryStream)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsClientProtocol.Send13ClientHelloRetry">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsClientProtocol.SendCertificateVerifyMessage(Org.BouncyCastle2.Tls.DigitallySigned)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsClientProtocol.SendClientHello">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsClientProtocol.SendClientHelloMessage">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsClientProtocol.SendClientKeyExchange">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsClientProtocol.Skip13CertificateRequest">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsClientProtocol.Skip13ServerCertificate">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsCloseable.Close">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.TlsContext">
            <summary>Base interface for a TLS context implementation.</summary>
        </member>
        <member name="P:Org.BouncyCastle2.Tls.TlsContext.IsServer">
            <summary>Return true if this context is for a server, false otherwise.</summary>
            <returns>true for a server based context, false for a client based one.</returns>
        </member>
        <member name="P:Org.BouncyCastle2.Tls.TlsContext.ResumableSession">
            <summary>Used to get the resumable session, if any, used by this connection.</summary>
            <remarks>
            Only available after the handshake has successfully completed.
            </remarks>
            <returns>A <see cref="T:Org.BouncyCastle2.Tls.TlsSession"/> representing the resumable session used by this connection, or null if
            no resumable session available.</returns>
            <seealso cref="M:Org.BouncyCastle2.Tls.TlsPeer.NotifyHandshakeComplete"/>
        </member>
        <member name="P:Org.BouncyCastle2.Tls.TlsContext.Session">
            <summary>Used to get the session information for this connection.</summary>
            <remarks>
            Only available after the handshake has successfully completed. Use <see cref="P:Org.BouncyCastle2.Tls.TlsSession.IsResumable"/>
            to find out if the session is resumable.
            </remarks>
            <returns>A <see cref="T:Org.BouncyCastle2.Tls.TlsSession"/> representing the session used by this connection.</returns>
            <seealso cref="M:Org.BouncyCastle2.Tls.TlsPeer.NotifyHandshakeComplete"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsContext.ExportChannelBinding(System.Int32)">
            <summary>Export the value of the specified channel binding.</summary>
            <remarks>
            Only available after the handshake has successfully completed.
            </remarks>
            <param name="channelBinding">A <see cref="T:Org.BouncyCastle2.Tls.ChannelBinding"/> constant specifying the channel binding to
            export.</param>
            <returns>A copy of the channel binding data as a <c>byte[]</c>, or null if the binding could not be
            determined.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsContext.ExportEarlyKeyingMaterial(System.String,System.Byte[],System.Int32)">
            <summary>Export (early data) keying material according to RFC 5705: "Keying Material Exporters for TLS", as
            updated for TLS 1.3 (RFC 8446).</summary>
            <remarks>
            NOTE: for use in settings where an exporter is needed for 0-RTT data.
            </remarks>
            <param name="asciiLabel">indicates which application will use the exported keys.</param>
            <param name="context_value">allows the application using the exporter to mix its own data with the TLS PRF
            for the exporter output.</param>
            <param name="length">the number of bytes to generate.</param>
            <returns>a pseudorandom bit string of 'length' bytes generated from the (exporter_)master_secret.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsContext.ExportKeyingMaterial(System.String,System.Byte[],System.Int32)">
            <summary>Export keying material according to RFC 5705: "Keying Material Exporters for TLS", as updated for
            TLS 1.3 (RFC 8446) when negotiated.</summary>
            <param name="asciiLabel">indicates which application will use the exported keys.</param>
            <param name="context_value">allows the application using the exporter to mix its own data with the TLS PRF
            for the exporter output.</param>
            <param name="length">the number of bytes to generate.</param>
            <returns>a pseudorandom bit string of 'length' bytes generated from the (exporter_)master_secret.</returns>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.TlsCredentialedAgreement">
            <summary>Support interface for generating a secret based on the credentials sent by a TLS peer.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsCredentialedAgreement.GenerateAgreement(Org.BouncyCastle2.Tls.Crypto.TlsCertificate)">
            <summary>Calculate an agreed secret based on our credentials and the public key credentials of our peer.
            </summary>
            <param name="peerCertificate">public key certificate of our TLS peer.</param>
            <returns>the agreed secret.</returns>
            <exception cref="T:System.IO.IOException">in case of an exception on generation of the secret.</exception>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.TlsCredentialedDecryptor">
            <summary>Base interface for a class that decrypts TLS secrets.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsCredentialedDecryptor.Decrypt(Org.BouncyCastle2.Tls.Crypto.TlsCryptoParameters,System.Byte[])">
            <summary>Decrypt the passed in cipher text using the parameters available.</summary>
            <param name="cryptoParams">the parameters to use for the decryption.</param>
            <param name="ciphertext">the cipher text containing the secret.</param>
            <returns>a TLS secret.</returns>
            <exception cref="T:System.IO.IOException">on a parsing or decryption error.</exception>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.TlsCredentialedSigner">
            <summary>Support interface for generating a signature based on our private credentials.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsCredentialedSigner.GenerateRawSignature(System.Byte[])">
            <summary>Generate a signature against the passed in hash.</summary>
            <param name="hash">a message digest calculated across the message the signature is to apply to.</param>
            <returns>an encoded signature.</returns>
            <exception cref="T:System.IO.IOException">if the hash cannot be processed, or there is an issue with the private
            credentials.</exception>
        </member>
        <member name="P:Org.BouncyCastle2.Tls.TlsCredentialedSigner.SignatureAndHashAlgorithm">
            <summary>Return the algorithm IDs for the signature algorithm and the associated hash it uses.</summary>
            <returns>the full algorithm details for the signature.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsCredentialedSigner.GetStreamSigner">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.TlsCredentials">
            <summary>Base interface for interfaces/classes carrying TLS credentials.</summary>
        </member>
        <member name="P:Org.BouncyCastle2.Tls.TlsCredentials.Certificate">
            <summary>Return the certificate structure representing our identity.</summary>
            <returns>our certificate structure.</returns>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.TlsDHanonKeyExchange">
            <summary>(D)TLS DH_anon key exchange.</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.TlsDHGroupVerifier">
            <summary>Interface for verifying explicit Diffie-Hellman group parameters.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsDHGroupVerifier.Accept(Org.BouncyCastle2.Tls.Crypto.DHGroup)">
            <summary>Check whether the given DH group is acceptable for use.</summary>
            <param name="dhGroup">the <see cref="T:Org.BouncyCastle2.Tls.Crypto.DHGroup"/> to check.</param>
            <returns>true if (and only if) the specified group is acceptable.</returns>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.TlsDHKeyExchange">
            <summary>(D)TLS DH key exchange.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsDHUtilities.ReceiveDHConfig(Org.BouncyCastle2.Tls.TlsContext,Org.BouncyCastle2.Tls.TlsDHGroupVerifier,System.IO.Stream)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsDHUtilities.ReadDHParameter(System.IO.Stream)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsDHUtilities.WriteDHConfig(Org.BouncyCastle2.Tls.Crypto.TlsDHConfig,System.IO.Stream)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsDHUtilities.WriteDHParameter(Org.BouncyCastle2.Math.BigInteger,System.IO.Stream)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsEccUtilities.CreateNamedECConfig(Org.BouncyCastle2.Tls.TlsContext,System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsEccUtilities.CheckPointEncoding(System.Int32,System.Byte[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsEccUtilities.ReceiveECDHConfig(Org.BouncyCastle2.Tls.TlsContext,System.IO.Stream)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsEccUtilities.WriteECConfig(Org.BouncyCastle2.Tls.Crypto.TlsECConfig,System.IO.Stream)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsEccUtilities.WriteNamedECParameters(System.Int32,System.IO.Stream)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.TlsECDHanonKeyExchange">
            <summary>(D)TLS ECDH_anon key exchange (see RFC 4492).</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.TlsECDheKeyExchange">
            <summary>(D)TLS ECDHE key exchange (see RFC 4492).</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.TlsECDHKeyExchange">
            <summary>(D)TLS ECDH key exchange (see RFC 4492).</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.AddAlpnExtensionClient(System.Collections.IDictionary,System.Collections.IList)">
            <param name="extensions">(Int32 -> byte[])</param>
            <param name="protocolNameList">an <see cref="T:System.Collections.IList"/> of <see cref="T:Org.BouncyCastle2.Tls.ProtocolName"/>.</param>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.AddAlpnExtensionServer(System.Collections.IDictionary,Org.BouncyCastle2.Tls.ProtocolName)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.AddCertificateAuthoritiesExtension(System.Collections.IDictionary,System.Collections.IList)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.AddClientCertificateTypeExtensionClient(System.Collections.IDictionary,System.Int16[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.AddClientCertificateTypeExtensionServer(System.Collections.IDictionary,System.Int16)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.AddCompressCertificateExtension(System.Collections.IDictionary,System.Int32[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.AddCookieExtension(System.Collections.IDictionary,System.Byte[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.AddEarlyDataMaxSize(System.Collections.IDictionary,System.Int64)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.AddHeartbeatExtension(System.Collections.IDictionary,Org.BouncyCastle2.Tls.HeartbeatExtension)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.AddKeyShareClientHello(System.Collections.IDictionary,System.Collections.IList)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.AddKeyShareHelloRetryRequest(System.Collections.IDictionary,System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.AddKeyShareServerHello(System.Collections.IDictionary,Org.BouncyCastle2.Tls.KeyShareEntry)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.AddMaxFragmentLengthExtension(System.Collections.IDictionary,System.Int16)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.AddOidFiltersExtension(System.Collections.IDictionary,System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.AddPaddingExtension(System.Collections.IDictionary,System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.AddPreSharedKeyClientHello(System.Collections.IDictionary,Org.BouncyCastle2.Tls.OfferedPsks)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.AddPreSharedKeyServerHello(System.Collections.IDictionary,System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.AddPskKeyExchangeModesExtension(System.Collections.IDictionary,System.Int16[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.AddRecordSizeLimitExtension(System.Collections.IDictionary,System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.AddServerCertificateTypeExtensionClient(System.Collections.IDictionary,System.Int16[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.AddServerCertificateTypeExtensionServer(System.Collections.IDictionary,System.Int16)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.AddServerNameExtensionClient(System.Collections.IDictionary,System.Collections.IList)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.AddServerNameExtensionServer(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.AddSignatureAlgorithmsExtension(System.Collections.IDictionary,System.Collections.IList)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.AddSignatureAlgorithmsCertExtension(System.Collections.IDictionary,System.Collections.IList)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.AddStatusRequestExtension(System.Collections.IDictionary,Org.BouncyCastle2.Tls.CertificateStatusRequest)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.AddStatusRequestV2Extension(System.Collections.IDictionary,System.Collections.IList)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.AddSupportedGroupsExtension(System.Collections.IDictionary,System.Collections.IList)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.AddSupportedPointFormatsExtension(System.Collections.IDictionary,System.Int16[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.AddSupportedVersionsExtensionClient(System.Collections.IDictionary,Org.BouncyCastle2.Tls.ProtocolVersion[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.AddSupportedVersionsExtensionServer(System.Collections.IDictionary,Org.BouncyCastle2.Tls.ProtocolVersion)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.AddTrustedCAKeysExtensionClient(System.Collections.IDictionary,System.Collections.IList)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.GetAlpnExtensionClient(System.Collections.IDictionary)">
            <returns>an <see cref="T:System.Collections.IList"/> of <see cref="T:Org.BouncyCastle2.Tls.ProtocolName"/>.</returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.GetAlpnExtensionServer(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.GetCertificateAuthoritiesExtension(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.GetClientCertificateTypeExtensionClient(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.GetClientCertificateTypeExtensionServer(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.GetCompressCertificateExtension(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.GetCookieExtension(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.GetEarlyDataMaxSize(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.GetHeartbeatExtension(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.GetKeyShareClientHello(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.GetKeyShareHelloRetryRequest(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.GetKeyShareServerHello(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.GetMaxFragmentLengthExtension(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.GetOidFiltersExtension(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.GetPaddingExtension(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.GetPreSharedKeyClientHello(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.GetPreSharedKeyServerHello(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.GetPskKeyExchangeModesExtension(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.GetRecordSizeLimitExtension(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.GetServerCertificateTypeExtensionClient(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.GetServerCertificateTypeExtensionServer(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.GetServerNameExtensionClient(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.GetSignatureAlgorithmsExtension(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.GetSignatureAlgorithmsCertExtension(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.GetStatusRequestExtension(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.GetStatusRequestV2Extension(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.GetSupportedGroupsExtension(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.GetSupportedPointFormatsExtension(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.GetSupportedVersionsExtensionClient(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.GetSupportedVersionsExtensionServer(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.GetTrustedCAKeysExtensionClient(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.HasClientCertificateUrlExtension(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.HasEarlyDataIndication(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.HasEncryptThenMacExtension(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.HasExtendedMasterSecretExtension(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.HasServerNameExtensionServer(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.HasPostHandshakeAuthExtension(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.HasTruncatedHmacExtension(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.HasTrustedCAKeysExtensionServer(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.CreateAlpnExtensionClient(System.Collections.IList)">
            <param name="protocolNameList">an <see cref="T:System.Collections.IList"/> of <see cref="T:Org.BouncyCastle2.Tls.ProtocolName"/>.</param>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.CreateAlpnExtensionServer(Org.BouncyCastle2.Tls.ProtocolName)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.CreateCertificateAuthoritiesExtension(System.Collections.IList)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.CreateCertificateTypeExtensionClient(System.Int16[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.CreateCertificateTypeExtensionServer(System.Int16)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.CreateCompressCertificateExtension(System.Int32[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.CreateCookieExtension(System.Byte[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.CreateEarlyDataMaxSize(System.Int64)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.CreateHeartbeatExtension(Org.BouncyCastle2.Tls.HeartbeatExtension)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.CreateKeyShareClientHello(System.Collections.IList)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.CreateKeyShareHelloRetryRequest(System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.CreateKeyShareServerHello(Org.BouncyCastle2.Tls.KeyShareEntry)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.CreateMaxFragmentLengthExtension(System.Int16)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.CreateOidFiltersExtension(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.CreatePaddingExtension(System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.CreatePreSharedKeyClientHello(Org.BouncyCastle2.Tls.OfferedPsks)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.CreatePreSharedKeyServerHello(System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.CreatePskKeyExchangeModesExtension(System.Int16[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.CreateRecordSizeLimitExtension(System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.CreateServerNameExtensionClient(System.Collections.IList)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.CreateSignatureAlgorithmsExtension(System.Collections.IList)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.CreateSignatureAlgorithmsCertExtension(System.Collections.IList)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.CreateStatusRequestExtension(Org.BouncyCastle2.Tls.CertificateStatusRequest)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.CreateStatusRequestV2Extension(System.Collections.IList)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.CreateSupportedGroupsExtension(System.Collections.IList)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.CreateSupportedPointFormatsExtension(System.Int16[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.CreateSupportedVersionsExtensionClient(Org.BouncyCastle2.Tls.ProtocolVersion[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.CreateSupportedVersionsExtensionServer(Org.BouncyCastle2.Tls.ProtocolVersion)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.CreateTrustedCAKeysExtensionClient(System.Collections.IList)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.ReadEmptyExtensionData(System.Byte[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.ReadAlpnExtensionClient(System.Byte[])">
            <returns>an <see cref="T:System.Collections.IList"/> of <see cref="T:Org.BouncyCastle2.Tls.ProtocolName"/>.</returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.ReadAlpnExtensionServer(System.Byte[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.ReadCertificateAuthoritiesExtension(System.Byte[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.ReadCertificateTypeExtensionClient(System.Byte[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.ReadCertificateTypeExtensionServer(System.Byte[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.ReadClientCertificateUrlExtension(System.Byte[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.ReadCompressCertificateExtension(System.Byte[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.ReadCookieExtension(System.Byte[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.ReadEarlyDataIndication(System.Byte[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.ReadEarlyDataMaxSize(System.Byte[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.ReadEncryptThenMacExtension(System.Byte[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.ReadExtendedMasterSecretExtension(System.Byte[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.ReadHeartbeatExtension(System.Byte[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.ReadKeyShareClientHello(System.Byte[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.ReadKeyShareHelloRetryRequest(System.Byte[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.ReadKeyShareServerHello(System.Byte[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.ReadMaxFragmentLengthExtension(System.Byte[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.ReadOidFiltersExtension(System.Byte[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.ReadPaddingExtension(System.Byte[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.ReadPostHandshakeAuthExtension(System.Byte[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.ReadPreSharedKeyClientHello(System.Byte[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.ReadPreSharedKeyServerHello(System.Byte[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.ReadPskKeyExchangeModesExtension(System.Byte[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.ReadRecordSizeLimitExtension(System.Byte[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.ReadServerNameExtensionClient(System.Byte[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.ReadServerNameExtensionServer(System.Byte[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.ReadSignatureAlgorithmsExtension(System.Byte[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.ReadSignatureAlgorithmsCertExtension(System.Byte[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.ReadStatusRequestExtension(System.Byte[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.ReadStatusRequestV2Extension(System.Byte[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.ReadSupportedGroupsExtension(System.Byte[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.ReadSupportedPointFormatsExtension(System.Byte[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.ReadSupportedVersionsExtensionClient(System.Byte[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.ReadSupportedVersionsExtensionServer(System.Byte[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.ReadTruncatedHmacExtension(System.Byte[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.ReadTrustedCAKeysExtensionClient(System.Byte[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.ReadTrustedCAKeysExtensionServer(System.Byte[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsExtensionsUtilities.PatchOpaque16(System.IO.MemoryStream)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.TlsHandshakeHash">
            <summary>Base interface for an object that can calculate a handshake hash.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsHandshakeHash.CopyBufferTo(System.IO.Stream)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.TlsKeyExchange">
            <summary>A generic interface for key exchange implementations in (D)TLS.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsKeyExchange.SkipServerCredentials">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsKeyExchange.ProcessServerCredentials(Org.BouncyCastle2.Tls.TlsCredentials)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsKeyExchange.ProcessServerCertificate(Org.BouncyCastle2.Tls.Certificate)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsKeyExchange.GenerateServerKeyExchange">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsKeyExchange.SkipServerKeyExchange">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsKeyExchange.ProcessServerKeyExchange(System.IO.Stream)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsKeyExchange.SkipClientCredentials">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsKeyExchange.ProcessClientCredentials(Org.BouncyCastle2.Tls.TlsCredentials)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsKeyExchange.ProcessClientCertificate(Org.BouncyCastle2.Tls.Certificate)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsKeyExchange.GenerateClientKeyExchange(System.IO.Stream)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsKeyExchange.ProcessClientKeyExchange(System.IO.Stream)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsKeyExchange.GeneratePreMasterSecret">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.TlsKeyExchangeFactory">
            <summary>Interface for a key exchange factory offering a variety of specific algorithms.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsKeyExchangeFactory.CreateDHKeyExchange(System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsKeyExchangeFactory.CreateDHanonKeyExchangeClient(System.Int32,Org.BouncyCastle2.Tls.TlsDHGroupVerifier)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsKeyExchangeFactory.CreateDHanonKeyExchangeServer(System.Int32,Org.BouncyCastle2.Tls.Crypto.TlsDHConfig)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsKeyExchangeFactory.CreateDheKeyExchangeClient(System.Int32,Org.BouncyCastle2.Tls.TlsDHGroupVerifier)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsKeyExchangeFactory.CreateDheKeyExchangeServer(System.Int32,Org.BouncyCastle2.Tls.Crypto.TlsDHConfig)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsKeyExchangeFactory.CreateECDHKeyExchange(System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsKeyExchangeFactory.CreateECDHanonKeyExchangeClient(System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsKeyExchangeFactory.CreateECDHanonKeyExchangeServer(System.Int32,Org.BouncyCastle2.Tls.Crypto.TlsECConfig)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsKeyExchangeFactory.CreateECDheKeyExchangeClient(System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsKeyExchangeFactory.CreateECDheKeyExchangeServer(System.Int32,Org.BouncyCastle2.Tls.Crypto.TlsECConfig)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsKeyExchangeFactory.CreatePskKeyExchangeClient(System.Int32,Org.BouncyCastle2.Tls.TlsPskIdentity,Org.BouncyCastle2.Tls.TlsDHGroupVerifier)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsKeyExchangeFactory.CreatePskKeyExchangeServer(System.Int32,Org.BouncyCastle2.Tls.TlsPskIdentityManager,Org.BouncyCastle2.Tls.Crypto.TlsDHConfig,Org.BouncyCastle2.Tls.Crypto.TlsECConfig)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsKeyExchangeFactory.CreateRsaKeyExchange(System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsKeyExchangeFactory.CreateSrpKeyExchangeClient(System.Int32,Org.BouncyCastle2.Tls.TlsSrpIdentity,Org.BouncyCastle2.Tls.TlsSrpConfigVerifier)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsKeyExchangeFactory.CreateSrpKeyExchangeServer(System.Int32,Org.BouncyCastle2.Tls.TlsSrpLoginParameters)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.TlsNoCloseNotifyException">
            <summary>This exception will be thrown (only) when the connection is closed by the peer without sending a
            <see cref="F:Org.BouncyCastle2.Tls.AlertDescription.close_notify">close_notify</see> warning alert.</summary>
            <remarks>
            If this happens, the TLS protocol cannot rule out truncation of the connection data (potentially
            malicious). It may be possible to check for truncation via some property of a higher level protocol
            built upon TLS, e.g.the Content-Length header for HTTPS.
            </remarks>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.TlsObjectIdentifiers">
            <summary>Object Identifiers associated with TLS extensions.</summary>
        </member>
        <member name="F:Org.BouncyCastle2.Tls.TlsObjectIdentifiers.id_pe_tlsfeature">
            <summary>RFC 7633</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.TlsPeer">
            <summary>Base interface for a (D)TLS endpoint.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsPeer.Cancel">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsPeer.NotifyHandshakeBeginning">
            <summary>Notifies the peer that a new handshake is about to begin.</summary>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsPeer.GetHandshakeTimeoutMillis">
            <summary>Specify the timeout, in milliseconds, to use for the complete handshake process.</summary>
            <remarks>
            NOTE: Currently only respected by DTLS protocols. Negative values are not allowed. A timeout of zero means
            an infinite timeout (i.e.the handshake will never time out).
            </remarks>
            <returns>the handshake timeout, in milliseconds.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsPeer.RequiresCloseNotify">
            <remarks>
            This option is provided as a last resort for interoperability with TLS peers that fail to correctly send a
            close_notify alert at end of stream. Implementations SHOULD return true; caution is advised if returning
            false without a full understanding of the implications.
            </remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsPeer.RequiresExtendedMasterSecret">
            <remarks>This implementation supports RFC 7627 and will always negotiate the extended_master_secret
            extension where possible. When connecting to a peer that does not offer/accept this extension, it is
            recommended to abort the handshake.This option is provided for interoperability with legacy peers, although
            some TLS features will be disabled in that case (see RFC 7627 5.4).
            </remarks>
            <returns><c>true</c> if the handshake should be aborted when the peer does not negotiate the
            extended_master_secret extension, or <c>false</c> to support legacy interoperability.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsPeer.ShouldUseExtendedPadding">
            <summary>See RFC 5246 6.2.3.2. Controls whether block cipher encryption may randomly add extra padding
            beyond the minimum.</summary>
            <remarks>
            Note that in configurations where this is known to be potential security risk this setting will be ignored
            (and extended padding disabled). Extra padding is always supported when decrypting received records.
            </remarks>
            <returns><c>true</c> if random extra padding should be added during block cipher encryption, or
            <c>false</c> to always use the minimum amount of required padding.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsPeer.ShouldUseGmtUnixTime">
            <summary> draft-mathewson-no-gmtunixtime-00 2. "If existing users of a TLS implementation may rely on
            gmt_unix_time containing the current time, we recommend that implementors MAY provide the ability to set
            gmt_unix_time as an option only, off by default.".</summary>
            <remarks>
            NOTE: For a server that has negotiated TLS 1.3 (or later), or a client that has offered TLS 1.3 (or later),
            this is not called and gmt_unix_time is not used.
            </remarks>
            <returns><c>true</c> if the current time should be used in the gmt_unix_time field of Random, or
            <c>false</c> if gmt_unix_time should contain a cryptographically random value.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsPeer.NotifySecureRenegotiation(System.Boolean)">
            <summary>RFC 5746 3.4/3.6. In case this is false, peers may want to terminate the handshake instead of
            continuing; see Section 4.1/4.3 for discussion.</summary>
            <remarks>
            NOTE: TLS 1.3 forbids renegotiation, so this is never called when TLS 1.3 (or later) was negotiated.
            </remarks>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsPeer.GetKeyExchangeFactory">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsPeer.NotifyAlertRaised(System.Int16,System.Int16,System.String,System.Exception)">
            <summary>This method will be called when an alert is raised by the protocol.</summary>
            <param name="alertLevel"><see cref="T:Org.BouncyCastle2.Tls.AlertLevel"/></param>
            <param name="alertDescription"><see cref="T:Org.BouncyCastle2.Tls.AlertDescription"/></param>
            <param name="message">A human-readable message explaining what caused this alert. May be null.</param>
            <param name="cause">The <see cref="T:System.Exception"/> that caused this alert to be raised. May be null.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsPeer.NotifyAlertReceived(System.Int16,System.Int16)">
            <summary>This method will be called when an alert is received from the remote peer.</summary>
            <param name="alertLevel"><see cref="T:Org.BouncyCastle2.Tls.AlertLevel"/></param>
            <param name="alertDescription"><see cref="T:Org.BouncyCastle2.Tls.AlertDescription"/></param>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsPeer.NotifyHandshakeComplete">
            <summary>Notifies the peer that the handshake has been successfully completed.</summary>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsPeer.GetHeartbeat">
            <summary>Return a <see cref="T:Org.BouncyCastle2.Tls.TlsHeartbeat"/> instance that will control the generation of heartbeats
            locally (if permitted by the remote peer), or null to not generate heartbeats. Heartbeats are described in
            RFC 6520.</summary>
            <returns>an instance of <see cref="T:Org.BouncyCastle2.Tls.TlsHeartbeat"/>.</returns>
            <seealso cref="T:Org.BouncyCastle2.Tls.DefaultTlsHeartbeat"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsPeer.GetHeartbeatPolicy">
            <summary>Return the heartbeat mode applicable to the remote peer. Heartbeats are described in RFC 6520.
            </summary>
            <remarks>
            See enumeration class <see cref="T:Org.BouncyCastle2.Tls.HeartbeatMode"/> for appropriate return values.
            </remarks>
            <returns>the <see cref="T:Org.BouncyCastle2.Tls.HeartbeatMode"/> value.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsProtocol.ResumeHandshake">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsProtocol.CloseConnection">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsProtocol.HandleAlertMessage(System.Int16,System.Int16)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsProtocol.HandleAlertWarningMessage(System.Int16)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsProtocol.HandleChangeCipherSpecMessage">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsProtocol.HandleClose(System.Boolean)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsProtocol.HandleException(System.Int16,System.String,System.Exception)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsProtocol.HandleFailure">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsProtocol.HandleHandshakeMessage(System.Int16,Org.BouncyCastle2.Tls.HandshakeMessageInput)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsProtocol.ApplyMaxFragmentLengthExtension(System.Int16)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsProtocol.CheckReceivedChangeCipherSpec(System.Boolean)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsProtocol.BlockForHandshake">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsProtocol.BeginHandshake">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsProtocol.CompleteHandshake">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsProtocol.ProcessRecord(System.Int16,System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsProtocol.ProcessHandshakeQueue(Org.BouncyCastle2.Tls.ByteQueue)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsProtocol.ProcessAlertQueue">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsProtocol.ProcessChangeCipherSpec(System.Byte[],System.Int32,System.Int32)">
            <summary>This method is called, when a change cipher spec message is received.</summary>
            <exception cref="T:System.IO.IOException">If the message has an invalid content or the handshake is not in the correct
            state.</exception>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsProtocol.ReadApplicationData(System.Byte[],System.Int32,System.Int32)">
            <summary>Read data from the network.</summary>
            <remarks>
            The method will return immediately, if there is still some data left in the buffer, or block until some
            application data has been read from the network.
            </remarks>
            <param name="buf">The buffer where the data will be copied to.</param>
            <param name="off">The position where the data will be placed in the buffer.</param>
            <param name="len">The maximum number of bytes to read.</param>
            <returns>The number of bytes read.</returns>
            <exception cref="T:System.IO.IOException">If something goes wrong during reading data.</exception>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsProtocol.SafePreviewRecordHeader(System.Byte[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsProtocol.SafeReadRecord">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsProtocol.SafeReadFullRecord(System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsProtocol.SafeWriteRecord(System.Int16,System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsProtocol.WriteApplicationData(System.Byte[],System.Int32,System.Int32)">
            <summary>Write some application data.</summary>
            <remarks>
            Fragmentation is handled internally. Usable in both blocking/non-blocking modes.<br/><br/>
            In blocking mode, the output will be automatically sent via the underlying transport. In non-blocking mode,
            call <see cref="M:Org.BouncyCastle2.Tls.TlsProtocol.ReadOutput(System.Byte[],System.Int32,System.Int32)"/> to get the output bytes to send to the peer.<br/><br/>
            This method must not be called until after the initial handshake is complete. Attempting to call it earlier
            will result in an <see cref="T:System.InvalidOperationException"/>.
            </remarks>
            <param name="buf">The buffer containing application data to send.</param>
            <param name="off">The offset at which the application data begins</param>
            <param name="len">The number of bytes of application data.</param>
            <exception cref="T:System.InvalidOperationException">If called before the initial handshake has completed.
            </exception>
            <exception cref="T:System.IO.IOException">If connection is already closed, or for encryption or transport errors.
            </exception>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsProtocol.WriteHandshakeMessage(System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="P:Org.BouncyCastle2.Tls.TlsProtocol.Stream">
            <summary>The secure bidirectional stream for this connection</summary>
            <remarks>Only allowed in blocking mode.</remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsProtocol.CloseInput">
            <summary>Should be called in non-blocking mode when the input data reaches EOF.</summary>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsProtocol.PreviewInputRecord(System.Byte[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsProtocol.PreviewOutputRecord(System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsProtocol.OfferInput(System.Byte[])">
            <summary>Equivalent to <code>OfferInput(input, 0, input.Length)</code>.</summary>
            <param name="input">The input buffer to offer.</param>
            <exception cref="T:System.IO.IOException"/>
            <seealso cref="M:Org.BouncyCastle2.Tls.TlsProtocol.OfferInput(System.Byte[],System.Int32,System.Int32)"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsProtocol.OfferInput(System.Byte[],System.Int32,System.Int32)">
            <summary>Offer input from an arbitrary source.</summary>
            <remarks>Only allowed in non-blocking mode.<br/><br/>
            This method will decrypt and process all records that are fully available. If only part of a record is
            available, the buffer will be retained until the remainder of the record is offered.<br/><br/>
            If any records containing application data were processed, the decrypted data can be obtained using
            <see cref="M:Org.BouncyCastle2.Tls.TlsProtocol.ReadInput(System.Byte[],System.Int32,System.Int32)"/>. If any records containing protocol data were processed, a
            response may have been generated. You should always check to see if there is any available output after
            calling this method by calling <see cref="M:Org.BouncyCastle2.Tls.TlsProtocol.GetAvailableOutputBytes"/>.
            </remarks>
            <param name="input">The input buffer to offer.</param>
            <param name="inputOff">The offset within the input buffer that input begins.</param>
            <param name="inputLen">The number of bytes of input being offered.</param>
            <exception cref="T:System.IO.IOException">If an error occurs while decrypting or processing a record.</exception>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsProtocol.GetAvailableInputBytes">
            <summary>Gets the amount of received application data.</summary>
            <remarks>A call to <see cref="!:readInput(byte[], int, int)"/> is guaranteed to be able to return at least
            this much data.<br/><br/>
            Only allowed in non-blocking mode.
            </remarks>
            <returns>The number of bytes of available application data.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsProtocol.ReadInput(System.Byte[],System.Int32,System.Int32)">
            <summary>Retrieves received application data.</summary>
            <remarks>
            Use <see cref="M:Org.BouncyCastle2.Tls.TlsProtocol.GetAvailableInputBytes"/> to check how much application data is currently available. This
            method functions similarly to <see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)"/>, except that it never blocks. If
            no data is available, nothing will be copied and zero will be returned.<br/><br/>
            Only allowed in non-blocking mode.
            </remarks>
            <param name="buf">The buffer to hold the application data.</param>
            <param name="off">The start offset in the buffer at which the data is written.</param>
            <param name="len">The maximum number of bytes to read.</param>
            <returns>The total number of bytes copied to the buffer. May be less than the length specified if the
            length was greater than the amount of available data.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsProtocol.GetAvailableOutputBytes">
            <summary>Gets the amount of encrypted data available to be sent.</summary>
            <remarks>
            A call to <see cref="M:Org.BouncyCastle2.Tls.TlsProtocol.ReadOutput(System.Byte[],System.Int32,System.Int32)"/> is guaranteed to be able to return at least this much
            data. Only allowed in non-blocking mode.
            </remarks>
            <returns>The number of bytes of available encrypted data.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsProtocol.ReadOutput(System.Byte[],System.Int32,System.Int32)">
            <summary>Retrieves encrypted data to be sent.</summary>
            <remarks>
            Use <see cref="M:Org.BouncyCastle2.Tls.TlsProtocol.GetAvailableOutputBytes"/> to check how much encrypted data is currently available. This
            method functions similarly to <see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)"/>, except that it never blocks. If
            no data is available, nothing will be copied and zero will be returned. Only allowed in non-blocking mode.
            </remarks>
            <param name="buffer">The buffer to hold the encrypted data.</param>
            <param name="offset">The start offset in the buffer at which the data is written.</param>
            <param name="length">The maximum number of bytes to read.</param>
            <returns>The total number of bytes copied to the buffer. May be less than the length specified if the
            length was greater than the amount of available data.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsProtocol.ProcessFinishedMessage(System.IO.MemoryStream)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsProtocol.Process13FinishedMessage(System.IO.MemoryStream)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsProtocol.RaiseAlertFatal(System.Int16,System.String,System.Exception)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsProtocol.RaiseAlertWarning(System.Int16,System.String)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsProtocol.Receive13KeyUpdate(System.IO.MemoryStream)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsProtocol.SendCertificateMessage(Org.BouncyCastle2.Tls.Certificate,System.IO.Stream)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsProtocol.Send13CertificateMessage(Org.BouncyCastle2.Tls.Certificate)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsProtocol.Send13CertificateVerifyMessage(Org.BouncyCastle2.Tls.DigitallySigned)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsProtocol.SendChangeCipherSpec">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsProtocol.SendChangeCipherSpecMessage">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsProtocol.SendFinishedMessage">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsProtocol.Send13FinishedMessage">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsProtocol.Send13KeyUpdate(System.Boolean)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsProtocol.SendSupplementalDataMessage(System.Collections.IList)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsProtocol.ProcessMaxFragmentLengthExtension(System.Collections.IDictionary,System.Collections.IDictionary,System.Int16)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsProtocol.RefuseRenegotiation">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsProtocol.AssertEmpty(System.IO.MemoryStream)">
            <summary>Make sure the <see cref="P:Org.BouncyCastle2.Tls.TlsProtocol.Stream"/> 'buf' is now empty. Fail otherwise.</summary>
            <param name="buf">The <see cref="P:Org.BouncyCastle2.Tls.TlsProtocol.Stream"/> to check.</param>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsProtocol.CreateRenegotiationInfo(System.Byte[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsProtocol.EstablishMasterSecret(Org.BouncyCastle2.Tls.TlsContext,Org.BouncyCastle2.Tls.TlsKeyExchange)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsProtocol.ReadExtensions(System.IO.MemoryStream)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsProtocol.ReadExtensionsData(System.Byte[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsProtocol.ReadExtensionsData13(System.Int32,System.Byte[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsProtocol.ReadExtensionsDataClientHello(System.Byte[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsProtocol.ReadSupplementalDataMessage(System.IO.MemoryStream)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsProtocol.WriteExtensions(System.IO.Stream,System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsProtocol.WriteExtensions(System.IO.Stream,System.Collections.IDictionary,System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsProtocol.WriteExtensionsData(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsProtocol.WriteExtensionsData(System.Collections.IDictionary,System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsProtocol.WriteExtensionsData(System.Collections.IDictionary,System.IO.MemoryStream)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsProtocol.WriteExtensionsData(System.Collections.IDictionary,System.IO.MemoryStream,System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsProtocol.WritePreSharedKeyExtension(System.IO.MemoryStream,System.Collections.IDictionary,System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsProtocol.WriteSelectedExtensions(System.IO.Stream,System.Collections.IDictionary,System.Boolean)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsProtocol.WriteSupplementalData(System.IO.Stream,System.Collections.IList)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.TlsPskIdentity">
            <summary>Processor interface for a PSK identity.</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.TlsPskIdentityManager">
            <summary>Base interface for an object that can process a PSK identity.</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.TlsPskKeyExchange">
            <summary>(D)TLS PSK key exchange (RFC 4279).</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.TlsRsaKeyExchange">
            <summary>(D)TLS RSA key exchange.</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.TlsServer">
            <summary>Interface describing a TLS server endpoint.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsServer.GetSessionToResume(System.Byte[])">
            <summary>Return the specified session, if available.</summary>
            <remarks>
            Note that the peer's certificate chain for the session (if any) may need to be periodically revalidated.
            </remarks>
            <param name="sessionID">the ID of the session to resume.</param>
            <returns>A <see cref="T:Org.BouncyCastle2.Tls.TlsSession"/> with the specified session ID, or null.</returns>
            <seealso cref="P:Org.BouncyCastle2.Tls.SessionParameters.PeerCertificate"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsServer.GetExternalPsk(System.Collections.IList)">
            <summary>Return the <see cref="T:Org.BouncyCastle2.Tls.TlsPskExternal">external PSK</see> to select from the ClientHello.</summary>
            <remarks>
            WARNING: EXPERIMENTAL FEATURE, UNSTABLE API
            Note that this will only be called when TLS 1.3 or higher is amongst the offered protocol versions, and one
            or more PSKs are actually offered.
            </remarks>
            <param name="identities">an <see cref="T:System.Collections.IList"/> of <see cref="T:Org.BouncyCastle2.Tls.PskIdentity"/> instances.</param>
            <returns>The <see cref="T:Org.BouncyCastle2.Tls.TlsPskExternal"/> corresponding to the selected identity, or null to not select
            any.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsServer.NotifyClientVersion(Org.BouncyCastle2.Tls.ProtocolVersion)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsServer.NotifyFallback(System.Boolean)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsServer.NotifyOfferedCipherSuites(System.Int32[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsServer.ProcessClientExtensions(System.Collections.IDictionary)">
            <param name="clientExtensions">(Int32 -> byte[])</param>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsServer.GetServerVersion">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsServer.GetSupportedGroups">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsServer.GetSelectedCipherSuite">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsServer.GetServerExtensions">
            <returns>(Int32 -> byte[])</returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsServer.GetServerExtensionsForConnection(System.Collections.IDictionary)">
            <param name="serverExtensions">(Int32 -> byte[])</param>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsServer.GetServerSupplementalData">
            <returns>(SupplementalDataEntry)</returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsServer.GetCredentials">
            <summary>Return server credentials to use.</summary>
            <remarks>
            The returned value may be null, or else it MUST implement <em>exactly one</em> of
            <see cref="T:Org.BouncyCastle2.Tls.TlsCredentialedAgreement"/>, <see cref="T:Org.BouncyCastle2.Tls.TlsCredentialedDecryptor"/>, or
            <see cref = "T:Org.BouncyCastle2.Tls.TlsCredentialedSigner"/>, depending on the key exchange that was negotiated.
            </remarks>
            <returns>a <see cref="T:Org.BouncyCastle2.Tls.TlsCredentials"/> object or null for anonymous key exchanges.</returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsServer.GetCertificateStatus">
            <remarks>
            This method will be called (only) if the server included an extension of type "status_request" with empty
            "extension_data" in the extended server hello. See <i>RFC 3546 3.6. Certificate Status Request</i>. If a
            non-null <see cref="T:Org.BouncyCastle2.Tls.CertificateStatus"/> is returned, it is sent to the client as a handshake message of
            type "certificate_status".
            </remarks>
            <returns>A <see cref="T:Org.BouncyCastle2.Tls.CertificateStatus"/> to be sent to the client (or null for none).</returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsServer.GetCertificateRequest">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsServer.GetPskIdentityManager">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsServer.GetSrpLoginParameters">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsServer.GetDHConfig">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsServer.GetECDHConfig">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsServer.ProcessClientSupplementalData(System.Collections.IList)">
            <param name="clientSupplementalData">(SupplementalDataEntry)</param>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsServer.NotifyClientCertificate(Org.BouncyCastle2.Tls.Certificate)">
            <summary>Called by the protocol handler to report the client certificate, only if
            <see cref="M:Org.BouncyCastle2.Tls.TlsServer.GetCertificateRequest"/> returned non-null.</summary>
            <remarks>
            Note: this method is responsible for certificate verification and validation.
            </remarks>
            <param name="clientCertificate">the effective client certificate (may be an empty chain).</param>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsServer.GetNewSessionTicket">
            <summary>RFC 5077 3.3. NewSessionTicket Handshake Message.</summary>
            <remarks>
            This method will be called (only) if a NewSessionTicket extension was sent by the server. See <i>RFC 5077
            4. Recommended Ticket Construction</i> for recommended format and protection.
            </remarks>
            <returns>The ticket.</returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.TlsServerCertificate">
            <summary>Server certificate carrier interface.</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.TlsServerContext">
            <summary>Marker interface to distinguish a TLS server context.</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.TlsSession">
            <summary>Base interface for a carrier object for a TLS session.</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.TlsSrpConfigVerifier">
            <summary>Interface for verifying SRP config needs to conform to.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsSrpConfigVerifier.Accept(Org.BouncyCastle2.Tls.Crypto.TlsSrpConfig)">
            <summary>Check whether the given SRP configuration is acceptable for use.</summary>
            <param name="srpConfig">the <see cref="T:Org.BouncyCastle2.Tls.Crypto.TlsSrpConfig"/> to check.</param>
            <returns>true if (and only if) the specified configuration is acceptable.</returns>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.TlsSrpIdentity">
            <summary>Processor interface for an SRP identity.</summary>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.TlsSrpIdentityManager">
            <summary>Base interface for an object that can return login parameters from an SRP identity.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsSrpIdentityManager.GetLoginParameters(System.Byte[])">
            <summary>Lookup the <see cref="T:Org.BouncyCastle2.Tls.TlsSrpLoginParameters"/> corresponding to the specified identity.</summary>
            <remarks>
            NOTE: To avoid "identity probing", unknown identities SHOULD be handled as recommended in RFC 5054 2.5.1.3.
            <see cref="T:Org.BouncyCastle2.Tls.SimulatedTlsSrpIdentityManager"/> is provided for this purpose.
            </remarks>
            <param name="identity">the SRP identity sent by the connecting client.</param>
            <returns>the <see cref="T:Org.BouncyCastle2.Tls.TlsSrpLoginParameters"/> for the specified identity, or else 'simulated' parameters
            if the identity is not recognized. A null value is also allowed, but not recommended.</returns>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.TlsSrpKeyExchange">
            <summary>(D)TLS SRP key exchange (RFC 5054).</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsSrpUtilities.AddSrpExtension(System.Collections.IDictionary,System.Byte[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsSrpUtilities.GetSrpExtension(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsSrpUtilities.CreateSrpExtension(System.Byte[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsSrpUtilities.ReadSrpExtension(System.Byte[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsSrpUtilities.ReadSrpParameter(System.IO.Stream)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsSrpUtilities.WriteSrpParameter(Org.BouncyCastle2.Math.BigInteger,System.IO.Stream)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsUtilities.ReadDerObject(System.Byte[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsUtilities.RequireDerEncoding(Org.BouncyCastle2.Asn1.Asn1Encodable,System.Byte[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsUtilities.EncodeSupportedSignatureAlgorithms(System.Collections.IList,System.IO.Stream)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsUtilities.ParseSupportedSignatureAlgorithms(System.IO.Stream)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsUtilities.VerifySupportedSignatureAlgorithm(System.Collections.IList,Org.BouncyCastle2.Tls.SignatureAndHashAlgorithm)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsUtilities.ContainsSignatureAlgorithm(System.Collections.IList,Org.BouncyCastle2.Tls.SignatureAndHashAlgorithm)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsUtilities.CalculateEndPointHash(Org.BouncyCastle2.Tls.TlsContext,Org.BouncyCastle2.Tls.Crypto.TlsCertificate,System.Byte[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsUtilities.CalculateEndPointHash(Org.BouncyCastle2.Tls.TlsContext,Org.BouncyCastle2.Tls.Crypto.TlsCertificate,System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsUtilities.GenerateServerKeyExchangeSignature(Org.BouncyCastle2.Tls.TlsContext,Org.BouncyCastle2.Tls.TlsCredentialedSigner,System.Byte[],Org.BouncyCastle2.Tls.DigestInputBuffer)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsUtilities.VerifyServerKeyExchangeSignature(Org.BouncyCastle2.Tls.TlsContext,System.IO.Stream,Org.BouncyCastle2.Tls.Crypto.TlsCertificate,System.Byte[],Org.BouncyCastle2.Tls.DigestInputBuffer)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsUtilities.IsAeadCipherSuite(System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsUtilities.IsBlockCipherSuite(System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsUtilities.IsStreamCipherSuite(System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsUtilities.IsValidCipherSuiteForSignatureAlgorithms(System.Int32,System.Collections.IList)">
            <returns>Whether a server can select the specified cipher suite given the available signature algorithms
            for ServerKeyExchange.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsUtilities.ChooseSignatureAndHashAlgorithm(Org.BouncyCastle2.Tls.TlsContext,System.Collections.IList,System.Int16)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsUtilities.ChooseSignatureAndHashAlgorithm(Org.BouncyCastle2.Tls.ProtocolVersion,System.Collections.IList,System.Int16)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsUtilities.CreateKeyExchangeClient(Org.BouncyCastle2.Tls.TlsClient,System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsUtilities.CreateKeyExchangeServer(Org.BouncyCastle2.Tls.TlsServer,System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsUtilities.InitKeyExchangeClient(Org.BouncyCastle2.Tls.TlsClientContext,Org.BouncyCastle2.Tls.TlsClient)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsUtilities.InitKeyExchangeServer(Org.BouncyCastle2.Tls.TlsServerContext,Org.BouncyCastle2.Tls.TlsServer)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsUtilities.CheckPeerSigAlgs(Org.BouncyCastle2.Tls.TlsContext,Org.BouncyCastle2.Tls.Crypto.TlsCertificate[])">
            <summary>Check the signature algorithm for certificates in the peer's CertPath as specified in RFC 5246
            7.4.2, 7.4.4, 7.4.6 and similar rules for earlier TLS versions.</summary>
            <remarks>
            The supplied CertPath should include the trust anchor (its signature algorithm isn't checked, but in the
            general case checking a certificate requires the issuer certificate).
            </remarks>
            <exception cref="T:System.IO.IOException">if any certificate in the CertPath (excepting the trust anchor) has a
            signature algorithm that is not one of the locally supported signature algorithms.</exception>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsUtilities.RequireAgreementCredentials(Org.BouncyCastle2.Tls.TlsCredentials)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsUtilities.RequireDecryptorCredentials(Org.BouncyCastle2.Tls.TlsCredentials)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsUtilities.RequireSignerCredentials(Org.BouncyCastle2.Tls.TlsCredentials)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsUtilities.CheckExtensionData13(System.Collections.IDictionary,System.Int32,System.Int16)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsUtilities.GenerateEncryptedPreMasterSecret(Org.BouncyCastle2.Tls.TlsContext,Org.BouncyCastle2.Tls.Crypto.TlsEncryptor,System.IO.Stream)">
            <summary>Generate a pre_master_secret and send it encrypted to the server.</summary>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsUtilities.AddPreSharedKeyToClientExtensions(Org.BouncyCastle2.Tls.TlsPsk[],System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsUtilities.AddPreSharedKeyToClientHello(Org.BouncyCastle2.Tls.TlsClientContext,Org.BouncyCastle2.Tls.TlsClient,System.Collections.IDictionary,System.Int32[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsUtilities.AddPreSharedKeyToClientHelloRetry(Org.BouncyCastle2.Tls.TlsClientContext,Org.BouncyCastle2.Tls.OfferedPsks.BindersConfig,System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TlsUtilities.GetPskExternalsClient(Org.BouncyCastle2.Tls.TlsClient,System.Int32[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TrustedAuthority.Encode(System.IO.Stream)">
            <summary>Encode this <see cref="T:Org.BouncyCastle2.Tls.TrustedAuthority"/> to a <see cref="T:System.IO.Stream"/>.</summary>
            <param name="output">the <see cref="T:System.IO.Stream"/> to encode to.</param>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.TrustedAuthority.Parse(System.IO.Stream)">
            <summary>Parse a <see cref="T:Org.BouncyCastle2.Tls.TrustedAuthority"/> from a <see cref="T:System.IO.Stream"/>.</summary>
            <param name="input">the <see cref="T:System.IO.Stream"/> to parse from.</param>
            <returns>a <see cref="T:Org.BouncyCastle2.Tls.TrustedAuthority"/> object.</returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="T:Org.BouncyCastle2.Tls.UrlAndHash">
            <summary>RFC 6066 5.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.UrlAndHash.Encode(System.IO.Stream)">
            <summary>Encode this <see cref="T:Org.BouncyCastle2.Tls.UrlAndHash"/> to a <see cref="T:System.IO.Stream"/>.</summary>
            <param name="output">the <see cref="T:System.IO.Stream"/> to encode to.</param>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Org.BouncyCastle2.Tls.UrlAndHash.Parse(Org.BouncyCastle2.Tls.TlsContext,System.IO.Stream)">
            <summary>Parse a <see cref="T:Org.BouncyCastle2.Tls.UrlAndHash"/> from a <see cref="T:System.IO.Stream"/>.</summary>
            <param name="context">the <see cref="T:Org.BouncyCastle2.Tls.TlsContext"/> of the current connection.</param>
            <param name="input">the <see cref="T:System.IO.Stream"/> to parse from.</param>
            <returns>a <see cref="T:Org.BouncyCastle2.Tls.UrlAndHash"/> object.</returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="T:Org.BouncyCastle2.Tsp.TimeStampRequest">
            Base class for an RFC 3161 Time Stamp Request.
        </member>
        <member name="M:Org.BouncyCastle2.Tsp.TimeStampRequest.#ctor(System.Byte[])">
             Create a TimeStampRequest from the past in byte array.
            
             @param req byte array containing the request.
             @throws IOException if the request is malformed.
        </member>
        <member name="M:Org.BouncyCastle2.Tsp.TimeStampRequest.#ctor(System.IO.Stream)">
             Create a TimeStampRequest from the past in input stream.
            
             @param in input stream containing the request.
             @throws IOException if the request is malformed.
        </member>
        <member name="M:Org.BouncyCastle2.Tsp.TimeStampRequest.Validate(System.Collections.IList,System.Collections.IList,System.Collections.IList)">
             Validate the timestamp request, checking the digest to see if it is of an
             accepted type and whether it is of the correct length for the algorithm specified.
            
             @param algorithms a set of string OIDS giving accepted algorithms.
             @param policies if non-null a set of policies we are willing to sign under.
             @param extensions if non-null a set of extensions we are willing to accept.
             @throws TspException if the request is invalid, or processing fails.
        </member>
        <member name="M:Org.BouncyCastle2.Tsp.TimeStampRequest.GetEncoded">
            return the ASN.1 encoded representation of this object.
        </member>
        <member name="M:Org.BouncyCastle2.Tsp.TimeStampToken.Validate(Org.BouncyCastle2.X509.X509Certificate)">
            Validate the time stamp token.
            <p>
            To be valid the token must be signed by the passed in certificate and
            the certificate must be the one referred to by the SigningCertificate
            attribute included in the hashed attributes of the token. The
            certificate must also have the ExtendedKeyUsageExtension with only
            KeyPurposeID.IdKPTimeStamping and have been valid at the time the
            timestamp was created.
            </p>
            <p>
            A successful call to validate means all the above are true.
            </p>
        </member>
        <member name="M:Org.BouncyCastle2.Tsp.TimeStampToken.ToCmsSignedData">
             Return the underlying CmsSignedData object.
            
             @return the underlying CMS structure.
        </member>
        <member name="M:Org.BouncyCastle2.Tsp.TimeStampToken.GetEncoded">
             Return a ASN.1 encoded byte stream representing the encoded object.
            
             @throws IOException if encoding fails.
        </member>
        <member name="M:Org.BouncyCastle2.Tsp.TimeStampToken.GetEncoded(System.String)">
             return the ASN.1 encoded representation of this object using the specified encoding.
            
             @param encoding the ASN.1 encoding format to use ("BER" or "DER").
        </member>
        <member name="P:Org.BouncyCastle2.Tsp.TimeStampTokenInfo.Nonce">
            @return the nonce value, null if there isn't one.
        </member>
        <member name="M:Org.BouncyCastle2.Tsp.TspUtil.GetSignatureTimestamps(Org.BouncyCastle2.Cms.SignerInformation)">
             Fetches the signature time-stamp attributes from a SignerInformation object.
             Checks that the MessageImprint for each time-stamp matches the signature field.
             (see RFC 3161 Appendix A).
            
             @param signerInfo a SignerInformation to search for time-stamps
             @return a collection of TimeStampToken objects
             @throws TSPValidationException
        </member>
        <member name="M:Org.BouncyCastle2.Tsp.TspUtil.ValidateCertificate(Org.BouncyCastle2.X509.X509Certificate)">
             Validate the passed in certificate as being of the correct type to be used
             for time stamping. To be valid it must have an ExtendedKeyUsage extension
             which has a key purpose identifier of id-kp-timeStamping.
            
             @param cert the certificate of interest.
             @throws TspValidationException if the certicate fails on one of the check points.
        </member>
        <member name="M:Org.BouncyCastle2.Tsp.TspUtil.GetDigestAlgName(System.String)">
            <summary>
            Return the digest algorithm using one of the standard JCA string
            representations rather than the algorithm identifier (if possible).
            </summary>
        </member>
        <member name="T:Org.BouncyCastle2.Tsp.TspValidationException">
            Exception thrown if a TSP request or response fails to validate.
            <p>
            If a failure code is associated with the exception it can be retrieved using
            the getFailureCode() method.</p>
        </member>
        <member name="P:Org.BouncyCastle2.Tsp.TspValidationException.FailureCode">
             Return the failure code associated with this exception - if one is set.
            
             @return the failure code if set, -1 otherwise.
        </member>
        <member name="T:Org.BouncyCastle2.Utilities.Arrays">
            <summary> General array utilities.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.Utilities.Arrays.AreEqual(System.Byte[],System.Byte[])">
            <summary>
            Are two arrays equal.
            </summary>
            <param name="a">Left side.</param>
            <param name="b">Right side.</param>
            <returns>True if equal.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Utilities.Arrays.ConstantTimeAreEqual(System.Byte[],System.Byte[])">
            <summary>
            A constant time equals comparison - does not terminate early if
            test will fail.
            </summary>
            <param name="a">first array</param>
            <param name="b">second array</param>
            <returns>true if arrays equal, false otherwise.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Utilities.Arrays.CopyOfRange(System.Byte[],System.Int32,System.Int32)">
             Make a copy of a range of bytes from the passed in data array. The range can
             extend beyond the end of the input array, in which case the return array will
             be padded with zeroes.
            
             @param data the array from which the data is to be copied.
             @param from the start index at which the copying should take place.
             @param to the final index of the range (exclusive).
            
             @return a new byte array containing the range given.
        </member>
        <member name="T:Org.BouncyCastle2.Utilities.BigIntegers">
            BigInteger utilities.
        </member>
        <member name="M:Org.BouncyCastle2.Utilities.BigIntegers.AsUnsignedByteArray(Org.BouncyCastle2.Math.BigInteger)">
             Return the passed in value as an unsigned byte array.
            
             @param value the value to be converted.
             @return a byte array without a leading zero byte if present in the signed encoding.
        </member>
        <member name="M:Org.BouncyCastle2.Utilities.BigIntegers.AsUnsignedByteArray(System.Int32,Org.BouncyCastle2.Math.BigInteger)">
            Return the passed in value as an unsigned byte array of the specified length, padded with
            leading zeros as necessary.
            @param length the fixed length of the result.
            @param n the value to be converted.
            @return a byte array padded to a fixed length with leading zeros.
        </member>
        <member name="M:Org.BouncyCastle2.Utilities.BigIntegers.AsUnsignedByteArray(Org.BouncyCastle2.Math.BigInteger,System.Byte[],System.Int32,System.Int32)">
             Write the passed in value as unsigned bytes to the specified buffer range, padded with
             leading zeros as necessary.
            
             @param value
                        the value to be converted.
             @param buf
                        the buffer to which the value is written.
             @param off
                        the start offset in array <code>buf</code> at which the data is written.
             @param len
                        the fixed length of data written (possibly padded with leading zeros).
        </member>
        <member name="M:Org.BouncyCastle2.Utilities.BigIntegers.CreateRandomBigInteger(System.Int32,Org.BouncyCastle2.Security.SecureRandom)">
            <summary>
            Creates a Random BigInteger from the secure random of a given bit length.
            </summary>
            <param name="bitLength"></param>
            <param name="secureRandom"></param>
            <returns></returns>
        </member>
        <member name="M:Org.BouncyCastle2.Utilities.BigIntegers.CreateRandomInRange(Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Math.BigInteger,Org.BouncyCastle2.Security.SecureRandom)">
            Return a random BigInteger not less than 'min' and not greater than 'max'
            
            @param min the least value that may be generated
            @param max the greatest value that may be generated
            @param random the source of randomness
            @return a random BigInteger value in the range [min,max]
        </member>
        <member name="M:Org.BouncyCastle2.Utilities.Date.DateTimeUtilities.DateTimeToUnixMs(System.DateTime)">
            <summary>
            Return the number of milliseconds since the Unix epoch (1 Jan., 1970 UTC) for a given DateTime value.
            </summary>
            <param name="dateTime">A UTC DateTime value not before epoch.</param>
            <returns>Number of whole milliseconds after epoch.</returns>
            <exception cref="T:System.ArgumentException">'dateTime' is before epoch.</exception>
        </member>
        <member name="M:Org.BouncyCastle2.Utilities.Date.DateTimeUtilities.UnixMsToDateTime(System.Int64)">
            <summary>
            Create a DateTime value from the number of milliseconds since the Unix epoch (1 Jan., 1970 UTC).
            </summary>
            <param name="unixMs">Number of milliseconds since the epoch.</param>
            <returns>A UTC DateTime value</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Utilities.Date.DateTimeUtilities.CurrentUnixMs">
            <summary>
            Return the current number of milliseconds since the Unix epoch (1 Jan., 1970 UTC).
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Utilities.Encoders.Base64.Encode(System.Byte[])">
             encode the input data producing a base 64 encoded byte array.
            
             @return a byte array containing the base 64 encoded data.
        </member>
        <member name="M:Org.BouncyCastle2.Utilities.Encoders.Base64.Encode(System.Byte[],System.Int32,System.Int32)">
             encode the input data producing a base 64 encoded byte array.
            
             @return a byte array containing the base 64 encoded data.
        </member>
        <member name="M:Org.BouncyCastle2.Utilities.Encoders.Base64.Encode(System.Byte[],System.IO.Stream)">
             Encode the byte data to base 64 writing it to the given output stream.
            
             @return the number of bytes produced.
        </member>
        <member name="M:Org.BouncyCastle2.Utilities.Encoders.Base64.Encode(System.Byte[],System.Int32,System.Int32,System.IO.Stream)">
             Encode the byte data to base 64 writing it to the given output stream.
            
             @return the number of bytes produced.
        </member>
        <member name="M:Org.BouncyCastle2.Utilities.Encoders.Base64.Decode(System.Byte[])">
             decode the base 64 encoded input data. It is assumed the input data is valid.
            
             @return a byte array representing the decoded data.
        </member>
        <member name="M:Org.BouncyCastle2.Utilities.Encoders.Base64.Decode(System.String)">
             decode the base 64 encoded string data - whitespace will be ignored.
            
             @return a byte array representing the decoded data.
        </member>
        <member name="M:Org.BouncyCastle2.Utilities.Encoders.Base64.Decode(System.String,System.IO.Stream)">
             decode the base 64 encoded string data writing it to the given output stream,
             whitespace characters will be ignored.
            
             @return the number of bytes produced.
        </member>
        <member name="T:Org.BouncyCastle2.Utilities.Encoders.BufferedDecoder">
            <summary>
             A buffering class to allow translation from one format to another to
                be done in discrete chunks.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Utilities.Encoders.BufferedDecoder.#ctor(Org.BouncyCastle2.Utilities.Encoders.ITranslator,System.Int32)">
            <summary>
            Create a buffered Decoder.
            </summary>
            <param name="translator">The translater to use.</param>
            <param name="bufferSize">The size of the buffer.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Utilities.Encoders.BufferedDecoder.ProcessByte(System.Byte,System.Byte[],System.Int32)">
            <summary>
            Process one byte of data.
            </summary>
            <param name="input">Data in.</param>
            <param name="output">Byte array for the output.</param>
            <param name="outOff">The offset in the output byte array to start writing from.</param>
            <returns>The amount of output bytes.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.Utilities.Encoders.BufferedDecoder.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Process data from a byte array.
            </summary>
            <param name="input">The input data.</param>
            <param name="inOff">Start position within input data array.</param>
            <param name="len">Amount of data to process from input data array.</param>
            <param name="outBytes">Array to store output.</param>
            <param name="outOff">Position in output array to start writing from.</param>
            <returns>The amount of output bytes.</returns>
        </member>
        <member name="T:Org.BouncyCastle2.Utilities.Encoders.BufferedEncoder">
            <summary>
            A class that allows encoding of data using a specific encoder to be processed in chunks.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Utilities.Encoders.BufferedEncoder.#ctor(Org.BouncyCastle2.Utilities.Encoders.ITranslator,System.Int32)">
            <summary>
            Create.
            </summary>
            <param name="translator">The translator to use.</param>
            <param name="bufferSize">Size of the chunks.</param>
        </member>
        <member name="M:Org.BouncyCastle2.Utilities.Encoders.BufferedEncoder.ProcessByte(System.Byte,System.Byte[],System.Int32)">
            <summary>
            Process one byte of data.
            </summary>
            <param name="input">The byte.</param>
            <param name="outBytes">An array to store output in.</param>
            <param name="outOff">Offset within output array to start writing from.</param>
            <returns></returns>
        </member>
        <member name="M:Org.BouncyCastle2.Utilities.Encoders.BufferedEncoder.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Process data from a byte array.
            </summary>
            <param name="input">Input data Byte array containing data to be processed.</param>
            <param name="inOff">Start position within input data array.</param>
            <param name="len">Amount of input data to be processed.</param>
            <param name="outBytes">Output data array.</param>
            <param name="outOff">Offset within output data array to start writing to.</param>
            <returns>The amount of data written.</returns>
        </member>
        <member name="T:Org.BouncyCastle2.Utilities.Encoders.Hex">
            <summary>
            Class to decode and encode Hex.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Utilities.Encoders.Hex.Encode(System.Byte[])">
             encode the input data producing a Hex encoded byte array.
            
             @return a byte array containing the Hex encoded data.
        </member>
        <member name="M:Org.BouncyCastle2.Utilities.Encoders.Hex.Encode(System.Byte[],System.Int32,System.Int32)">
             encode the input data producing a Hex encoded byte array.
            
             @return a byte array containing the Hex encoded data.
        </member>
        <member name="M:Org.BouncyCastle2.Utilities.Encoders.Hex.Encode(System.Byte[],System.IO.Stream)">
             Hex encode the byte data writing it to the given output stream.
            
             @return the number of bytes produced.
        </member>
        <member name="M:Org.BouncyCastle2.Utilities.Encoders.Hex.Encode(System.Byte[],System.Int32,System.Int32,System.IO.Stream)">
             Hex encode the byte data writing it to the given output stream.
            
             @return the number of bytes produced.
        </member>
        <member name="M:Org.BouncyCastle2.Utilities.Encoders.Hex.Decode(System.Byte[])">
             decode the Hex encoded input data. It is assumed the input data is valid.
            
             @return a byte array representing the decoded data.
        </member>
        <member name="M:Org.BouncyCastle2.Utilities.Encoders.Hex.Decode(System.String)">
             decode the Hex encoded string data - whitespace will be ignored.
            
             @return a byte array representing the decoded data.
        </member>
        <member name="M:Org.BouncyCastle2.Utilities.Encoders.Hex.Decode(System.String,System.IO.Stream)">
             decode the Hex encoded string data writing it to the given output stream,
             whitespace characters will be ignored.
            
             @return the number of bytes produced.
        </member>
        <member name="M:Org.BouncyCastle2.Utilities.Encoders.Hex.DecodeStrict(System.String)">
             Decode the hexadecimal-encoded string strictly i.e. any non-hexadecimal characters will be
             considered an error.
            
             @return a byte array representing the decoded data.
        </member>
        <member name="M:Org.BouncyCastle2.Utilities.Encoders.Hex.DecodeStrict(System.String,System.Int32,System.Int32)">
             Decode the hexadecimal-encoded string strictly i.e. any non-hexadecimal characters will be
             considered an error.
            
             @return a byte array representing the decoded data.
        </member>
        <member name="M:Org.BouncyCastle2.Utilities.Encoders.HexEncoder.Encode(System.Byte[],System.Int32,System.Int32,System.IO.Stream)">
             encode the input data producing a Hex output stream.
            
             @return the number of bytes produced.
        </member>
        <member name="M:Org.BouncyCastle2.Utilities.Encoders.HexEncoder.Decode(System.Byte[],System.Int32,System.Int32,System.IO.Stream)">
             decode the Hex encoded byte data writing it to the given output stream,
             whitespace characters will be ignored.
            
             @return the number of bytes produced.
        </member>
        <member name="M:Org.BouncyCastle2.Utilities.Encoders.HexEncoder.DecodeString(System.String,System.IO.Stream)">
             decode the Hex encoded string data writing it to the given output stream,
             whitespace characters will be ignored.
            
             @return the number of bytes produced.
        </member>
        <member name="T:Org.BouncyCastle2.Utilities.Encoders.IEncoder">
            Encode and decode byte arrays (typically from binary to 7-bit ASCII
            encodings).
        </member>
        <member name="T:Org.BouncyCastle2.Utilities.Encoders.ITranslator">
            <summary>
            Translator interface.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.Utilities.IMemoable.Copy">
            <summary>
            Produce a copy of this object with its configuration and in its current state.
            </summary>
            <remarks>
            The returned object may be used simply to store the state, or may be used as a similar object
            starting from the copied state.
            </remarks>
        </member>
        <member name="M:Org.BouncyCastle2.Utilities.IMemoable.Reset(Org.BouncyCastle2.Utilities.IMemoable)">
            <summary>
            Restore a copied object state into this object.
            </summary>
            <remarks>
            Implementations of this method <em>should</em> try to avoid or minimise memory allocation to perform the reset.
            </remarks>
            <param name="other">an object originally {@link #copy() copied} from an object of the same type as this instance.</param>
            <exception cref="T:System.InvalidCastException">if the provided object is not of the correct type.</exception>
            <exception cref="T:Org.BouncyCastle2.Utilities.MemoableResetException">if the <b>other</b> parameter is in some other way invalid.</exception>
        </member>
        <member name="M:Org.BouncyCastle2.Utilities.IO.Pem.PemObjectGenerator.Generate">
            <returns>
            A <see cref="T:Org.BouncyCastle2.Utilities.IO.Pem.PemObject"/>
            </returns>
            <exception cref="T:Org.BouncyCastle2.Utilities.IO.Pem.PemGenerationException"></exception>
        </member>
        <member name="T:Org.BouncyCastle2.Utilities.IO.Pem.PemWriter">
            A generic PEM writer, based on RFC 1421
        </member>
        <member name="M:Org.BouncyCastle2.Utilities.IO.Pem.PemWriter.#ctor(System.IO.TextWriter)">
             Base constructor.
            
             @param out output stream to use.
        </member>
        <member name="M:Org.BouncyCastle2.Utilities.IO.Pem.PemWriter.GetOutputSize(Org.BouncyCastle2.Utilities.IO.Pem.PemObject)">
             Return the number of bytes or characters required to contain the
             passed in object if it is PEM encoded.
            
             @param obj pem object to be output
             @return an estimate of the number of bytes
        </member>
        <member name="M:Org.BouncyCastle2.Utilities.IO.Streams.PipeAll(System.IO.Stream,System.IO.Stream)">
            <summary>Write the full contents of inStr to the destination stream outStr.</summary>
            <param name="inStr">Source stream.</param>
            <param name="outStr">Destination stream.</param>
            <exception cref="T:System.IO.IOException">In case of IO failure.</exception>
        </member>
        <member name="M:Org.BouncyCastle2.Utilities.IO.Streams.PipeAll(System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>Write the full contents of inStr to the destination stream outStr.</summary>
            <param name="inStr">Source stream.</param>
            <param name="outStr">Destination stream.</param>
            <param name="bufferSize">The size of temporary buffer to use.</param>
            <exception cref="T:System.IO.IOException">In case of IO failure.</exception>
        </member>
        <member name="M:Org.BouncyCastle2.Utilities.IO.Streams.PipeAllLimited(System.IO.Stream,System.Int64,System.IO.Stream)">
            <summary>
            Pipe all bytes from <c>inStr</c> to <c>outStr</c>, throwing <c>StreamFlowException</c> if greater
            than <c>limit</c> bytes in <c>inStr</c>.
            </summary>
            <param name="inStr">
            A <see cref="T:System.IO.Stream"/>
            </param>
            <param name="limit">
            A <see cref="T:System.Int64"/>
            </param>
            <param name="outStr">
            A <see cref="T:System.IO.Stream"/>
            </param>
            <returns>The number of bytes actually transferred, if not greater than <c>limit</c></returns>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Utilities.IO.Streams.WriteBufTo(System.IO.MemoryStream,System.IO.Stream)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Org.BouncyCastle2.Utilities.IO.Streams.WriteBufTo(System.IO.MemoryStream,System.Byte[],System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="T:Org.BouncyCastle2.Utilities.MemoableResetException">
            Exception to be thrown on a failure to reset an object implementing Memoable.
            <p>
            The exception extends InvalidCastException to enable users to have a single handling case,
            only introducing specific handling of this one if required.
            </p>
        </member>
        <member name="M:Org.BouncyCastle2.Utilities.MemoableResetException.#ctor(System.String)">
             Basic Constructor.
            
             @param msg message to be associated with this exception.
        </member>
        <member name="M:Org.BouncyCastle2.Utilities.Net.IPAddress.IsValid(System.String)">
             Validate the given IPv4 or IPv6 address.
            
             @param address the IP address as a string.
            
             @return true if a valid address, false otherwise
        </member>
        <member name="M:Org.BouncyCastle2.Utilities.Net.IPAddress.IsValidWithNetMask(System.String)">
             Validate the given IPv4 or IPv6 address and netmask.
            
             @param address the IP address as a string.
            
             @return true if a valid address with netmask, false otherwise
        </member>
        <member name="M:Org.BouncyCastle2.Utilities.Net.IPAddress.IsValidIPv4(System.String)">
             Validate the given IPv4 address.
             
             @param address the IP address as a string.
            
             @return true if a valid IPv4 address, false otherwise
        </member>
        <member name="M:Org.BouncyCastle2.Utilities.Net.IPAddress.IsValidIPv6(System.String)">
             Validate the given IPv6 address.
            
             @param address the IP address as a string.
            
             @return true if a valid IPv4 address, false otherwise
        </member>
        <member name="T:Org.BouncyCastle2.Utilities.Strings">
            <summary> General string utilities.</summary>
        </member>
        <member name="T:Org.BouncyCastle2.X509.AttributeCertificateHolder">
            <remarks>
            The Holder object.
            <pre>
            Holder ::= SEQUENCE {
            	baseCertificateID   [0] IssuerSerial OPTIONAL,
            		-- the issuer and serial number of
            		-- the holder's Public Key Certificate
            	entityName          [1] GeneralNames OPTIONAL,
            		-- the name of the claimant or role
            	objectDigestInfo    [2] ObjectDigestInfo OPTIONAL
            		-- used to directly authenticate the holder,
            		-- for example, an executable
            }
            </pre>
            </remarks>
        </member>
        <member name="M:Org.BouncyCastle2.X509.AttributeCertificateHolder.#ctor(System.Int32,System.String,System.String,System.Byte[])">
             Constructs a holder for v2 attribute certificates with a hash value for
             some type of object.
             <p>
             <code>digestedObjectType</code> can be one of the following:
             <ul>
             <li>0 - publicKey - A hash of the public key of the holder must be
             passed.</li>
             <li>1 - publicKeyCert - A hash of the public key certificate of the
             holder must be passed.</li>
             <li>2 - otherObjectDigest - A hash of some other object type must be
             passed. <code>otherObjectTypeID</code> must not be empty.</li>
             </ul>
             </p>
             <p>This cannot be used if a v1 attribute certificate is used.</p>
            
             @param digestedObjectType The digest object type.
             @param digestAlgorithm The algorithm identifier for the hash.
             @param otherObjectTypeID The object type ID if
                        <code>digestedObjectType</code> is
                        <code>otherObjectDigest</code>.
             @param objectDigest The hash value.
        </member>
        <member name="P:Org.BouncyCastle2.X509.AttributeCertificateHolder.DigestedObjectType">
             Returns the digest object type if an object digest info is used.
             <p>
             <ul>
             <li>0 - publicKey - A hash of the public key of the holder must be
             passed.</li>
             <li>1 - publicKeyCert - A hash of the public key certificate of the
             holder must be passed.</li>
             <li>2 - otherObjectDigest - A hash of some other object type must be
             passed. <code>otherObjectTypeID</code> must not be empty.</li>
             </ul>
             </p>
            
             @return The digest object type or -1 if no object digest info is set.
        </member>
        <member name="P:Org.BouncyCastle2.X509.AttributeCertificateHolder.DigestAlgorithm">
             Returns the other object type ID if an object digest info is used.
            
             @return The other object type ID or <code>null</code> if no object
                     digest info is set.
        </member>
        <member name="M:Org.BouncyCastle2.X509.AttributeCertificateHolder.GetObjectDigest">
             Returns the hash if an object digest info is used.
            
             @return The hash or <code>null</code> if no object digest info is set.
        </member>
        <member name="P:Org.BouncyCastle2.X509.AttributeCertificateHolder.OtherObjectTypeID">
             Returns the digest algorithm ID if an object digest info is used.
            
             @return The digest algorithm ID or <code>null</code> if no object
                     digest info is set.
        </member>
        <member name="M:Org.BouncyCastle2.X509.AttributeCertificateHolder.GetEntityNames">
             Return any principal objects inside the attribute certificate holder entity names field.
            
             @return an array of IPrincipal objects (usually X509Name), null if no entity names field is set.
        </member>
        <member name="M:Org.BouncyCastle2.X509.AttributeCertificateHolder.GetIssuer">
             Return the principals associated with the issuer attached to this holder
            
             @return an array of principals, null if no BaseCertificateID is set.
        </member>
        <member name="P:Org.BouncyCastle2.X509.AttributeCertificateHolder.SerialNumber">
             Return the serial number associated with the issuer attached to this holder.
            
             @return the certificate serial number, null if no BaseCertificateID is set.
        </member>
        <member name="T:Org.BouncyCastle2.X509.AttributeCertificateIssuer">
            Carrying class for an attribute certificate issuer.
        </member>
        <member name="M:Org.BouncyCastle2.X509.AttributeCertificateIssuer.#ctor(Org.BouncyCastle2.Asn1.X509.AttCertIssuer)">
             Set the issuer directly with the ASN.1 structure.
            
             @param issuer The issuer
        </member>
        <member name="M:Org.BouncyCastle2.X509.AttributeCertificateIssuer.GetPrincipals">
            <summary>Return any principal objects inside the attribute certificate issuer object.</summary>
            <returns>An array of IPrincipal objects (usually X509Principal).</returns>
        </member>
        <member name="T:Org.BouncyCastle2.X509.IX509AttributeCertificate">
            <remarks>Interface for an X.509 Attribute Certificate.</remarks>
        </member>
        <member name="P:Org.BouncyCastle2.X509.IX509AttributeCertificate.Version">
            <summary>The version number for the certificate.</summary>
        </member>
        <member name="P:Org.BouncyCastle2.X509.IX509AttributeCertificate.SerialNumber">
            <summary>The serial number for the certificate.</summary>
        </member>
        <member name="P:Org.BouncyCastle2.X509.IX509AttributeCertificate.NotBefore">
            <summary>The UTC DateTime before which the certificate is not valid.</summary>
        </member>
        <member name="P:Org.BouncyCastle2.X509.IX509AttributeCertificate.NotAfter">
            <summary>The UTC DateTime after which the certificate is not valid.</summary>
        </member>
        <member name="P:Org.BouncyCastle2.X509.IX509AttributeCertificate.Holder">
            <summary>The holder of the certificate.</summary>
        </member>
        <member name="P:Org.BouncyCastle2.X509.IX509AttributeCertificate.Issuer">
            <summary>The issuer details for the certificate.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.X509.IX509AttributeCertificate.GetAttributes">
            <summary>Return the attributes contained in the attribute block in the certificate.</summary>
            <returns>An array of attributes.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.X509.IX509AttributeCertificate.GetAttributes(System.String)">
            <summary>Return the attributes with the same type as the passed in oid.</summary>
            <param name="oid">The object identifier we wish to match.</param>
            <returns>An array of matched attributes, null if there is no match.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.X509.IX509AttributeCertificate.GetEncoded">
            <summary>Return an ASN.1 encoded byte array representing the attribute certificate.</summary>
            <returns>An ASN.1 encoded byte array.</returns>
            <exception cref="T:System.IO.IOException">If the certificate cannot be encoded.</exception>
        </member>
        <member name="M:Org.BouncyCastle2.X509.IX509Extension.GetCriticalExtensionOids">
            <summary>
            Get all critical extension values, by oid
            </summary>
            <returns>IDictionary with string (OID) keys and Asn1OctetString values</returns>
        </member>
        <member name="M:Org.BouncyCastle2.X509.IX509Extension.GetNonCriticalExtensionOids">
            <summary>
            Get all non-critical extension values, by oid
            </summary>
            <returns>IDictionary with string (OID) keys and Asn1OctetString values</returns>
        </member>
        <member name="T:Org.BouncyCastle2.X509.PrincipalUtilities">
            <remarks>
            A utility class that will extract X509Principal objects from X.509 certificates.
            <p>
            Use this in preference to trying to recreate a principal from a string, not all
            DNs are what they should be, so it's best to leave them encoded where they
            can be.</p>
            </remarks>
        </member>
        <member name="M:Org.BouncyCastle2.X509.PrincipalUtilities.GetIssuerX509Principal(Org.BouncyCastle2.X509.X509Certificate)">
            <summary>Return the issuer of the given cert as an X509Principal.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.X509.PrincipalUtilities.GetSubjectX509Principal(Org.BouncyCastle2.X509.X509Certificate)">
            <summary>Return the subject of the given cert as an X509Principal.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.X509.PrincipalUtilities.GetIssuerX509Principal(Org.BouncyCastle2.X509.X509Crl)">
            <summary>Return the issuer of the given CRL as an X509Principal.</summary>
        </member>
        <member name="T:Org.BouncyCastle2.X509.Store.X509AttrCertStoreSelector">
             This class is an <code>Selector</code> like implementation to select
             attribute certificates from a given set of criteria.
            
             @see org.BouncyCastle2.x509.X509AttributeCertificate
             @see org.BouncyCastle2.x509.X509Store
        </member>
        <member name="M:Org.BouncyCastle2.X509.Store.X509AttrCertStoreSelector.Match(System.Object)">
            <summary>
            Decides if the given attribute certificate should be selected.
            </summary>
            <param name="obj">The attribute certificate to be checked.</param>
            <returns><code>true</code> if the object matches this selector.</returns>
        </member>
        <member name="P:Org.BouncyCastle2.X509.Store.X509AttrCertStoreSelector.AttributeCert">
            <summary>The attribute certificate which must be matched.</summary>
            <remarks>If <c>null</c> is given, any will do.</remarks>
        </member>
        <member name="P:Org.BouncyCastle2.X509.Store.X509AttrCertStoreSelector.AttributeCertificateValid">
            <summary>The criteria for validity</summary>
            <remarks>If <c>null</c> is given any will do.</remarks>
        </member>
        <member name="P:Org.BouncyCastle2.X509.Store.X509AttrCertStoreSelector.Holder">
            <summary>The holder.</summary>
            <remarks>If <c>null</c> is given any will do.</remarks>
        </member>
        <member name="P:Org.BouncyCastle2.X509.Store.X509AttrCertStoreSelector.Issuer">
            <summary>The issuer.</summary>
            <remarks>If <c>null</c> is given any will do.</remarks>
        </member>
        <member name="P:Org.BouncyCastle2.X509.Store.X509AttrCertStoreSelector.SerialNumber">
            <summary>The serial number.</summary>
            <remarks>If <c>null</c> is given any will do.</remarks>
        </member>
        <member name="M:Org.BouncyCastle2.X509.Store.X509AttrCertStoreSelector.AddTargetName(Org.BouncyCastle2.Asn1.X509.GeneralName)">
             Adds a target name criterion for the attribute certificate to the target
             information extension criteria. The <code>X509AttributeCertificate</code>
             must contain at least one of the specified target names.
             <p>
             Each attribute certificate may contain a target information extension
             limiting the servers where this attribute certificate can be used. If
             this extension is not present, the attribute certificate is not targeted
             and may be accepted by any server.
             </p>
            
             @param name The name as a GeneralName (not <code>null</code>)
        </member>
        <member name="M:Org.BouncyCastle2.X509.Store.X509AttrCertStoreSelector.AddTargetName(System.Byte[])">
             Adds a target name criterion for the attribute certificate to the target
             information extension criteria. The <code>X509AttributeCertificate</code>
             must contain at least one of the specified target names.
             <p>
             Each attribute certificate may contain a target information extension
             limiting the servers where this attribute certificate can be used. If
             this extension is not present, the attribute certificate is not targeted
             and may be accepted by any server.
             </p>
            
             @param name a byte array containing the name in ASN.1 DER encoded form of a GeneralName
             @throws IOException if a parsing error occurs.
        </member>
        <member name="M:Org.BouncyCastle2.X509.Store.X509AttrCertStoreSelector.SetTargetNames(System.Collections.IEnumerable)">
            Adds a collection with target names criteria. If <code>null</code> is
            given any will do.
            <p>
            The collection consists of either GeneralName objects or byte[] arrays representing
            DER encoded GeneralName structures.
            </p>
            
            @param names A collection of target names.
            @throws IOException if a parsing error occurs.
            @see #AddTargetName(byte[])
            @see #AddTargetName(GeneralName)
        </member>
        <member name="M:Org.BouncyCastle2.X509.Store.X509AttrCertStoreSelector.GetTargetNames">
            Gets the target names. The collection consists of <code>List</code>s
            made up of an <code>Integer</code> in the first entry and a DER encoded
            byte array or a <code>String</code> in the second entry.
            <p>The returned collection is immutable.</p>
            
            @return The collection of target names
            @see #setTargetNames(Collection)
        </member>
        <member name="M:Org.BouncyCastle2.X509.Store.X509AttrCertStoreSelector.AddTargetGroup(Org.BouncyCastle2.Asn1.X509.GeneralName)">
             Adds a target group criterion for the attribute certificate to the target
             information extension criteria. The <code>X509AttributeCertificate</code>
             must contain at least one of the specified target groups.
             <p>
             Each attribute certificate may contain a target information extension
             limiting the servers where this attribute certificate can be used. If
             this extension is not present, the attribute certificate is not targeted
             and may be accepted by any server.
             </p>
            
             @param group The group as GeneralName form (not <code>null</code>)
        </member>
        <member name="M:Org.BouncyCastle2.X509.Store.X509AttrCertStoreSelector.AddTargetGroup(System.Byte[])">
             Adds a target group criterion for the attribute certificate to the target
             information extension criteria. The <code>X509AttributeCertificate</code>
             must contain at least one of the specified target groups.
             <p>
             Each attribute certificate may contain a target information extension
             limiting the servers where this attribute certificate can be used. If
             this extension is not present, the attribute certificate is not targeted
             and may be accepted by any server.
             </p>
            
             @param name a byte array containing the group in ASN.1 DER encoded form of a GeneralName
             @throws IOException if a parsing error occurs.
        </member>
        <member name="M:Org.BouncyCastle2.X509.Store.X509AttrCertStoreSelector.SetTargetGroups(System.Collections.IEnumerable)">
             Adds a collection with target groups criteria. If <code>null</code> is
             given any will do.
             <p>
             The collection consists of <code>GeneralName</code> objects or <code>byte[]</code>
             representing DER encoded GeneralNames.
             </p>
            
             @param names A collection of target groups.
             @throws IOException if a parsing error occurs.
             @see #AddTargetGroup(byte[])
             @see #AddTargetGroup(GeneralName)
        </member>
        <member name="M:Org.BouncyCastle2.X509.Store.X509AttrCertStoreSelector.GetTargetGroups">
             Gets the target groups. The collection consists of <code>List</code>s
             made up of an <code>Integer</code> in the first entry and a DER encoded
             byte array or a <code>String</code> in the second entry.
             <p>The returned collection is immutable.</p>
            
             @return The collection of target groups.
             @see #setTargetGroups(Collection)
        </member>
        <member name="T:Org.BouncyCastle2.X509.Store.X509CertPairStoreSelector">
            <remarks>
            This class is an <code>IX509Selector</code> implementation to select
            certificate pairs, which are e.g. used for cross certificates. The set of
            criteria is given from two <code>X509CertStoreSelector</code> objects,
            each of which, if present, must match the respective component of a pair.
            </remarks>
        </member>
        <member name="P:Org.BouncyCastle2.X509.Store.X509CertPairStoreSelector.CertPair">
            <summary>The certificate pair which is used for testing on equality.</summary>
        </member>
        <member name="P:Org.BouncyCastle2.X509.Store.X509CertPairStoreSelector.ForwardSelector">
            <summary>The certificate selector for the forward part.</summary>
        </member>
        <member name="P:Org.BouncyCastle2.X509.Store.X509CertPairStoreSelector.ReverseSelector">
            <summary>The certificate selector for the reverse part.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.X509.Store.X509CertPairStoreSelector.Match(System.Object)">
            <summary>
            Decides if the given certificate pair should be selected. If
            <c>obj</c> is not a <code>X509CertificatePair</code>, this method
            returns <code>false</code>.
            </summary>
            <param name="obj">The <code>X509CertificatePair</code> to be tested.</param>
            <returns><code>true</code> if the object matches this selector.</returns>
        </member>
        <member name="P:Org.BouncyCastle2.X509.Store.X509CertStoreSelector.Policy">
            <summary>
            An <code>ISet</code> of <code>DerObjectIdentifier</code> objects.
            </summary>
        </member>
        <member name="T:Org.BouncyCastle2.X509.Store.X509CollectionStore">
            A simple collection backed store.
        </member>
        <member name="M:Org.BouncyCastle2.X509.Store.X509CollectionStore.#ctor(System.Collections.ICollection)">
             Basic constructor.
            
             @param collection - initial contents for the store, this is copied.
        </member>
        <member name="M:Org.BouncyCastle2.X509.Store.X509CollectionStore.GetMatches(Org.BouncyCastle2.X509.Store.IX509Selector)">
             Return the matches in the collection for the passed in selector.
            
             @param selector the selector to match against.
             @return a possibly empty collection of matching objects.
        </member>
        <member name="T:Org.BouncyCastle2.X509.Store.X509CollectionStoreParameters">
            <remarks>This class contains a collection for collection based <code>X509Store</code>s.</remarks>
        </member>
        <member name="M:Org.BouncyCastle2.X509.Store.X509CollectionStoreParameters.#ctor(System.Collections.ICollection)">
            <summary>
            Constructor.
            <p>
            The collection is copied.
            </p>
            </summary>
            <param name="collection">The collection containing X.509 object types.</param>
            <exception cref="T:System.ArgumentNullException">If collection is null.</exception>
        </member>
        <member name="M:Org.BouncyCastle2.X509.Store.X509CollectionStoreParameters.GetCollection">
            <summary>Returns a copy of the <code>ICollection</code>.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.X509.Store.X509CollectionStoreParameters.ToString">
            <summary>Returns a formatted string describing the parameters.</summary>
        </member>
        <member name="P:Org.BouncyCastle2.X509.Store.X509CrlStoreSelector.Issuers">
            <summary>
            An <code>ICollection</code> of <code>X509Name</code> objects
            </summary>
        </member>
        <member name="P:Org.BouncyCastle2.X509.Store.X509CrlStoreSelector.AttrCertChecking">
             The attribute certificate being checked. This is not a criterion.
             Rather, it is optional information that may help a {@link X509Store} find
             CRLs that would be relevant when checking revocation for the specified
             attribute certificate. If <code>null</code> is specified, then no such
             optional information is provided.
            
             @param attrCert the <code>IX509AttributeCertificate</code> being checked (or
                         <code>null</code>)
             @see #getAttrCertificateChecking()
        </member>
        <member name="P:Org.BouncyCastle2.X509.Store.X509CrlStoreSelector.CompleteCrlEnabled">
             If <code>true</code> only complete CRLs are returned. Defaults to
             <code>false</code>.
            
             @return <code>true</code> if only complete CRLs are returned.
        </member>
        <member name="P:Org.BouncyCastle2.X509.Store.X509CrlStoreSelector.DeltaCrlIndicatorEnabled">
             Returns if this selector must match CRLs with the delta CRL indicator
             extension set. Defaults to <code>false</code>.
            
             @return Returns <code>true</code> if only CRLs with the delta CRL
                     indicator extension are selected.
        </member>
        <member name="P:Org.BouncyCastle2.X509.Store.X509CrlStoreSelector.IssuingDistributionPoint">
             The issuing distribution point.
             <p>
             The issuing distribution point extension is a CRL extension which
             identifies the scope and the distribution point of a CRL. The scope
             contains among others information about revocation reasons contained in
             the CRL. Delta CRLs and complete CRLs must have matching issuing
             distribution points.</p>
             <p>
             The byte array is cloned to protect against subsequent modifications.</p>
             <p>
             You must also enable or disable this criteria with
             {@link #setIssuingDistributionPointEnabled(bool)}.</p>
            
             @param issuingDistributionPoint The issuing distribution point to set.
                                             This is the DER encoded OCTET STRING extension value.
             @see #getIssuingDistributionPoint()
        </member>
        <member name="P:Org.BouncyCastle2.X509.Store.X509CrlStoreSelector.IssuingDistributionPointEnabled">
             Whether the issuing distribution point criteria should be applied.
             Defaults to <code>false</code>.
             <p>
             You may also set the issuing distribution point criteria if not a missing
             issuing distribution point should be assumed.</p>
            
             @return Returns if the issuing distribution point check is enabled.
        </member>
        <member name="P:Org.BouncyCastle2.X509.Store.X509CrlStoreSelector.MaxBaseCrlNumber">
             The maximum base CRL number. Defaults to <code>null</code>.
            
             @return Returns the maximum base CRL number.
             @see #setMaxBaseCRLNumber(BigInteger)
        </member>
        <member name="T:Org.BouncyCastle2.X509.SubjectPublicKeyInfoFactory">
            <summary>
            A factory to produce Public Key Info Objects.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.X509.SubjectPublicKeyInfoFactory.CreateSubjectPublicKeyInfo(Org.BouncyCastle2.Crypto.AsymmetricKeyParameter)">
            <summary>
            Create a Subject Public Key Info object for a given public key.
            </summary>
            <param name="publicKey">One of ElGammalPublicKeyParameters, DSAPublicKeyParameter, DHPublicKeyParameters, RsaKeyParameters or ECPublicKeyParameters</param>
            <returns>A subject public key info object.</returns>
            <exception cref="T:System.Exception">Throw exception if object provided is not one of the above.</exception>
        </member>
        <member name="T:Org.BouncyCastle2.X509.X509Attribute">
            Class for carrying the values in an X.509 Attribute.
        </member>
        <member name="M:Org.BouncyCastle2.X509.X509Attribute.#ctor(Org.BouncyCastle2.Asn1.Asn1Encodable)">
            @param at an object representing an attribute.
        </member>
        <member name="M:Org.BouncyCastle2.X509.X509Attribute.#ctor(System.String,Org.BouncyCastle2.Asn1.Asn1Encodable)">
             Create an X.509 Attribute with the type given by the passed in oid and
             the value represented by an ASN.1 Set containing value.
            
             @param oid type of the attribute
             @param value value object to go into the atribute's value set.
        </member>
        <member name="M:Org.BouncyCastle2.X509.X509Attribute.#ctor(System.String,Org.BouncyCastle2.Asn1.Asn1EncodableVector)">
             Create an X.59 Attribute with the type given by the passed in oid and the
             value represented by an ASN.1 Set containing the objects in value.
            
             @param oid type of the attribute
             @param value vector of values to go in the attribute's value set.
        </member>
        <member name="T:Org.BouncyCastle2.X509.X509Certificate">
            <summary>
            An Object representing an X509 Certificate.
            Has static methods for loading Certificates encoded in many forms that return X509Certificate Objects.
            </summary>
        </member>
        <member name="P:Org.BouncyCastle2.X509.X509Certificate.IsValidNow">
            <summary>
            Return true if the current time is within the start and end times nominated on the certificate.
            </summary>
            <returns>true id certificate is valid for the current time.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.X509.X509Certificate.IsValid(System.DateTime)">
            <summary>
            Return true if the nominated time is within the start and end times nominated on the certificate.
            </summary>
            <param name="time">The time to test validity against.</param>
            <returns>True if certificate is valid for nominated time.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.X509.X509Certificate.CheckValidity">
            <summary>
            Checks if the current date is within certificate's validity period.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.X509.X509Certificate.CheckValidity(System.DateTime)">
            <summary>
            Checks if the given date is within certificate's validity period.
            </summary>
            <exception cref="T:Org.BouncyCastle2.Security.Certificates.CertificateExpiredException">if the certificate is expired by given date</exception>
            <exception cref="T:Org.BouncyCastle2.Security.Certificates.CertificateNotYetValidException">if the certificate is not yet valid on given date</exception>
        </member>
        <member name="P:Org.BouncyCastle2.X509.X509Certificate.Version">
            <summary>
            Return the certificate's version.
            </summary>
            <returns>An integer whose value Equals the version of the cerficate.</returns>
        </member>
        <member name="P:Org.BouncyCastle2.X509.X509Certificate.SerialNumber">
            <summary>
            Return a <see cref="T:Org.BouncyCastle2.Math.BigInteger">BigInteger</see> containing the serial number.
            </summary>
            <returns>The Serial number.</returns>
        </member>
        <member name="P:Org.BouncyCastle2.X509.X509Certificate.IssuerDN">
            <summary>
            Get the Issuer Distinguished Name. (Who signed the certificate.)
            </summary>
            <returns>And X509Object containing name and value pairs.</returns>
        </member>
        <member name="P:Org.BouncyCastle2.X509.X509Certificate.SubjectDN">
            <summary>
            Get the subject of this certificate.
            </summary>
            <returns>An X509Name object containing name and value pairs.</returns>
        </member>
        <member name="P:Org.BouncyCastle2.X509.X509Certificate.NotBefore">
            <summary>
            The time that this certificate is valid from.
            </summary>
            <returns>A DateTime object representing that time in the local time zone.</returns>
        </member>
        <member name="P:Org.BouncyCastle2.X509.X509Certificate.NotAfter">
            <summary>
            The time that this certificate is valid up to.
            </summary>
            <returns>A DateTime object representing that time in the local time zone.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.X509.X509Certificate.GetTbsCertificate">
            <summary>
            Return the Der encoded TbsCertificate data.
            This is the certificate component less the signature.
            To Get the whole certificate call the GetEncoded() member.
            </summary>
            <returns>A byte array containing the Der encoded Certificate component.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.X509.X509Certificate.GetSignature">
            <summary>
            The signature.
            </summary>
            <returns>A byte array containg the signature of the certificate.</returns>
        </member>
        <member name="P:Org.BouncyCastle2.X509.X509Certificate.SigAlgName">
            <summary>
            A meaningful version of the Signature Algorithm. (EG SHA1WITHRSA)
            </summary>
            <returns>A sting representing the signature algorithm.</returns>
        </member>
        <member name="P:Org.BouncyCastle2.X509.X509Certificate.SigAlgOid">
            <summary>
            Get the Signature Algorithms Object ID.
            </summary>
            <returns>A string containg a '.' separated object id.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.X509.X509Certificate.GetSigAlgParams">
            <summary>
            Get the signature algorithms parameters. (EG DSA Parameters)
            </summary>
            <returns>A byte array containing the Der encoded version of the parameters or null if there are none.</returns>
        </member>
        <member name="P:Org.BouncyCastle2.X509.X509Certificate.IssuerUniqueID">
            <summary>
            Get the issuers UID.
            </summary>
            <returns>A DerBitString.</returns>
        </member>
        <member name="P:Org.BouncyCastle2.X509.X509Certificate.SubjectUniqueID">
            <summary>
            Get the subjects UID.
            </summary>
            <returns>A DerBitString.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.X509.X509Certificate.GetKeyUsage">
            <summary>
            Get a key usage guidlines.
            </summary>
        </member>
        <member name="M:Org.BouncyCastle2.X509.X509Certificate.GetPublicKey">
            <summary>
            Get the public key of the subject of the certificate.
            </summary>
            <returns>The public key parameters.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.X509.X509Certificate.GetEncoded">
            <summary>
            Return the DER encoding of this certificate.
            </summary>
            <returns>A byte array containing the DER encoding of this certificate.</returns>
            <exception cref="T:Org.BouncyCastle2.Security.Certificates.CertificateEncodingException">If there is an error encoding the certificate.</exception>
        </member>
        <member name="M:Org.BouncyCastle2.X509.X509Certificate.Verify(Org.BouncyCastle2.Crypto.AsymmetricKeyParameter)">
            <summary>
            Verify the certificate's signature using the nominated public key.
            </summary>
            <param name="key">An appropriate public key parameter object, RsaPublicKeyParameters, DsaPublicKeyParameters or ECDsaPublicKeyParameters</param>
            <returns>True if the signature is valid.</returns>
            <exception cref="T:System.Exception">If key submitted is not of the above nominated types.</exception>
        </member>
        <member name="M:Org.BouncyCastle2.X509.X509Certificate.Verify(Org.BouncyCastle2.Crypto.IVerifierFactoryProvider)">
            <summary>
            Verify the certificate's signature using a verifier created using the passed in verifier provider.
            </summary>
            <param name="verifierProvider">An appropriate provider for verifying the certificate's signature.</param>
            <returns>True if the signature is valid.</returns>
            <exception cref="T:System.Exception">If verifier provider is not appropriate or the certificate algorithm is invalid.</exception>
        </member>
        <member name="T:Org.BouncyCastle2.X509.X509CertificatePair">
            <remarks>
            This class contains a cross certificate pair. Cross certificates pairs may
            contain two cross signed certificates from two CAs. A certificate from the
            other CA to this CA is contained in the forward certificate, the certificate
            from this CA to the other CA is contained in the reverse certificate.
            </remarks>
        </member>
        <member name="M:Org.BouncyCastle2.X509.X509CertificatePair.#ctor(Org.BouncyCastle2.X509.X509Certificate,Org.BouncyCastle2.X509.X509Certificate)">
            <summary>Constructor</summary>
            <param name="forward">Certificate from the other CA to this CA.</param>
            <param name="reverse">Certificate from this CA to the other CA.</param>
        </member>
        <member name="M:Org.BouncyCastle2.X509.X509CertificatePair.#ctor(Org.BouncyCastle2.Asn1.X509.CertificatePair)">
            <summary>Constructor from a ASN.1 CertificatePair structure.</summary>
            <param name="pair">The <c>CertificatePair</c> ASN.1 object.</param>
        </member>
        <member name="P:Org.BouncyCastle2.X509.X509CertificatePair.Forward">
            <summary>Returns the certificate from the other CA to this CA.</summary>
        </member>
        <member name="P:Org.BouncyCastle2.X509.X509CertificatePair.Reverse">
            <summary>Returns the certificate from this CA to the other CA.</summary>
        </member>
        <member name="T:Org.BouncyCastle2.X509.X509CertificateParser">
            class for dealing with X509 certificates.
            <p>
            At the moment this will deal with "-----BEGIN CERTIFICATE-----" to "-----END CERTIFICATE-----"
            base 64 encoded certs, as well as the BER binaries of certificates and some classes of PKCS#7
            objects.</p>
        </member>
        <member name="M:Org.BouncyCastle2.X509.X509CertificateParser.ReadCertificate(System.Byte[])">
            <summary>
            Create loading data from byte array.
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:Org.BouncyCastle2.X509.X509CertificateParser.ReadCertificates(System.Byte[])">
            <summary>
            Create loading data from byte array.
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:Org.BouncyCastle2.X509.X509CertificateParser.ReadCertificate(System.IO.Stream)">
            Generates a certificate object and initializes it with the data
            read from the input stream inStream.
        </member>
        <member name="M:Org.BouncyCastle2.X509.X509CertificateParser.ReadCertificates(System.IO.Stream)">
            Returns a (possibly empty) collection view of the certificates
            read from the given input stream inStream.
        </member>
        <member name="T:Org.BouncyCastle2.X509.X509Crl">
             The following extensions are listed in RFC 2459 as relevant to CRLs
            
             Authority Key Identifier
             Issuer Alternative Name
             CRL Number
             Delta CRL Indicator (critical)
             Issuing Distribution Point (critical)
        </member>
        <member name="M:Org.BouncyCastle2.X509.X509Crl.Verify(Org.BouncyCastle2.Crypto.IVerifierFactoryProvider)">
            <summary>
            Verify the CRL's signature using a verifier created using the passed in verifier provider.
            </summary>
            <param name="verifierProvider">An appropriate provider for verifying the CRL's signature.</param>
            <returns>True if the signature is valid.</returns>
            <exception cref="T:System.Exception">If verifier provider is not appropriate or the CRL algorithm is invalid.</exception>
        </member>
        <member name="M:Org.BouncyCastle2.X509.X509Crl.GetEncoded">
            <summary>
            Return the DER encoding of this CRL.
            </summary>
            <returns>A byte array containing the DER encoding of this CRL.</returns>
            <exception cref="T:Org.BouncyCastle2.Security.Certificates.CrlException">If there is an error encoding the CRL.</exception>
        </member>
        <member name="M:Org.BouncyCastle2.X509.X509Crl.ToString">
             Returns a string representation of this CRL.
            
             @return a string representation of this CRL.
        </member>
        <member name="M:Org.BouncyCastle2.X509.X509Crl.IsRevoked(Org.BouncyCastle2.X509.X509Certificate)">
             Checks whether the given certificate is on this CRL.
            
             @param cert the certificate to check for.
             @return true if the given certificate is on this CRL,
             false otherwise.
        </member>
        <member name="T:Org.BouncyCastle2.X509.X509CrlEntry">
             The following extensions are listed in RFC 2459 as relevant to CRL Entries
            
             ReasonCode Hode Instruction Code Invalidity Date Certificate Issuer
             (critical)
        </member>
        <member name="M:Org.BouncyCastle2.X509.X509CrlEntry.#ctor(Org.BouncyCastle2.Asn1.X509.CrlEntry,System.Boolean,Org.BouncyCastle2.Asn1.X509.X509Name)">
             Constructor for CRLEntries of indirect CRLs. If <code>isIndirect</code>
             is <code>false</code> {@link #getCertificateIssuer()} will always
             return <code>null</code>, <code>previousCertificateIssuer</code> is
             ignored. If this <code>isIndirect</code> is specified and this CrlEntry
             has no certificate issuer CRL entry extension
             <code>previousCertificateIssuer</code> is returned by
             {@link #getCertificateIssuer()}.
            
             @param c
                        TbsCertificateList.CrlEntry object.
             @param isIndirect
                        <code>true</code> if the corresponding CRL is a indirect
                        CRL.
             @param previousCertificateIssuer
                        Certificate issuer of the previous CrlEntry.
        </member>
        <member name="M:Org.BouncyCastle2.X509.X509CrlParser.ReadCrl(System.Byte[])">
            <summary>
            Create loading data from byte array.
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:Org.BouncyCastle2.X509.X509CrlParser.ReadCrls(System.Byte[])">
            <summary>
            Create loading data from byte array.
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:Org.BouncyCastle2.X509.X509CrlParser.ReadCrl(System.IO.Stream)">
            Generates a certificate revocation list (CRL) object and initializes
            it with the data read from the input stream inStream.
        </member>
        <member name="M:Org.BouncyCastle2.X509.X509CrlParser.ReadCrls(System.IO.Stream)">
             Returns a (possibly empty) collection view of the CRLs read from
             the given input stream inStream.
            
             The inStream may contain a sequence of DER-encoded CRLs, or
             a PKCS#7 CRL set.  This is a PKCS#7 SignedData object, with the
             only significant field being crls.  In particular the signature
             and the contents are ignored.
        </member>
        <member name="M:Org.BouncyCastle2.X509.X509ExtensionBase.GetNonCriticalExtensionOids">
            <summary>
            Get non critical extensions.
            </summary>
            <returns>A set of non critical extension oids.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.X509.X509ExtensionBase.GetCriticalExtensionOids">
            <summary>
            Get any critical extensions.
            </summary>
            <returns>A sorted list of critical entension.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.X509.X509ExtensionBase.GetExtensionValue(System.String)">
            <summary>
            Get the value of a given extension.
            </summary>
            <param name="oid">The object ID of the extension. </param>
            <returns>An Asn1OctetString object if that extension is found or null if not.</returns>
        </member>
        <member name="M:Org.BouncyCastle2.X509.X509SignatureUtilities.GetDigestAlgName(Org.BouncyCastle2.Asn1.DerObjectIdentifier)">
            Return the digest algorithm using one of the standard JCA string
            representations rather than the algorithm identifier (if possible).
        </member>
        <member name="T:Org.BouncyCastle2.X509.X509V2AttributeCertificate">
            <summary>An implementation of a version 2 X.509 Attribute Certificate.</summary>
        </member>
        <member name="M:Org.BouncyCastle2.X509.X509V2AttributeCertificate.Verify(Org.BouncyCastle2.Crypto.IVerifierFactoryProvider)">
            <summary>
            Verify the certificate's signature using a verifier created using the passed in verifier provider.
            </summary>
            <param name="verifierProvider">An appropriate provider for verifying the certificate's signature.</param>
            <returns>True if the signature is valid.</returns>
            <exception cref="T:System.Exception">If verifier provider is not appropriate or the certificate algorithm is invalid.</exception>
        </member>
        <member name="M:crypto.Security.ComputeHash(System.String,System.String)">
            <summary>
            Return a salted hash based on PBKDF2 for the UTF-8 encoding of the argument text.
            </summary>
            <param name="text">Provided key text</param>
            <param name="salt">Base64 encoded string representing the salt</param>
            <returns></returns>
        </member>
        <member name="M:SshNet_Tests.KeyConverter.IsIetfFormat(System.String)">
            <summary>
            IETF Format is the same as SSH.com
            </summary>
            <param name="keyText"></param>
            <returns></returns>
        </member>
        <member name="T:NET_SFTP_Library_Portable.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:NET_SFTP_Library_Portable.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:NET_SFTP_Library_Portable.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:NET_SFTP_Library_Portable.Strings.CannotConnect">
            <summary>
              Looks up a localized string similar to Cannot connect to host {0}:{1}..
            </summary>
        </member>
        <member name="P:NET_SFTP_Library_Portable.Strings.CannotResolve">
            <summary>
              Looks up a localized string similar to Cannot resolve host name {0}..
            </summary>
        </member>
        <member name="P:NET_SFTP_Library_Portable.Strings.CommandResponseError">
            <summary>
              Looks up a localized string similar to Unexpected response for command: {0} -&gt; {1}.
            </summary>
        </member>
        <member name="P:NET_SFTP_Library_Portable.Strings.ConnectionClosed">
            <summary>
              Looks up a localized string similar to Connection was closed by user..
            </summary>
        </member>
        <member name="P:NET_SFTP_Library_Portable.Strings.ConnectionLost">
            <summary>
              Looks up a localized string similar to Connection was closed by host..
            </summary>
        </member>
        <member name="P:NET_SFTP_Library_Portable.Strings.NotConnected">
            <summary>
              Looks up a localized string similar to Socket is not connected..
            </summary>
        </member>
        <member name="P:NET_SFTP_Library_Portable.Strings.ProxyError">
            <summary>
              Looks up a localized string similar to Proxy server rejected request..
            </summary>
        </member>
        <member name="P:NET_SFTP_Library_Portable.Strings.SocketError">
            <summary>
              Looks up a localized string similar to Socket error occured..
            </summary>
        </member>
        <member name="P:NET_SFTP_Library_Portable.Strings.UnknownError">
            <summary>
              Looks up a localized string similar to An unknown error has occured.  Check FTP Command and FTP Response..
            </summary>
        </member>
    </members>
</doc>
