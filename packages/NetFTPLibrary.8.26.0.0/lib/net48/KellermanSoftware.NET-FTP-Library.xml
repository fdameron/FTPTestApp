<?xml version="1.0"?>
<doc>
    <assembly>
        <name>KellermanSoftware.NET-FTP-Library</name>
    </assembly>
    <members>
        <member name="T:KellermanSoftware.NetFtpLibrary.AsyncException">
            <summary>
            FTP Operation attempted while asynchronous operation in progress.
            Instantiate another FTP object to perform multiple asynchronous operations.
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.AsyncException.#ctor(System.String)">
            <summary>
            Message Constructor
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.AsyncException.#ctor(System.String,System.Exception)">
            <summary>
            Message/Inner Exception Constructor
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:KellermanSoftware.NetFtpLibrary.FTP">
            <summary>
            Class to perform FTP operations
            </summary>
            <summary>
            Class to perform FTP operations
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetFtpLibrary.FTP._filesToTransfer">
            <summary>
            The files and directories to be Transferred
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.IpEndPoint">
            <summary>
            The IP End Point of the remote server
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.IgnoreDirectoriesWithNoPermission">
            <summary>
            By default, local directories that do not have permission to be read will throw an unauthorized exception.  Setting this flag ignores those errors.
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.BufferSize">
            <summary>
            Specify the Buffer Size for transfers in bytes.  The default is 4096.
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.ExactDirectoryMode">
            <summary>
            Some FTP servers do not allow root access. Kellerman FTP automatically detects this but it can be overridden.
            Example:
            _ftp.Connect();
            _ftp.CurrentDirectory="MyDirectory";
            _ftp.ExactDirectoryMode=false;
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.LastFtpCommand">
            <summary>Return the last FTP Command Attempted.</summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            ftp.CreateDirectory("test");
            FtpCommand cmd = _ftp.LastFtpCommand;
            System.Console.WriteLine("Last Command: {0}, Parameters: {1}", cmd.Command, cmd.Param);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            ftp.CreateDirectory("test")
            Dim cmd As FtpCommand = _ftp.LastFtpCommand
            System.Console.WriteLine("Last Command: {0}, Parameters: {1}", cmd.Command, cmd.Param)
                </code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.LastFtpResponse">
            <summary>Return the last FTP Response from the server.</summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            ftp.CreateDirectory("test");
            FtpResponse response = _ftp.LastFtpResponse;
            System.Console.WriteLine("Last Response Code: {0}, Full Text Response: {1}", response.Code, response.Text);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            ftp.CreateDirectory("test")
            Dim response As FtpResponse = _ftp.LastFtpResponse
            System.Console.WriteLine("Last Response Code: {0}, Full Text Response: {1}", response.Code, response.Text)
                </code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.CurrentDirectory">
            <summary>Specifies the current FTP directory.</summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            // gets or sets the current directory for the ftp server.
            // / represents the root of the ftp file system
            ftp.CurrentDirectory = "/";
            System.Console.WriteLine("Current directory is {0}", ftp.CurrentDirectory);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            ' gets or sets the current directory for the ftp server.
            ' / represents the root of the ftp file system
            ftp.CurrentDirectory = "/"
            System.Console.WriteLine("Current directory is {0}", ftp.CurrentDirectory)
                </code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.CustomLogger">
            <summary>
            Attach a custom logger for logging
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.AsyncInProgress">
            <summary>
            If true there is an Asynchronous tranfer in progress
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.CurrentDirectoryBeingTransferred">
            <summary>
            The name of the current directory being transferred (the source directory name).
            This property is filled durring asynchronous uploads/downloads for directories. For
            single file operations, this property is string.empty.
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            ftp.UploadDirectoryAsync("C:\\Download", "TestDir");
             
            System.Threading.Thread.Sleep(300);
             
            //Gets  The name of the current directory being transferred (the source directory name) This property is filled durring asynchronous uploads/downloads for directories Do NOT show the host name in this property as part of the path For single file operations, this property is string.empty 
            //This property is filled durring asynchronous uploads/downloads for directories 
            //Does NOT show the host name in this property as part of the path 
            //For single file operations, this property is string.empty 
            System.Console.WriteLine("Current asynchronously Transferred directory is {0}", ftp.CurrentDirectoryBeingTransferred);
             
            // we wait while this operation takes place
            while (ftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("TestDir has now {0} KB", ftp.GetDirectorySize("TestDir") / 1024);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            ftp.UploadDirectoryAsync("C:\\Download", "TestDir")
             
            System.Threading.Thread.Sleep(300)
             
            'Gets  The name of the current directory being transferred (the source directory name) This property is filled durring asynchronous uploads/downloads for directories Do NOT show the host name in this property as part of the path For single file operations, this property is string.empty 
            'This property is filled durring asynchronous uploads/downloads for directories 
            'Does NOT show the host name in this property as part of the path 
            'For single file operations, this property is string.empty 
            System.Console.WriteLine("Current asynchronously Transferred directory is {0}", ftp.CurrentDirectoryBeingTransferred)
             
            ' we wait while this operation takes place
            Do While ftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("TestDir has now {0} KB", ftp.GetDirectorySize("TestDir") / 1024)
                </code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.CurrentDirectoryNumber">
            <summary>
            When uploading/downloading directories this is the number of the current
            directory or subdirectory being transferred.
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            ftp.UploadDirectoryAsync("C:\\Download", "TestDir");
             
            System.Threading.Thread.Sleep(300);
             
            //When uploading/downloading directories this is the number of the current 
            //directory being transferred 
            System.Console.WriteLine("Current directory number is {0}", ftp.CurrentDirectoryNumber);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            ftp.UploadDirectoryAsync("C:\\Download", "TestDir")
             
            System.Threading.Thread.Sleep(300)
             
            'When uploading/downloading directories this is the number of the current 
            'directory being transferred 
            System.Console.WriteLine("Current directory number is {0}", ftp.CurrentDirectoryNumber)
                </code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.CurrentFileBeingTransferred">
            <summary>
            The name of the current file being transferred. This property is filled during
            asynchronous uploads/downloads.
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            ftp.UploadDirectoryAsync("C:\\Download", "TestDir");
             
            System.Threading.Thread.Sleep(300);
             
            //The name of the current file being transferred (the destination file name) 
            //This property is filled durring asynchronous uploads/downloads 
            System.Console.WriteLine("Current asynchronously transferred file is {0}", ftp.CurrentFileBeingTransferred);
             
            while (ftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            ftp.UploadDirectoryAsync("C:\\Download", "TestDir")
             
            System.Threading.Thread.Sleep(300)
             
            'The name of the current file being transferred (the destination file name) 
            'This property is filled durring asynchronous uploads/downloads 
            System.Console.WriteLine("Current asynchronously transferred file is {0}", ftp.CurrentFileBeingTransferred)
             
            Do While ftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
                </code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.CurrentFileBeingTransferredDestination">
            <summary>
            The currently transferring file destination. This property is filled during
            asynchronous uploads/downloads.
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            ftp.UploadDirectoryAsync("C:\\Download", "TestDir");
             
            System.Threading.Thread.Sleep(300);
             
            //The name of the current file being transferred (the destination file name) 
            //This property is filled durring asynchronous uploads/downloads 
            System.Console.WriteLine("Current asynchronously Transferred file is {0}", ftp.CurrentFileBeingTransferredDestination);
             
            while (ftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            ftp.UploadDirectoryAsync("C:\\Download", "TestDir")
             
            System.Threading.Thread.Sleep(300)
             
            'The name of the current file being transferred (the destination file name) 
            'This property is filled durring asynchronous uploads/downloads 
            System.Console.WriteLine("Current asynchronously Transferred file is {0}", ftp.CurrentFileBeingTransferredDestination)
             
            Do While ftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
                </code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.CurrentFileNumber">
            <summary>
            When uploading/downloading directories this is the number of the current file
            being transferred.
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            ftp.UploadDirectoryAsync("C:\\Download", "TestDir");
             
            System.Threading.Thread.Sleep(300);
             
            //When uploading/downloading directories this is the number of the current 
            //files being transferred 
            System.Console.WriteLine("Current file`s number is {0}", ftp.CurrentFileNumber);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            ftp.UploadDirectoryAsync("C:\\Download", "TestDir")
             
            System.Threading.Thread.Sleep(300)
             
            'When uploading/downloading directories this is the number of the current 
            'files being transferred 
            System.Console.WriteLine("Current file`s number is {0}", ftp.CurrentFileNumber)
                </code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.DirectoryCount">
            <summary>
            When uploading/downloading directories, this is the total number of directories
            and sub directories to be transferred.
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            ftp.UploadDirectoryAsync("C:\\Download", "TestDir");
             
            System.Threading.Thread.Sleep(300);
             
            //When uploading/downloading directories this is the total directories and subdirectories to transfer
            System.Console.WriteLine("Count of directories is {0}", ftp.DirectoryCount);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            ftp.UploadDirectoryAsync("C:\\Download", "TestDir")
             
            System.Threading.Thread.Sleep(300)
             
            'When uploading/downloading directories this is the total directories and subdirectories to transfer
            System.Console.WriteLine("Count of directories is {0}", ftp.DirectoryCount)
                </code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.EstimatedTimeRemaining">
            <summary>
            During a file/directory transfer operation, this is the time that remains. This
            is calculated by the average KB/Second and the remaining bytes to transfer.
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            ftp.UploadDirectoryAsync("C:\\Download", "TestDir");
             
            //we wait 1 second for data to be Transferred 
            System.Threading.Thread.Sleep(1000);
             
            //During a file/directory transfer operation, this is the time that remains 
            //This is calculated by the average KB/Second and the remaining bytes to transfer 
            System.Console.WriteLine("Estimated Time Remaining  is {0}", ftp.EstimatedTimeRemaining);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            ftp.UploadDirectoryAsync("C:\\Download", "TestDir")
             
            'we wait 1 second for data to be Transferred 
            System.Threading.Thread.Sleep(1000)
             
            'During a file/directory transfer operation, this is the time that remains 
            'This is calculated by the average KB/Second and the remaining bytes to transfer 
            System.Console.WriteLine("Estimated Time Remaining  is {0}", ftp.EstimatedTimeRemaining)
                </code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.FileCount">
            <summary>
            When uploading/downloading directories this is the total number of files to be
            transferred.
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            ftp.UploadDirectoryAsync("C:\\Download", "TestDir");
             
            System.Threading.Thread.Sleep(300);
             
            //When uploading/downloading directories this is the total number of files to transfer
            System.Console.WriteLine("File count is {0}", ftp.FileCount);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            ftp.UploadDirectoryAsync("C:\\Download", "TestDir")
             
            System.Threading.Thread.Sleep(300)
             
            'When uploading/downloading directories this is the total number of files to transfer
            System.Console.WriteLine("File count is {0}", ftp.FileCount)
                </code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.ReadWriteTimeout">
            <summary>
            Gets/Sets the timeout in milliseconds when reading/writing to a local file stream
            or network stream. The default is to wait 30000 (30 seconds).
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            ftp.ReadWriteTimeout = 30000; //30 seconds
             
            //Gets/Sets the timeout when reading/writing to a stream 
            System.Console.WriteLine("The FTP component will trigger an exception if reading/writing from/to a stream takes more than {0} milliseconds", ftp.ReadWriteTimeout);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            ftp.ReadWriteTimeout = 30000 '30 seconds
             
            'Gets/Sets the timeout when reading/writing to a stream 
            System.Console.WriteLine("The FTP component will trigger an exception if reading/writing from/to a stream takes more than {0} milliseconds", ftp.ReadWriteTimeout)
                </code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.HostAddress">
            <summary>Specifies the host name or IP Address of the FTP Server.</summary>
            <example>
            	<code lang="CS">
            // this is for the trial version. Uncomment and use the version you need
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
             
            System.Console.WriteLine("The FTP server is {0}", ftp.HostAddress);
                </code>
            	<code lang="VB">
            ' this is for the trial version. Uncomment and use the version you need
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
             
            System.Console.WriteLine("The FTP server is {0}", ftp.HostAddress)
                </code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.HourDifference">
            <summary>
            The difference in hours between the local time and the FTP Server Time. See the
            CalcHourDifference to automatically calculate the hour difference between the local PC
            and the FTP Server.
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Calculate the hour difference between this PC and the FTP Server
            ftp.CalcHourDifference();
            System.Console.WriteLine("The difference in hours is {0}", ftp.HourDifference);
            </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Calculate the hour difference between this PC and the FTP Server
            ftp.CalcHourDifference()
            System.Console.WriteLine("The difference in hours is {0}", ftp.HourDifference)
            </code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.IsBusy">
            <summary>Returns true when any FTP operation is in progress.</summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            ftp.UploadDirectoryAsync("C:\\Download", "TestDir");
             
            // Returns true when any FTP operation is in progress 
            System.Console.WriteLine("There are {0} FTP operations in progress ", ftp.IsBusy == true ? "some" : "no");
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            ftp.UploadDirectoryAsync("C:\\Download", "TestDir")
             
            ' Returns true when any FTP operation is in progress 
            If ftp.IsBusy = True Then
                System.Console.WriteLine("There are {0} FTP operations in progress ","some")
            Else
                System.Console.WriteLine("There are {0} FTP operations in progress ","no")
            End If
                </code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.KiloByteAverage">
            <summary>
            During a file or directory transfer operation, this is the average transfer rate
            in KB/Sec.
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            ftp.UploadDirectory("C:\\Download", "TestDir");
             
            //During a file or directory transfer operation, this is the averate transfer rate in KB/Sec 
            System.Console.WriteLine("Estimated average speed is {0}(KBS)", ftp.KiloByteAverage);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            ftp.UploadDirectory("C:\\Download", "TestDir")
             
            'During a file or directory transfer operation, this is the average transfer rate in KB/Sec 
            System.Console.WriteLine("Estimated average speed is {0}(KBS)", ftp.KiloByteAverage)
                </code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.KiloBytePeak">
            <summary>
            During a file or directory transfer operation, this is the highest transfer rate
            in KB/Sec.
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            ftp.UploadDirectory("C:\\Download", "TestDir");
             
            //During a file or directory transfer operation, this is the highest transfer rate in KB/Sec             
            System.Console.WriteLine("The highest transfer rate for the current operation is {0}(KBS)", ftp.KiloBytePeak);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            ftp.UploadDirectory("C:\\Download", "TestDir")
             
            'During a file or directory transfer operation, this is the highest transfer rate in KB/Sec             
            System.Console.WriteLine("The highest transfer rate for the current operation is {0}(KBS)", ftp.KiloBytePeak)
                </code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.KiloBytePerSecond">
            <summary>This is the current speed of a file or directory transfer in KB/Sec.</summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            ftp.UploadDirectory("C:\\Download", "TestDir");
              
            //This is the current speed of a file or directory transfer in KB/Sec 
            System.Console.WriteLine("Current speed is {0}(KBS)", ftp.KiloBytePerSecond);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            ftp.UploadDirectory("C:\\Download", "TestDir")
             
            'This is the current speed of a file or directory transfer in KB/Sec 
            System.Console.WriteLine("Current speed is {0}(KBS)", ftp.KiloBytePerSecond)
                </code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.KiloBytePerSecThrottle">
            <summary>
            This is the maximum number of KB/Sec of bandwidth that the FTP component will use
            If zero, it will transfer at top speed.
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            // This is the maximum number of KB/Sec of bandwidth that the FTP component will use 
            // If zero, it will transfer at top speed 
            ftp.KiloBytePerSecThrottle = new Decimal(19.5m);
             
            ftp.UploadDirectoryAsync("C:\\Download", "TestDir");
             
            //we wait 1 second for data to be Transferred 
            System.Threading.Thread.Sleep(1000);
             
            System.Console.WriteLine("Current bandwidth allocation for the ftp transfer is {0}(KBS)", ftp.KiloBytePerSecThrottle);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            ' This is the maximum number of KB/Sec of bandwidth that the FTP component will use 
            ' If zero, it will transfer at top speed 
            ftp.KiloBytePerSecThrottle = New Decimal(19.5D)
             
            ftp.UploadDirectoryAsync("C:\\Download", "TestDir")
             
            'we wait 1 second for data to be Transferred 
            System.Threading.Thread.Sleep(1000)
             
            System.Console.WriteLine("Current bandwidth allocation for the ftp transfer is {0}(KBS)", ftp.KiloBytePerSecThrottle)
                </code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.KiloBytesSkipped">
            <summary>
            When synchronizing, or when not overwriting files, this is the current number of
            bytes that didn't need to be transferred.
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            ftp.OverwriteFiles = false; //The default is true
            ftp.OverwriteReadOnlyFiles = false; //The default is false
            ftp.SynchronizeDownload("C://Downloads", "TestDir");
             
            //if a.txt exists on both folders its size will show up in the KiloBytesSkipped property
             
            //When synchronizing, or when not overwriting files,
            //this is the current number of bytes that didn't need to be transferred 
            System.Console.WriteLine("The FTP component did not have to transfer {0}(KB)", ftp.KiloBytesSkipped);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            ftp.OverwriteFiles = False 'The default is true
            ftp.OverwriteReadOnlyFiles = False 'The default is false
            ftp.SynchronizeDownload("C://Downloads", "TestDir")
             
            'if a.txt exists on both folders its size will show up in the KiloBytesSkipped property
             
            'When synchronizing, or when not overwriting files,
            'this is the current number of bytes that didn't need to be transferred 
            System.Console.WriteLine("The FTP component did not have to transfer {0}(KB)", ftp.KiloBytesSkipped)
                </code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.LastException">
            <summary>
            Get the last exception that occurred during an FTP Operation. This value is
            automatically set to null each time a new FTP Session is Connected. The default for
            this property is null.
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.MaskUserNamePassword">
            <summary>
            If true, the user name and password will be replaced with **** when logging, otherwise they will be displayed.
            The default is true.
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.OverwriteFiles">
            <summary>
            If a file already exists locally it will be overwritten during a download. The
            default for this property is false.
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //If a file already exists locally it will be overwritten durring a download 
            ftp.OverwriteFiles = true;
            System.Console.WriteLine("A file that already exist will {0} durring a download ", ftp.OverwriteFiles == true ? "be overwritten" : "not be overwritten");
             
            ftp.DownloadFile("a.txt", "a.txt");
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'If a file already exists locally it will be overwritten durring a download 
            ftp.OverwriteFiles = True
            If ftp.OverwriteFiles = True Then
                System.Console.WriteLine("A file that already exist will {0} durring a download ","be overwritten")
            Else
                System.Console.WriteLine("A file that already exist will {0} durring a download ","not be overwritten")
            End If
             
            ftp.DownloadFile("a.txt", "a.txt")
                </code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.OverwriteReadOnlyFiles">
            <summary>
            If a local file is a read only file it will be overwritten durring a download.
            The default for this property is false.
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //If a local file is a read only file it will be overwritten durring a download 
            ftp.OverwriteReadOnlyFiles = false;
            System.Console.WriteLine("A readonly file that already exist will {0} durring a download ", ftp.OverwriteReadOnlyFiles == true ? "be overwritten" : "not be overwritten");
             
            ftp.DownloadFile("a.txt", "a.txt");
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'If a local file is a read only file it will be overwritten durring a download 
            ftp.OverwriteReadOnlyFiles = False
            If ftp.OverwriteReadOnlyFiles = True Then
                System.Console.WriteLine("A readonly file that already exist will {0} durring a download ","be overwritten")
            Else
                System.Console.WriteLine("A readonly file that already exist will {0} durring a download ","not be overwritten")
            End If
             
            ftp.DownloadFile("a.txt", "a.txt")
                </code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.ParentDirectory">
            <summary>
            Returns the parent directory for the current directory or the root
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            ftp.CreateDirectory("test");
            ftp.CurrentDirectory = "/test";
            ftp.CreateDirectory("testSub");
            ftp.CurrentDirectory = "/ZTest/ZTestSub";
             
            Console.WriteLine("The parent directory is {0}",ftp.ParentDirectory);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            ftp.CreateDirectory("test")
            ftp.CurrentDirectory = "/test"
            ftp.CreateDirectory("testSub")
            ftp.CurrentDirectory = "/ZTest/ZTestSub"
             
            Console.WriteLine("The parent directory is {0}",ftp.ParentDirectory)
                </code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.Password">
            <summary>Specifies the password to use while communicating with the FTP Server.</summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            ftp.Password = "anonymous@johnDoes.com"; // email as password for anonymous users
             
            System.Console.WriteLine("The login password  is {0}", ftp.Password);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ftp.Password = "anonymous@johnDoes.com" ' email as password for anonymous users
             
            System.Console.WriteLine("The login password  is {0}", ftp.Password)
                </code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.PercentComplete">
            <summary>
            The percent complete for the overall transfer
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.Port">
            <summary>Specifies the port to communicate with the FTP Server. The default is 21.</summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            // set the port on which the ftp server listens
            ftp.Port = 21; // default is 21
             
            System.Console.WriteLine("The servers port is {0}", ftp.Port);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            ' set the port on which the ftp server listens
            ftp.Port = 21 ' default is 21
             
            System.Console.WriteLine("The servers port is {0}", ftp.Port)
                </code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.Proxy">
            <summary>
            Hold Information about the FTP Proxy Server. Socks 5 is normally used for proxy
            servers with port 1080. The older Socks 4 is supported, this also normally operates on
            port 1080.
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = New FTP(); //Trial Mode            
            //FTP ftp = New FTP("place user name here", "place license key here");
             
            // Set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace With your user name
            ftp.Password = "user@mail.com"; // replace With your password
             
            ProxyInfo proxy = New ProxyInfo();
            proxy.Type = ProxyType.Socks5;
            proxy.Host = "localhost";
            proxy.UserName = "admin";
            proxy.Password = "secret";
            proxy.Port = 1080;
            ftp.Proxy = proxy;
            ftp.Connect();
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            Dim proxy As ProxyInfo = New ProxyInfo()
            proxy.Type = ProxyType.Socks5
            proxy.Host = "localhost"
            proxy.UserName = "admin"
            proxy.Password = "secret"
            proxy.Port = 1080
            ftp.Proxy = proxy
            ftp.Connect()
                </code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.RestartSupported">
            <summary>
            By default the .NET FTP Library assumes your FTP Server supports the REST command when connections are lost.
            If set to false, the file is attempted to be appended
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.AppendSupported">
            <summary>
            By default the .NET FTP Library assumes your FTP Server supports the APPE command when connections are lost.
            If set to false, the entire file is re-transfered when the connection is lost
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.RetryTimeout">
            <summary>
            Retry timeout in milliseconds if a network connection drops. The default is to
            wait 5 minutes if the network drops and then retry an upload or download from the last
            byte position. If no retry is desired set to -1.
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            ftp.RetryTimeout = 300000; //5 minutes
             
            //Gets/Sets the time to wait to retry when the network connection drops
            System.Console.WriteLine("The FTP component will retry a download if the network connection drops for {0} milliseconds", ftp.RetryTimeout);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            ftp.RetryTimeout = 300000 '5 minutes
             
            'Gets/Sets the time to wait to retry when the network connection drops
            System.Console.WriteLine("The FTP component will retry a download if the network connection drops for {0} milliseconds", ftp.RetryTimeout)
                </code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.SessionGuid">
            <summary>
            Uniquely identifies this instantiated FTP object
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.SkippedFiles">
            <summary>
            When synchronizing, or when not overwriting files, this is the current number of
            files that didn't need to be transferred.
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            ftp.OverwriteFiles = false; //The default is true
            ftp.OverwriteReadOnlyFiles = false; //The default is false
            ftp.SynchronizeDownload("C:\\Download", "TestDir");
             
            //if a.txt exists on both folders and if its the same file, there will be no need to
            // transfer it
             
            // When synchronizing, or when not overwriting files, 
            //  this is the current number of files that didn't need to be transferred 
            System.Console.WriteLine("The FTP component did not have to transfer {0} files", ftp.SkippedFiles);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            ftp.OverwriteFiles = False 'The default is true
            ftp.OverwriteReadOnlyFiles = False 'The default is false
            ftp.SynchronizeDownload("C:\\Download", "TestDir")
             
            'if a.txt exists on both folders and if its the same file, there will be no need to
            ' transfer it
             
            ' When synchronizing, or when not overwriting files, 
            '  this is the current number of files that didn't need to be transferred 
            System.Console.WriteLine("The FTP component did not have to transfer {0} files", ftp.SkippedFiles)
                </code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.TimeElapsed">
            <summary>
            During a file/directory transfer operation, this is the time that has
            elapsed.
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            ftp.UploadDirectoryAsync("C:\\Download", "TestDir");
             
            //we wait 1 second for data to be Transferred 
            System.Threading.Thread.Sleep(1000);
             
            //During a file/directory transfer operation, this is the time that has elapsed 
            System.Console.WriteLine("The currents operation elapsed time is {0}", ftp.TimeElapsed);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            ftp.UploadDirectoryAsync("C:\\Download", "TestDir")
             
            'we wait 1 second for data to be Transferred 
            System.Threading.Thread.Sleep(1000)
             
            'During a file/directory transfer operation, this is the time that has elapsed 
            System.Console.WriteLine("The currents operation elapsed time is {0}", ftp.TimeElapsed)
                </code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.TimeZoneList">
            <summary>
            Return a list of all the time zones and their GMT offset. This can be used to
            populate a drop down list similar to the Date Property Dialog in Windows XP or Windows
            Vista.
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Return a list of all the time zones and their GMT offset Used to populate a drop down 
            // list similar to the Date Property Dialog in Windows XP 
            System.Console.WriteLine("The FTP component`s registered time zones are");
             
            foreach (string timezone in ftp.TimeZoneList.Keys)
            {
                System.Console.WriteLine(timezone);
            }
                </code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.UserName">
            <summary>Specifies the user name to use while communicating with the FTP Server.</summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the user name to use against the ftp server
            ftp.UserName = "anonymous"; // anonymous user
             
            System.Console.WriteLine("The login user  is {0}", ftp.UserName);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the user name to use against the ftp server
            ftp.UserName = "anonymous" ' anonymous user
             
            System.Console.WriteLine("The login user  is {0}", ftp.UserName)
                </code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.ImplicitConnection">
            <summary>
            If false, the user Explicitly connected 
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.LastSuccessfulTime">
            <summary>
            The last time we made a successfull connection
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.RetryInfo">
            <summary>
            Information about what to retry for a failed FTP Async Operation
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.CustomObject">
            <summary>
            Custom object that the user sets during an async transfer
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.SortDirectoryListing(System.Collections.Generic.List{KellermanSoftware.NetFtpLibrary.FTPFileInfo},System.Boolean,KellermanSoftware.NetFtpLibrary.FtpSortColumn,System.Boolean)">
            <summary>
            Sort an FTP Directory Listing
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            List&lt;FtpFileInfo&gt; sortedList= ftp.SortDirectoryListing(GetDirectoryListing(), directoriesOnTop, FTP.FtpSortColumn.FileName, true);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            List And lt
            FtpFileInfo And gt
            sortedList= ftp.SortDirectoryListing(GetDirectoryListing(), directoriesOnTop, FTP.FtpSortColumn.FileName, True)
                </code>
            </example>
            <param name="directoryListing">A directory listing from the GetDirectoryListing method</param>
            <param name="directoriesOnTop">Float directories to the top</param>
            <param name="sortColumn">What column to sort on</param>
            <param name="ascending">If true, sort the list ascending, otherwise sort descending</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.GetDirectoryListing(System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Get a listing of the files in the current FTP directory and filter between a start and end date
            </summary>
            <param name="startDate">Minimum date</param>
            <param name="endDate">Maximum date</param>
            <param name="showDirectories">If true, directory names are returned</param>
            <returns>A list of files</returns>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.GetDirectoryListing(System.Int64,System.Int64,System.Boolean)">
            <summary>
            Get a listing of the files in the current FTP directory between a range of bytes
            </summary>
            <param name="minSizeInBytes">Minimum file size in bytes</param>
            <param name="maxSizeInBytes">Maximum file size in bytes</param>
            <param name="showDirectories">If true, directory names are returned</param>
            <returns>A list of files</returns>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.GetDirectoryListing(System.String,System.Boolean)">
            <summary>
            Get a listing of the files in the current FTP directory matching the passed wildcard expression
            </summary>
            <param name="wildCardPattern">Wildcard pattern to match</param>
            <param name="showDirectories">If true, directory names are returned</param>
            <returns>A list of files</returns>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.GetDirectoryListing(System.Text.RegularExpressions.Regex,System.Boolean)">
            <summary>
            Get a listing of the files in the current FTP directory matching the passed regular expression
            </summary>
            <param name="regularExpression">Regular Expression to match</param>
            <param name="showDirectories">If true, directory names are returned</param>
            <returns>A list of files</returns>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.GetDirectoryListingAsXML(System.Collections.Generic.List{KellermanSoftware.NetFtpLibrary.FTPFileInfo})">
            <summary>
            Get a directory listing as XML
            </summary>
            <param name="directoryListing"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.ResumeUploadStream(System.IO.Stream,System.String)">
            <summary>
            Resume an upload from a local stream to an FTP file. It automatically starts at
            where it left off.
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            Stream myStream = File.OpenRead("c:\\uploadfile1.txt");
            ftp.ResumeUploadStream(myStream, "uploadfile1.txt");
            myStream.Close();
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            Dim myStream As Stream = File.OpenRead("c:\uploadfile1.txt")
            ftp.ResumeUploadStream(myStream, "uploadfile1.txt")
            myStream.Close()
                </code>
            </example>
            <param name="localStream">The local file stream</param>
            <param name="ftpFileName">The FTP file name</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.ResumeUploadStreamAsync(System.IO.Stream,System.String,System.Object)">
            <summary>
            Resume an upload from a local stream to an FTP file. It automatically starts at
            where it left off.
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            Stream myStream = File.OpenRead("c:\\uploadfile1.txt");
            ftp.ResumeUploadStreamAsync(myStream, "uploadfile1.txt");
             
            while (ftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            myStream.Close();
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            Dim myStream As Stream = File.OpenRead("c:\uploadfile1.txt")
            ftp.ResumeUploadStreamAsync(myStream, "uploadfile1.txt")
             
            Do While ftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            myStream.Close()
                </code>
            </example>
            <param name="localStream">The local file stream</param>
            <param name="ftpFileName">The FTP file name</param>
            <param name="customObject">Your custom object to be returned with Started, Progress, and Completed Events</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.ResumeUploadStreamAsync(System.IO.Stream,System.String)">
            <summary>
            Resume an upload from a local stream to an FTP file. It automatically starts at
            where it left off.
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            Stream myStream = File.OpenRead("c:\\uploadfile1.txt");
            ftp.ResumeUploadStreamAsync(myStream, "uploadfile1.txt");
             
            while (ftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            myStream.Close();
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            Dim myStream As Stream = File.OpenRead("c:\uploadfile1.txt")
            ftp.ResumeUploadStreamAsync(myStream, "uploadfile1.txt")
             
            Do While ftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            myStream.Close()
                </code>
            </example>
            <param name="localStream">The local file stream</param>
            <param name="ftpFileName">The FTP file name</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.ResumeUploadFile(System.String,System.String)">
            <summary>
            Resume an upload for a file synchronously using FTP.  It automatically resumes where it left off.
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            ftp.ResumeUploadFile("c:\\uploadfile1.txt", "uploadfile1.txt");
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            ftp.ResumeUploadFile("c:\uploadfile1.txt", "uploadfile1.txt")
                </code>
            </example>
            <param name="localFilePath">The full path of the file, including the file name</param>
            <param name="ftpFileName">The full path of the FTP file, including the ftp directory and file name</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.ResumeUploadFileAsync(System.String,System.String,System.Object)">
            <summary>
            Resume an upload for a file asynchronously using FTP.  It automatically resumes where it left off.
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            ftp.ResumeUploadFileAsync("c:\\uploadfile1.txt", "uploadfile1.txt");
             
            while (ftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            ftp.ResumeUploadFileAsync("c:\uploadfile1.txt", "uploadfile1.txt")
             
            Do While ftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
                </code>
            </example>
            <param name="localFilePath">The full path of the file, including the file name</param>
            <param name="ftpFileName">The full path of the FTP file, including the ftp directory and file name</param>
            <param name="customObject">Your custom object to be returned with Started, Progress, and Completed Events</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.ResumeUploadFileAsync(System.String,System.String)">
            <summary>
            Resume an upload for a file asynchronously using FTP.  It automatically resumes where it left off.
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            ftp.ResumeUploadFileAsync("c:\\uploadfile1.txt", "uploadfile1.txt");
             
            while (ftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            ftp.ResumeUploadFileAsync("c:\uploadfile1.txt", "uploadfile1.txt")
             
            Do While ftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
                </code>
            </example>
            <param name="localFilePath">The full path of the file, including the file name</param>
            <param name="ftpFileName">The full path of the FTP file, including the ftp directory and file name</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.UploadStream(System.IO.Stream,System.String)">
            <summary>Upload a file stream to the FTP server synchronously.</summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            Stream myStream = File.OpenRead("c:\\uploadfile1.txt");
            ftp.UploadStream(myStream, "uploadfile1.txt");
            myStream.Close();
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            Dim myStream As Stream = File.OpenRead("c:\uploadfile1.txt")
            ftp.UploadStream(myStream, "uploadfile1.txt")
            myStream.Close()
                </code>
            </example>
            <param name="localStream">The local file stream.</param>
            <param name="ftpFileName">The ftp path to upload to.</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.DownloadChunkAsync(System.IO.Stream,System.String,System.Int64,System.Int32,System.Object)">
            <summary>
            Download the chunk of a file into a local stream
            </summary>
            <param name="localStream">The local stream to download the chunk</param>
            <param name="ftpFileName">The remote FTP File Name</param>
            <param name="offset">The position in the file</param>
            <param name="chunkSize">The size to transfer</param>
            <param name="customObject">Your custom object to be returned with Started, Progress, and Completed Events</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.UploadChunkAsync(System.IO.Stream,System.String,System.Object)">
            <summary>
            Append a chunk to the end of a file
            </summary>
            <remarks>The remote FTP server must support the size command</remarks>
            <param name="localStream">The chunk to append</param>
            <param name="ftpFileName">The remote FTP File Name</param>
            <param name="customObject">Your custom object to be returned with Started, Progress, and Completed Events</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.UploadStream(System.IO.Stream,System.String,System.Int64)">
            <summary>Upload a file stream to the FTP server using the specified byte offset.</summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            Stream myStream = File.OpenRead("c:\\uploadfile1.txt");
            ftp.UploadStream(myStream, "uploadfile1.txt", 2500);
            myStream.Close();
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            Dim myStream As Stream = File.OpenRead("c:\uploadfile1.txt")
            ftp.UploadStream(myStream, "uploadfile1.txt", 2500)
            myStream.Close()
                </code>
            </example>
            <param name="localStream">The local file stream</param>
            <param name="ftpFileName">The FTP file path</param>
            <param name="restart">The byte offset to start at</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.UploadFile(System.String,System.String)">
            <summary>
            Upload a file name synchronously using FTP
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymus"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            System.Console.WriteLine("We are uploading the a.txt file the Current FTP folder .This is a blocking call");
             
            ftp.UploadFile("C://Download/a.txt", "a.txt");
             
            System.Console.WriteLine("a.txt {0}", ftp.FileExists("a.txt") == true ? "is on the ftp server" : "does not exist on the ftp server");
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymus" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            System.Console.WriteLine("We are uploading the a.txt file the Current FTP folder .This is a blocking call")
             
            ftp.UploadFile("C://Download/a.txt", "a.txt")
             
            If ftp.FileExists("a.txt") = True Then
                System.Console.WriteLine("a.txt {0}","is on the ftp server")
            Else
                System.Console.WriteLine("a.txt {0}","does not exist on the ftp server")
            End If
                </code>
            </example>
            <param name="localFilePath">The full path of the file, including the file name</param>
            <param name="ftpFileName">The full path of the FTP file, including the ftp directory and file name</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.UploadFileAsync(System.String,System.String,System.Object)">
            <summary>Upload a file asynchronously.</summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            ftp.UploadFileAsync("c:\\uploadfile1.txt","uploadfile1.txt", 2500);
             
            while (ftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            ftp.UploadFileAsync("c:\uploadfile1.txt","uploadfile1.txt", 2500)
             
            Do While ftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
                </code>
            </example>
            <param name="localFilePath">The local file path</param>
            <param name="ftpFileName">The FTP file path</param>
            <param name="customObject">Your custom object to be returned with Started, Progress, and Completed Events</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.UploadFileAsync(System.String,System.String)">
            <summary>Upload a file asynchronously.</summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            ftp.UploadFileAsync("c:\\uploadfile1.txt","uploadfile1.txt", 2500);
             
            while (ftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            ftp.UploadFileAsync("c:\uploadfile1.txt","uploadfile1.txt", 2500)
             
            Do While ftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
                </code>
            </example>
            <param name="localFilePath">The local file path</param>
            <param name="ftpFileName">The FTP file path</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.UploadStreamAsync(System.IO.Stream,System.String,System.Object)">
            <summary>
            Upload a file stream asynchronously to the FTP server
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            Stream myStream = File.OpenRead("c:\\uploadfile1.txt");
            ftp.UploadStream(myStream, "uploadfile1.txt");
             
            while (ftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            myStream.Close();
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            Dim myStream As Stream = File.OpenRead("c:\uploadfile1.txt")
            ftp.UploadStream(myStream, "uploadfile1.txt")
             
            Do While ftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            myStream.Close()
                </code>
            </example>
            <param name="localStream">The local file stream</param>
            <param name="ftpFileName">The FTP file name</param>
            <param name="customObject">Your custom object to be returned with Started, Progress, and Completed Events</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.UploadStreamAsync(System.IO.Stream,System.String)">
            <summary>
            Upload a file stream asynchronously to the FTP server
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            Stream myStream = File.OpenRead("c:\\uploadfile1.txt");
            ftp.UploadStream(myStream, "uploadfile1.txt");
             
            while (ftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            myStream.Close();
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            Dim myStream As Stream = File.OpenRead("c:\uploadfile1.txt")
            ftp.UploadStream(myStream, "uploadfile1.txt")
             
            Do While ftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            myStream.Close()
                </code>
            </example>
            <param name="localStream">The local file stream</param>
            <param name="ftpFileName">The FTP file name</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.UploadStreamAsync(System.IO.Stream,System.String,System.Int64,System.Object)">
            <summary>
            Upload a file stream asynchronously to the FTP server using the specified byte
            offset.
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            Stream myStream = File.OpenRead("c:\\uploadfile1.txt");
            ftp.UploadStream(myStream, "uploadfile1.txt", 2500);
             
            while (ftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            myStream.Close();
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            Dim myStream As Stream = File.OpenRead("c:\uploadfile1.txt")
            ftp.UploadStream(myStream, "uploadfile1.txt", 2500)
             
            Do While ftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            myStream.Close()
                </code>
            </example>
            <param name="localStream">The local file stream</param>
            <param name="ftpFileName">The FTP file name</param>
            <param name="restart">The byte offset to restart at</param>
            <param name="customObject">Your custom object to be returned with Started, Progress, and Completed Events</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.UploadStreamAsync(System.IO.Stream,System.String,System.Int64)">
            <summary>
            Upload a file stream asynchronously to the FTP server using the specified byte
            offset.
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            Stream myStream = File.OpenRead("c:\\uploadfile1.txt");
            ftp.UploadStream(myStream, "uploadfile1.txt", 2500);
             
            while (ftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            myStream.Close();
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            Dim myStream As Stream = File.OpenRead("c:\uploadfile1.txt")
            ftp.UploadStream(myStream, "uploadfile1.txt", 2500)
             
            Do While ftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            myStream.Close()
                </code>
            </example>
            <param name="localStream">The local file stream</param>
            <param name="ftpFileName">The FTP file name</param>
            <param name="restart">The byte offset to restart at</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.UploadFileAsync(System.String,System.String,System.Int64,System.Object)">
            <summary>
            Upload a file asynchronously using FTP
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            System.Console.WriteLine("We are uploading the a.txt file the Current FTP folder .This is a non-blocking call");
             
            ftp.UploadFileAsync("C://Download/a.txt", "a.txt");
             
            // we wait while this operation takes place
            while (ftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("a.txt {0}", ftp.FileExists("a.txt") == true ? "is on the ftp server" : "does not exist on the ftp server");
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            System.Console.WriteLine("We are uploading the a.txt file the Current FTP folder .This is a non-blocking call")
             
            ftp.UploadFileAsync("C://Download/a.txt", "a.txt")
             
            ' we wait while this operation takes place
            Do While ftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            If ftp.FileExists("a.txt") = True Then
                System.Console.WriteLine("a.txt {0}","is on the ftp server")
            Else
                System.Console.WriteLine("a.txt {0}","does not exist on the ftp server")
            End If
                </code>
            </example>
            <param name="localFilePath">The full path of the file, including the file name</param>
            <param name="ftpFileName">The full path of the FTP file, including the ftp directory and file name</param>
            <param name="restart">The byte offset to begin uploading</param>
            <param name="customObject">Your custom object to be returned with Started, Progress, and Completed Events</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.UploadFileAsync(System.String,System.String,System.Int64)">
            <summary>
            Upload a file asynchronously using FTP
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            System.Console.WriteLine("We are uploading the a.txt file the Current FTP folder .This is a non-blocking call");
             
            ftp.UploadFileAsync("C://Download/a.txt", "a.txt");
             
            // we wait while this operation takes place
            while (ftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("a.txt {0}", ftp.FileExists("a.txt") == true ? "is on the ftp server" : "does not exist on the ftp server");
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            System.Console.WriteLine("We are uploading the a.txt file the Current FTP folder .This is a non-blocking call")
             
            ftp.UploadFileAsync("C://Download/a.txt", "a.txt")
             
            ' we wait while this operation takes place
            Do While ftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            If ftp.FileExists("a.txt") = True Then
                System.Console.WriteLine("a.txt {0}","is on the ftp server")
            Else
                System.Console.WriteLine("a.txt {0}","does not exist on the ftp server")
            End If
                </code>
            </example>
            <param name="localFilePath">The full path of the file, including the file name</param>
            <param name="ftpFileName">The full path of the FTP file, including the ftp directory and file name</param>
            <param name="restart">The byte offset to begin uploading</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.UploadFileUnique(System.String,System.String)">
            <summary>
            Upload a file with a unique file name synchronously using FTP
            </summary>
            <returns>The unique name</returns>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            string uniqueFile = _ftp.UploadFileUnique("c:\\uploadfile1.txt", "uploadfile1.txt");
             
            System.Console.WriteLine("Unique file created is {0}",uniqueFile);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            Dim uniqueFile As String = _ftp.UploadFileUnique("c:\uploadfile1.txt", "uploadfile1.txt")
             
            System.Console.WriteLine("Unique file created is {0}",uniqueFile)
                </code>
            </example>
            <param name="localFilePath">The full path of the file, including the file name</param>
            <param name="ftpFileName">The full path of the FTP file, including the ftp directory and file name</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.MakeUniqueName(System.String)">
            <summary>
            Finds a unique file name that doesn't already exist
            </summary>
            <param name="name">The file name to test</param>
            <returns>A unique name</returns>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.DownloadFileAsync(System.String,System.String,System.Int64)">
            <summary>
            Download a file from the FTP server asynchronously from the specified byte
            offset.
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymus"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            System.Console.WriteLine("We are downloading the a.txt file.  This is a non blocking call");
             
            ftp.DownloadFileAsync("c:\\a.txt", "a.txt", 2500);
             
            while (ftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("{0} files have been transfered", ftp.FileCount);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymus" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            System.Console.WriteLine("We are downloading the a.txt file.  This is a non blocking call")
             
            ftp.DownloadFileAsync("c:\a.txt", "a.txt", 2500)
             
            Do While ftp.IsBusy = True
               System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("{0} files have been transfered", ftp.FileCount)
                </code>
            </example>
            <param name="localFilePath">The local file path</param>
            <param name="ftpFileName">The FTP file path</param>
            <param name="restart">The byte offset to start downloading from</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.DownloadFileAsync(System.String,System.String,System.Int64,System.Object)">
            <summary>
            Download a file from the FTP server asynchronously from the specified byte
            offset.
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymus"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            System.Console.WriteLine("We are downloading the a.txt file.  This is a non blocking call");
             
            ftp.DownloadFileAsync("c:\\a.txt", "a.txt", 2500);
             
            while (ftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("{0} files have been transfered", ftp.FileCount);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymus" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            System.Console.WriteLine("We are downloading the a.txt file.  This is a non blocking call")
             
            ftp.DownloadFileAsync("c:\a.txt", "a.txt", 2500)
             
            Do While ftp.IsBusy = True
               System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("{0} files have been transfered", ftp.FileCount)
                </code>
            </example>
            <param name="localFilePath">The local file path</param>
            <param name="ftpFileName">The FTP file path</param>
            <param name="restart">The byte offset to start downloading from</param>
            <param name="customObject">Your custom object to be returned with Started, Progress, and Completed Events</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.DownloadFileAsync(System.String,System.String,System.Object)">
            <summary>
            Download a file asynchronously
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymus"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            System.Console.WriteLine("We are downloading the a.txt file.This is a blocking call");
             
            ftp.DownloadFileAsync("c:\\a.txt", "a.txt");
             
            while (ftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("{0} files have been transfered", ftp.FileCount);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymus" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            System.Console.WriteLine("We are downloading the a.txt file.This is a blocking call")
             
            ftp.DownloadFileAsync("c:\a.txt", "a.txt")
             
            Do While ftp.IsBusy = True
               System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("{0} files have been transfered", ftp.FileCount)
                </code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.DownloadStreamAsync(System.IO.Stream,System.String,System.Int64)">
            <summary>
            Download to a file stream from the FTP server asynchronously from the specified
            byte offset.
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            Stream myStream = File.OpenWrite("c:\\uploadfile1.txt");
            ftp.DownloadStreamAsync(myStream, "uploadfile1.txt", 2500);
             
            while (ftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            myStream.Close();
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            Dim myStream As Stream = File.OpenWrite("c:\uploadfile1.txt")
            ftp.DownloadStreamAsync(myStream, "uploadfile1.txt", 2500)
             
            Do While ftp.IsBusy = True
               System.Threading.Thread.Sleep(100)
            Loop
             
            myStream.Close()
                </code>
            </example>
            <param name="localStream">The local file stream to write to</param>
            <param name="ftpFileName">The FTP file path</param>
            <param name="restart">The byte offset to start downloading from</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.DownloadStreamAsync(System.IO.Stream,System.String,System.Int64,System.Object)">
            <summary>
            Download to a file stream from the FTP server asynchronously from the specified
            byte offset.
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            Stream myStream = File.OpenWrite("c:\\uploadfile1.txt");
            ftp.DownloadStreamAsync(myStream, "uploadfile1.txt", 2500);
             
            while (ftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            myStream.Close();
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            Dim myStream As Stream = File.OpenWrite("c:\uploadfile1.txt")
            ftp.DownloadStreamAsync(myStream, "uploadfile1.txt", 2500)
             
            Do While ftp.IsBusy = True
               System.Threading.Thread.Sleep(100)
            Loop
             
            myStream.Close()
                </code>
            </example>
            <param name="localStream">The local file stream to write to</param>
            <param name="ftpFileName">The FTP file path</param>
            <param name="restart">The byte offset to start downloading from</param>
            <param name="customObject">Your custom object to be returned with Started, Progress, and Completed Events</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.DownloadStreamAsync(System.IO.Stream,System.String)">
            <summary>Download to a file stream from the FTP server asynchronously.</summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            Stream myStream = File.OpenWrite("c:\\uploadfile1.txt");
            ftp.DownloadStreamAsync(myStream, "uploadfile1.txt", 2500);
             
            while (ftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            myStream.Close();
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            Dim myStream As Stream = File.OpenWrite("c:\uploadfile1.txt")
            ftp.DownloadStreamAsync(myStream, "uploadfile1.txt", 2500)
             
            Do While ftp.IsBusy = True
               System.Threading.Thread.Sleep(100)
            Loop
             
            myStream.Close()
                </code>
            </example>
            <param name="localStream">The local file stream to write to</param>
            <param name="ftpFileName">The path of the FTP file</param>        
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.DownloadStreamAsync(System.IO.Stream,System.String,System.Object)">
            <summary>Download to a file stream from the FTP server asynchronously.</summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            Stream myStream = File.OpenWrite("c:\\uploadfile1.txt");
            ftp.DownloadStreamAsync(myStream, "uploadfile1.txt", 2500);
             
            while (ftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            myStream.Close();
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            Dim myStream As Stream = File.OpenWrite("c:\uploadfile1.txt")
            ftp.DownloadStreamAsync(myStream, "uploadfile1.txt", 2500)
             
            Do While ftp.IsBusy = True
               System.Threading.Thread.Sleep(100)
            Loop
             
            myStream.Close()
                </code>
            </example>
            <param name="localStream">The local file stream to write to</param>
            <param name="ftpFileName">The path of the FTP file</param>     
            <param name="customObject">Your custom object to be returned with Started, Progress, and Completed Events</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.ResumeDownloadFileAsync(System.String,System.String)">
            <summary>
            Resume downloading a file asynchronously. It automatically starts at where it
            left off.
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            System.Console.WriteLine("We are downloading the a.txt file.This is a blocking call");
             
            ftp.ResumeDownloadFileAsync("a.txt", "a.txt");
             
            while (ftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            System.Console.WriteLine("We are downloading the a.txt file.This is a blocking call")
             
            ftp.ResumeDownloadFileAsync("a.txt", "a.txt")
             
            Do While ftp.IsBusy = True
               System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount)
                </code>
            </example>
            <param name="localFilePath">The local file path to download to</param>
            <param name="ftpFileName">The FTP path to download from</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.ResumeDownloadFileAsync(System.String,System.String,System.Object)">
            <summary>
            Resume downloading a file asynchronously. It automatically starts at where it
            left off.
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            System.Console.WriteLine("We are downloading the a.txt file.This is a blocking call");
             
            ftp.ResumeDownloadFileAsync("a.txt", "a.txt");
             
            while (ftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            System.Console.WriteLine("We are downloading the a.txt file.This is a blocking call")
             
            ftp.ResumeDownloadFileAsync("a.txt", "a.txt")
             
            Do While ftp.IsBusy = True
               System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount)
                </code>
            </example>
            <param name="localFilePath">The local file path to download to</param>
            <param name="ftpFileName">The FTP path to download from</param>
            <param name="customObject">Your custom object to be returned with Started, Progress, and Completed Events</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.ResumeDownloadFile(System.String,System.String)">
            <summary>Automatically resume downloading a file where it was left off.</summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            System.Console.WriteLine("We are downloading the a.txt file.This is a blocking call");
             
            ftp.ResumeDownloadFile("a.txt", "a.txt");
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            System.Console.WriteLine("We are downloading the a.txt file.This is a blocking call")
             
            ftp.ResumeDownloadFile("a.txt", "a.txt")
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount)
                </code>
            </example>
            <param name="localFilePath">The local file path to download to</param>
            <param name="ftpFileName">The FTP file to download</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.DownloadStream(System.IO.Stream,System.String)">
            <summary>Download to a file stream from the FTP Server synchronously.</summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            Stream myStream = File.OpenWrite("c:\\uploadfile1.txt");
            ftp.DownloadStream(myStream, "uploadfile1.txt");
             
            while (ftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            myStream.Close();
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            Dim myStream As Stream = File.OpenWrite("c:\uploadfile1.txt")
            ftp.DownloadStream(myStream, "uploadfile1.txt")
             
            Do While ftp.IsBusy = True
               System.Threading.Thread.Sleep(100)
            Loop
             
            myStream.Close()
                </code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.DownloadStream(System.IO.Stream,System.String,System.Int64)">
            <summary>
            Download to a file stream from the FTP server synchronously using the specified
            byte offset.
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            Stream myStream = File.OpenWrite("c:\\uploadfile1.txt");
            ftp.DownloadStream(myStream, "uploadfile1.txt", 2500);
            myStream.Close();
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            Dim myStream As Stream = File.OpenWrite("c:\uploadfile1.txt")
            ftp.DownloadStream(myStream, "uploadfile1.txt", 2500)
            myStream.Close()
                </code>
            </example>
            <param name="localStream">The local file stream</param>
            <param name="ftpFileName">The FTP file path</param>
            <param name="restart">The byte offset to start downloading from.</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.ResumeDownloadStream(System.IO.Stream,System.String)">
            <summary>
            Resume a download from the current stream position 
            </summary>
            <param name="localStream"></param>
            <param name="ftpFileName"></param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.DownloadFileAsync(System.String,System.String)">
            <summary>
            Download a file asynchronously
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymus"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            System.Console.WriteLine("We are downloading the a.txt file.This is a blocking call");
             
            ftp.DownloadFileAsync("c:\\a.txt", "a.txt");
             
            while (ftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("{0} files have been transfered", ftp.FileCount);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymus" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            System.Console.WriteLine("We are downloading the a.txt file.This is a blocking call")
             
            ftp.DownloadFileAsync("c:\a.txt", "a.txt")
             
            Do While ftp.IsBusy = True
               System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("{0} files have been transfered", ftp.FileCount)
                </code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.DownloadFile(System.String,System.String)">
            <summary>
            Download a file name synchronously using FTP
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymus"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            System.Console.WriteLine("We are downloading the a.txt file.This is a blocking call");
             
            ftp.DownloadFile("a.txt", "a.txt");
             
            System.Console.WriteLine("{0} files have been transfered", ftp.FileCount);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymus" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            System.Console.WriteLine("We are downloading the a.txt file.This is a blocking call")
             
            ftp.DownloadFile("a.txt", "a.txt")
             
            System.Console.WriteLine("{0} files have been transfered", ftp.FileCount)
                </code>
            </example>
            <param name="localFilePath">The full path of the file, including the file name</param>
            <param name="ftpFileName">The full path of the FTP file, including the ftp directory and file name</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.SynchronizeDownload(System.String,System.String)">
            <summary>
            Transfer files that do not exist locally synchronously OR Files that have a
            different byte count OR Files that have a modification date difference in seconds
            greater than 60. The hour difference between the local machine and
            the FTP server is taken into account when CalcHourDifference has been called. By
            default all files and sub directories are attempted to be synchronized.
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60 
            ftp.SynchronizeDownload("C:\\Download", "TestDir");
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60 
            ftp.SynchronizeDownload("C:\\Download", "TestDir")
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local path to put the directory</param>
            <param name="ftpDirectory">The FTP directory to download</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.SynchronizeDownloadWithDelete(System.String,System.String)">
            <summary>
            Transfer files that do not exist locally synchronously OR Files that have a
            different byte count OR Files that have a modification date difference in seconds
            greater than 60. The hour difference between the local machine and
            the FTP server is taken into account when CalcHourDifference has been called. By
            default all files and sub directories are attempted to be synchronized.
            Local files and directories will be deleted if they do not exist in the corresponding FTP directory.
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60 
            ftp.SynchronizeDownloadWithDelete("C:\\Download", "TestDir");
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60 
            ftp.SynchronizeDownloadWithDelete("C:\\Download", "TestDir")
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local path to put the directory</param>
            <param name="ftpDirectory">The FTP directory to download</param>		
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.SynchronizeDownloadAsync(System.String,System.String,System.Object)">
            <summary>
            Transfer files that do not exist locally asynchronously OR Files that have a
            different byte count OR Files that have a modification date difference in seconds
            greater than 60. The hour difference between the local machine and
            the FTP server is taken into account when CalcHourDifference has been called. By
            default all files and sub directories are attempted to be synchronized.
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60 
            ftp.SynchronizeDownloadAsync("C:\\Download","TestDir");
             
            while (ftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60 
            ftp.SynchronizeDownloadAsync("C:\\Download", "TestDir")
             
            Do While ftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local path to put the directory</param>
            <param name="ftpDirectory">The FTP directory to download</param>
            <param name="customObject">Your custom object to be returned with Started, Progress, and Completed Events</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.SynchronizeDownloadWithDeleteAsync(System.String,System.String,System.Object)">
            <summary>
            Transfer files that do not exist locally asynchronously OR Files that have a
            different byte count OR Files that have a modification date difference in seconds
            greater than 60. The hour difference between the local machine and
            the FTP server is taken into account when CalcHourDifference has been called. By
            default all files and sub directories are attempted to be synchronized.
            Local files and directories will be deleted if they do not exist in the corresponding FTP directory.
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60 
            ftp.SynchronizeDownloadWithDeleteAsync("C:\\Download", "TestDir");
             
            while (ftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60 
            ftp.SynchronizeDownloadWithDeleteAsync("C:\\Download", "TestDir")
             
            Do While ftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local path to put the directory</param>
            <param name="ftpDirectory">The FTP directory to download</param>
            <param name="customObject">Your custom object to be returned with Started, Progress, and Completed Events</param>		
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.SynchronizeDownloadAsync(System.String,System.String)">
            <summary>
            Transfer files that do not exist locally asynchronously OR Files that have a
            different byte count OR Files that have a modification date difference in seconds
            greater than 60. The hour difference between the local machine and
            the FTP server is taken into account when CalcHourDifference has been called. By
            default all files and sub directories are attempted to be synchronized.
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60 
            ftp.SynchronizeDownloadAsync("C:\\Download", "TestDir");
             
            while (ftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60 
            ftp.SynchronizeDownloadAsync("C:\\Download", "TestDir")
             
            Do While ftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local path to put the directory</param>
            <param name="ftpDirectory">The FTP directory to download</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.SynchronizeDownloadWithDeleteAsync(System.String,System.String)">
            <summary>
            Transfer files that do not exist locally asynchronously OR Files that have a
            different byte count OR Files that have a modification date difference in seconds
            greater than 60. The hour difference between the local machine and
            the FTP server is taken into account when CalcHourDifference has been called. By
            default all files and sub directories are attempted to be synchronized.
            Local files and directories will be deleted if they do not exist in the corresponding FTP directory.
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60 
            ftp.SynchronizeDownloadWithDeleteAsync("C:\\Download", "TestDir");
             
            while (ftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60 
            ftp.SynchronizeDownloadWithDeleteAsync("C:\\Download", "TestDir")
             
            Do While ftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local path to put the directory</param>
            <param name="ftpDirectory">The FTP directory to download</param>		
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.SynchronizeDownload(System.String,System.String,System.Boolean)">
            <summary>
            Transfer files that do not exist locally synchronously OR Files that have a
            different byte count OR Files that have a modification date difference in seconds
            greater than 60. The hour difference between the local machine and
            the FTP server is taken into account when CalcHourDifference has been called. By
            default all files and sub directories are attempted to be synchronized.
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Only synchronize files in the specified directory, do not do sub directories
            ftp.SynchronizeDownload("TestDir", "C:\\Download", false);
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Only synchronize files in the specified directory, do not do sub directories
            ftp.SynchronizeDownload("TestDir", "C:\\Download", False)
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local path to put the directory</param>
            <param name="ftpDirectory">The FTP directory to download</param>
            <param name="subDirectories">If true, download subdirectories</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.SynchronizeDownload(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Transfer files that meet the wildcard pattern. If the file meets the wildcard pattern it is checked if it 
            does not exist locally OR it has a different byte count, or has a modification date difference in seconds
            greater than 60. The hour difference between the local machine and
            the SSH server is taken into account when CalcHourDifference has been called. By
            default all files and sub directories are attempted to be synchronized.
            </summary>
            <param name="localDirectory">The local path to put the directory</param>
            <param name="ftpDirectory">The FTP directory to download</param>
            <param name="subDirectories">If true, download subdirectories</param>
            <param name="wildCardPattern">The file pattern to match</param>
            <returns>A list of files that were transfered</returns>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.SynchronizeDownloadWithDelete(System.String,System.String,System.Boolean)">
            <summary>
            Transfer files that do not exist locally synchronously OR Files that have a
            different byte count OR Files that have a modification date difference in seconds
            greater than 60. The hour difference between the local machine and
            the FTP server is taken into account when CalcHourDifference has been called. By
            default all files and sub directories are attempted to be synchronized.
            Local files and directories will be deleted if they do not exist in the corresponding FTP directory.
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Only synchronize files in the specified directory, do not do sub directories
            ftp.SynchronizeDownloadWithDelete("TestDir", "C:\\Download", false);
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Only synchronize files in the specified directory, do not do sub directories
            ftp.SynchronizeDownloadWithDelete("TestDir", "C:\\Download", False)
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local path to put the directory</param>
            <param name="ftpDirectory">The FTP directory to download</param>
            <param name="subDirectories">If true, download subdirectories</param>		
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.SynchronizeDownloadAsync(System.String,System.String,System.Boolean,System.Object)">
            <summary>
            Transfer files that do not exist locally asynchronously OR Files that have a
            different byte count OR Files that have a modification date difference in seconds
            greater than 60. The hour difference between the local machine and
            the FTP server is taken into account when CalcHourDifference has been called. By
            default all files and sub directories are attempted to be synchronized.
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Only synchronize files in the specified directory, do not do sub directories
            ftp.SynchronizeDownload("TestDir", "C:\\Download", false);
             
            while (ftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Only synchronize files in the specified directory, do not do sub directories
            ftp.SynchronizeDownload("TestDir", "C:\\Download", False)
             
            Do While ftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local path to put the directory</param>
            <param name="ftpDirectory">The FTP directory to download</param>
            <param name="subDirectories">If true, download subdirectories</param>
            <param name="customObject">Your custom object to be returned with Started, Progress, and Completed Events</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.SynchronizeDownloadWithDeleteAsync(System.String,System.String,System.Boolean,System.Object)">
            <summary>
            Transfer files that do not exist locally asynchronously OR Files that have a
            different byte count OR Files that have a modification date difference in seconds
            greater than 60. The hour difference between the local machine and
            the FTP server is taken into account when CalcHourDifference has been called. By
            default all files and sub directories are attempted to be synchronized.
            Local files and directories will be deleted if they do not exist in the corresponding FTP directory.
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Only synchronize files in the specified directory, do not do sub directories
            ftp.SynchronizeDownloadWithDeleteAsync("TestDir", "C:\\Download", false);
             
            while (ftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Only synchronize files in the specified directory, do not do sub directories
            ftp.SynchronizeDownloadWithDeleteAsync("TestDir", "C:\\Download", False)
             
            Do While ftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local path to put the directory</param>
            <param name="ftpDirectory">The FTP directory to download</param>
            <param name="subDirectories">If true, download subdirectories</param>
            <param name="customObject">Your custom object to be returned with Started, Progress, and Completed Events</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.SynchronizeDownloadWithDeleteAsync(System.String,System.String,System.Boolean,System.Object,System.Collections.Generic.List{System.String})">
            <summary>
            Transfer files that do not exist locally asynchronously OR Files that have a
            different byte count OR Files that have a modification date difference in seconds
            greater than 60. The hour difference between the local machine and
            the FTP server is taken into account when CalcHourDifference has been called. By
            default all files and sub directories are attempted to be synchronized.
            Local files and directories will be deleted if they do not exist in the corresponding FTP directory.
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Only synchronize files in the specified directory, do not do sub directories
            ftp.SynchronizeDownloadWithDeleteAsync("TestDir", "C:\\Download", false);
             
            while (ftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Only synchronize files in the specified directory, do not do sub directories
            ftp.SynchronizeDownloadWithDeleteAsync("TestDir", "C:\\Download", False)
             
            Do While ftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local path to put the directory</param>
            <param name="ftpDirectory">The FTP directory to download</param>
            <param name="subDirectories">If true, download subdirectories</param>
            <param name="customObject">Your custom object to be returned with Started, Progress, and Completed Events</param>
            <param name="filesAndDirectoriesToExclude">Filename, directory name, or wildcard to exclude</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.SynchronizeDownloadAsync(System.String,System.String,System.Boolean)">
            <summary>
            Transfer files that do not exist locally asynchronously OR Files that have a
            different byte count OR Files that have a modification date difference in seconds
            greater than 60. The hour difference between the local machine and
            the FTP server is taken into account when CalcHourDifference has been called. By
            default all files and sub directories are attempted to be synchronized.
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Only synchronize files in the specified directory, do not do sub directories
            ftp.SynchronizeDownload("TestDir", "C:\\Download", false);
             
            while (ftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Only synchronize files in the specified directory, do not do sub directories
            ftp.SynchronizeDownload("TestDir", "C:\\Download", False)
             
            Do While ftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local path to put the directory</param>
            <param name="ftpDirectory">The FTP directory to download</param>
            <param name="subDirectories">If true, download subdirectories</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.SynchronizeDownloadWithDeleteAsync(System.String,System.String,System.Boolean)">
            <summary>
            Transfer files that do not exist locally asynchronously OR Files that have a
            different byte count OR Files that have a modification date difference in seconds
            greater than 60. The hour difference between the local machine and
            the FTP server is taken into account when CalcHourDifference has been called. By
            default all files and sub directories are attempted to be synchronized.
            Local files and directories will be deleted if they do not exist in the corresponding FTP directory.
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Only synchronize files in the specified directory, do not do sub directories
            ftp.SynchronizeDownloadWithDeleteAsync("TestDir", "C:\\Download", false);
             
            while (ftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Only synchronize files in the specified directory, do not do sub directories
            ftp.SynchronizeDownloadWithDeleteAsync("TestDir", "C:\\Download", False)
             
            Do While ftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local path to put the directory</param>
            <param name="ftpDirectory">The FTP directory to download</param>
            <param name="subDirectories">If true, download subdirectories</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.DownloadDirectory(System.String,System.String,System.Boolean,System.String)">
            <summary>Download files matching the wildcard pattern.</summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Downloads all directories, subdirectories and files in the selected Directory asynchronously from FTP 
            System.Console.WriteLine("We are downloading the TestDir folder.This is a non-blocking call");
             
            // All these calls do the same thing
            ftp.DownloadDirectory("C:\\Download", "TestDir");
            /* ftp.DownloadDirectory("C:\\Download", "TestDir", true, "*.*");
             ftp.DownloadDirectory("C:\\Download", "TestDir", true, new Regex(".+"));
             ftp.DownloadDirectory("C:\\Download", "TestDir", true, DateTime.MinValue, DateTime.MaxValue);
             ftp.DownloadDirectory("C:\\Download", "TestDir", true, 0, Int64.MaxValue);
              */
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Downloads all directories, subdirectories and files in the selected Directory asynchronously from FTP 
            System.Console.WriteLine("We are downloading the TestDir folder.This is a non-blocking call")
             
            ' All these calls do the same thing
            ftp.DownloadDirectory("C:\\Download", "TestDir")
            ' ftp.DownloadDirectory("C:\\Download", "TestDir", true, "*.*")
            'ftp.DownloadDirectory("C:\\Download", "TestDir", true, new Regex(".+"))
            'ftp.DownloadDirectory("C:\\Download", "TestDir", true, DateTime.MinValue, DateTime.MaxValue)
            'ftp.DownloadDirectory("C:\\Download", "TestDir", true, 0, Int64.MaxValue)
            '
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local path to put the directory</param>
            <param name="ftpDirectory">The FTP directory to download</param>
            <param name="subDirectories">Download files in sub directories</param>
            <param name="wildCardPattern">Standard wildcard pattern</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.DownloadDirectoryAsync(System.String,System.String,System.Boolean,System.String,System.Object)">
            <summary>Download files matching the wildcard pattern.</summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Downloads all directories, subdirectories and files in the selected Directory asynchronously from FTP 
            System.Console.WriteLine("We are downloading the TestDir folder.This is a non-blocking call");
             
            // All these calls do the same thing
            ftp.DownloadDirectory("C:\\Download", "TestDir");
            /* ftp.DownloadDirectory("C:\\Download", "TestDir", true, "*.*");
             ftp.DownloadDirectory("C:\\Download", "TestDir", true, new Regex(".+"));
             ftp.DownloadDirectory("C:\\Download", "TestDir", true, DateTime.MinValue, DateTime.MaxValue);
             ftp.DownloadDirectory("C:\\Download", "TestDir", true, 0, Int64.MaxValue);
              */
             
            while (ftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Downloads all directories, subdirectories and files in the selected Directory asynchronously from FTP 
            System.Console.WriteLine("We are downloading the TestDir folder.This is a non-blocking call")
             
            ' All these calls do the same thing
            ftp.DownloadDirectory("C:\\Download", "TestDir")
            ' ftp.DownloadDirectory("C:\\Download", "TestDir", true, "*.*")
            'ftp.DownloadDirectory("C:\\Download", "TestDir", true, new Regex(".+"))
            'ftp.DownloadDirectory("C:\\Download", "TestDir", true, DateTime.MinValue, DateTime.MaxValue)
            'ftp.DownloadDirectory("C:\\Download", "TestDir", true, 0, Int64.MaxValue)
            '
             
            Do While ftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local path to put the directory</param>
            <param name="ftpDirectory">The FTP directory to download</param>
            <param name="subDirectories">Download files in sub directories</param>
            <param name="wildCardPattern">Standard wildcard pattern</param>
            <param name="customObject">Your custom object to be returned with Started, Progress, and Completed Events</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.DownloadDirectoryAsync(System.String,System.String,System.Boolean,System.String)">
            <summary>Download files matching the wildcard pattern.</summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Downloads all directories, subdirectories and files in the selected Directory asynchronously from FTP 
            System.Console.WriteLine("We are downloading the TestDir folder.This is a non-blocking call");
             
            // All these calls do the same thing
            ftp.DownloadDirectory("C:\\Download", "TestDir");
            /* ftp.DownloadDirectory("C:\\Download", "TestDir", true, "*.*");
             ftp.DownloadDirectory("C:\\Download", "TestDir", true, new Regex(".+"));
             ftp.DownloadDirectory("C:\\Download", "TestDir", true, DateTime.MinValue, DateTime.MaxValue);
             ftp.DownloadDirectory("C:\\Download", "TestDir", true, 0, Int64.MaxValue);
              */
             
            while (ftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Downloads all directories, subdirectories and files in the selected Directory asynchronously from FTP 
            System.Console.WriteLine("We are downloading the TestDir folder.This is a non-blocking call")
             
            ' All these calls do the same thing
            ftp.DownloadDirectory("C:\\Download", "TestDir")
            ' ftp.DownloadDirectory("C:\\Download", "TestDir", true, "*.*")
            'ftp.DownloadDirectory("C:\\Download", "TestDir", true, new Regex(".+"))
            'ftp.DownloadDirectory("C:\\Download", "TestDir", true, DateTime.MinValue, DateTime.MaxValue)
            'ftp.DownloadDirectory("C:\\Download", "TestDir", true, 0, Int64.MaxValue)
            '
             
            Do While ftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local path to put the directory</param>
            <param name="ftpDirectory">The FTP directory to download</param>
            <param name="subDirectories">Download files in sub directories</param>
            <param name="wildCardPattern">Standard wildcard pattern</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.DownloadDirectory(System.String,System.String,System.Boolean,System.Text.RegularExpressions.Regex)">
            <summary>Download files matching the regular expression.</summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Downloads all directories, subdirectories and files in the selected Directory asynchronously from FTP 
            System.Console.WriteLine("We are downloading the TestDir folder.This is a non-blocking call");
             
            // All these calls do the same thing
            ftp.DownloadDirectory("C:\\Download", "TestDir");
            /* ftp.DownloadDirectory("C:\\Download", "TestDir", true, "*.*");
             ftp.DownloadDirectory("C:\\Download", "TestDir", true, new Regex(".+"));
             ftp.DownloadDirectory("C:\\Download", "TestDir", true, DateTime.MinValue, DateTime.MaxValue);
             ftp.DownloadDirectory("C:\\Download", "TestDir", true, 0, Int64.MaxValue);
              */
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Downloads all directories, subdirectories and files in the selected Directory asynchronously from FTP 
            System.Console.WriteLine("We are downloading the TestDir folder.This is a non-blocking call")
             
            ' All these calls do the same thing
            ftp.DownloadDirectory("C:\\Download", "TestDir")
            ' ftp.DownloadDirectory("C:\\Download", "TestDir", true, "*.*")
            'ftp.DownloadDirectory("C:\\Download", "TestDir", true, new Regex(".+"))
            'ftp.DownloadDirectory("C:\\Download", "TestDir", true, DateTime.MinValue, DateTime.MaxValue)
            'ftp.DownloadDirectory("C:\\Download", "TestDir", true, 0, Int64.MaxValue)
            '
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local path to put the directory</param>
            <param name="ftpDirectory">The FTP directory to download</param>
            <param name="subDirectories">Download files in sub directories</param>
            <param name="regularExpression">Regular Expression</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.DownloadDirectoryAsync(System.String,System.String,System.Boolean,System.Text.RegularExpressions.Regex,System.Object)">
            <summary>Download files matching the regular expression.</summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Downloads all directories, subdirectories and files in the selected Directory asynchronously from FTP 
            System.Console.WriteLine("We are downloading the TestDir folder.This is a non-blocking call");
             
            // All these calls do the same thing
            ftp.DownloadDirectory("C:\\Download", "TestDir");
            /* ftp.DownloadDirectory("C:\\Download", "TestDir", true, "*.*");
             ftp.DownloadDirectory("C:\\Download", "TestDir", true, new Regex(".+"));
             ftp.DownloadDirectory("C:\\Download", "TestDir", true, DateTime.MinValue, DateTime.MaxValue);
             ftp.DownloadDirectory("C:\\Download", "TestDir", true, 0, Int64.MaxValue);
              */
             
            while (ftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Downloads all directories, subdirectories and files in the selected Directory asynchronously from FTP 
            System.Console.WriteLine("We are downloading the TestDir folder.This is a non-blocking call")
             
            ' All these calls do the same thing
            ftp.DownloadDirectory("C:\\Download", "TestDir")
            ' ftp.DownloadDirectory("C:\\Download", "TestDir", true, "*.*")
            'ftp.DownloadDirectory("C:\\Download", "TestDir", true, new Regex(".+"))
            'ftp.DownloadDirectory("C:\\Download", "TestDir", true, DateTime.MinValue, DateTime.MaxValue)
            'ftp.DownloadDirectory("C:\\Download", "TestDir", true, 0, Int64.MaxValue)
            '
             
            Do While ftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local path to put the directory</param>
            <param name="ftpDirectory">The FTP directory to download</param>
            <param name="subDirectories">Download files in sub directories</param>
            <param name="regularExpression">Regular Expression</param>
            <param name="customObject">Your custom object to be returned with Started, Progress, and Completed Events</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.DownloadDirectoryAsync(System.String,System.String,System.Boolean,System.Text.RegularExpressions.Regex)">
            <summary>Download files matching the regular expression.</summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Downloads all directories, subdirectories and files in the selected Directory asynchronously from FTP 
            System.Console.WriteLine("We are downloading the TestDir folder.This is a non-blocking call");
             
            // All these calls do the same thing
            ftp.DownloadDirectory("C:\\Download", "TestDir");
            /* ftp.DownloadDirectory("C:\\Download", "TestDir", true, "*.*");
             ftp.DownloadDirectory("C:\\Download", "TestDir", true, new Regex(".+"));
             ftp.DownloadDirectory("C:\\Download", "TestDir", true, DateTime.MinValue, DateTime.MaxValue);
             ftp.DownloadDirectory("C:\\Download", "TestDir", true, 0, Int64.MaxValue);
              */
             
            while (ftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Downloads all directories, subdirectories and files in the selected Directory asynchronously from FTP 
            System.Console.WriteLine("We are downloading the TestDir folder.This is a non-blocking call")
             
            ' All these calls do the same thing
            ftp.DownloadDirectory("C:\\Download", "TestDir")
            ' ftp.DownloadDirectory("C:\\Download", "TestDir", true, "*.*")
            'ftp.DownloadDirectory("C:\\Download", "TestDir", true, new Regex(".+"))
            'ftp.DownloadDirectory("C:\\Download", "TestDir", true, DateTime.MinValue, DateTime.MaxValue)
            'ftp.DownloadDirectory("C:\\Download", "TestDir", true, 0, Int64.MaxValue)
            '
             
            Do While ftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local path to put the directory</param>
            <param name="ftpDirectory">The FTP directory to download</param>
            <param name="subDirectories">Download files in sub directories</param>
            <param name="regularExpression">Regular Expression</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.DownloadDirectoryAsync(System.String,System.String,System.Object)">
            <summary>
            Download an entire directory, subdirectories, and files asynchronously using
            FTP.
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Download an entire directory, subdirectories, 
            // and files asynchronously using FTP 
            ftp.DownloadDirectory("C:\\Download", "TestDir");
             
            while (ftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("TestDir has been downloaded");
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Download an entire directory, subdirectories, 
            ' and files asynchronously using FTP 
            ftp.DownloadDirectory("C:\\Download", "TestDir")
             
            Do While ftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("TestDir has been downloaded")
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local path to put the directory</param>
            <param name="ftpDirectory">The FTP directory to download</param>
            <param name="customObject">Your custom object to be returned with Started, Progress, and Completed Events</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.DownloadDirectoryAsync(System.String,System.String,System.Boolean,System.DateTime,System.DateTime)">
            <summary>Download files that are modified between two dates.</summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Downloads all directories, subdirectories and files in the selected Directory asynchronously from FTP 
            System.Console.WriteLine("We are downloading the TestDir folder.This is a non-blocking call");
             
            // All these calls do the same thing
            ftp.DownloadDirectory("C:\\Download", "TestDir");
            /* ftp.DownloadDirectory("C:\\Download", "TestDir", true, "*.*");
             ftp.DownloadDirectory("C:\\Download", "TestDir", true, new Regex(".+"));
             ftp.DownloadDirectory("C:\\Download", "TestDir", true, DateTime.MinValue, DateTime.MaxValue);
             ftp.DownloadDirectory("C:\\Download", "TestDir", true, 0, Int64.MaxValue);
              */
             
            while (ftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Downloads all directories, subdirectories and files in the selected Directory asynchronously from FTP 
            System.Console.WriteLine("We are downloading the TestDir folder.This is a non-blocking call")
             
            ' All these calls do the same thing
            ftp.DownloadDirectory("C:\\Download", "TestDir")
            ' ftp.DownloadDirectory("C:\\Download", "TestDir", true, "*.*")
            'ftp.DownloadDirectory("C:\\Download", "TestDir", true, new Regex(".+"))
            'ftp.DownloadDirectory("C:\\Download", "TestDir", true, DateTime.MinValue, DateTime.MaxValue)
            'ftp.DownloadDirectory("C:\\Download", "TestDir", true, 0, Int64.MaxValue)
            '
             
            Do While ftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local path to put the directory</param>
            <param name="ftpDirectory">The FTP directory to download</param>
            <param name="subDirectories">Download files in sub directories</param>
            <param name="startDate">The earliest file to upload</param>
            <param name="endDate">The latest file to upload</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.DownloadDirectory(System.String,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>Download files that are in a certain size range.</summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Downloads all directories, subdirectories and files in the selected Directory asynchronously from FTP 
            System.Console.WriteLine("We are downloading the TestDir folder.This is a non-blocking call");
             
            // All these calls do the same thing
            ftp.DownloadDirectory("C:\\Download", "TestDir");
            /* ftp.DownloadDirectory("C:\\Download", "TestDir", true, "*.*");
             ftp.DownloadDirectory("C:\\Download", "TestDir", true, new Regex(".+"));
             ftp.DownloadDirectory("C:\\Download", "TestDir", true, DateTime.MinValue, DateTime.MaxValue);
             ftp.DownloadDirectory("C:\\Download", "TestDir", true, 0, Int64.MaxValue);
              */
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Downloads all directories, subdirectories and files in the selected Directory asynchronously from FTP 
            System.Console.WriteLine("We are downloading the TestDir folder.This is a non-blocking call")
             
            ' All these calls do the same thing
            ftp.DownloadDirectory("C:\\Download", "TestDir")
            ' ftp.DownloadDirectory("C:\\Download", "TestDir", true, "*.*")
            'ftp.DownloadDirectory("C:\\Download", "TestDir", true, new Regex(".+"))
            'ftp.DownloadDirectory("C:\\Download", "TestDir", true, DateTime.MinValue, DateTime.MaxValue)
            'ftp.DownloadDirectory("C:\\Download", "TestDir", true, 0, Int64.MaxValue)
            '
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local path to put the directory</param>
            <param name="ftpDirectory">The FTP directory to download</param>
            <param name="subDirectories">Download files in sub directories</param>
            <param name="minSizeInBytes">The smallest size file to download in bytes</param>
            <param name="maxSizeInBytes">The biggest size file to download in bytes</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.DownloadDirectoryAsync(System.String,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Download files that are in a certain size range
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Downloads all directories, subdirectories and files in the selected Directory asynchronously from FTP 
            System.Console.WriteLine("We are downloading the TestDir folder.This is a non-blocking call");
             
            // All these calls do the same thing
            ftp.DownloadDirectory("C:\\Download", "TestDir");
            /* ftp.DownloadDirectory("C:\\Download", "TestDir", true, "*.*");
             ftp.DownloadDirectory("C:\\Download", "TestDir", true, new Regex(".+"));
             ftp.DownloadDirectory("C:\\Download", "TestDir", true, DateTime.MinValue, DateTime.MaxValue);
             ftp.DownloadDirectory("C:\\Download", "TestDir", true, 0, Int64.MaxValue);
              */
             
            while (ftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Downloads all directories, subdirectories and files in the selected Directory asynchronously from FTP 
            System.Console.WriteLine("We are downloading the TestDir folder.This is a non-blocking call")
             
            ' All these calls do the same thing
            ftp.DownloadDirectory("C:\\Download", "TestDir")
            ' ftp.DownloadDirectory("C:\\Download", "TestDir", true, "*.*")
            'ftp.DownloadDirectory("C:\\Download", "TestDir", true, new Regex(".+"))
            'ftp.DownloadDirectory("C:\\Download", "TestDir", true, DateTime.MinValue, DateTime.MaxValue)
            'ftp.DownloadDirectory("C:\\Download", "TestDir", true, 0, Int64.MaxValue)
            '
             
            Do While ftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local path to put the directory</param>
            <param name="ftpDirectory">The FTP directory to download</param>
            <param name="subDirectories">Download files in sub directories</param>
            <param name="minSizeInBytes">The smallest size file to download in bytes</param>
            <param name="maxSizeInBytes">The biggest size file to download in bytes</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.DownloadDirectoryAsync(System.String,System.String,System.Boolean,System.Int32,System.Int32,System.Object)">
            <summary>
            Download files that are in a certain size range
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Downloads all directories, subdirectories and files in the selected Directory asynchronously from FTP 
            System.Console.WriteLine("We are downloading the TestDir folder.This is a non-blocking call");
             
            // All these calls do the same thing
            ftp.DownloadDirectory("C:\\Download", "TestDir");
            /* ftp.DownloadDirectory("C:\\Download", "TestDir", true, "*.*");
             ftp.DownloadDirectory("C:\\Download", "TestDir", true, new Regex(".+"));
             ftp.DownloadDirectory("C:\\Download", "TestDir", true, DateTime.MinValue, DateTime.MaxValue);
             ftp.DownloadDirectory("C:\\Download", "TestDir", true, 0, Int64.MaxValue);
              */
             
            while (ftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Downloads all directories, subdirectories and files in the selected Directory asynchronously from FTP 
            System.Console.WriteLine("We are downloading the TestDir folder.This is a non-blocking call")
             
            ' All these calls do the same thing
            ftp.DownloadDirectory("C:\\Download", "TestDir")
            ' ftp.DownloadDirectory("C:\\Download", "TestDir", true, "*.*")
            'ftp.DownloadDirectory("C:\\Download", "TestDir", true, new Regex(".+"))
            'ftp.DownloadDirectory("C:\\Download", "TestDir", true, DateTime.MinValue, DateTime.MaxValue)
            'ftp.DownloadDirectory("C:\\Download", "TestDir", true, 0, Int64.MaxValue)
            '
             
            Do While ftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local path to put the directory</param>
            <param name="ftpDirectory">The FTP directory to download</param>
            <param name="subDirectories">Download files in sub directories</param>
            <param name="minSizeInBytes">The smallest size file to download in bytes</param>
            <param name="maxSizeInBytes">The biggest size file to download in bytes</param>
            <param name="customObject">Your custom object to be returned with Started, Progress, and Completed Events</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.DownloadDirectoryAsync(System.String,System.String,System.Boolean,System.DateTime,System.DateTime,System.Object)">
            <summary>Download files that are modified between two dates.</summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Downloads all directories, subdirectories and files in the selected Directory asynchronously from FTP 
            System.Console.WriteLine("We are downloading the TestDir folder.This is a non-blocking call");
             
            // All these calls do the same thing
            ftp.DownloadDirectory("C:\\Download", "TestDir");
            /* ftp.DownloadDirectory("C:\\Download", "TestDir", true, "*.*");
             ftp.DownloadDirectory("C:\\Download", "TestDir", true, new Regex(".+"));
             ftp.DownloadDirectory("C:\\Download", "TestDir", true, DateTime.MinValue, DateTime.MaxValue);
             ftp.DownloadDirectory("C:\\Download", "TestDir", true, 0, Int64.MaxValue);
              */
             
            while (ftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Downloads all directories, subdirectories and files in the selected Directory asynchronously from FTP 
            System.Console.WriteLine("We are downloading the TestDir folder.This is a non-blocking call")
             
            ' All these calls do the same thing
            ftp.DownloadDirectory("C:\\Download", "TestDir")
            ' ftp.DownloadDirectory("C:\\Download", "TestDir", true, "*.*")
            'ftp.DownloadDirectory("C:\\Download", "TestDir", true, new Regex(".+"))
            'ftp.DownloadDirectory("C:\\Download", "TestDir", true, DateTime.MinValue, DateTime.MaxValue)
            'ftp.DownloadDirectory("C:\\Download", "TestDir", true, 0, Int64.MaxValue)
            '
             
            Do While ftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local path to put the directory</param>
            <param name="ftpDirectory">The FTP directory to download</param>
            <param name="subDirectories">Download files in sub directories</param>
            <param name="startDate">The earliest file to upload</param>
            <param name="endDate">The latest file to upload</param>
            <param name="customObject">Your custom object to be returned with Started, Progress, and Completed Events</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.DownloadDirectory(System.String,System.String,System.Boolean,System.DateTime,System.DateTime)">
            <summary>Download files that are modified between two dates.</summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Downloads all directories, subdirectories and files in the selected Directory asynchronously from FTP 
            System.Console.WriteLine("We are downloading the TestDir folder.This is a non-blocking call");
             
            // All these calls do the same thing
            ftp.DownloadDirectory("C:\\Download", "TestDir");
            /* ftp.DownloadDirectory("C:\\Download", "TestDir", true, "*.*");
             ftp.DownloadDirectory("C:\\Download", "TestDir", true, new Regex(".+"));
             ftp.DownloadDirectory("C:\\Download", "TestDir", true, DateTime.MinValue, DateTime.MaxValue);
             ftp.DownloadDirectory("C:\\Download", "TestDir", true, 0, Int64.MaxValue);
              */
              
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Downloads all directories, subdirectories and files in the selected Directory asynchronously from FTP 
            System.Console.WriteLine("We are downloading the TestDir folder.This is a non-blocking call")
             
            ' All these calls do the same thing
            ftp.DownloadDirectory("C:\\Download", "TestDir")
            ' ftp.DownloadDirectory("C:\\Download", "TestDir", true, "*.*")
            'ftp.DownloadDirectory("C:\\Download", "TestDir", true, new Regex(".+"))
            'ftp.DownloadDirectory("C:\\Download", "TestDir", true, DateTime.MinValue, DateTime.MaxValue)
            'ftp.DownloadDirectory("C:\\Download", "TestDir", true, 0, Int64.MaxValue)
            '
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local path to put the directory</param>
            <param name="ftpDirectory">The FTP directory to download</param>
            <param name="subDirectories">Download files in sub directories</param>
            <param name="startDate">The earliest file to upload</param>
            <param name="endDate">The latest file to upload</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.DownloadDirectoryAsync(System.String,System.String)">
            <summary>
            Download an entire directory, subdirectories, and files asynchronously using
            FTP.
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Download an entire directory, subdirectories, 
            // and files asynchronously using FTP 
            ftp.DownloadDirectory("C:\\Download", "TestDir");
             
            while (ftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("TestDir has been downloaded");
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Download an entire directory, subdirectories, 
            ' and files asynchronously using FTP 
            ftp.DownloadDirectory("C:\\Download", "TestDir")
             
            Do While ftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("TestDir has been downloaded")
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local path to put the directory</param>
            <param name="ftpDirectory">The FTP directory to download</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.DownloadDirectory(System.String,System.String)">
            <summary>
            Download an entire directory, subdirectories, and files synchronously using FTP
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Download an entire directory, subdirectories, 
            // and files synchronously using FTP 
            System.Console.WriteLine("We are downloading the TestDir folder.This is a blocking call");
            ftp.DownloadDirectory("C:\\Download", "TestDir");
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Download an entire directory, subdirectories, 
            ' and files synchronously using FTP 
            System.Console.WriteLine("We are downloading the TestDir folder.This is a blocking call")
            ftp.DownloadDirectory("C:\\Download", "TestDir")
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local path to put the directory</param>
            <param name="ftpDirectory">The FTP directory to download</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.UploadDirectory(System.String,System.String)">
            <summary>
            Upload an entire directory, subdirectories, and files synchronously using
            FTP.
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Upload an entire directory, subdirectories, and files synchronously 
            System.Console.WriteLine("Transferring files from the Download folder to the TestDir FTP folder. This call is blocking");
            ftp.UploadDirectory("C:\\Download", "TestDir");
             
            System.Console.WriteLine("TestDir has now {0} KB", ftp.GetDirectorySize("TestDir") / 1024);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Upload an entire directory, subdirectories, and files synchronously 
            System.Console.WriteLine("Transferring files from the Download folder to the TestDir FTP folder. This call is blocking")
            ftp.UploadDirectory("C:\\Download", "TestDir")
             
            System.Console.WriteLine("TestDir has now {0} KB", ftp.GetDirectorySize("TestDir") / 1024)
                </code>
            </example>
            <param name="localDirectory">The local path to upload</param>
            <param name="ftpDirectory">The FTP directory to upload to</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.UploadDirectoryAsync(System.String,System.String,System.Object)">
            <summary>
            Upload an entire directory, subdirectories, and files asynchronously using
            FTP.
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Upload an entire directory, subdirectories, and files asynchronously 
            System.Console.WriteLine("Transferring files from the Download folder to the TestDir FTP folder. This call is not blocking");
            ftp.UploadDirectoryAsync("C:\\Download", "TestDir");
             
            while (ftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("TestDir has now {0} KB", ftp.GetDirectorySize("TestDir") / 1024);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Upload an entire directory, subdirectories, and files asynchronously 
            System.Console.WriteLine("Transferring files from the Download folder to the TestDir FTP folder. This call is not blocking")
            ftp.UploadDirectoryAsync("C:\\Download", "TestDir")
             
            Do While ftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("TestDir has now {0} KB", ftp.GetDirectorySize("TestDir") / 1024)
                </code>
            </example>
            <param name="localDirectory">Local path to upload</param>
            <param name="ftpDirectory">FTP path to upload to.</param>
            <param name="customObject">Your custom object to be returned with Started, Progress, and Completed Events</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.UploadDirectoryAsync(System.String,System.String)">
            <summary>
            Upload an entire directory, subdirectories, and files asynchronously using
            FTP.
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Upload an entire directory, subdirectories, and files asynchronously 
            System.Console.WriteLine("Transferring files from the Download folder to the TestDir FTP folder. This call is not blocking");
            ftp.UploadDirectoryAsync("C:\\Download", "TestDir");
             
            while (ftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("TestDir has now {0} KB", ftp.GetDirectorySize("TestDir") / 1024);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Upload an entire directory, subdirectories, and files asynchronously 
            System.Console.WriteLine("Transferring files from the Download folder to the TestDir FTP folder. This call is not blocking")
            ftp.UploadDirectoryAsync("C:\\Download", "TestDir")
             
            Do While ftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("TestDir has now {0} KB", ftp.GetDirectorySize("TestDir") / 1024)
                </code>
            </example>
            <param name="localDirectory">Local path to upload</param>
            <param name="ftpDirectory">FTP path to upload to.</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.UploadDirectory(System.String,System.String,System.Boolean,System.DateTime,System.DateTime)">
            <summary>Upload files that are modified between two dates.</summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Uploads all directories, subdirectories and files in the selected Directory asynchronously to the FTP server 
            System.Console.WriteLine("We are uploading the Download folder to the TestDir folder .This is a non-blocking call");
             
            // All these calls do the same thing
            ftp.CreateDirectory("TestDir");
            ftp.UploadDirectory("C:\\Download", "TestDir");
            /* ftp.UploadDirectory( "C:\\Download", "TestDir" , true, "*.*");
             ftp.UploadDirectory( "C:\\Download", "TestDir" , true, new Regex(".+"));
             ftp.UploadDirectory( "C:\\Download", "TestDir" , true, DateTime.MinValue, DateTime.MaxValue);
             ftp.UploadDirectory( "C:\\Download", "TestDir" , true, 0, Int64.MaxValue);
            */
              
            System.Console.WriteLine("TestDir has now {0} KB", ftp.GetDirectorySize("TestDir") / 1024);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Uploads all directories, subdirectories and files in the selected Directory asynchronously to the FTP server 
            System.Console.WriteLine("We are uploading the Download folder to the TestDir folder .This is a non-blocking call")
             
            ' All these calls do the same thing
            ftp.CreateDirectory("TestDir")
            ftp.UploadDirectory("C:\\Download", "TestDir")
            ' ftp.UploadDirectory( "C:\\Download", "TestDir" , true, "*.*");
             'ftp.UploadDirectory( "C:\\Download", "TestDir" , true, new Regex(".+"));
             'ftp.UploadDirectory( "C:\\Download", "TestDir" , true, DateTime.MinValue, DateTime.MaxValue);
             'ftp.UploadDirectory( "C:\\Download", "TestDir" , true, 0, Int64.MaxValue);
            '
             
            System.Console.WriteLine("TestDir has now {0} KB", ftp.GetDirectorySize("TestDir") / 1024)
                </code>
            </example>
            <param name="localDirectory">The local path to upload</param>
            <param name="ftpDirectory">The FTP directory to upload to</param>
            <param name="subDirectories">Upload files in sub directories</param>
            <param name="startDate">The earliest file to upload</param>
            <param name="endDate">The latest file to upload</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.UploadDirectoryAsync(System.String,System.String,System.Boolean,System.DateTime,System.DateTime,System.Object)">
            <example>
            	<code lang="CS">
            FTP ftp = New FTP(); //Trial Mode            
            //FTP ftp = New FTP("place user name here", "place license key here");
             
            // Set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace With your user name
            ftp.Password = "user@mail.com"; // replace With your password
             
            //Uploads all directories, subdirectories And files In the selected Directory asynchronously To the FTP server 
            System.Console.WriteLine("We are uploading the Download folder to the TestDir folder .This is a non-blocking call");
             
            // All these calls Do the same thing
            ftp.CreateDirectory("TestDir");
            ftp.UploadDirectoryAsync("C:\\Download", "TestDir");
            /* ftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , True, "*.*");
             ftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , True, New Regex(".+"));
             ftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , True, DateTime.MinValue, DateTime.MaxValue);
             ftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , True, 0, Int64.MaxValue);
            */
              
            While (ftp.IsBusy == True)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("TestDir has now {0} KB", ftp.GetDirectorySize("TestDir") / 1024);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Uploads all directories, subdirectories and files in the selected Directory asynchronously to the FTP server 
            System.Console.WriteLine("We are uploading the Download folder to the TestDir folder .This is a non-blocking call")
             
            ' All these calls do the same thing
            ftp.CreateDirectory("TestDir")
            ftp.UploadDirectoryAsync("C:\\Download", "TestDir")
            ' ftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, "*.*");
             'ftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, new Regex(".+"));
             'ftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, DateTime.MinValue, DateTime.MaxValue);
             'ftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, 0, Int64.MaxValue);
            '
             
            Do While ftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("TestDir has now {0} KB", ftp.GetDirectorySize("TestDir") / 1024)
                </code>
            </example>
            <summary>Upload files that are modified between two dates.</summary>
            <param name="localDirectory">The local path to upload</param>
            <param name="ftpDirectory">The FTP path to upload to</param>
            <param name="subDirectories">If true, upload subdirectories</param>
            <param name="startDate">The earliest file to upload</param>
            <param name="endDate">The latest file to upload</param>
            <param name="customObject">Your custom object to be returned with Started, Progress, and Completed Events</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.UploadDirectoryAsync(System.String,System.String,System.Boolean,System.DateTime,System.DateTime)">
            <example>
            	<code lang="CS">
            FTP ftp = New FTP(); //Trial Mode            
            //FTP ftp = New FTP("place user name here", "place license key here");
             
            // Set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace With your user name
            ftp.Password = "user@mail.com"; // replace With your password
             
            //Uploads all directories, subdirectories And files In the selected Directory asynchronously To the FTP server 
            System.Console.WriteLine("We are uploading the Download folder to the TestDir folder .This is a non-blocking call");
             
            // All these calls Do the same thing
            ftp.CreateDirectory("TestDir");
            ftp.UploadDirectoryAsync("C:\\Download", "TestDir");
            /* ftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , True, "*.*");
             ftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , True, New Regex(".+"));
             ftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , True, DateTime.MinValue, DateTime.MaxValue);
             ftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , True, 0, Int64.MaxValue);
            */
              
            While (ftp.IsBusy == True)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("TestDir has now {0} KB", ftp.GetDirectorySize("TestDir") / 1024);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Uploads all directories, subdirectories and files in the selected Directory asynchronously to the FTP server 
            System.Console.WriteLine("We are uploading the Download folder to the TestDir folder .This is a non-blocking call")
             
            ' All these calls do the same thing
            ftp.CreateDirectory("TestDir")
            ftp.UploadDirectoryAsync("C:\\Download", "TestDir")
            ' ftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, "*.*");
             'ftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, new Regex(".+"));
             'ftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, DateTime.MinValue, DateTime.MaxValue);
             'ftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, 0, Int64.MaxValue);
            '
             
            Do While ftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("TestDir has now {0} KB", ftp.GetDirectorySize("TestDir") / 1024)
                </code>
            </example>
            <summary>Upload files that are modified between two dates.</summary>
            <param name="localDirectory">The local path to upload</param>
            <param name="ftpDirectory">The FTP path to upload to</param>
            <param name="subDirectories">If true, upload subdirectories</param>
            <param name="startDate">The earliest file to upload</param>
            <param name="endDate">The latest file to upload</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.UploadDirectory(System.String,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Upload files that are in a certain size range
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Uploads all directories, subdirectories and files in the selected Directory asynchronously to the FTP server 
            System.Console.WriteLine("We are uploading the Download folder to the TestDir folder .This is a non-blocking call");
             
            // All these calls do the same thing
            ftp.CreateDirectory("TestDir");
            ftp.UploadDirectory("C:\\Download", "TestDir");
            /* ftp.UploadDirectory( "C:\\Download", "TestDir" , true, "*.*");
             ftp.UploadDirectory( "C:\\Download", "TestDir" , true, new Regex(".+"));
             ftp.UploadDirectory( "C:\\Download", "TestDir" , true, DateTime.MinValue, DateTime.MaxValue);
             ftp.UploadDirectory( "C:\\Download", "TestDir" , true, 0, Int64.MaxValue);
            */
              
            System.Console.WriteLine("TestDir has now {0} KB", ftp.GetDirectorySize("TestDir") / 1024);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Uploads all directories, subdirectories and files in the selected Directory asynchronously to the FTP server 
            System.Console.WriteLine("We are uploading the Download folder to the TestDir folder .This is a non-blocking call")
             
            ' All these calls do the same thing
            ftp.CreateDirectory("TestDir")
            ftp.UploadDirectory("C:\\Download", "TestDir")
            ' ftp.UploadDirectory( "C:\\Download", "TestDir" , true, "*.*");
             'ftp.UploadDirectory( "C:\\Download", "TestDir" , true, new Regex(".+"));
             'ftp.UploadDirectory( "C:\\Download", "TestDir" , true, DateTime.MinValue, DateTime.MaxValue);
             'ftp.UploadDirectory( "C:\\Download", "TestDir" , true, 0, Int64.MaxValue);
            '
             
            System.Console.WriteLine("TestDir has now {0} KB", ftp.GetDirectorySize("TestDir") / 1024)
                </code>
            </example>
            <param name="localDirectory">The local path to upload</param>
            <param name="ftpDirectory">The FTP directory to upload to</param>
            <param name="subDirectories">Upload files in sub directories</param>
            <param name="minSizeInBytes">The smallest size file to upload in bytes</param>
            <param name="maxSizeInBytes">The biggest size file to upload in bytes</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.UploadDirectoryAsync(System.String,System.String,System.Boolean,System.Int32,System.Int32,System.Object)">
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Uploads all directories, subdirectories and files in the selected Directory asynchronously to the FTP server 
            System.Console.WriteLine("We are uploading the Download folder to the TestDir folder .This is a non-blocking call");
             
            // All these calls do the same thing
            ftp.CreateDirectory("TestDir");
            ftp.UploadDirectoryAsync("C:\\Download", "TestDir");
            /* ftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, "*.*");
             ftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, new Regex(".+"));
             ftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, DateTime.MinValue, DateTime.MaxValue);
             ftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, 0, Int64.MaxValue);
            */
              
            while (ftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("TestDir has now {0} KB", ftp.GetDirectorySize("TestDir") / 1024);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Uploads all directories, subdirectories and files in the selected Directory asynchronously to the FTP server 
            System.Console.WriteLine("We are uploading the Download folder to the TestDir folder .This is a non-blocking call")
             
            ' All these calls do the same thing
            ftp.CreateDirectory("TestDir")
            ftp.UploadDirectoryAsync("C:\\Download", "TestDir")
            ' ftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, "*.*");
             'ftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, new Regex(".+"));
             'ftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, DateTime.MinValue, DateTime.MaxValue);
             'ftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, 0, Int64.MaxValue);
            '
             
            Do While ftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("TestDir has now {0} KB", ftp.GetDirectorySize("TestDir") / 1024)
                </code>
            </example>
            <summary>Upload files that are in a certain size range.</summary>
            <param name="localDirectory">The local directory to upload</param>
            <param name="ftpDirectory">The FTP directory to upload to</param>
            <param name="subDirectories">If true, upload sub directories</param>
            <param name="minSizeInBytes">The minimum file size to upload</param>
            <param name="maxSizeInBytes">The maximum file size to upload</param>
            <param name="customObject">Your custom object to be returned with Started, Progress, and Completed Events</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.UploadDirectoryAsync(System.String,System.String,System.Boolean,System.Int32,System.Int32)">
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Uploads all directories, subdirectories and files in the selected Directory asynchronously to the FTP server 
            System.Console.WriteLine("We are uploading the Download folder to the TestDir folder .This is a non-blocking call");
             
            // All these calls do the same thing
            ftp.CreateDirectory("TestDir");
            ftp.UploadDirectoryAsync("C:\\Download", "TestDir");
            /* ftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, "*.*");
             ftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, new Regex(".+"));
             ftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, DateTime.MinValue, DateTime.MaxValue);
             ftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, 0, Int64.MaxValue);
            */
              
            while (ftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("TestDir has now {0} KB", ftp.GetDirectorySize("TestDir") / 1024);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Uploads all directories, subdirectories and files in the selected Directory asynchronously to the FTP server 
            System.Console.WriteLine("We are uploading the Download folder to the TestDir folder .This is a non-blocking call")
             
            ' All these calls do the same thing
            ftp.CreateDirectory("TestDir")
            ftp.UploadDirectoryAsync("C:\\Download", "TestDir")
            ' ftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, "*.*");
             'ftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, new Regex(".+"));
             'ftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, DateTime.MinValue, DateTime.MaxValue);
             'ftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, 0, Int64.MaxValue);
            '
             
            Do While ftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("TestDir has now {0} KB", ftp.GetDirectorySize("TestDir") / 1024)
                </code>
            </example>
            <summary>Upload files that are in a certain size range.</summary>
            <param name="localDirectory">The local directory to upload</param>
            <param name="ftpDirectory">The FTP directory to upload to</param>
            <param name="subDirectories">If true, upload sub directories</param>
            <param name="minSizeInBytes">The minimum file size to upload</param>
            <param name="maxSizeInBytes">The maximum file size to upload</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.UploadDirectory(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Upload files matching the wildcard pattern using FTP
            Uses standard wild card pattern such as *.xls
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Uploads all directories, subdirectories and files in the selected Directory asynchronously to the FTP server 
            System.Console.WriteLine("We are uploading the Download folder to the TestDir folder .This is a non-blocking call");
             
            // All these calls do the same thing
            ftp.CreateDirectory("TestDir");
            ftp.UploadDirectory("C:\\Download", "TestDir");
            /* ftp.UploadDirectory( "C:\\Download", "TestDir" , true, "*.*");
             ftp.UploadDirectory( "C:\\Download", "TestDir" , true, new Regex(".+"));
             ftp.UploadDirectory( "C:\\Download", "TestDir" , true, DateTime.MinValue, DateTime.MaxValue);
             ftp.UploadDirectory( "C:\\Download", "TestDir" , true, 0, Int64.MaxValue);
            */
              
            System.Console.WriteLine("TestDir has now {0} KB", ftp.GetDirectorySize("TestDir") / 1024);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Uploads all directories, subdirectories and files in the selected Directory asynchronously to the FTP server 
            System.Console.WriteLine("We are uploading the Download folder to the TestDir folder .This is a non-blocking call")
             
            ' All these calls do the same thing
            ftp.CreateDirectory("TestDir")
            ftp.UploadDirectory("C:\\Download", "TestDir")
            ' ftp.UploadDirectory( "C:\\Download", "TestDir" , true, "*.*");
             'ftp.UploadDirectory( "C:\\Download", "TestDir" , true, new Regex(".+"));
             'ftp.UploadDirectory( "C:\\Download", "TestDir" , true, DateTime.MinValue, DateTime.MaxValue);
             'ftp.UploadDirectory( "C:\\Download", "TestDir" , true, 0, Int64.MaxValue);
            '
             
            System.Console.WriteLine("TestDir has now {0} KB", ftp.GetDirectorySize("TestDir") / 1024)
                </code>
            </example>
            <param name="localDirectory">The local path to put the directory</param>
            <param name="ftpDirectory">The FTP directory to download</param>
            <param name="subDirectories">Upload files in sub directories</param>
            <param name="wildCardPattern">Standard wildcard pattern</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.UploadDirectoryAsync(System.String,System.String,System.Boolean,System.String,System.Object)">
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Uploads all directories, subdirectories and files in the selected Directory asynchronously to the FTP server 
            System.Console.WriteLine("We are uploading the Download folder to the TestDir folder .This is a non-blocking call");
             
            // All these calls do the same thing
            ftp.CreateDirectory("TestDir");
            ftp.UploadDirectoryAsync("C:\\Download", "TestDir");
            /* ftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, "*.*");
             ftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, new Regex(".+"));
             ftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, DateTime.MinValue, DateTime.MaxValue);
             ftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, 0, Int64.MaxValue);
            */
              
            while (ftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("TestDir has now {0} KB", ftp.GetDirectorySize("TestDir") / 1024);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Uploads all directories, subdirectories and files in the selected Directory asynchronously to the FTP server 
            System.Console.WriteLine("We are uploading the Download folder to the TestDir folder .This is a non-blocking call")
             
            ' All these calls do the same thing
            ftp.CreateDirectory("TestDir")
            ftp.UploadDirectoryAsync("C:\\Download", "TestDir")
            ' ftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, "*.*");
             'ftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, new Regex(".+"));
             'ftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, DateTime.MinValue, DateTime.MaxValue);
             'ftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, 0, Int64.MaxValue);
            '
             
            Do While ftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("TestDir has now {0} KB", ftp.GetDirectorySize("TestDir") / 1024)
                </code>
            </example>
            <summary>
            Upload files matching the wildcard pattern using FTP Uses standard wild card
            pattern such as *.xls
            </summary>
            <param name="localDirectory">The local directory to upload</param>
            <param name="ftpDirectory">The FTP directory to upload to</param>
            <param name="subDirectories">If true, upload sub directories</param>
            <param name="wildCardPattern">The file pattern</param>
            <param name="customObject">Your custom object to be returned with Started, Progress, and Completed Events</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.UploadDirectoryAsync(System.String,System.String,System.Boolean,System.String)">
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Uploads all directories, subdirectories and files in the selected Directory asynchronously to the FTP server 
            System.Console.WriteLine("We are uploading the Download folder to the TestDir folder .This is a non-blocking call");
             
            // All these calls do the same thing
            ftp.CreateDirectory("TestDir");
            ftp.UploadDirectoryAsync("C:\\Download", "TestDir");
            /* ftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, "*.*");
             ftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, new Regex(".+"));
             ftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, DateTime.MinValue, DateTime.MaxValue);
             ftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, 0, Int64.MaxValue);
            */
              
            while (ftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("TestDir has now {0} KB", ftp.GetDirectorySize("TestDir") / 1024);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Uploads all directories, subdirectories and files in the selected Directory asynchronously to the FTP server 
            System.Console.WriteLine("We are uploading the Download folder to the TestDir folder .This is a non-blocking call")
             
            ' All these calls do the same thing
            ftp.CreateDirectory("TestDir")
            ftp.UploadDirectoryAsync("C:\\Download", "TestDir")
            ' ftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, "*.*");
             'ftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, new Regex(".+"));
             'ftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, DateTime.MinValue, DateTime.MaxValue);
             'ftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, 0, Int64.MaxValue);
            '
             
            Do While ftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("TestDir has now {0} KB", ftp.GetDirectorySize("TestDir") / 1024)
                </code>
            </example>
            <summary>
            Upload files matching the wildcard pattern using FTP Uses standard wild card
            pattern such as *.xls
            </summary>
            <param name="localDirectory">The local directory to upload</param>
            <param name="ftpDirectory">The FTP directory to upload to</param>
            <param name="subDirectories">If true, upload sub directories</param>
            <param name="wildCardPattern">The file pattern</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.UploadDirectory(System.String,System.String,System.Boolean,System.Text.RegularExpressions.Regex)">
            <summary>Upload files matching the regular expression.</summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Uploads all directories, subdirectories and files in the selected Directory asynchronously to the FTP server 
            System.Console.WriteLine("We are uploading the Download folder to the TestDir folder .This is a non-blocking call");
             
            // All these calls do the same thing
            ftp.CreateDirectory("TestDir");
            ftp.UploadDirectory("C:\\Download", "TestDir");
            /* ftp.UploadDirectory( "C:\\Download", "TestDir" , true, "*.*");
             ftp.UploadDirectory( "C:\\Download", "TestDir" , true, new Regex(".+"));
             ftp.UploadDirectory( "C:\\Download", "TestDir" , true, DateTime.MinValue, DateTime.MaxValue);
             ftp.UploadDirectory( "C:\\Download", "TestDir" , true, 0, Int64.MaxValue);
            */
              
            System.Console.WriteLine("TestDir has now {0} KB", ftp.GetDirectorySize("TestDir") / 1024);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Uploads all directories, subdirectories and files in the selected Directory asynchronously to the FTP server 
            System.Console.WriteLine("We are uploading the Download folder to the TestDir folder .This is a non-blocking call")
             
            ' All these calls do the same thing
            ftp.CreateDirectory("TestDir")
            ftp.UploadDirectory("C:\\Download", "TestDir")
            ' ftp.UploadDirectory( "C:\\Download", "TestDir" , true, "*.*");
             'ftp.UploadDirectory( "C:\\Download", "TestDir" , true, new Regex(".+"));
             'ftp.UploadDirectory( "C:\\Download", "TestDir" , true, DateTime.MinValue, DateTime.MaxValue);
             'ftp.UploadDirectory( "C:\\Download", "TestDir" , true, 0, Int64.MaxValue);
            '
             
            System.Console.WriteLine("TestDir has now {0} KB", ftp.GetDirectorySize("TestDir") / 1024)
                </code>
            </example>
            <param name="localDirectory">The local path to upload</param>
            <param name="ftpDirectory">The FTP directory to upload to</param>
            <param name="subDirectories">Upload files in sub directories</param>
            <param name="regularExpression">Regular Expression</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.UploadDirectoryAsync(System.String,System.String,System.Boolean,System.Text.RegularExpressions.Regex,System.Object)">
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Uploads all directories, subdirectories and files in the selected Directory asynchronously to the FTP server 
            System.Console.WriteLine("We are uploading the Download folder to the TestDir folder .This is a non-blocking call");
             
            // All these calls do the same thing
            ftp.CreateDirectory("TestDir");
            ftp.UploadDirectoryAsync("C:\\Download", "TestDir");
            /* ftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, "*.*");
             ftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, new Regex(".+"));
             ftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, DateTime.MinValue, DateTime.MaxValue);
             ftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, 0, Int64.MaxValue);
            */
              
            while (ftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("TestDir has now {0} KB", ftp.GetDirectorySize("TestDir") / 1024);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Uploads all directories, subdirectories and files in the selected Directory asynchronously to the FTP server 
            System.Console.WriteLine("We are uploading the Download folder to the TestDir folder .This is a non-blocking call")
             
            ' All these calls do the same thing
            ftp.CreateDirectory("TestDir")
            ftp.UploadDirectoryAsync("C:\\Download", "TestDir")
            ' ftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, "*.*");
             'ftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, new Regex(".+"));
             'ftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, DateTime.MinValue, DateTime.MaxValue);
             'ftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, 0, Int64.MaxValue);
            '
             
            Do While ftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("TestDir has now {0} KB", ftp.GetDirectorySize("TestDir") / 1024)
                </code>
            </example>
            <summary>Upload files matching the regular expression.</summary>
            <param name="localDirectory">The local directory to upload</param>
            <param name="ftpDirectory">The FTP directory to upload to</param>
            <param name="subDirectories">If true, upload subdirectories.</param>
            <param name="regularExpression">The regular expression to match the files.</param>
            <param name="customObject">Your custom object to be returned with Started, Progress, and Completed Events</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.UploadDirectoryAsync(System.String,System.String,System.Boolean,System.Text.RegularExpressions.Regex)">
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Uploads all directories, subdirectories and files in the selected Directory asynchronously to the FTP server 
            System.Console.WriteLine("We are uploading the Download folder to the TestDir folder .This is a non-blocking call");
             
            // All these calls do the same thing
            ftp.CreateDirectory("TestDir");
            ftp.UploadDirectoryAsync("C:\\Download", "TestDir");
            /* ftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, "*.*");
             ftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, new Regex(".+"));
             ftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, DateTime.MinValue, DateTime.MaxValue);
             ftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, 0, Int64.MaxValue);
            */
              
            while (ftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("TestDir has now {0} KB", ftp.GetDirectorySize("TestDir") / 1024);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Uploads all directories, subdirectories and files in the selected Directory asynchronously to the FTP server 
            System.Console.WriteLine("We are uploading the Download folder to the TestDir folder .This is a non-blocking call")
             
            ' All these calls do the same thing
            ftp.CreateDirectory("TestDir")
            ftp.UploadDirectoryAsync("C:\\Download", "TestDir")
            ' ftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, "*.*");
             'ftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, new Regex(".+"));
             'ftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, DateTime.MinValue, DateTime.MaxValue);
             'ftp.UploadDirectoryAsync( "C:\\Download", "TestDir" , true, 0, Int64.MaxValue);
            '
             
            Do While ftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("TestDir has now {0} KB", ftp.GetDirectorySize("TestDir") / 1024)
                </code>
            </example>
            <summary>Upload files matching the regular expression.</summary>
            <param name="localDirectory">The local directory to upload</param>
            <param name="ftpDirectory">The FTP directory to upload to</param>
            <param name="subDirectories">If true, upload subdirectories.</param>
            <param name="regularExpression">The regular expression to match the files.</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.SynchronizeUpload(System.String,System.String)">
            <summary>
            Transfer files that do not exist locally synchronously OR Files that have a
            different byte count OR Files that have a modification date difference in seconds
            greater than 60. The hour difference between the local machine and
            the FTP server is taken into account when CalcHourDifference has been called. By
            default all files and sub directories are attempted to be synchronized.
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60
            ftp.SynchronizeUpload("C:\\Download", "TestDir");
            System.Console.WriteLine("transferring unsynchronized files to the TestDir FTP folder");
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60
            ftp.SynchronizeUpload("C:\\Download", "TestDir")
            System.Console.WriteLine("transferring unsynchronized files to the TestDir FTP folder")
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local directory to upload</param>
            <param name="ftpDirectory">The FTP directory to upload to</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.SynchronizeUploadWithDelete(System.String,System.String)">
            <summary>
            Transfer files that do not exist locally synchronously OR Files that have a
            different byte count OR Files that have a modification date difference in seconds
            greater than 60. The hour difference between the local machine and
            the FTP server is taken into account when CalcHourDifference has been called. By
            default all files and sub directories are attempted to be synchronized.
            FTP files and directories will be deleted if they do not exist in the corresponding local directory.
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60
            ftp.SynchronizeUploadWithDelete("C:\\Download", "TestDir");
            System.Console.WriteLine("transferring unsynchronized files to the TestDir FTP folder");
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60
            ftp.SynchronizeUploadWithDelete("C:\\Download", "TestDir")
            System.Console.WriteLine("transferring unsynchronized files to the TestDir FTP folder")
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local directory to upload</param>
            <param name="ftpDirectory">The FTP directory to upload to</param>		
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.SynchronizeUpload(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Synchronize Upload a Directory and Exclude a List of files, directories, or wildcards
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60
            ftp.SynchronizeUpload("C:\\Download", "TestDir", new List&lt;string&gt; { "web.config" });
            System.Console.WriteLine("transferring unsynchronized files to the TestDir FTP folder");
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60
            ftp.SynchronizeUpload("C:\\Download", "TestDir", new List&lt;string&gt; { "web.config" })
            System.Console.WriteLine("transferring unsynchronized files to the TestDir FTP folder")
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount)
                </code>
            </example>        /// <remarks>
            bin  (Directory or file named bin anywhere in the structure)
            somefile.txt (a file)
            *.bak (Exclude all files with *.bak)
            </remarks>
            <param name="localDirectory">The local directory to upload</param>
            <param name="ftpDirectory">The FTP directory to upload to</param>
            <param name="filesAndDirectoriesToExclude">Filename, directory name, or wildcard to exclude</param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.SynchronizeUploadAsync(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Synchronize Upload a Directory and Exclude a List of files, directories, or wildcards
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60
            ftp.SynchronizeUploadAsync("C:\\Download", "TestDir", new List&lt;string&gt; { "web.config" });
            System.Console.WriteLine("Transferring unsynchronized files to the TestDir FTP folder");
             
            while (ftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60
            ftp.SynchronizeUploadAsync("C:\\Download", "TestDir", new List&lt;string&gt; { "web.config" })
            System.Console.WriteLine("Transferring unsynchronized files to the TestDir FTP folder")
             
            Do While ftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount)
                </code>
            </example>        /// <remarks>
            bin  (Directory or file named bin anywhere in the structure)
            somefile.txt (a file)
            *.bak (Exclude all files with *.bak)
            </remarks>
            <param name="localDirectory">The local directory to upload</param>
            <param name="ftpDirectory">The FTP directory to upload to</param>
            <param name="filesAndDirectoriesToExclude">Filename, directory name, or wildcard to exclude</param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.SynchronizeUploadWithDelete(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Synchronize Upload a Directory With Delete and Exclude a List of files, directories, or wildcards
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60
            ftp.SynchronizeUploadWithDelete("C:\\Download", "TestDir", new List&lt;string&gt; { "web.config" });
            System.Console.WriteLine("transferring unsynchronized files to the TestDir FTP folder");
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60
            ftp.SynchronizeUploadWithDelete("C:\\Download", "TestDir", new List&lt;string&gt; { "web.config" })
            System.Console.WriteLine("transferring unsynchronized files to the TestDir FTP folder")
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount)
                </code>
            </example>
            <remarks>
            bin  (Directory or file named bin anywhere in the structure)
            somefile.txt (a file)
            *.bak (Exclude all files with *.bak)
            </remarks>
            <param name="localDirectory">The local directory to upload</param>
            <param name="ftpDirectory">The FTP directory to upload to</param>
            <param name="filesAndDirectoriesToExclude">Filename, directory name, or wildcard to exclude</param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.SynchronizeUploadWithDeleteAsync(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Synchronize Upload a Directory With Delete and Exclude a List of files, directories, or wildcards
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60
            ftp.SynchronizeUploadWithDeleteAsync("C:\\Download", "TestDir", new List&lt;string&gt; { "web.config" });
            System.Console.WriteLine("Transferring unsynchronized files to the TestDir FTP folder");
             
            while (ftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60
            ftp.SynchronizeUploadWithDeleteAsync("C:\\Download", "TestDir", new List&lt;string&gt; { "web.config" })
            System.Console.WriteLine("Transferring unsynchronized files to the TestDir FTP folder")
             
            Do While ftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount)
                </code>
            </example>
            <remarks>
            bin  (Directory or file named bin anywhere in the structure)
            somefile.txt (a file)
            *.bak (Exclude all files with *.bak)
            </remarks>
            <param name="localDirectory">The local directory to upload</param>
            <param name="ftpDirectory">The FTP directory to upload to</param>
            <param name="filesAndDirectoriesToExclude">Filename, directory name, or wildcard to exclude</param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.SynchronizeUploadAsync(System.String,System.String,System.Object)">
            <summary>
            Transfer files that do not exist locally synchronously OR Files that have a
            different byte count OR Files that have a modification date difference in seconds
            greater than 60. The hour difference between the local machine and
            the FTP server is taken into account when CalcHourDifference has been called. By
            default all files and sub directories are attempted to be synchronized.
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60
            ftp.SynchronizeUploadAsync("C:\\Download", "TestDir");
            System.Console.WriteLine("Transferring unsynchronized files to the TestDir FTP folder");
             
            while (ftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60
            ftp.SynchronizeUploadAsync("C:\\Download", "TestDir")
            System.Console.WriteLine("Transferring unsynchronized files to the TestDir FTP folder")
             
            Do While ftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local directory to upload</param>
            <param name="ftpDirectory">The FTP directory to upload to</param>
            <param name="customObject">Your custom object to be returned with Started, Progress, and Completed Events</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.SynchronizeUploadWithDeleteAsync(System.String,System.String,System.Object)">
            <summary>
            Transfer files that do not exist locally synchronously OR Files that have a
            different byte count OR Files that have a modification date difference in seconds
            greater than 60. The hour difference between the local machine and
            the FTP server is taken into account when CalcHourDifference has been called. By
            default all files and sub directories are attempted to be synchronized.
            FTP files and directories will be deleted if they do not exist in the corresponding local directory.
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60
            ftp.SynchronizeUploadWithDeleteAsync("C:\\Download", "TestDir");
            System.Console.WriteLine("Transferring unsynchronized files to the TestDir FTP folder");
             
            while (ftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60
            ftp.SynchronizeUploadWithDeleteAsync("C:\\Download", "TestDir")
            System.Console.WriteLine("Transferring unsynchronized files to the TestDir FTP folder")
             
            Do While ftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local directory to upload</param>
            <param name="ftpDirectory">The FTP directory to upload to</param>
            <param name="customObject">Your custom object to be returned with Started, Progress, and Completed Events</param>		
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.SynchronizeUploadAsync(System.String,System.String)">
            <summary>
            Transfer files that do not exist locally synchronously OR Files that have a
            different byte count OR Files that have a modification date difference in seconds
            greater than 60. The hour difference between the local machine and
            the FTP server is taken into account when CalcHourDifference has been called. By
            default all files and sub directories are attempted to be synchronized.
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60
            ftp.SynchronizeUploadAsync("C:\\Download", "TestDir");
            System.Console.WriteLine("Transferring unsynchronized files to the TestDir FTP folder");
             
            while (ftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60
            ftp.SynchronizeUploadAsync("C:\\Download", "TestDir")
            System.Console.WriteLine("Transferring unsynchronized files to the TestDir FTP folder")
             
            Do While ftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local directory to upload</param>
            <param name="ftpDirectory">The FTP directory to upload to</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.SynchronizeUploadWithDeleteAsync(System.String,System.String)">
            <summary>
            Transfer files that do not exist locally synchronously OR Files that have a
            different byte count OR Files that have a modification date difference in seconds
            greater than 60. The hour difference between the local machine and
            the FTP server is taken into account when CalcHourDifference has been called. By
            default all files and sub directories are attempted to be synchronized.
            FTP files and directories will be deleted if they do not exist in the corresponding local directory.
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60
            ftp.SynchronizeUploadWithDeleteAsync("C:\\Download", "TestDir");
            System.Console.WriteLine("Transferring unsynchronized files to the TestDir FTP folder");
             
            while (ftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60
            ftp.SynchronizeUploadWithDeleteAsync("C:\\Download", "TestDir")
            System.Console.WriteLine("Transferring unsynchronized files to the TestDir FTP folder")
             
            Do While ftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local directory to upload</param>
            <param name="ftpDirectory">The FTP directory to upload to</param>		
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.SynchronizeUpload(System.String,System.String,System.Boolean)">
            <summary>
            Transfer files that do not exist locally synchronously OR Files that have a
            different byte count OR Files that have a modification date difference in seconds
            greater than 60. The hour difference between the local machine and
            the FTP server is taken into account when CalcHourDifference has been called. By
            default all files and sub directories are attempted to be synchronized.
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60
            ftp.SynchronizeUpload("C:\\Download", "TestDir");
            System.Console.WriteLine("transferring unsynchronized files to the TestDir FTP folder");
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60
            ftp.SynchronizeUpload("C:\\Download", "TestDir")
            System.Console.WriteLine("transferring unsynchronized files to the TestDir FTP folder")
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local directory to upload</param>
            <param name="ftpDirectory">The FTP directory to upload to</param>
            <param name="subDirectories">If true, upload sub directories</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.SynchronizeUpload(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Transfer files that meet the wildcard pattern that do not exist remotely OR Files that have a
            different byte count OR Files that have a modification date difference in seconds
            greater than 60. The hour difference between the local machine and
            the FTP server is taken into account when CalcHourDifference has been called. By
            default all files and sub directories are attempted to be synchronized.
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60
            ftp.SynchronizeUpload("C:\\Download", "TestDir", true, "*.txt");
            System.Console.WriteLine("transferring unsynchronized files to the TestDir FTP folder");
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60
            ftp.SynchronizeUpload("C:\\Download", "TestDir", true, "*.txt")
            System.Console.WriteLine("transferring unsynchronized files to the TestDir FTP folder")
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local directory to upload</param>
            <param name="ftpDirectory">The FTP directory to upload to</param>
            <param name="subDirectories">If true, upload sub directories</param>
            <param name="wildCardPattern">The pattern that the files must match</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.SynchronizeUploadWithDelete(System.String,System.String,System.Boolean)">
            <summary>
            Transfer files that do not exist locally synchronously OR Files that have a
            different byte count OR Files that have a modification date difference in seconds
            greater than 60. The hour difference between the local machine and
            the FTP server is taken into account when CalcHourDifference has been called. By
            default all files and sub directories are attempted to be synchronized.
            FTP files and directories will be deleted if they do not exist in the corresponding local directory.
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60
            ftp.SynchronizeUploadWithDelete("C:\\Download", "TestDir");
            System.Console.WriteLine("transferring unsynchronized files to the TestDir FTP folder");
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60
            ftp.SynchronizeUploadWithDelete("C:\\Download", "TestDir")
            System.Console.WriteLine("transferring unsynchronized files to the TestDir FTP folder")
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local directory to upload</param>
            <param name="ftpDirectory">The FTP directory to upload to</param>
            <param name="subDirectories">If true, upload sub directories</param>		
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.SynchronizeUploadAsync(System.String,System.String,System.Boolean,System.Object)">
            <summary>
            Transfer files that do not exist locally synchronously OR Files that have a
            different byte count OR Files that have a modification date difference in seconds
            greater than 60. The hour difference between the local machine and
            the FTP server is taken into account when CalcHourDifference has been called. By
            default all files and sub directories are attempted to be synchronized.
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60
            ftp.SynchronizeUploadAsync("C:\\Download", "TestDir");
            System.Console.WriteLine("Transferring unsynchronized files to the TestDir FTP folder");
             
            while (ftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60
            ftp.SynchronizeUploadAsync("C:\\Download", "TestDir")
            System.Console.WriteLine("Transferring unsynchronized files to the TestDir FTP folder")
             
            Do While ftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local directory to upload</param>
            <param name="ftpDirectory">The FTP directory to upload to</param>
            <param name="subDirectories">If true, upload subdirectories</param>
            <param name="customObject">Your custom object to be returned with Started, Progress, and Completed Events</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.SynchronizeUploadWithDeleteAsync(System.String,System.String,System.Boolean,System.Object)">
            <summary>
            Transfer files that do not exist locally synchronously OR Files that have a
            different byte count OR Files that have a modification date difference in seconds
            greater than 60. The hour difference between the local machine and
            the FTP server is taken into account when CalcHourDifference has been called. By
            default all files and sub directories are attempted to be synchronized.
            FTP files and directories will be deleted if they do not exist in the corresponding local directory.
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60
            ftp.SynchronizeUploadWithDeleteAsync("C:\\Download", "TestDir");
            System.Console.WriteLine("Transferring unsynchronized files to the TestDir FTP folder");
             
            while (ftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60
            ftp.SynchronizeUploadWithDeleteAsync("C:\\Download", "TestDir")
            System.Console.WriteLine("Transferring unsynchronized files to the TestDir FTP folder")
             
            Do While ftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local directory to upload</param>
            <param name="ftpDirectory">The FTP directory to upload to</param>
            <param name="subDirectories">If true, upload subdirectories</param>
            <param name="customObject">Your custom object to be returned with Started, Progress, and Completed Events</param>		
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.SynchronizeUploadAsync(System.String,System.String,System.Boolean)">
            <summary>
            Transfer files that do not exist locally synchronously OR Files that have a
            different byte count OR Files that have a modification date difference in seconds
            greater than 60. The hour difference between the local machine and
            the FTP server is taken into account when CalcHourDifference has been called. By
            default all files and sub directories are attempted to be synchronized.
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60
            ftp.SynchronizeUploadAsync("C:\\Download", "TestDir");
            System.Console.WriteLine("Transferring unsynchronized files to the TestDir FTP folder");
             
            while (ftp.IsBusy == true)
            {
                System.Threading.Thread.Sleep(100);
            }
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Transfer files that do not exist locally OR Files that have a different byte count OR Files that have a modification date difference in seconds greater than 60
            ftp.SynchronizeUploadAsync("C:\\Download", "TestDir")
            System.Console.WriteLine("Transferring unsynchronized files to the TestDir FTP folder")
             
            Do While ftp.IsBusy = True
                System.Threading.Thread.Sleep(100)
            Loop
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount)
                </code>
            </example>
            <param name="localDirectory">The local directory to upload</param>
            <param name="ftpDirectory">The FTP directory to upload to</param>
            <param name="subDirectories">If true, upload subdirectories</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.CompressBytes(KellermanSoftware.NetFtpLibrary.CompressionType,System.Byte[])">
            <summary>
            Compress the passed bytes using the specified compression type
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            byte[] input = System.Text.ASCIIEncoding.ASCII.GetBytes(string.Empty.PadRight(8000, '*'));           
            byte[] results = ftp.CompressBytes(KellermanSoftware.EncryptionLibrary.CompressionType.GZip, input);
             
            Console.WriteLine("Compressed from {0} to {1}", input.Length, results.Length);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            Dim Input As Byte() = System.Text.ASCIIEncoding.ASCII.GetBytes(String.Empty.PadRight(8000, "*"c))
            Dim results As Byte() = ftp.CompressBytes(KellermanSoftware.EncryptionLibrary.CompressionType.GZip, Input)
             
            Console.WriteLine("Compressed from {0} to {1}", Input.Length, results.Length)
                </code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.DecompressBytes(KellermanSoftware.NetFtpLibrary.CompressionType,System.Byte[])">
            <summary>
            Decompress the passed bytes using the specified compression type
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            string originalString = string.Empty.PadRight(8000, '*');
            byte[] input = System.Text.ASCIIEncoding.ASCII.GetBytes(originalString);
             
            encrypted = ftp.CompressBytes(KellermanSoftware.EncryptionLibrary.CompressionType.GZip, input);
            decrypted = ftp.DecompressBytes(KellermanSoftware.EncryptionLibrary.CompressionType.GZip, encrypted);
            string decryptedString = System.Text.ASCIIEncoding.ASCII.GetString(decrypted);
             
            Console.WriteLine("The strings are equal : {0}", originalString == decryptedString);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            Dim originalString As String = String.Empty.PadRight(8000, "*"c)
            Dim Input As Byte() = System.Text.ASCIIEncoding.ASCII.GetBytes(originalString)
             
            encrypted = ftp.CompressBytes(KellermanSoftware.EncryptionLibrary.CompressionType.GZip, Input)
            decrypted = ftp.DecompressBytes(KellermanSoftware.EncryptionLibrary.CompressionType.GZip, encrypted)
            Dim decryptedString As String = System.Text.ASCIIEncoding.ASCII.GetString(decrypted)
             
            Console.WriteLine("The strings are equal : {0}", originalString = decryptedString)
                </code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.CompressStream(KellermanSoftware.NetFtpLibrary.CompressionType,System.IO.Stream,System.IO.Stream)">
            <summary>
            Compress a stream using the specified compression type
            </summary>
            <param name="compressionType"></param>
            <param name="input"></param>
            <param name="output"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.DecompressStream(KellermanSoftware.NetFtpLibrary.CompressionType,System.IO.Stream,System.IO.Stream)">
            <summary>
            Decompress a stream using the specified compression type
            </summary>
            <param name="compressionType"></param>
            <param name="input"></param>
            <param name="output"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.CompressFile(KellermanSoftware.NetFtpLibrary.CompressionType,System.String,System.String)">
            <summary>
            Compress a file using the specified compression type
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            string inputFilePath = "c:\\bigfile.txt");
            string outputFilePath = "c:\\compressed.txt");
            ftp.CompressFile(KellermanSoftware.EncryptionLibrary.CompressionType.GZip, inputFilePath, outputFilePath);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            Dim inputFilePath As String = "c:\bigfile.txt")
            Dim outputFilePath As String = "c:\compressed.txt")
            ftp.CompressFile(KellermanSoftware.EncryptionLibrary.CompressionType.GZip, inputFilePath, outputFilePath)
                </code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.DecompressFile(KellermanSoftware.NetFtpLibrary.CompressionType,System.String,System.String)">
            <summary>
            Decompress a file using the specified compression type
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            string inputFilePath = "c:\\bigfile.txt");
            string compressedPath = "c:\compressed.txt");
            string decompressedPath = "c:\decompressed.txt");
             
            ftp.CompressFile(KellermanSoftware.EncryptionLibrary.CompressionType.GZip, inputFilePath, compressedPath);
            ftp.DecompressFile(KellermanSoftware.EncryptionLibrary.CompressionType.GZip, compressedPath, decompressedPath);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            Dim inputFilePath As String = "c:\bigfile.txt")
            Dim compressedPath As String = "c:\compressed.txt")
            Dim decompressedPath As String = "c:\decompressed.txt")
             
            ftp.CompressFile(KellermanSoftware.EncryptionLibrary.CompressionType.GZip, inputFilePath, compressedPath)
            ftp.DecompressFile(KellermanSoftware.EncryptionLibrary.CompressionType.GZip, compressedPath, decompressedPath)
                </code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.WildcardToRegex(System.String)">
            <summary>
            Translate a wildcard pattern to a regex string
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            string wildcard = "*.cs";
            string regexString = ftp.WildcardToRegex(wildcard);
             
            Console.WriteLine("Pattern {0} was changed to {1}",wildcard,regexString);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            Dim wildcard As String = "*.cs"
            Dim regexString As String = ftp.WildcardToRegex(wildcard)
             
            Console.WriteLine("Pattern {0} was changed to {1}",wildcard,regexString)
                </code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.GetDirectorySize(System.String)">
            <summary>Gets the size of a remote directory in bytes</summary>
            <returns>The directory size, or -1 on failure</returns>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Gets the size of a remote directory  
            long size = ftp.GetDirectorySize("TestDir");
             
            System.Console.WriteLine("The TestDir directory has {0}( KB)", size / 1024);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Gets the size of a remote directory  
            Dim size As Long = ftp.GetDirectorySize("TestDir")
             
            System.Console.WriteLine("The TestDir directory has {0}( KB)", size / 1024)
                </code>
            </example>
            <param name="folderName">Name of the folder in the current directory</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.GetCrcLocal(System.String)">
            <summary>
            Get the CRC32 of a local file in hexadecimal
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.FileExistsByWildcard(System.String)">
            <summary>
            Returns true if a file exists in the current directory matching the wildcard pattern
            </summary>
            <param name="wildcardPattern"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.FileExistsByRegex(System.Text.RegularExpressions.Regex)">
            <summary>
            Returns true if a file exists in the current directory matching the regular expression
            </summary>
            <param name="regularExpression"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.DeleteByWildcard(System.String,System.Boolean)">
            <summary>
            Deletes all of the files in the current directory matching a pattern
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Deletes all of the files in the current directory matching a pattern 
            System.Console.WriteLine("We are trying to delete all files in the current directory and all subdirs");
             
            ftp.DeleteByWildcard("*.txt", true);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Deletes all of the files in the current directory matching a pattern
            System.Console.WriteLine("We are trying to delete all files in the current directory and all subdirs")
             
            ftp.DeleteByWildcard("*.txt", True)
                </code>
            </example>
            <param name="pattern">Files to delete, in the format of *.ext</param>
            <param name="subDirectories">Whether or not to recurse sub directories</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.DirectoriesEqual(System.String,System.String)">
            <summary>
            Returns true if the Cyclic Redundancy Check Passes for all files in two local directories
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            bool result = ftp.DirectoriesEqual("c:\\directory1", "c:\\directory2");
            Console.WriteLine("The directories are the same : {0}",result);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            Dim result As Boolean = ftp.DirectoriesEqual("c:\directory1", "c:\directory2")
            Console.WriteLine("The directories are the same : {0}",result)
                </code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.DeleteByWildcard(System.Text.RegularExpressions.Regex,System.Boolean)">
            <summary>Deletes a file by a regular expression.</summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Delete files that start with the letter B
            ftp.CurrentDirectory = "test";
            ftp.DeleteByDateRange(new Regex("^B.+$"), true);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Delete files that start with the letter B
            ftp.CurrentDirectory = "test"
            ftp.DeleteByDateRange(New Regex("^B.+$"), True)
                </code>
            </example>
            <param name="pattern">Regex to match</param>
            <param name="subDirectories">Whether to recurse subdirectories</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.DeleteByDateRange(System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Delete all files in the current FTP directory with a modification date within the
            specified date range
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Delete files from yesterday until right now in the directory "test"
            DateTime minDate = DateTime.Now.AddDays(-1);
            DateTime maxDate = DateTime.Now;
            ftp.CurrentDirectory = "test";
            ftp.DeleteByDateRange(minDate, maxDate, subDirectories);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Delete files from yesterday until right now in the directory "test"
            Dim minDate As DateTime = DateTime.Now.AddDays(-1)
            Dim maxDate As DateTime = DateTime.Now
            ftp.CurrentDirectory = "test"
            ftp.DeleteByDateRange(minDate, maxDate, subDirectories)
                </code>
            </example>
            <param name="minDate">The minimum file date to delete</param>
            <param name="maxDate">The maximum file date to delete</param>
            <param name="subDirectories">If true, delete files in sub directories</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.CalcHourDifference">
            <summary>
            Calculate the difference in hours between the local pc and the remote ftp server.
            The current logged in user must have write access to the current ftp directory.
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Calculate the hour difference between this PC and the FTP Server
            ftp.CalcHourDifference();
            System.Console.WriteLine("The difference in hours is {0}", ftp.HourDifference);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Calculate the hour difference between this PC and the FTP Server
            ftp.CalcHourDifference()
            System.Console.WriteLine("The difference in hours is {0}", ftp.HourDifference)
                </code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.CrcEqualLocal(System.String,System.String)">
            <summary>
            Return true if the Cyclic Redundancy Check is the same for two local files. This
            is a fast way to compare if two files are the same
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            bool result = ftp.CrcEqual("c:\\file1.txt", "c:\\file2.txt");
            Console.WriteLine("The files are the same : {0}",result);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            Dim result As Boolean = ftp.CrcEqual("c:\file1.txt", "c:\file2.txt")
            Console.WriteLine("The files are the same : {0}",result)
                </code>
            </example>
            <param name="file1">The local file path of the first file</param>
            <param name="file2">The local file path of the second file</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.GetFileSize(System.String)">
            <summary>Gets the file size of a remote file in bytes.</summary>
            <returns>The file size, or -1 on failure</returns>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Gets the file size of a remote file 
            long size = ftp.GetFileSize("a.txt");
             
            System.Console.WriteLine("a.txt`s size is {0}", size);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Gets the file size of a remote file
            Dim size As Long = ftp.GetFileSize("a.txt")
             
            System.Console.WriteLine("a.txt`s size is {0}", size)
                </code>
            </example>
            <param name="fileName">Name of file in the current directory</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.Connect">
            <summary>
            Open the FTP Server connection explicitly and leave it open until explicitly
            closed.
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            ftp.Connect();
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            ftp.Connect()
                </code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.Cancel">
            <summary>
            Cancels any async transfers
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            ftp.UploadDirectoryAsync("C:\\Download", "TestDir");
             
            //we wait 1 second for data to be Transferred 
            System.Threading.Thread.Sleep(1000);
             
            //Cancels any async transfers 
            System.Console.WriteLine("We are canceling any async transfer");
            ftp.Cancel();
             
            System.Console.WriteLine("Async operations {0) cancelled", ftp.IsBusy == true ? "have not" : "have been" );
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            ftp.UploadDirectoryAsync("C:\\Download", "TestDir")
             
            'we wait 1 second for data to be Transferred
            System.Threading.Thread.Sleep(1000)
             
            'Cancels any async transfers
            System.Console.WriteLine("We are canceling any async transfer")
            ftp.Cancel()
             
            If ftp.IsBusy = True Then
                System.Console.WriteLine("Async operations {0) cancelled","have not")
            Else
                System.Console.WriteLine("Async operations {0) cancelled","have been")
            End If
                </code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.EnableLogging(System.IO.MemoryStream@)">
            <summary>
            Log all FTP operations to a memory stream. 
            </summary>
            <param name="memStream"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.EnableLogging">
            <summary>
            Log all FTP commands, responses, and exceptions to the console.
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.EnableLogging(System.String)">
            <summary>
            Log all FTP commands, responses and exceptions to a file.
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.DisableLogging">
            <summary>
            Disable all logging.
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.ClearLog(System.String)">
            <summary>
            Clear the file log
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.ClearLog(System.IO.MemoryStream@)">
            <summary>
            Clear the memory stream
            </summary>
            <param name="memStream"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.GetDirectorySizeForUpload(System.IO.DirectoryInfo,System.String,System.Boolean,KellermanSoftware.NetFtpLibrary.DirectoryTransferModes,System.Object)">
            <summary>
            Recursively get a local directories size and add each file/directory to upload into FilesToTransfer
            </summary>
            <param name="d">The path of a local directory</param>
            <param name="filter">The filter to screen what files to transfer</param>
            <param name="mode">What type of filter to use</param>
            <param name="remotePath">The remote directory to determine directory size</param>
            <param name="subDirectories">True to recurse the sub directories</param>
            <returns>The size of the directory</returns>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.VerifyLocalDirectoryForUpload(System.String)">
            <summary>
            Ensure that the local directory can be uploaded
            </summary>
            <param name="localDirectory"></param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.VerifyFtpDirectoryForUpload(System.String)">
            <summary>
            Verify that we have an FTP directory name
            </summary>
            <param name="ftpDirectory"></param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.GetRemoteDirectorySize(System.String)">
            <summary>
            Recursively get a remote directories size
            </summary>
            <param name="dir">Sub folder name</param>
            <returns>Size of the directory</returns>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.GetRemoteDirectorySizeForDownload(System.String,System.String,System.Boolean,KellermanSoftware.NetFtpLibrary.DirectoryTransferModes,System.Object)">
            <summary>
            Recursively get a remote directories size and create the structures needed to transfer it
            </summary>
            <param name="ftpDirectory">The path of a remote directory</param>
            <param name="filter">The filter to screen what files to transfer</param>
            <param name="mode">What type of filter to use</param>
            <param name="localPath">The remote directory to determine directory size</param>
            <param name="subDirectories">True to recurse the sub directories</param>
            <returns>The size of a remote directory</returns>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.VerifyFtpDirectoryForDownload(System.String)">
            <summary>
            Verify that the FTP directory exists
            </summary>
            <param name="ftpDirectory"></param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.VerifyLocalDirectoryForDownload(System.String)">
            <summary>
            Ensure that the local directory can be written to
            </summary>
            <param name="localDirectory"></param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.VerifyLocalStreamForDownload(System.IO.Stream,System.Int64)">
            <summary>
            Verify that the local stream can be downloaded
            </summary>
            <param name="localStream"></param>
            <param name="restart"></param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.VerifyFtpPathForDownload(System.String,System.Int64,System.Int64)">
            <summary>
            Ensure the file exists on the FTP Server
            </summary>
            <param name="ftpFileName"></param>
            <param name="ftpFileSize"></param>
            <param name="restart"></param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.VerifyLocalFilePathForDownload(System.String,System.Int64)">
            <summary>
            Verify that the local path exists and that we can download to it
            </summary>
            <param name="localFilePath"></param>
            <param name="restart"></param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.VerifyLocalStreamForUpload(System.IO.Stream,System.Int64)">
            <summary>
            Ensure the local stream can be uploaded
            </summary>
            <param name="localStream"></param>
            <param name="restart"></param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.VerifyLocalFilePathForUpload(System.String,System.Int64)">
            <summary>
            Verify that the local file exists 
            </summary>
            <param name="localFilePath"></param>
            <param name="restart"></param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.GetLocalFileSize(System.String)">
            <summary>
            Get the size in bytes of a local file
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.ClearProgress">
            <summary>
            Clear the progress statistics
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.VerifyFtpPathForUpload(System.String)">
            <summary>
            Make sure there is an FTP path 
            </summary>
            <param name="ftpFileName"></param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.Throttle">
            <summary>
            Calculates the current and average transfer speed, throttling it if needed
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.DisconnectImplicit">
            <summary>
            Disconnect implicitly 
            </summary>
        </member>
        <member name="T:KellermanSoftware.NetFtpLibrary.FTP.CustomLoggerEventHandler">
            <summary>
            Occurs when there is something to log
            </summary>
            <param name="sender"></param>
            <param name="message"></param>
        </member>
        <member name="T:KellermanSoftware.NetFtpLibrary.FTP.CommandSentEventHandler">
            <summary>
            Delegate of a function to be called when an event is sent to the FTP server
            </summary>
            <param name="sender">The FTP class firing the event</param>
            <param name="e">The structure holding the command and parameters</param>
        </member>
        <member name="T:KellermanSoftware.NetFtpLibrary.FTP.ResponseReceivedEventHandler">
            <summary>
            Delegate of a function to be called when an event is received from the FTP server
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:KellermanSoftware.NetFtpLibrary.FTP.TransferProgressChangedEventHandler">
            <summary>
            Called during a transfer to report the progress completed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:KellermanSoftware.NetFtpLibrary.FTP.TransferStartedEventHandler">
            <summary>
            Fired when an asyncronous transfer is started.
            When transferring entire directories, it is fired once right before the first file begins transferring.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:KellermanSoftware.NetFtpLibrary.FTP.TransferCompleteEventHandler">
            <summary>
            Occurs when an asynchronous download/upload operation completes.
            When transferring entire directories, it is fired when everything is transferred
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:KellermanSoftware.NetFtpLibrary.FTP.FileTransferCompleteEventHandler">
            <summary>
            Occurs when an asynchronous download/upload file completes.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:KellermanSoftware.NetFtpLibrary.FTP.FailureEventHandler">
            <summary>
            Occurs when an error occurs during an asynchronous operation.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:KellermanSoftware.NetFtpLibrary.FTP.TransferCancelEventHandler">
            <summary>Occurs when an asynchronous download/upload operation completes.
            When transferring entire directories, it is fired when everything is transferred</summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="E:KellermanSoftware.NetFtpLibrary.FTP.ResponseReceivedEvent">
            <summary>
            Fired when a response is received from the FTP Sever
            </summary>
        </member>
        <member name="E:KellermanSoftware.NetFtpLibrary.FTP.FileProgressEvent">
            <summary>
            Fired for upload/download progress of the current file
            </summary>
        </member>
        <member name="E:KellermanSoftware.NetFtpLibrary.FTP.OverallProgressEvent">
            <summary>
            When downloading/uploading directories this is the overall progress 
            </summary>
        </member>
        <member name="E:KellermanSoftware.NetFtpLibrary.FTP.TransferStartedEvent">
            <summary>
            Fired when an asynchronous transfer has started
            </summary>
        </member>
        <member name="E:KellermanSoftware.NetFtpLibrary.FTP.TransferCompleteEvent">
            <summary>
            Fired when an asynchronous transfer has completed
            </summary>
        </member>
        <member name="E:KellermanSoftware.NetFtpLibrary.FTP.FileTransferCompleteEvent">
            <summary>
            Fired when an asynchronous transfer has completed
            </summary>
        </member>
        <member name="E:KellermanSoftware.NetFtpLibrary.FTP.CommandSentEvent">
            <summary>
            Fired when a command is sent to the FTP server
            </summary>
        </member>
        <member name="E:KellermanSoftware.NetFtpLibrary.FTP.FailureEvent">
            <summary>
            Fired when an exception occurs during an asyncronous operation
            </summary>
        </member>
        <member name="E:KellermanSoftware.NetFtpLibrary.FTP.TransferCancelEvent">
            <summary>
            Fired when an asynchronous transfer has cancelled
            </summary>
        </member>
        <member name="T:KellermanSoftware.NetFtpLibrary.FTP.CommandSentEventArgs">
            <summary>
            Structure passed with events when a command is sent to the remote server
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetFtpLibrary.FTP.CommandSentEventArgs.command">
            <summary>
            The FTP command
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetFtpLibrary.FTP.CommandSentEventArgs.param">
            <summary>
            A parameter passed with the command, normally a file or directory name - can be null
            </summary>
        </member>
        <member name="T:KellermanSoftware.NetFtpLibrary.FTP.ResponseReceivedEventArgs">
            <summary>
            Structure to hold the response from the FTP Server
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetFtpLibrary.FTP.ResponseReceivedEventArgs.code">
            <summary>
            The response code received from the FTP Server
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetFtpLibrary.FTP.ResponseReceivedEventArgs.text">
            <summary>
            The response text received from the FTP Server
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.Dispose">
            <summary>
            Disposes the object by canceling any async transfer and destroying the FTPRequest object
            </summary>
            <example>
            	<code lang="CS">
            //Disposes the object by canceling any async transfer 
            //and destroying the FTPRequest object 
             
            // Dispose is called by .net when writing something like
            using (FTP ftp = new FTP())
            {
             
            }
            // dispose is called here for the ftp object
             
            //Alternate way
            FTP ftp = new FTP();
            ftp.Dispose();
                </code>
            	<code lang="VB">
            'Disposes the object by canceling any async transfer
            'and destroying the FTPRequest object
             
            ' Dispose is called by .net when writing something like
            Using ftp As FTP = New FTP()
             
            End Using
            ' dispose is called here for the ftp object
             
            'Alternate way
            Dim ftp As FTP = New FTP()
            ftp.Dispose()
                </code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.CheckLicense(System.String,System.String)">
            <summary>
            The variables below are specific to the licensing component
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.#ctor">
            <summary>Constructor for Trial Version.</summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode
                </code>
            	<code lang="VB">
            FTP ftp = new FTP() 'Trial Mode
                </code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.#ctor(System.String,System.String)">
            <summary>Constructor for Licensed Version.</summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP("place user name here", "place license key here");
                </code>
            	<code lang="VB">
            FTP ftp = new FTP("place user name here", "place license key here")
                </code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.#ctor(System.String)">
            <summary>
            Extend the trial of the Software
            </summary>
            <param name="trialExtensionCode"></param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.Finalize">
            <summary>
            Finalize
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.Pbsz0After">
            <summary>
            When connecting to SSL by default it tries to issue a PBSZ 0 before logging in.  By setting to true it only tries PBSZ 0 after logging in.  The default is false.
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.ImplicitSslPort">
            <summary>
            Gets or sets the implicit SSL port.  The default is 990
            </summary>
            <value>The implicit SSL port.</value>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.SslProtocol">
            <summary>
            The SSL or TLS protocol (The default is SslProtocols.Default which is SSL 3.0 or TLS 1.0)
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.UsePort990ForImplicitSsl">
            <summary>
            By default, Port 990 means implicit SSL.  Setting to false will allow non-ssl on port 990 or explicit SSL on port 990
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.EnsureCertificates">
            <summary>
            By default, any SSL Certificate errors are ignored.  If EnsureCertificates is set to true, SSL Certificate errors will be thrown as exceptions
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.ReconnectRetryTestCommand">
            <summary>
            When a connection is lost and we are attempting to reconnect. This command is sent to ensure the server is responding.  This defaults to NOOP
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.FtpDirectorySeparator">
            <summary>
            Directory Separator Character.  Default is '/'
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.PadCrc">
            <summary>
            Pad a zero to the front of the local CRC if there is an odd number of digits.
            Some FTP Servers add a pad of zero to the front if there is an odd number of digits and some do not.
            The default is false.
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.SynchronizationMode">
            <summary>
            Determines which files are transferred during synchronization.  Default is CopyIfTheSizeIsDifferentOrDateIsNewer
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.UseStandardDirectoryListing">
            <summary>
            When UseStandardDirectoryListing is true, a MLSD command is given to get the directory listing instead of the LIST command.  
            Permissions are not available with MLSD 
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.UseAuthSsl">
            <summary>
             When EnableSSL is true, the default is to use AUTH TLS when connecting. If this property is set to true, use AUTH SSL
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.StrictDirectoryParsing">
            <summary>
            When doing a GetDirectoryListing if a directory line cannot be parsed, throw an exception.  The default is false.
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.DirectoryParseFormats">
            <summary>
            	<para>Contains regular expression formats to parse FTP directory listings. By
                default if a directory entry cannot be parsed it is not put into the list. To see
                lines that cannot be parsed, turn on StrictDirectoryParsing. You may add your own
                parsing formats to the list. Please use these regular expression groups. See the
                examples below.</para>
            	<para><strong>Regular Expression Groups</strong></para>
            	<list type="bullet">
            		<item>dir - Directory flag</item>
            		<item>permission - Permissions for the file or directory</item>
            		<item>size - The size of the file</item>
            		<item>timestamp - The date and time information (This is further parsed by the
                    DateParseFormats)</item>
            		<item>name - The name of the file or directory</item>
            	</list>
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            ftp.DirectoryParseFormats.Add(@"^(?&lt;dir&gt;[\-d])(?&lt;permission&gt;([\-rwxt]+))\s+\d+\s+\w+\s+\w+\s+(?&lt;size&gt;\d+)\s+(?&lt;timestamp&gt;\w+\s+\d+\s+\d{1,2}:\d{2})\s+(?&lt;name&gt;.+)");
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            ftp.DirectoryParseFormats.Add("^(?&lt;dir&gt;[\-d])(?&lt;permission&gt;([\-rwxt]+))\s+\d+\s+\w+\s+\w+\s+(?&lt;size&gt;\d+)\s+(?&lt;timestamp&gt;\w+\s+\d+\s+\d{1,2}:\d{2})\s+(?&lt;name&gt;.+)")
                </code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.EnableSSL">
            <summary>
            If true the FTP component connects via SSL using the AUTH TLS command. The remote
            FTP server must have an SSL certificate installed for the FTP server in order to use
            SSL.
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Makes a secure transfer
            ftp.EnableSSL = true;
            System.Console.WriteLine("The ftp connection is {0}", ftp.EnableSSL == true ? "secure" : "not secure");
             
            ftp.DownloadFile("a.txt", "a.txt");
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Makes a secure transfer
            ftp.EnableSSL = True
            If ftp.EnableSSL = True Then
                System.Console.WriteLine("The ftp connection is {0}","secure")
            Else
                System.Console.WriteLine("The ftp connection is {0}","not secure")
            End If
             
            ftp.DownloadFile("a.txt", "a.txt")
                </code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.UseModeZ">
            <summary>
            Use Mode Z Compression for Data Transfers
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.UsePassive">
            <summary>If true, use passive FTP mode. The default is passive mode.</summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //set to true if you are behind a firewall
            ftp.UsePassive = false;
            System.Console.WriteLine("{0} FTP is enabled", ftp.UsePassive == true ? "Passive" : "Active");
             
            ftp.DownloadFile("a.txt", "a.txt");
                </code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.UseCCC">
            <summary>
            Issue a CCC (Clear Command Channel) after connecting with SSL. Required for some FTP Servers when using a NAT.
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.UseHostForPasv">
            <summary>
            Uses the host IP Address instead of the PASV IP Address Response. Sometimes required when using a NAT.
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.Utf8Mode">
            <summary>
            Use UTF-8 encoding
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.UseBinary">
            <summary>
            If true, use binary transfer mode else use ascii mode. The default mode is
            binary.
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            // set the transfer type:  binary transfer mode or text mode 
            ftp.UseBinary = true;
            System.Console.WriteLine("Current transfer type is is {0}", ftp.UseBinary == true ? "binary" : "text");
             
            ftp.DownloadFile("a.txt", "a.txt");
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            ' set the transfer type:  binary transfer mode or text mode 
            ftp.UseBinary = True
            If ftp.UseBinary = True Then
                System.Console.WriteLine("Current transfer type is is {0}","binary")
            Else
                System.Console.WriteLine("Current transfer type is is {0}","text")
            End If
             
            ftp.DownloadFile("a.txt", "a.txt")
                </code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.DateParseFormats">
            <summary>
            	<para>Contains regular expression formats to parse the date and time portion of FTP
                directory listings. You may add your own date/time parsing format for your FTP
                server. Please put the parsing expressions into .NET regular expression groups. See
                the examples below.</para>
            	<para><strong>Regular Expression Groups</strong></para>
            	<list type="bullet">
            		<item>month</item>
            		<item>day</item>
            		<item>year</item>
            		<item>hour</item>
            		<item>minute</item>
            		<item>m - am/pm designator</item>
            	</list>
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            ftp.DateParseFormats.Add(@"(?&lt;month&gt;\d{2})-(?&lt;day&gt;\d{2})-(?&lt;year&gt;\d{2})\s+(?&lt;hour&gt;\d{2}):(?&lt;minute&gt;\d{2})(?&lt;m&gt;[Aa|Pp][mM])");
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            ftp.DateParseFormats.Add("(?&lt;month&gt;\d{2})-(?&lt;day&gt;\d{2})-(?&lt;year&gt;\d{2})\s+(?&lt;hour&gt;\d{2}):(?&lt;minute&gt;\d{2})(?&lt;m&gt;[Aa|Pp][mM])")
                </code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.DebugSSL">
            <summary>
            When EnableLogging() is used, performs verbose logging of SSL Certificates and Streams
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.CheckXCrc">
            <summary>
            If true, ensure the integrity of the transfer by issuing an XCRC.  
            Your FTP Server must support XCRC.  See the Features() method.
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.ClientCertificates">
            <summary>
            Use a local X509 Client Certificate to encrypt an SSL FTP Session
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.Timeout">
            <summary>
            Gets/Sets the number of milliseconds to wait for a request from the FTP server.
            The default is to wait 30000 (30 seconds).
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Gets/Sets the number of milliseconds to wait for a request 
            System.Console.WriteLine("The FTP component currently waits {0} milliseconds for a request before throwing an exception", ftp.Timeout);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Gets/Sets the number of milliseconds to wait for a request 
            System.Console.WriteLine("The FTP component currently waits {0} milliseconds for a request before throwing an exception", ftp.Timeout)
                </code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.AccountName">
            <summary>
            Account Name to use for the lesser used ACCT command required by some FTP Servers
            This is different than the UserName and Password
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.AccountPassword">
            <summary>
            Account Password to use for the lesser used ACCT command required by some FTP Servers
            This is different than the UserName and Password
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTP.IsConnected">
            <summary>Returns true if we are connected to the FTP server.</summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //It should default to false
            Console.WriteLine("Connected: {0}", ftp.IsConnected);
             
            ftp.Connect();
            //We should now be connected
            Console.WriteLine("Connected: {0}", ftp.IsConnected);
             
            ftp.Disconnect();
            //We are now disconnected
            Console.WriteLine("Connected: {0}", ftp.IsConnected);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'It should default to false
            Console.WriteLine("Connected: {0}", ftp.IsConnected)
             
            ftp.Connect()
            'We should now be connected
            Console.WriteLine("Connected: {0}", ftp.IsConnected)
             
            ftp.Disconnect()
            'We are now disconnected
            Console.WriteLine("Connected: {0}", ftp.IsConnected)
                </code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.UploadFile(System.String,System.String,System.Int64)">
            <summary>
            Upload a file name synchronously using FTP
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            System.Console.WriteLine("We are uploading the a.txt file the Current FTP folder .This is a blocking call");
             
            ftp.UploadFile("C://Download/a.txt", "a.txt");
             
            System.Console.WriteLine("a.txt {0}", ftp.FileExists("a.txt") == true ? "is on the ftp server" : "does not exist on the ftp server");
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            System.Console.WriteLine("We are uploading the a.txt file the Current FTP folder .This is a blocking call")
             
            ftp.UploadFile("C://Download/a.txt", "a.txt")
             
            If ftp.FileExists("a.txt") = True Then
                System.Console.WriteLine("a.txt {0}","is on the ftp server")
            Else
                System.Console.WriteLine("a.txt {0}","does not exist on the ftp server")
            End If
                </code>
            </example>
            <param name="localFilePath">The full path of the file, including the file name</param>
            <param name="ftpFileName">The full path of the FTP file, including the ftp directory and file name</param>
            <param name="restart">The byte offset to begin uploading</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.GetStartingBytes(System.String,System.Int64)">
            <summary>
            Get the first bytes in a file
            </summary>
            <param name="ftpFile"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.DownloadFile(System.String,System.String,System.Int64)">
            <summary>
            Download a file name synchronously using FTP from the specified byte
            offset
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            System.Console.WriteLine("We are downloading the a.txt file.  This is a blocking call");
             
            ftp.DownloadFile("a.txt", "a.txt");
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            System.Console.WriteLine("We are downloading the a.txt file.  This is a blocking call")
             
            ftp.DownloadFile("a.txt", "a.txt")
             
            System.Console.WriteLine("{0} files have been Transferred", ftp.FileCount)
                </code>
            </example>
            <param name="localFilePath">The full path of the file, including the file name</param>
            <param name="ftpFileName">The full path of the FTP file, including the ftp directory and file name</param>
            <param name="restart">The byte offset to start downloading</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.DeleteFile(System.String)">
            <summary>
            Delete a file in the current FTP directory
            </summary>
            <returns>True if the file is successfully deleted OR the file does not exist</returns>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Delete a file in the current FTP directory 
            System.Console.WriteLine("We are trying to delete TestFile");
             
            bool status = ftp.DeleteFile("TestFile");
             
            System.Console.WriteLine("TestFile {0} deleted", status == true ? "has been" : "could not be");
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Delete a file in the current FTP directory
            System.Console.WriteLine("We are trying to delete TestFile")
             
            Dim status As Boolean = ftp.DeleteFile("TestFile")
             
            If status = True Then
                System.Console.WriteLine("TestFile {0} deleted","has been")
            Else
                System.Console.WriteLine("TestFile {0} deleted","could not be")
            End If
                </code>
            </example>
            <param name="fileName">The file to delete</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.PreprocessLongLine(System.String)">
            <summary>
            Split out a raw directory listing that is all one line
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.ParseStandardDirectoryListing(System.String)">
            <summary>
            Parse a Standardized Directory Listing returned from an MLSD command
            </summary>
            <param name="rawListing"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.ParseDirectoryListing(System.String)">
            <summary>
            Parse the directory listing into a list of FTPFileInfo objects
            This is used for unit testing of directory formats
            </summary>
            <param name="rawDirectoryListing">The RAW Listing from the FTP Server</param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.GetDirectoryListing">
            <summary>
            Return a list of the files in the current ftp directory
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Return a list of the files and dirs in the current ftp directory 
            List&lt;FTPFileInfo&gt; files = ftp.GetDirectoryListing();
             
            System.Console.WriteLine("Listing the files/dirs in the current FTP directory");
             
            foreach (FTPFileInfo fi in files)
            {
                System.Console.WriteLine("{0} --  {1} ", fi.FileName, fi.IsDirectory);
            }
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Return a list of the files and dirs in the current ftp directory
            List And lt
            FTPFileInfo And gt
            files = ftp.GetDirectoryListing()
             
            System.Console.WriteLine("Listing the files/dirs in the current FTP directory")
             
            For Each fi As FTPFileInfo In files
               System.Console.WriteLine("{0} --  {1} ", fi.FileName, fi.IsDirectory)
            Next fi
                </code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.GetNameList">
            <summary>
            Uses NLST to get a list of the file names in the current directory
            See also:  GetRawDirectoryListing, GetDirectoryListing
            </summary>
            <returns>A list of files</returns>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.GetRawStandardDirectoryListing">
            <summary>
            Returns a raw standard directory listing of the current FTP folder via the MLSD command
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.GetRawDirectoryListing">
            <summary>
            Returns the raw directory listing of the current FTP folder via the LIST command
            </summary>
            <returns>String representing a directory listing</returns>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Return a raw list of the files and dirs in the current ftp directory 
            string raw = ftp.GetRawDirectoryListing();
             
            System.Console.WriteLine(raw);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Return a raw list of the files and dirs in the current ftp directory
            Dim raw As String = ftp.GetRawDirectoryListing()
             
            System.Console.WriteLine(raw)
                </code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.GetRawDirectoryListing(System.String)">
            <summary>
            Returns the raw directory listing of the current FTP folder via the passed in command.  Examples:  LIST, LIST -R, MLSD etc.
            </summary>
            <returns>String representing a directory listing</returns>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Return a raw list of the files and dirs in the current ftp directory 
            string raw = ftp.GetRawDirectoryListing("LIST");
             
            System.Console.WriteLine(raw);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Return a raw list of the files and dirs in the current ftp directory
            Dim raw As String = ftp.GetRawDirectoryListing("LIST")
             
            System.Console.WriteLine(raw)
                </code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.Help">
            <summary>
            Returns a list of supported commands on the FTP Server by issuing a HELP Command
            </summary>
            <returns>Supported Commands</returns>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.Features">
            <summary>
            Return a list of features supported by the FTP Server by issuing a FEAT command.
            </summary>
            <returns>Supported Features</returns>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.Statistics">
            <summary>
            Issue a STAT command to the FTP Server and return the current statistics for the FTP Session
            </summary>
            <returns>Statistics</returns>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.GetFTPServerType">
            <summary>Get the FTP Server type (uses the SYST command)</summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            string result = ftp.GetFTPServerType();
            Console.WriteLine("The server type is {0}",result);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            Dim result As String = ftp.GetFTPServerType()
            Console.WriteLine("The server type is {0}",result)
                </code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.RenameDirectory(System.String,System.String)">
            <summary>
            Renames a directory in the current FTP directory
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Renames a directory in the current FTP directory 
            bool status = ftp.RenameDirectory("TestDir", "newDir");
             
            if (status == true)
                ftp.RenameDirectory("newDir", "TestDir");
             
            System.Console.WriteLine("TestDir has {0} renamed to newDir and back again", status == true ? "been" : "not been");
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Renames a directory in the current FTP directory
            Dim status As Boolean = ftp.RenameDirectory("TestDir", "newDir")
             
            If status = True Then
               ftp.RenameDirectory("newDir", "TestDir")
            End If
             
            If status = True Then
                System.Console.WriteLine("TestDir has {0} renamed to newDir and back again","been")
            Else
                System.Console.WriteLine("TestDir has {0} renamed to newDir and back again","not been")
            End If
                </code>
            </example>
            <param name="oldName">The current directory name</param>
            <param name="newName">The new directory name</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.CrcEqualFtp(System.String,System.String)">
            <summary>
            Returns true if the CRC matches for the local file and the FTP file
            The FTP server must support the XCRC command
            </summary>
            <param name="localFile"></param>
            <param name="ftpFile"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.GetXCrc(System.String)">
            <summary>
            Get the XCRC aka CRC32 of an FTP file in hexadecimal.
            The FTP Server must support XCRC.  See the Features() method
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.SendNoop">
            <summary>  
            Send a No Operation command 
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            bool result = ftp.SendNoop();
            Console.WriteLine("The operation was successfull : {0}",result);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            Dim result As Boolean = ftp.SendNoop()
            Console.WriteLine("The operation was successfull : {0}",result)
                </code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.FileExists(System.String)">
            <summary>
            Check to see if a file exists in the current FTP directory
            </summary>
            <returns>True if the file exists in the current FTP directory</returns>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Check to see if a file exists in the current FTP directory 
            bool status = ftp.FileExists("a.txt");
             
            System.Console.WriteLine("a.txt {0} on the server", status == true ? "exists" : "does not exist");
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Check to see if a file exists in the current FTP directory
            Dim status As Boolean = ftp.FileExists("a.txt")
             
            If status = True Then
                System.Console.WriteLine("a.txt {0} on the server","exists")
            Else
                System.Console.WriteLine("a.txt {0} on the server","does not exist")
            End If
                </code>
            </example>
            <param name="fileName">The FTP file name</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.DirectoryExists(System.String)">
            <summary>Check to see if an FTP directory exists.</summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            bool result = ftp.DirectoryExists("/test")
            Console.WriteLine("The FTP directory exists : {0}",result);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            Dim result As Boolean = ftp.DirectoryExists("/test")
            Console.WriteLine("The FTP directory exists : {0}",result)
                </code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.MoveFile(System.String,System.String)">
            <summary>
            Move a file on the FTP Server
            </summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Move a file from one directory to another
            bool status = ftp.MoveFile("/ZTest/InnerDirectory1/TestFile.txt", "/ZTest/InnerDirectory2/TestFile.txt");
                </code>
            	<code lang="VB">
             Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Renames a file in the current FTP directory
            Dim status As Boolean = ftp.MoveFile("/ZTest/InnerDirectory1/TestFile.txt", "/ZTest/InnerDirectory2/TestFile.txt")
             
                </code>
            </example>        /// <param name="oldPathAndName">The old path and file name</param>
            <param name="newPathAndName">The new path and file name</param>
            <returns>True if the move was successful</returns>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.RenameFile(System.String,System.String)">
            <summary>Renames a file in the current FTP directory.</summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Renames a file in the current FTP directory 
            bool status = ftp.RenameFile("a.txt", "b.txt");
             
            if (status == true)
                ftp.RenameFile("b.txt", "a.txt");
             
             
            System.Console.WriteLine("a.txt has {0} renamed to newDir and back again", status == true ? "been" : "not been");
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Renames a file in the current FTP directory
            Dim status As Boolean = ftp.RenameFile("a.txt", "b.txt")
             
            If status = True Then
               ftp.RenameFile("b.txt", "a.txt")
            End If
             
             
            If status = True Then
                System.Console.WriteLine("a.txt has {0} renamed to newDir and back again","been")
            Else
                System.Console.WriteLine("a.txt has {0} renamed to newDir and back again","not been")
            End If
                </code>
            </example>
            <param name="oldName">The current file name</param>
            <param name="newName">The new file name</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.GetAllFiles(System.String)">
            <summary>
            Recursively get all the files in the specified FTP Directory and all subdirectories
            </summary>
            <param name="ftpDirectory">The ftp directory</param>
            <returns>A list of files</returns>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.GetFileDate(System.String)">
            <summary>Gets the modification date of a remote file.</summary>
            <returns>The modification date or DateTime(0) if it fails</returns>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Gets the file size of a remote file 
            DateTime dateTime = ftp.GetFileDate("a.txt");
             
            System.Console.WriteLine("a.txt was created on {0}", dateTime.ToString());
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Gets the file size of a remote file
            Dim dateTime As DateTime = ftp.GetFileDate("a.txt")
             
            System.Console.WriteLine("a.txt was created on {0}", dateTime.ToString())
                </code>
            </example>
            <param name="fileName">Name of file in the current directory</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.DeleteDirectory(System.String)">
            <summary>
            Delete a directory in the current FTP directory. It deletes all files and sub
            directories within a directory.
            </summary>
            <returns>True if the directory is successfully deleted</returns>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
             
            //Delete a directory in the current FTP directory 
            //It deletes all files and subdirectories within a directory 
            System.Console.WriteLine("We are trying to delete all files in the TestDir directory and all its subdirs");
             
            bool status = false;
             
            status = ftp.DeleteDirectory("TestDir");
             
            System.Console.WriteLine("TestDir and all its files and subfolders {0} deleted", status == true ? "has been" : "could not be");
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
             
            'Delete a directory in the current FTP directory 
            'It deletes all files and subdirectories within a directory 
            System.Console.WriteLine("We are trying to delete all files in the TestDir directory and all its subdirs")
             
            Dim status As Boolean = False
             
            status = ftp.DeleteDirectory("TestDir")
             
            If status = True Then
                System.Console.WriteLine("TestDir and all its files and subfolders {0} deleted","has been")
            Else
                System.Console.WriteLine("TestDir and all its files and subfolders {0} deleted","could not be")
            End If
                </code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.SendRawFTP(System.String)">
            <summary>
            Send a raw FTP command
            </summary>
            <returns>The FTP servers response</returns>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Send a raw  FTP command to get a directory listing
            string result = "";
            result= ftp.SendRawFTP("NLST");
             
            System.Console.WriteLine("Issuing 'NLST' returned {0}", result);
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Send a raw  FTP command to get a directory listing
            Dim result As String = ""
            result= ftp.SendRawFTP("NLST")
             
            System.Console.WriteLine("Issuing 'NLST' returned {0}", result)
                </code>
            </example>
            <param name="command">The command to send</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.SendRawFTP(System.String,System.Int32)">
            <summary>
            Send a raw FTP command
            </summary>
            <returns>The FTP servers response</returns>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Send a FEAT FTP command to show commands supported by the FTP Server
            string result = "";
            result= ftp.SendRawFTP("FEAT", 211);
             
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Send a FEAT FTP command to show commands supported by the FTP Server
            Dim result As String = ""
            result= ftp.SendRawFTP("FEAT", 211)
             
            System.Console.WriteLine("Issuing 'NLST' returned {0}", result)
                </code>
            </example>
            <param name="command">The command to send</param>
            <param name="response">Wait for a specific response</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.SendRawFTP(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Send a raw FTP command and apply to each passed file, do not expect a response
            </summary>
            <param name="command"></param>
            <param name="files"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.SendRawFTP(System.String,System.Collections.Generic.List{System.String},System.Int32)">
            <summary>
            Send a raw FTP command and apply to each passed file, expecting a specific response
            </summary>
            <param name="command"></param>
            <param name="files"></param>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.CreateDirectory(System.String)">
            <summary>
            Create a directory in the current FTP directory
            </summary>
            <returns>True if the directory is successfully created</returns>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            //Creates a directory in the current FTP directory 
            bool status = ftp.CreateDirectory("TestDir");
             
            System.Console.WriteLine("TestDir {0} created", status == true ? "has been" : "could not be");
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            'Creates a directory in the current FTP directory
            Dim status As Boolean = ftp.CreateDirectory("TestDir")
             
            If status = True Then
                System.Console.WriteLine("TestDir {0} created","has been")
            Else
                System.Console.WriteLine("TestDir {0} created","could not be")
            End If
                </code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.SiteToSiteTransferFile(KellermanSoftware.NetFtpLibrary.FTP,System.String)">
            <summary>
            Transfer specified by name file from current FTP to destination FTP.
            </summary>
            <example>
            	<code title="Example" description="" lang="CS">
            //Connect to the source
            FTP ftpSource = new FTP();
            ftpSource.HostAddress = "source server address";
            ftpSource.UserName = "source user name";
            ftpSource.Password = "source password";
            ftpSource.EnableLogging();
            ftpSource.Connect();
             
            //Create a source directory on the source FTP server
            ftpSource.CreateDirectory("SourceDir");
            ftpSource.CurrentDirectory = "SourceDir";
             
            //Create a test file and upload to the source directory
            File.WriteAllText("test.txt", "This is a test");
            ftpSource.UploadFile("test.txt", "test.txt");
             
            //Connect to the destination
            FTP ftpDest = new FTP();
            ftpDest.HostAddress = "dest server address"; 
            ftpDest.UserName = "dest user name";
            ftpDest.Password = "dest password";
            ftpDest.EnableLogging();
            ftpDest.Connect();
             
            //Create a dest directory on the dest FTP server
            ftpDest.CreateDirectory("DestDir");
            ftpDest.CurrentDirectory = "DestDir";
             
            ftpSource.SiteToSiteTransferFile(ftpDest,"test.txt");
             
            if (ftpDest.FileExists("test.txt"))
                Console.WriteLine("Success!");</code>
            	<code title="Example2" description="" lang="VB.NET">
            'Connect to the source
            Dim ftpSource As New FTP()
            ftpSource.HostAddress = "source server address"
            ftpSource.UserName = "source user name"
            ftpSource.Password = "source password"
            ftpSource.EnableLogging()
            ftpSource.Connect()
             
            'Create a source directory on the source FTP server
            ftpSource.CreateDirectory("SourceDir")
            ftpSource.CurrentDirectory = "SourceDir"
             
            'Create a test file and upload to the source directory
            File.WriteAllText("test.txt", "This is a test")
            ftpSource.UploadFile("test.txt", "test.txt")
             
            'Connect to the destination
            Dim ftpDest As New FTP()
            ftpDest.HostAddress = "dest server address"
            ftpDest.UserName = "dest user name"
            ftpDest.Password = "dest password"
            ftpDest.EnableLogging()
            ftpDest.Connect()
             
            'Create a dest directory on the dest FTP server
            ftpDest.CreateDirectory("DestDir")
            ftpDest.CurrentDirectory = "DestDir"
             
            ftpSource.SiteToSiteTransferFile(ftpDest,"test.txt")
             
            If ftpDest.FileExists("test.txt") Then
                Console.WriteLine("Success!")
            End If</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.SiteToSiteTransferFileAsync(KellermanSoftware.NetFtpLibrary.FTP,System.String)">
            <summary>
            Transfer specified by name file from current FTP to destination FTP asynchronously.
            </summary>
            <example>
            	<code title="Example" description="" lang="CS">
            //Connect to the source
            FTP ftpSource = new FTP();
            ftpSource.HostAddress = "source server address";
            ftpSource.UserName = "source user name";
            ftpSource.Password = "source password";
            ftpSource.EnableLogging();
            ftpSource.Connect();
             
            //Create a source directory on the source FTP server
            ftpSource.CreateDirectory("SourceDir");
            ftpSource.CurrentDirectory = "SourceDir";
             
            //Create a test file and upload to the source directory
            File.WriteAllText("test.txt", "This is a test");
            ftpSource.UploadFile("test.txt", "test.txt");
             
            //Connect to the destination
            FTP ftpDest = new FTP();
            ftpDest.HostAddress = "dest server address"; 
            ftpDest.UserName = "dest user name";
            ftpDest.Password = "dest password";
            ftpDest.EnableLogging();
            ftpDest.Connect();
             
            //Create a dest directory on the dest FTP server
            ftpDest.CreateDirectory("DestDir");
            ftpDest.CurrentDirectory = "DestDir";
             
            ftpSource.SiteToSiteTransferFile(ftpDest,"test.txt");
             
            if (ftpDest.FileExists("test.txt"))
                Console.WriteLine("Success!");</code>
            	<code title="Example2" description="" lang="VB.NET">
            'Connect to the source
            Dim ftpSource As New FTP()
            ftpSource.HostAddress = "source server address"
            ftpSource.UserName = "source user name"
            ftpSource.Password = "source password"
            ftpSource.EnableLogging()
            ftpSource.Connect()
             
            'Create a source directory on the source FTP server
            ftpSource.CreateDirectory("SourceDir")
            ftpSource.CurrentDirectory = "SourceDir"
             
            'Create a test file and upload to the source directory
            File.WriteAllText("test.txt", "This is a test")
            ftpSource.UploadFile("test.txt", "test.txt")
             
            'Connect to the destination
            Dim ftpDest As New FTP()
            ftpDest.HostAddress = "dest server address"
            ftpDest.UserName = "dest user name"
            ftpDest.Password = "dest password"
            ftpDest.EnableLogging()
            ftpDest.Connect()
             
            'Create a dest directory on the dest FTP server
            ftpDest.CreateDirectory("DestDir")
            ftpDest.CurrentDirectory = "DestDir"
             
            ftpSource.SiteToSiteTransferFile(ftpDest,"test.txt")
             
            If ftpDest.FileExists("test.txt") Then
                Console.WriteLine("Success!")
            End If</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.SiteToSiteDirectorySynchronization(KellermanSoftware.NetFtpLibrary.FTP,System.String)">
            <summary>
            Synchronize specified by name directory on current FTP and destination FTP.
            </summary>
            <example>
            	<code title="Example" description="" lang="CS">
            //Connect to the source
            FTP ftpSource = new FTP();
            ftpSource.HostAddress = "source host address";
            ftpSource.UserName = "source user name";
            ftpSource.Password = "source password";
            ftpSource.EnableLogging();
            ftpSource.Connect();
             
            //Create a source directory on the source FTP server
            ftpSource.CreateDirectory("/SourceDir/Test");
            ftpSource.CurrentDirectory = "/SourceDir/Test";
             
            //Create a test file and upload two files to the source directory
            File.WriteAllText("test1.txt", "This is test 1");
            ftpSource.UploadFile("test1.txt", "test1.txt");
             
            File.WriteAllText("test2.txt", "This is test 2");
            ftpSource.UploadFile("test2.txt", "test2.txt");
             
            ftpSource.CurrentDirectory = "/SourceDir";
             
            //Connect to the destination
            FTP ftpDest = new FTP();
            ftpDest.HostAddress = "dest host address";
            ftpDest.UserName = "dest user name";
            ftpDest.Password = "dest password";
            ftpDest.EnableLogging();
            ftpDest.Connect();
             
            //Create a dest directory on the dest FTP server
            ftpDest.CreateDirectory("DestDir/Test");
            ftpDest.CurrentDirectory = "DestDir";
             
            ftpSource.SiteToSiteDirectorySynchronization(ftpDest, "Test");
             
            if (ftpDest.FileExists("test1.txt") &amp;&amp; ftpDest.FileExists("test2.txt"))
                Console.WriteLine("Success!");</code>
            	<code title="Example2" description="" lang="VB.NET">
            'Connect to the source
            Dim ftpSource As New FTP()
            ftpSource.HostAddress = "source host address"
            ftpSource.UserName = "source user name"
            ftpSource.Password = "source password"
            ftpSource.EnableLogging()
            ftpSource.Connect()
             
            'Create a source directory on the source FTP server
            ftpSource.CreateDirectory("/SourceDir/Test")
            ftpSource.CurrentDirectory = "/SourceDir/Test"
             
            'Create a test file and upload two files to the source directory
            File.WriteAllText("test1.txt", "This is test 1")
            ftpSource.UploadFile("test1.txt", "test1.txt")
             
            File.WriteAllText("test2.txt", "This is test 2")
            ftpSource.UploadFile("test2.txt", "test2.txt")
             
            ftpSource.CurrentDirectory = "/SourceDir"
             
            'Connect to the destination
            Dim ftpDest As New FTP()
            ftpDest.HostAddress = "dest host address"
            ftpDest.UserName = "dest user name"
            ftpDest.Password = "dest password"
            ftpDest.EnableLogging()
            ftpDest.Connect()
             
            'Create a dest directory on the dest FTP server
            ftpDest.CreateDirectory("DestDir/Test")
            ftpDest.CurrentDirectory = "DestDir"
             
            ftpSource.SiteToSiteDirectorySynchronization(ftpDest, "Test")
             
            If ftpDest.FileExists("test1.txt") AndAlso ftpDest.FileExists("test2.txt") Then
                Console.WriteLine("Success!")
            End If</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.SiteToSiteDirectorySynchronizationAsync(KellermanSoftware.NetFtpLibrary.FTP,System.String)">
            <summary>
            Synchronize specified by name directory on current FTP and destination FTP asynchronously.
            </summary>
            <example>
            	<code title="Example" description="" lang="CS">
            //Connect to the source
            FTP ftpSource = new FTP();
            ftpSource.HostAddress = "source host address";
            ftpSource.UserName = "source user name";
            ftpSource.Password = "source password";
            ftpSource.EnableLogging();
            ftpSource.Connect();
             
            //Create a source directory on the source FTP server
            ftpSource.CreateDirectory("/SourceDir/Test");
            ftpSource.CurrentDirectory = "/SourceDir/Test";
             
            //Create a test file and upload two files to the source directory
            File.WriteAllText("test1.txt", "This is test 1");
            ftpSource.UploadFile("test1.txt", "test1.txt");
             
            File.WriteAllText("test2.txt", "This is test 2");
            ftpSource.UploadFile("test2.txt", "test2.txt");
             
            ftpSource.CurrentDirectory = "/SourceDir";
             
            //Connect to the destination
            FTP ftpDest = new FTP();
            ftpDest.HostAddress = "dest host address";
            ftpDest.UserName = "dest user name";
            ftpDest.Password = "dest password";
            ftpDest.EnableLogging();
            ftpDest.Connect();
             
            //Create a dest directory on the dest FTP server
            ftpDest.CreateDirectory("DestDir/Test");
            ftpDest.CurrentDirectory = "DestDir";
             
            ftpSource.SiteToSiteDirectorySynchronization(ftpDest, "Test");
             
            if (ftpDest.FileExists("test1.txt") &amp;&amp; ftpDest.FileExists("test2.txt"))
                Console.WriteLine("Success!");</code>
            	<code title="Example2" description="" lang="VB.NET">
            'Connect to the source
            Dim ftpSource As New FTP()
            ftpSource.HostAddress = "source host address"
            ftpSource.UserName = "source user name"
            ftpSource.Password = "source password"
            ftpSource.EnableLogging()
            ftpSource.Connect()
             
            'Create a source directory on the source FTP server
            ftpSource.CreateDirectory("/SourceDir/Test")
            ftpSource.CurrentDirectory = "/SourceDir/Test"
             
            'Create a test file and upload two files to the source directory
            File.WriteAllText("test1.txt", "This is test 1")
            ftpSource.UploadFile("test1.txt", "test1.txt")
             
            File.WriteAllText("test2.txt", "This is test 2")
            ftpSource.UploadFile("test2.txt", "test2.txt")
             
            ftpSource.CurrentDirectory = "/SourceDir"
             
            'Connect to the destination
            Dim ftpDest As New FTP()
            ftpDest.HostAddress = "dest host address"
            ftpDest.UserName = "dest user name"
            ftpDest.Password = "dest password"
            ftpDest.EnableLogging()
            ftpDest.Connect()
             
            'Create a dest directory on the dest FTP server
            ftpDest.CreateDirectory("DestDir/Test")
            ftpDest.CurrentDirectory = "DestDir"
             
            ftpSource.SiteToSiteDirectorySynchronization(ftpDest, "Test")
             
            If ftpDest.FileExists("test1.txt") AndAlso ftpDest.FileExists("test2.txt") Then
                Console.WriteLine("Success!")
            End If</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.Retry">
            <summary>
            Retry after a failed Asynchronous FTP Operation
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.Connect(System.Boolean)">
            <summary>
            Connect if we are not connected
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.SetDefaultDirectory">
            <summary>
            Get the default working directory when we log in
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.Disconnect">
            <summary>Explicitly disconnect from the FTP server.</summary>
            <example>
            	<code lang="CS">
            FTP ftp = new FTP(); //Trial Mode            
            //FTP ftp = new FTP("place user name here", "place license key here");
             
            // set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu"; // a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous"; // replace with your user name
            ftp.Password = "user@mail.com"; // replace with your password
             
            ftp.Connect();
             
            ftp.Disconnect();
                </code>
            	<code lang="VB">
            Dim ftp As FTP = New FTP() 'Trial Mode
            'FTP ftp = new FTP("place user name here", "place license key here");
             
            ' set the name of the FTP server( its URL )
            ftp.HostAddress = "ftp.fsz.bme.hu" ' a hungarian university. change this to your ftp server
            ftp.UserName = "anonymous" ' replace with your user name
            ftp.Password = "user@mail.com" ' replace with your password
             
            ftp.Connect()
             
            ftp.Disconnect()
                </code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.ExceptionHandler(System.Exception)">
            <summary>
            Logs the exception, sets last exception and then throws it
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.InitDirectoryMode">
            <summary>
            This is to account for the user not having access to the root directory
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.UploadDirectory(System.String,System.String,System.Boolean,KellermanSoftware.NetFtpLibrary.DirectoryTransferModes,System.Object)">
            <summary>
            Uploads a local directory to an ftp directory
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.GetAscii(System.String,System.String,System.Int64)">
            <summary>  
            Get as ASCII, i.e. read a line at a time and write
            using the correct newline separator for the OS
            </summary>
            <param name="localPath">  
            full path of local file to write to
            </param>
            <param name="remoteFile"> 
            name of remote file		
            </param>
            <param name="fileSize"></param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.GetBinary(System.String,System.String,System.Int64,System.Int64,System.Boolean)">
            <summary>  
            Get as binary file, i.e. straight transfer of data
            </summary>
            <param name="localPath">  
            full path of local file to write to
            </param>
            <param name="remoteFile"> 
            name of remote file
            </param>
            <param name="fileSize"></param>
            <param name="restart"></param>
            <param name="append"></param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.IsConnectionLostException(System.Exception)">
            <summary>
            Returns true if the connection has been lost
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.ReconnectRetryLoop">
            <summary>
            Attempt to reconnect from a failed connection 
            and wait the entire amount until the remote server closes the connection
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.UploadRetryLoop">
            <summary>
            Attempt to reconnect from a failed connection 
            and wait the entire amount until the remote server closes the connection
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.PutAscii(System.String,System.String,System.Boolean)">
            <summary>
            Upload an ASCII file
            </summary>
            <param name="localPath">Local File Path</param>
            <param name="remoteFile">Remote file name</param>
            <param name="append">If true the local file will be appended to the remote file</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.PutAscii(System.IO.Stream,System.String,System.Boolean)">
            <summary>
            Upload an ASCII Stream
            </summary>
            <param name="stream">A local file stream</param>
            <param name="remote">The remote file name</param>
            <param name="append">If true, the local stream will be appended to the remote file</param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.PutBinary(System.String,System.String,System.Int64,System.Boolean)">
            <summary>
            Upload a binary file
            </summary>
            <param name="localPath"></param>
            <param name="remoteFile"></param>
            <param name="restart"></param>
            <param name="append"></param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.PutBinary(System.IO.Stream,System.String,System.Int64,System.Boolean)">
            <summary>
            Upload a binary stream
            </summary>
            <param name="localStream"></param>
            <param name="remote"></param>
            <param name="restart"></param>
            <param name="append"></param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.ParsePasvResponse(System.String)">
            <summary>
            Parse FTP response to PASV command
            </summary>
            <param name="reply"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.ChangeDirectory(System.String)">
            <summary>
            Change the directory to the current directory
            The directory is changed every time, some FTP servers have a timeout and it goes back to the root
            </summary>
            <param name="directory"></param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.WriteCommand(System.String,System.Object[])">
            <summary>
            Write a command to the FTP Server
            </summary>
            <param name="command"></param>
            <param name="args"></param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.WaitResponse(System.Int32)">
            <summary>
            Start waiting a response from the server
            </summary>
            <param name="code"></param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.WaitResponse(System.Int32,System.Int32)">
            <summary>
            Start waiting a response from the server
            </summary>
            <param name="code1"></param>
            <param name="code2"></param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.WaitResponse(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Start waiting a response from the server
            </summary>
            <param name="codes"></param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.MaskPassword(System.String)">
            <summary>
            Mask message for password and other credentials
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.WaitResponse(System.Collections.Generic.IList{System.Int32},System.Int32)">
            <summary>
            Start waiting a response from the server
            </summary>
            <param name="codes"></param>
            <param name="depth"></param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.CloseSockets">
            <summary>
            Close All Network Sockets
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.ParseTime(System.String)">
            <summary>
            Parse the file timestamp from the LIST command
            </summary>
            <param name="time">The string repesentation of a timestamp</param>
            <returns>A DateTime object representing the timestamp of a file</returns>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.ParseVms(System.String)">
            <summary>
            This is the fix for the funky VMS MultiNet V5.1(91) FTP Server
            </summary>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTP.FindRegex(System.String)">
            <summary>
            Determine what format the LIST information was returned in
            </summary>
            <param name="fileListing">The directory string returned by the server from a LIST command</param>
        </member>
        <member name="T:KellermanSoftware.NetFtpLibrary.ByteRange">
            <summary>
            Structure to represent a range of bytes
            </summary>
        </member>
        <member name="T:KellermanSoftware.NetFtpLibrary.CompressionType">
            <summary>
            The compression method 
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetFtpLibrary.CompressionType.GZip">
            <summary>
            GNU Zip Compression
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetFtpLibrary.CompressionType.Deflate">
            <summary>
            Deflate Compression
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FileCompleteEventArgs.LocalFilePath">
            <summary>
            The local file path
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FileCompleteEventArgs.FtpDirectory">
            <summary>
            The remote FTP directory
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FileCompleteEventArgs.FtpFilename">
            <summary>
            The remote FTP filename
            </summary>
        </member>
        <member name="T:KellermanSoftware.NetFtpLibrary.DateRange">
            <summary>
            Structure to represent a range of dates
            </summary>
        </member>
        <member name="T:KellermanSoftware.NetFtpLibrary.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.Properties.Resources.CannotConnect">
            <summary>
              Looks up a localized string similar to Cannot connect to host {0}:{1}..
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.Properties.Resources.CannotResolve">
            <summary>
              Looks up a localized string similar to Cannot resolve host name {0}..
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.Properties.Resources.CommandResponseError">
            <summary>
              Looks up a localized string similar to Unexpected response for command: {0} -&gt; {1}.
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.Properties.Resources.ConnectionClosed">
            <summary>
              Looks up a localized string similar to Connection was closed by user..
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.Properties.Resources.ConnectionLost">
            <summary>
              Looks up a localized string similar to Connection was closed by host..
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.Properties.Resources.NotConnected">
            <summary>
              Looks up a localized string similar to Socket is not connected..
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.Properties.Resources.ProxyError">
            <summary>
              Looks up a localized string similar to Proxy server rejected request..
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.Properties.Resources.SocketError">
            <summary>
              Looks up a localized string similar to Socket error occured..
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.Properties.Resources.UnknownError">
            <summary>
              Looks up a localized string similar to An unknown error has occured.  Check FTP Command and FTP Response..
            </summary>
        </member>
        <member name="T:KellermanSoftware.NetFtpLibrary.TransferCancelEventArgs">
            <summary>
            Holds information about the Cancel event
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.TransferCancelEventArgs.SessionGuid">
            <summary>
            A unique identifier for this instantiated ftp session
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.TransferCancelEventArgs.CustomObject">
            <summary>
            A custom user object passed as a parameter of an async operation
            </summary>
        </member>
        <member name="T:KellermanSoftware.NetFtpLibrary.TransferInfo">
            <summary>
            Class to hold what files were downloaded or uploaded during the transfer of a directory
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.TransferInfo.FileInfo">
            <summary>
            The information about the file transfered
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.TransferInfo.Dest">
            <summary>
            The destination path
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.TransferInfo.Source">
            <summary>
            The Source Path
            </summary>
        </member>
        <member name="T:KellermanSoftware.NetFtpLibrary.DirectoryTransferModes">
            <summary>
            Enum to represent the different filters that can be applied to a directory transfer
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetFtpLibrary.DirectoryTransferModes.Normal">
            <summary>
            No filtering
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetFtpLibrary.DirectoryTransferModes.Pattern">
            <summary>
            Filtering by a Wildcard pattern
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetFtpLibrary.DirectoryTransferModes.Regex">
            <summary>
            Filtering by a regular expression
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetFtpLibrary.DirectoryTransferModes.ByteSize">
            <summary>
            Filtering by min/max sizes
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetFtpLibrary.DirectoryTransferModes.DateRange">
            <summary>
            Filtering by a date range
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetFtpLibrary.DirectoryTransferModes.Sync">
            <summary>
            Synchronize but do not delete files that do not exist on the source
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetFtpLibrary.DirectoryTransferModes.DirectoryOnly">
            <summary>
            Top level directory only
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetFtpLibrary.DirectoryTransferModes.SyncWithDelete">
            <summary>
            Synchronize and delete files that do not exist on the source
            </summary>
        </member>
        <member name="T:KellermanSoftware.NetFtpLibrary.FtpCommand">
            <summary>
            An FTP command with parameters
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FtpCommand.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="commandString">FTP Command and Parameters</param>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FtpCommand.Command">
            <summary>
            The FTP command
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FtpCommand.Param">
            <summary>
            The FTP Parameters
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FtpCommand.ToString">
            <summary>
            Get the FTP Command and Parameters
            </summary>
            <returns></returns>
        </member>
        <member name="T:KellermanSoftware.NetFtpLibrary.FtpException">
            <summary>
            Occurs when an error occurs when an FTP command is sent to an FTP Server
            </summary>    
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FtpException.#ctor(KellermanSoftware.NetFtpLibrary.FtpCommand,KellermanSoftware.NetFtpLibrary.FtpResponse)">
            <summary>
            An unexpected response occurs for a sent FTP command
            </summary>
            <param name="command"></param>
            <param name="response"></param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FtpException.#ctor(KellermanSoftware.NetFtpLibrary.FtpStatus,System.Exception,System.Object[])">
            <summary>
            Format a message and arguments and attach an inner exception
            </summary>
            <param name="status"></param>
            <param name="innerException"></param>
            <param name="data"></param>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FtpException.Command">
            <summary>
            The FTP command that was sent to the FTP Server
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FtpException.Status">
            <summary>
            The general status of the FTP Error
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FtpException.Response">
            <summary>
            The response received from the FTP Server
            </summary>
        </member>
        <member name="T:KellermanSoftware.NetFtpLibrary.FTPFileInfo">
            <summary>
            Structure to hold a directory listing
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FTPFileInfo.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTPFileInfo.Permissions">
            <summary>
            The permissions of the file or directory
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTPFileInfo.IsLinked">
            <summary>
            True if this is a linked directory or file
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTPFileInfo.LinkedName">
            <summary>
            Contains the name of the real file or directory that the filename points to
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTPFileInfo.FileName">
            <summary>
            The filename including the extension
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTPFileInfo.IsDirectory">
            <summary>
            True if this is a directory, false if this is a file
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTPFileInfo.Modified">
            <summary>
            The date the file was modified. If a CalcHourDifference has been called, the date
            will be adjusted to the current users timezone. The default is the timezone of the FTP
            server.
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTPFileInfo.SizeInBytes">
            <summary>The file size in bytes. This property is zero for directories.</summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FTPFileInfo.MappedName">
            <summary>
            Mapped name for old servers such as HP Non Stop that have two lines per file directory line formats
            </summary>
        </member>
        <member name="T:KellermanSoftware.NetFtpLibrary.FtpResponse">
            <summary>
            FTP Response Code and Status
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FtpResponse.#ctor(System.Int32,System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FtpResponse.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="response">FTP Response Code and Status</param>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FtpResponse.Code">
            <summary>
            FTP Response Code
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FtpResponse.Text">
            <summary>
            FTP Response Status
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.FtpResponse.Dash">
            <summary>
            True if this is a multi-line response
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.FtpResponse.ToString">
            <summary>
            Get the response code and status
            </summary>
            <returns></returns>
        </member>
        <member name="T:KellermanSoftware.NetFtpLibrary.FtpSortColumn">
            <summary>
            Enumeration used to sort an FTP Directory Listing
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetFtpLibrary.FtpSortColumn.FileName">
            <summary>
            Sort by the file name
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetFtpLibrary.FtpSortColumn.Modified">
            <summary>
            Sort by the modified date
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetFtpLibrary.FtpSortColumn.SizeInBytes">
            <summary>
            Sort by the size in bytes
            </summary>
        </member>
        <member name="T:KellermanSoftware.NetFtpLibrary.FtpStatus">
            <summary>
            General Errors received from the FTP Server
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetFtpLibrary.FtpStatus.UnknownError">
            <summary>
            An unknown error has occured
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetFtpLibrary.FtpStatus.CommandResponseError">
            <summary>
            An unexpected response was received for the FTP command that was sent
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.Logger.Log(System.Exception)">
            <summary>
            Get all the lines for an exception and log them
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.Logger.GetExceptionLines(System.Exception,System.String)">
            <summary>
            Construct a text string in the correct format for logging an exception
            </summary>
            <param name="ex">The exception to log</param>
            <param name="indent">The current indent level</param>
            <returns>A string that is structured for logging</returns>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.Logger.Log(System.String)">
            <summary>
            Log strings to either a console, file or a memory stream depending on the user settings
            </summary>
        </member>
        <member name="T:KellermanSoftware.NetFtpLibrary.RetryAction">
            <summary>
            The action to retry when an exception occurs during an asynchronous transfer
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetFtpLibrary.RetryAction.UploadDirectory">
            <summary>
            Retry uploading a directory
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetFtpLibrary.RetryAction.DownloadDirectory">
            <summary>
            Retry downloading a directory
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetFtpLibrary.RetryAction.UploadFile">
            <summary>
            Retry uploading a file
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetFtpLibrary.RetryAction.UploadStream">
            <summary>
            Retry uploading a stream
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetFtpLibrary.RetryAction.DownloadFile">
            <summary>
            Retry downloading a file
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetFtpLibrary.RetryAction.DownloadStream">
            <summary>
            Retry downloading a stream
            </summary>
        </member>
        <member name="T:KellermanSoftware.NetFtpLibrary.RetryInfo">
            <summary>
            Information about the operation to retry
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.RetryInfo.Ftp">
            <summary>
            Reference to the FTP Instance
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.RetryInfo.CurrentDirectory">
            <summary>
            The current directory when the operation was started
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.RetryInfo.SubDirectories">
            <summary>
            If true, transfer subdirectories
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.RetryInfo.Mode">
            <summary>
            Type of filter
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.RetryInfo.Filter">
            <summary>
            What to filter by
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.RetryInfo.Action">
            <summary>
            Upload/Download/UploadDirectory
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.RetryInfo.LocalLocation">
            <summary>
            Local file or directory
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.RetryInfo.FtpLocation">
            <summary>
            FTP file path or directory
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.RetryInfo.LocalStream">
            <summary>
            Local stream for uploading or downloading
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.RetryInfo.RestartOffset">
            <summary>
            The byte offset to restart
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.RetryInfo.Retry">
            <summary>
            Retry a failed FTP Operation
            </summary>
        </member>
        <member name="T:KellermanSoftware.NetFtpLibrary.ConnectionStatus">
            <summary>
            General connection errors
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetFtpLibrary.ConnectionStatus.UnknownError">
            <summary>
            An Unknown Error has occured
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetFtpLibrary.ConnectionStatus.NotConnected">
            <summary>
            The socket is not connected
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetFtpLibrary.ConnectionStatus.CannotResolve">
            <summary>
            Cannot resolve host name
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetFtpLibrary.ConnectionStatus.CannotConnect">
            <summary>
            Cannot connect to host
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetFtpLibrary.ConnectionStatus.ConnectionClosed">
            <summary>
            The connection was closed by the user
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetFtpLibrary.ConnectionStatus.ConnectionLost">
            <summary>
            The connection was closed by the host
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetFtpLibrary.ConnectionStatus.SocketError">
            <summary>
            A socket error occured
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetFtpLibrary.ConnectionStatus.ProxyError">
            <summary>
            The proxy server rejected the request
            </summary>
        </member>
        <member name="T:KellermanSoftware.NetFtpLibrary.ConnectionException">
            <summary>
            Occurs when we are unable to connect to the remote host 
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.ConnectionException.#ctor(KellermanSoftware.NetFtpLibrary.ConnectionStatus,System.Object[])">
            <summary>
            Pass in the status and the arguments to be formatted
            </summary>
            <param name="status"></param>
            <param name="args"></param>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.ConnectionException.#ctor(KellermanSoftware.NetFtpLibrary.ConnectionStatus,System.Exception,System.Object[])">
            <summary>
            Pass in the status, the inner exception, and the arguments to be formatted
            </summary>
            <param name="status"></param>
            <param name="innerException"></param>
            <param name="args"></param>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.ConnectionException.Status">
            <summary>
            The status of the connection exception
            </summary>
        </member>
        <member name="T:KellermanSoftware.NetFtpLibrary.ProxyType">
            <summary>
            The Protocol to use for the Proxy Server
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetFtpLibrary.ProxyType.None">
            <summary>
            No proxy protocol is used
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetFtpLibrary.ProxyType.Socks4">
            <summary>
            Use the socks 4 Protocol
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetFtpLibrary.ProxyType.Socks5">
            <summary>
            Use the socks 5 Protocol
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetFtpLibrary.ProxyType.Http">
            <summary>
            Use the HTTP Protocol
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetFtpLibrary.ProxyType.User">
            <summary>
            User Command
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetFtpLibrary.ProxyType.Site">
            <summary>
            Site Command
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetFtpLibrary.ProxyType.Open">
            <summary>
            The Proxy Server is Open
            </summary>
        </member>
        <member name="T:KellermanSoftware.NetFtpLibrary.ProxyInfo">
            <summary>
            Information about the Proxy Server
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.ProxyInfo.Type">
            <summary>
            The type of protocol to use for the Proxy Server
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.ProxyInfo.Host">
            <summary>
            The IP Address or Host Name of the Proxy Server
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.ProxyInfo.Port">
            <summary>
            The port of the proxy server
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.ProxyInfo.UserName">
            <summary>
            The user name to use to log in to the proxy server
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.ProxyInfo.Password">
            <summary>
            The password to use to log in to the proxy server
            </summary>
        </member>
        <member name="T:KellermanSoftware.NetFtpLibrary.Sockets.TimedSocket">
            <summary>
            This is a helper class for allowing a socket to have a timeout on accept
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetFtpLibrary.Sockets.TimedSocket._completed">
            <summary>
            This member will signal when the asynchronous operation is completed.
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.Sockets.TimedSocket.#ctor">
            <summary>
            private constructor, so this helper class cannot be instantiated outside.
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.Sockets.TimedSocket.AcceptWithTimeout(System.Net.Sockets.Socket,System.Int64)">
            <summary>
            This methods returns the accepted socket, or null on timeout.
            </summary>
            <param name="s">The socket accepting connections.</param>
            <param name="timeout">The timeout, in milliseconds.</param>
            <returns>Returns the accepted socket, or null on timeout.</returns>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.Sockets.TimedSocket.Accept(System.Net.Sockets.Socket)">
            <summary>
            This methods works the same as Socket.Accept().
            It was added cause it could be helpful in some cases.
            </summary>
            <param name="s">The socket accepting connections.</param>
            <returns>Returns the same as Socket.Accept().</returns>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.Sockets.TimedSocket.Accept(System.Net.Sockets.Socket,System.Int64)">
            <summary>
            This methods returns the accepted socket, or null on timeout.
            </summary>
            <param name="s">The socket accepting connections.</param>
            <param name="timeout">The timeout, in milliseconds.</param>
            <remarks>If timeout is less or equal than 0, it works the same as Socket.Accept()</remarks>
            <returns>Returns the accepted socket, or null on timeout.</returns>
        </member>
        <member name="T:KellermanSoftware.NetFtpLibrary.SynchronizationMode">
            <summary>
            Determines which files are uploaded or downloaded during synchronization
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetFtpLibrary.SynchronizationMode.CopyOnlyIfTheFileDoesNotExist">
            <summary>
            Files will only be synchronized if it does not exist
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetFtpLibrary.SynchronizationMode.CopyIfTheSizeIsDifferentOrDateIsNewer">
            <summary>
            Files will be synchronized if the size is different or if the file date is newer (default)
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetFtpLibrary.SynchronizationMode.CopyOnlyIfNewer">
            <summary>
            Files will be synchronized only if the file is newer
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetFtpLibrary.SynchronizationMode.CopyOnlyIfSizeIsDifferent">
            <summary>
            Files will be synchroized only if the size is different
            </summary>
        </member>
        <member name="T:KellermanSoftware.NetFtpLibrary.TransferCompletedEventArgs">
            <summary>
            Holds information about the transfer event
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.TransferCompletedEventArgs.#ctor(KellermanSoftware.NetFtpLibrary.FTP)">
            <summary>
            Constructor for Transfer Complete
            </summary>
            <param name="ftpInstance"></param>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.TransferCompletedEventArgs.Ftp">
            <summary>
            Reference to the FTP Instance
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.TransferCompletedEventArgs.RetryInfo">
            <summary>
            Information about what will be retried
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.TransferCompletedEventArgs.LastException">
            <summary>
            The exception that occured while transfering or null if no exception
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.TransferCompletedEventArgs.SessionGuid">
            <summary>
            A unique identifier for this instantiated ftp session
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.TransferCompletedEventArgs.CustomObject">
            <summary>
            A custom user object passed as a parameter of an async operation
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.TransferCompletedEventArgs.FilesTransfered">
            <summary>
            A list of the files transfered
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetFtpLibrary.TransferCompletedEventArgs.Retry">
            <summary>
            Attempt to Retry the operation when there is a failure
            </summary>
        </member>
        <member name="T:KellermanSoftware.NetFtpLibrary.TransferProgressChangedEventArgs">
            <summary>
            Class passed with events to hold the transfer progress
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.TransferProgressChangedEventArgs.SessionGuid">
            <summary>
            A unique identifier for this instantiated ftp session
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.TransferProgressChangedEventArgs.CustomObject">
            <summary>
            A custom user object passed as a parameter of an async operation
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.TransferProgressChangedEventArgs.TotalBytesToTransfer">
            <summary>
            The amount of bytes to be Transferred
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.TransferProgressChangedEventArgs.BytesTransferred">
            <summary>
            The amount of bytes already Transferred
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.TransferProgressChangedEventArgs.ProgressPercentage">
            <summary>
            The percentage Transferred
            </summary>
        </member>
        <member name="T:KellermanSoftware.NetFtpLibrary.TransferStartedEventArgs">
            <summary>
            Holds information about the transfer event
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.TransferStartedEventArgs.SessionGuid">
            <summary>
            A unique identifier for this instantiated ftp session
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetFtpLibrary.TransferStartedEventArgs.CustomObject">
            <summary>
            A custom user object passed as a parameter of an async operation
            </summary>
        </member>
        <member name="T:KellermanSoftware.NetFtpLibrary.Utf8Mode">
            <summary>
            Utf8 command mode
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetFtpLibrary.Utf8Mode.None">
            <summary>
            Not Send
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetFtpLibrary.Utf8Mode.SendBeforeLogin">
            <summary>
            Send before login
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetFtpLibrary.Utf8Mode.SendAfterLogin">
            <summary>
            Send after login
            </summary>
        </member>
        <member name="T:KellermanSoftware.EncryptionLibrary.CRC32">
             <summary>
             Generate a table for a byte-wise 32-bit CRC calculation on the polynomial:
             x^32+x^26+x^23+x^22+x^16+x^12+x^11+x^10+x^8+x^7+x^5+x^4+x^2+x+1.
            
             Polynomials over GF(2) are represented in binary, one bit per coefficient,
             with the lowest powers in the most significant bit.  Then adding polynomials
             is just exclusive-or, and multiplying a polynomial by x is a right shift by
             one.  If we call the above polynomial p, and represent a byte as the
             polynomial q, also with the lowest power in the most significant bit (so the
             byte 0xb1 is the polynomial x^7+x^3+x+1), then the CRC is (q*x^32) mod p,
             where a mod b means the remainder after dividing a by b.
            
             This calculation is done using the shift-register method of multiplying and
             taking the remainder.  The register is initialized to zero, and for each
             incoming bit, x^32 is added mod p to the register if the bit is a one (where
             x^32 mod p is p+x^32 = x^26+...+1), and the register is multiplied mod p by
             x (which is shifting right by one and adding x^32 mod p if the bit shifted
             out is a one).  We start with the highest power (least significant bit) of
             q and repeat for all eight bits of q.
            
             The table is simply the CRC of all possible eight bit values.  This is all
             the information needed to generate CRC's on data a byte at a time for all
             combinations of CRC register values and incoming bytes.
             </summary>
        </member>
        <member name="P:KellermanSoftware.EncryptionLibrary.CRC32.Value">
            <summary>
            Returns the CRC32 data checksum computed so far.
            </summary>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.CRC32.Reset">
            <summary>
            Resets the CRC32 data checksum as if no update was ever called.
            </summary>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.CRC32.Update(System.Int32)">
            <summary>
            Updates the checksum with the int bval.
            </summary>
            <param name = "bval">
            the byte is taken as the lower 8 bits of bval
            </param>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.CRC32.Update(System.Byte[])">
            <summary>
            Updates the checksum with the bytes taken from the array.
            </summary>
            <param name="buffer">
            buffer an array of bytes
            </param>
        </member>
        <member name="M:KellermanSoftware.EncryptionLibrary.CRC32.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Adds the byte array to the data checksum.
            </summary>
            <param name = "buf">
            the buffer which contains the data
            </param>
            <param name = "off">
            the offset in the buffer where the data starts
            </param>
            <param name = "len">
            the length of the data
            </param>
        </member>
        <member name="T:KellermanSoftware.Licensing.IniReaderWriter">
            <summary>
            Fully Managed INI File Reader and Writer without any COM Interop
            See:  http://en.wikipedia.org/wiki/INI_file
            See:  http://msdn.microsoft.com/en-us/library/windows/desktop/ms724348%28v=vs.85%29.aspx
            </summary>
        </member>
        <member name="P:KellermanSoftware.Licensing.IniReaderWriter.FileEncoding">
            <summary>
            Override the file encoding.  The default is Encoding.Default
            </summary>
        </member>
        <member name="P:KellermanSoftware.Licensing.IniReaderWriter.IsProcessEscapeCharactersEnabled">
            <summary>
            If true, escape characters will be processed.  The default is false.
            See http://en.wikipedia.org/wiki/INI_file
            </summary>
        </member>
        <member name="P:KellermanSoftware.Licensing.IniReaderWriter.CommentCharacter">
            <summary>
            The comment character.  By default it is a semicolon
            </summary>
        </member>
        <member name="P:KellermanSoftware.Licensing.IniReaderWriter.Delimiter">
            <summary>
            The delimiter between settings and values.  By default it is a equals sign
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniReaderWriter.GetPrivateProfileString(System.String,System.String,System.String,System.String@,System.Int32,System.String)">
            <summary>
            Managed version of GetPrivateProfileString<br />
            No COM Interop is used<br />
            If the file does not exist or the value is not in the file, the defaultValue is used.<br />
            See:  http://msdn.microsoft.com/en-us/library/windows/desktop/ms724348%28v=vs.85%29.aspx
            </summary>
            <param name="sectionName">The INI Section Name</param>
            <param name="settingName">The INI Setting Name</param>
            <param name="defaultValue">The default value if there is no value</param>
            <param name="returnedString">Output of the string</param>
            <param name="size">The number of buffer characters (not used but here for backward compatibility)</param>
            <param name="filePath">The path to the INI file</param>
            <exception cref="T:System.ArgumentNullException">Occurs when sectionName, settingName or filePath is null</exception>
            <returns>Number of characters returned</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniReaderWriter.GetPrivateProfileString(System.String,System.String,System.String,System.Text.StringBuilder,System.Int32,System.String)">
            <summary>
            Managed version of GetPrivateProfileString<br />
            No COM Interop is used<br />
            If the file does not exist or the value is not in the file, the defaultValue is used.<br />
            See:  http://msdn.microsoft.com/en-us/library/windows/desktop/ms724348%28v=vs.85%29.aspx
            </summary>
            <param name="sectionName">The INI Section Name</param>
            <param name="settingName">The INI Setting Name</param>
            <param name="defaultValue">The default value if there is no value</param>
            <param name="returnedBuffer">StrinbBuilder Output of the string</param>
            <param name="size">The number of buffer characters (not used but here for backward compatibility)</param>
            <param name="filePath">The path to the INI file</param>
            <exception cref="T:System.ArgumentNullException">Occurs when sectionName, settingName or filePath is null</exception>
            <returns>Number of characters returned</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniReaderWriter.WritePrivateProfileString(System.String,System.String,System.String,System.String)">
            <summary>
            Managed version of WritePrivateProfileString<br />
            No COM Interop is used<br />
            If the file does not exist it will be created.  If the section does not exist it will be created.  If the setting already exists it will be updated.  If the setting does not exist, it will be added.<br />
            See:  http://msdn.microsoft.com/en-us/library/windows/desktop/ms724348%28v=vs.85%29.aspx
            </summary>
            <param name="sectionName">The INI Section Name</param>
            <param name="settingName">The INI Setting Name</param>
            <param name="settingValue">The INI Setting Value</param>
            <param name="filePath">The path to the INI file</param>
            <exception cref="T:System.ArgumentNullException">Occurs when sectionName, settingName or filePath is null</exception>
            <returns>True if the setting was set successfully</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniReaderWriter.GetPrivateProfileInt(System.String,System.String,System.Int32,System.String)">
            <summary>
            Managed version of GetPrivateProfileInt<br />
            No COM Interop is used<br />
            If the file does not exist or the value is not in the file, the defaultValue is used.<br />
            See:  http://msdn.microsoft.com/en-us/library/windows/desktop/ms724348%28v=vs.85%29.aspx
            </summary>
            <param name="sectionName">The INI Section Name</param>
            <param name="settingName">The INI Setting Name</param>
            <param name="defaultValue">The default value if there is no value</param>
            <param name="filePath">The path to the INI file</param>
            <exception cref="T:System.ArgumentNullException">Occurs when sectionName, settingName or filePath is null</exception>
            <returns>The integer</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniReaderWriter.GetSectionNames(System.String)">
            <summary>
            Get a list of the sections in an INI file<br />
            No COM Interop is used<br />
            If the file does not exist, no sections will be returned.
            </summary>
            <param name="filePath">The path to the INI file</param>
            <exception cref="T:System.ArgumentNullException">Occurs when filePath is null</exception>
            <returns>A list of the section names</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniReaderWriter.GetSectionValues(System.String,System.String)">
            <summary>
            Get a dictionary of the key value pairs for a section in an INI file<br />
            No COM Interop is used<br />
            If the file does not exist, no items will be returned.
            </summary>
            <param name="sectionName">The section name</param>
            <param name="filePath">The path to the INI file</param>
            <exception cref="T:System.ArgumentNullException">Occurs when sectionName, or filePath is null</exception>
            <returns>A list of the settings and their values</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniReaderWriter.SettingExists(System.String,System.String,System.String)">
            <summary>
            Return true if a setting exists<br />
            No COM Interop is used<br />
            If the file does not exist or the setting does not exist, the value returned will be false.
            </summary>
            <param name="sectionName">The section name</param>
            <param name="settingName">The setting name</param>
            <param name="filePath">The path to the INI File</param>
            <exception cref="T:System.ArgumentNullException">Occurs when sectionName, settingName or filePath is null</exception>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniReaderWriter.GetSetting(System.String,System.String,System.String)">
            <summary>
            Get the value for a setting in a section<br />
            No COM Interop is used<br />
            If the file does not exist or the setting does not exist, the value returned will be null.
            </summary>
            <param name="sectionName">The section name</param>
            <param name="settingName">The setting name</param>
            <param name="filePath">The path to the INI File</param>
            <exception cref="T:System.ArgumentNullException">Occurs when sectionName, settingName or filePath is null</exception>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniReaderWriter.SaveSetting(System.String,System.String,System.String,System.String)">
            <summary>
            Save a value to an INI file<br />
            No COM Interop is used<br />
            If the file does not exist it will be created.  If the section does not exist it will be created.  If the setting already exists it will be updated.  If the setting does not exist, it will be added.<br />
            </summary>
            <param name="sectionName">The section name</param>
            <param name="settingName">The setting name</param>
            <param name="settingValue">The value to set</param>
            <param name="filePath">The path to the INI file</param>
            <exception cref="T:System.ArgumentNullException">Occurs when sectionName, settingName or filePath is null</exception>
            <returns>True if it was saved successfully</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniReaderWriter.DeleteSetting(System.String,System.String,System.String)">
            <summary>
            Delete a setting from an INI file<br />
            No COM Interop is used<br />
            If the file does not exist or the value does not exist, false will be returned.
            </summary>
            <param name="sectionName">The name of the section</param>
            <param name="settingName">The name of the setting</param>
            <param name="filePath">The path to the INI file</param>
            <exception cref="T:System.ArgumentNullException">Occurs when sectionName, settingName or filePath is null</exception>
            <returns>True if the setting was deleted</returns>
        </member>
        <member name="T:KellermanSoftware.Licensing.IniFile">
            <summary>
            Create a New INI file to store or load data
            <BR /><b>Author:</b>  Gregory T. Finzer<BR />
            <b>Date:</b>  10/12/2002
            </summary>
        </member>
        <member name="P:KellermanSoftware.Licensing.IniFile.Path">
            <summary>
            Returns the path to the ini file
            </summary>
        </member>
        <member name="P:KellermanSoftware.Licensing.IniFile.INIPathWritable">
            <summary>
            Returns True if the INI path is writable
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniFile.#ctor(System.String)">
            <summary>
            INIFile Constructor.
            </summary>
            <PARAM name="INIPath">File Path to the INI File</PARAM>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniFile.IniWriteValue(System.String,System.String,System.String)">
            <summary>
            Write Data to the INI File
            </summary>
            <param name="section">Section Name</param>
            <param name="key">Key Name</param>
            <param name="value">Value Name</param>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniFile.CheckINIPath">
            <summary>
            Ensure the directory exists for the 
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniFile.IniReadValue(System.String,System.String)">
            <summary>
            Read Data from an INI File
            </summary>
            <param name="section">Section Name</param>
            <param name="key">Key Name</param>
            <returns>Value</returns>
        </member>
        <member name="T:KellermanSoftware.Licensing.Entry">
            <summary>
            Hold Subscription Entries 
            </summary>
        </member>
        <member name="T:KellermanSoftware.Licensing.Encryption">
            <summary>
            This class provides methods Encryption and Decryption using a variety
            of cryptographic algorithms. The methods are overloaded to perform
            encryption/decryption on ordinary texts of string, a MemoryStream
            or a complete file (text or binary).
            </summary>
        </member>
        <member name="F:KellermanSoftware.Licensing.Encryption.alg">
            <summary>
            The variable that will hold the relevant instantiated cryptographic class object.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Licensing.Encryption.provider">
            <summary>
            Enumeration that specifies the cryptographic service provider.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Licensing.Encryption.strKey">
            <summary>
            Serves as password used with salt to generate Key for encryption
            </summary>
        </member>
        <member name="F:KellermanSoftware.Licensing.Encryption.strSalt">
            <summary>
            The salt used for generating Key for encryption
            </summary>
        </member>
        <member name="F:KellermanSoftware.Licensing.Encryption.ivChars">
            <summary>
            The character array from which we set our initialization vector.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.#ctor">
            <summary>
            Default constructor for the Encryption class.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.#ctor(System.String,System.String)">
            <summary>
            Alternate Constructor for the Encryption class.
            </summary>
            <param name="strKey">The password used for generating the Key.</param>
            <param name="strSalt">The Salt to be used in conjunction with 
            the password to generate the actual Key.</param>
        </member>
        <member name="P:KellermanSoftware.Licensing.Encryption.Key">
            <summary>
            Public property for Key
            </summary>
        </member>
        <member name="P:KellermanSoftware.Licensing.Encryption.Salt">
            <summary>
            Public property for Salt
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.GetIV">
            <summary>
            Get an initialization vector for the crypto algorithms.
            TODO: Random IV Generation
            </summary>
            <returns>a byte array that contains the generated initialization vector.</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.GetKey">
            <summary>
            Gets the appropriate key for the cryptographic algorithm being used.
            </summary>
            <returns>a byte array that contains the generated key.</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.InitializeAlgorithm(KellermanSoftware.Licensing.EncryptionProvider)">
            <summary>
            Instantiates the SymmetricAlgorithm object with the appropriate
            cryptographic service provider class.
            </summary>
            <param name="encryptionType">Enumeration that specifies which cryptographic
            algorithm is being used.</param>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.Encrypt(KellermanSoftware.Licensing.EncryptionProvider,System.String)">
            <summary>
            Encrypts a plain string.
            </summary>
            <param name="encryptionType">Specifies what encryption algorithm is to be used.</param>
            <param name="input">The input clear string.</param>
            <returns>A base64-encoded representation of the encrypted string.</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.Encrypt(KellermanSoftware.Licensing.EncryptionProvider,System.IO.MemoryStream)">
            <summary>
            Encrypts a MemoryStream.
            </summary>
            <param name="encryptionType">Specifies what encryption algorithm is to be used.</param>
            <param name="memStream">The input MemoryStream object</param>
            <returns>A base64-encoded MemoryStream object</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.Encrypt(KellermanSoftware.Licensing.EncryptionProvider,System.String,System.String)">
            <summary>
            Encrypts the contents of a text file and outputs them to another file.
            TODO: Convert to Base64
            </summary>
            <param name="encryptionType">Specifies what encryption algorithm is to be used.</param>
            <param name="inputFile">The path to the input file.</param>
            <param name="outputFile">The path to the output file.</param>
            <returns>A boolean that specifies whether the encryption operation was successful or not.</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.Decrypt(KellermanSoftware.Licensing.EncryptionProvider,System.String)">
            <summary>
            Decrypts a base64-encoded string.
            </summary>
            <param name="encryptionType">Specifies what encryption algorithm is to be used.</param>
            <param name="input">The input clear string.</param>
            <returns>The decrypted plain text.</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.Decrypt(KellermanSoftware.Licensing.EncryptionProvider,System.IO.MemoryStream)">
            <summary>
            Decrypts a base64-encoded MemoryStream.
            </summary>
            <param name="encryptionType">Specifies what encryption algorithm is to be used.</param>
            <param name="memStream">A base64-encoded MemoryStream object.</param>
            <returns>Simple MemoryStream object.</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.Decrypt(KellermanSoftware.Licensing.EncryptionProvider,System.String,System.String)">
            <summary>
            Decrypts the contents of a text file and outputs them to another file.
            </summary>
            <param name="encryptionType">Specifies what encryption algorithm is to be used.</param>
            <param name="inputFile">The path to the input file.</param>
            <param name="outputFile">The path to the output file.</param>
            <returns>A boolean that specifies whether the decryption operation was successful or not.</returns>
        </member>
        <member name="P:KellermanSoftware.Licensing.LicensingLibrary.AdditionalInfo">
            <summary>
            Additional information about the success or failure of a public method
            </summary>
        </member>
        <member name="P:KellermanSoftware.Licensing.LicensingLibrary.FailedAttemptsToday">
            <summary>
            The failed attempts at checking a license today
            </summary>
        </member>
        <member name="P:KellermanSoftware.Licensing.LicensingLibrary.TrialExtensions">
            <summary>
            The number of trial extensions for this user
            </summary>
        </member>
        <member name="P:KellermanSoftware.Licensing.LicensingLibrary.TrialDays">
            <summary>
            The number of days for a trial period
            </summary>
        </member>
        <member name="P:KellermanSoftware.Licensing.LicensingLibrary.BetaExpirationDate">
            <summary>
            Returns the maximum date the software can run in beta
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="productCode"></param>
            <param name="productName"></param>
            <param name="website"></param>
            <param name="userName"></param>
            <param name="license"></param>
        </member>
        <member name="P:KellermanSoftware.Licensing.LicensingLibrary.IsService">
            <summary>
            Gets a value indicating whether the application is a windows service.
            </summary>
            <value>
            <c>true</c> if this instance is service; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.ValidateInput">
            <summary>
            Ensure required input
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.UsDateToString(System.DateTime)">
            <summary>
            Convert a DateTime to a US date string
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.UsDateToDate(System.String)">
            <summary>
            Convert a US formatted date to DateTime
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.SetTargetLicense">
            <summary>
            Set the target license for the 
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.SetupVariables">
            <summary>
            A bunch of variable initialization
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.StartTrial">
            <summary>
            This is a new installation so start the trial
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.BetaExpired">
            <summary>
            Returns true if the beta has expired
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.AllKeysBlank">
            <summary>
            Returns true if all the keys are blank
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.SomeKeysBlank">
            <summary>
            Returns true if some of the keys are blank
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetKeys">
            <summary>
            Get all the keys from the registry and the INI file
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetTrialExtensions">
            <summary>
            Get the number of trial extensions
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetFailedAttemptsToday">
            <summary>
            Get the number of failed attempts today
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetUserName">
            <summary>
            Get the saved user name from the registry
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetLicense">
            <summary>
            Get the saved user name from the registry
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetLastRunDate">
            <summary>
            Get the last date the component was run, prevents back dating
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetInstallationDate">
            <summary>
            Get the date the component was installed
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.CombineKey(System.String)">
            <summary>
            Combine the key for the 
            </summary>
            <param name="prefix"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.ReadFromIni(System.String)">
            <summary>
            Read the key from the INI file
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.ReadFromRegistry(System.String)">
            <summary>
            Read the key from the registry
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.SaveToRegistryAndIni(System.String,System.String)">
            <summary>
            Save the key and value to the registry and INI file.  
            Use the different encryption key for each.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.SaveToRegistry(System.String,System.String)">
            <summary>
            Save the key to the registry
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.SaveToIniFile(System.String,System.String)">
            <summary>
            Save a key to an INI file
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.UpperLetterSpace(System.String)">
            <summary>
            Make the text upper case and return only letters and spaces
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetProductShortName(System.String)">
            <summary>
            Extract product short name from the given product code.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetMajorVersion(System.String)">
            <summary>
            Extract major version from the given product code.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.ExtendTrial(System.String)">
            <summary>
            Trial extensions are good for the current day and the the next day
            </summary>
            <param name="trialExtension"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.TrialMessage">
            <summary>
            User friendly trial days remaining
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.TrialDaysLeft">
            <summary>
            Returns the number of days left in the trial
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.CheckLicense">
            <summary>
            Check to see if it is a valid license OR the user is within the trial period
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.TrialValid">
            <summary>
            Returns true if the trial is valid, false if it is expired, hacked, or backdated
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.Mid(System.Object,System.Int32,System.Int32)">
            <summary>
            Same as VB mid function except it doesn't bomb at all
            </summary>
            <param name="oString">String to parse</param>
            <param name="iStart">Start of string</param>
            <param name="iLength">Length of section</param>
            <returns>Section of string</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.Mid(System.Object,System.Int32)">
            <summary>
            Same as VB mid function except it doesn't bomb at all
            </summary>
            <param name="oString">String to parse</param>
            <param name="iStart">Starting position</param>
            <returns>The string section</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.Asc(System.String)">
            <summary>
            Get the ASCII value for the left most character of the passed string.
            </summary>
            <param name="sInString">The string to parse.</param>
            <returns>ACSCII value of the leftmost character</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.Right(System.Object,System.Int32)">
            <summary>
            Same as VB function but doesn't bomb
            </summary>
            <param name="oString">The string to parse</param>
            <param name="iLength">Starting Right Position</param>
            <returns>String section</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetLastWord(System.String,System.String)">
            <summary>
            Get the last word in a string
            </summary>
            <param name="sSentence"></param>
            <param name="sSeperator"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.NumberOfWords(System.String,System.String)">
            <summary>
            Calculate the number of words in a string
            </summary>
            <param name="sSentence">String to parse</param>
            <param name="sSeperator">Seperator character or string</param>
            <returns>The number of words in the string</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetField(System.String,System.Int32,System.String)">
            <summary>
            Parses sSentence delimited by sSeperator and returns the word specified by iPosition
            </summary>
            <param name="sSentence">The string to parse</param>
            <param name="iPosition">Which word to look for</param>
            <param name="sSeperator">What the words are delmited by</param>
            <returns>"" or the word found</returns>
        </member>
        <member name="T:KellermanSoftware.Common.Util">
            <summary>
            Utility Class
            </summary>
        </member>
        <member name="M:KellermanSoftware.Common.Util.ExtractNumbers(System.String)">
            <summary>
            Extract all numbers from a string
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.Util.ExtractFileName(System.String)">
            <summary>
            Extract Filename from a path
            </summary>
            <param name="sFullPath">A fully qualified path ending in a filename</param>
            <returns>The extracted file name</returns>
        </member>
        <member name="M:KellermanSoftware.Common.Util.GetSystemDrive">
            <summary>
            Get the system drive letter
            Example:  c:\
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.Util.StringBetween(System.String,System.String,System.String)">
            <summary>
            Return the string between the two words
            </summary>
            <param name="sentence"></param>
            <param name="fromWord"></param>
            <param name="toWord"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.Util.StringAfter(System.String,System.String)">
            <summary>
            Return the string after the passed word
            </summary>
            <param name="sentence"></param>
            <param name="word"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.Util.StringBefore(System.String,System.String)">
            <summary>
            Return the string before the passed word
            </summary>
            <param name="sentence"></param>
            <param name="word"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.Util.GetCallingAssemblyName">
            <summary>
            Get the calling assembly name of the caller
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.Util.MakeWritable(System.String)">
            <summary>
            Make the file writable if it exists
            </summary>
            <param name="sFile"></param>
        </member>
        <member name="M:KellermanSoftware.Common.Util.GetCurrentDirectory">
            <summary>
            Get the current directory of the executing assembly
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.Util.Right(System.Object,System.Int32)">
            <summary>
            Same as VB function but doesn't bomb
            </summary>
            <param name="oString">The string to parse</param>
            <param name="iLength">Starting Right Position</param>
            <returns>String section</returns>
        </member>
        <member name="M:KellermanSoftware.Common.Util.TakeOffEnd(System.String,System.String)">
            <summary>
            Take a string off the end of another string.  Example:  1,2,3,
            </summary>
            <param name="sIn">The base string</param>
            <param name="sTakeOff">What to take off</param>
            <returns>The resulting string</returns>
        </member>
        <member name="M:KellermanSoftware.Common.Util.GetLastWords(System.String,System.String,System.Int32)">
            <summary>
            Get the last words of a sentence
            </summary>
            <param name="sSentence">Sentence to parse</param>
            <param name="sSeperator">Seperator Character</param>
            <param name="iStartWord">First word to return</param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.Util.GetField(System.String,System.Int32,System.String)">
            <summary>
            Parses sentence delimited by seperator and returns the word specified by the position
            </summary>
            <param name="sentence"></param>
            <param name="position"></param>
            <param name="seperator"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.Util.NumberOfWords(System.String,System.String)">
            <summary>
            Calculate the number of words in a string
            </summary>
            <param name="sSentence">String to parse</param>
            <param name="sSeperator">Seperator character or string</param>
            <returns>The number of words in the string</returns>
        </member>
        <member name="M:KellermanSoftware.Common.Util.ShortToByteArray(System.UInt16)">
            <summary>
            Convert an unsigned short into a byte array
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.Util.cStr(System.Object)">
            <summary>
            Convert any object to a string
            </summary>
            <param name="value">Object to convert</param>
            <returns>A string or string.empty</returns>
        </member>
        <member name="M:KellermanSoftware.Common.Util.cInt(System.Object)">
            <summary>
            Convert the passed object into an integer
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.Util.cDate(System.Object)">
            <summary>
            Convert the passed object into a date or return the default date
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.Util.Writable(System.String)">
            <summary>
            Check to see if the program can create, update, and delete in the specified path.
            </summary>
            <param name="path">The path to check.</param>
            <returns>True if the path is writable.</returns>
        </member>
        <member name="M:KellermanSoftware.Common.Util.PathSlash(System.String)">
            <summary>
            Ensure the passed string ends with a directory seperator character unless the string is blank.
            </summary>
            <param name="path">The string to append the backslash to.</param>
            <returns>String with a "/" on the end</returns>
        </member>
        <member name="M:KellermanSoftware.Common.Util.ExtractPath(System.String)">
            <summary>
            Extract the path from a path ending in a filename 
            </summary>
            <param name="fullPath">A fully qualified path ending in a filename</param>
            <returns>The extacted path</returns>
        </member>
        <member name="M:KellermanSoftware.Zlib.SupportClass.Identity(System.Int64)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:KellermanSoftware.Zlib.SupportClass.Identity(System.UInt64)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:KellermanSoftware.Zlib.SupportClass.Identity(System.Single)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:KellermanSoftware.Zlib.SupportClass.Identity(System.Double)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:KellermanSoftware.Zlib.SupportClass.URShift(System.Int32,System.Int32)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:KellermanSoftware.Zlib.SupportClass.URShift(System.Int32,System.Int64)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:KellermanSoftware.Zlib.SupportClass.URShift(System.Int64,System.Int32)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:KellermanSoftware.Zlib.SupportClass.URShift(System.Int64,System.Int64)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:KellermanSoftware.Zlib.SupportClass.ReadInput(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>Reads a number of characters from the current source Stream and writes the data to the target array at the specified index.</summary>
            <param name="sourceStream">The source Stream to read from.</param>
            <param name="target">Contains the array of characteres read from the source Stream.</param>
            <param name="start">The starting index of the target array.</param>
            <param name="count">The maximum number of characters to read from the source Stream.</param>
            <returns>The number of characters read. The number will be less than or equal to count depending on the data available in the source Stream. Returns -1 if the end of the stream is reached.</returns>
        </member>
        <member name="M:KellermanSoftware.Zlib.SupportClass.ReadInput(System.IO.TextReader,System.Byte[],System.Int32,System.Int32)">
            <summary>Reads a number of characters from the current source TextReader and writes the data to the target array at the specified index.</summary>
            <param name="sourceTextReader">The source TextReader to read from</param>
            <param name="target">Contains the array of characteres read from the source TextReader.</param>
            <param name="start">The starting index of the target array.</param>
            <param name="count">The maximum number of characters to read from the source TextReader.</param>
            <returns>The number of characters read. The number will be less than or equal to count depending on the data available in the source TextReader. Returns -1 if the end of the stream is reached.</returns>
        </member>
        <member name="M:KellermanSoftware.Zlib.SupportClass.ToByteArray(System.String)">
            <summary>
            Converts a string to an array of bytes
            </summary>
            <param name="sourceString">The string to be converted</param>
            <returns>The new array of bytes</returns>
        </member>
        <member name="M:KellermanSoftware.Zlib.SupportClass.ToCharArray(System.Byte[])">
            <summary>
            Converts an array of bytes to an array of chars
            </summary>
            <param name="byteArray">The array of bytes to convert</param>
            <returns>The new array of chars</returns>
        </member>
        <member name="P:KellermanSoftware.Zlib.ZInputStream.TotalIn">
            <summary> Returns the total number of bytes input so far.</summary>
        </member>
        <member name="P:KellermanSoftware.Zlib.ZInputStream.TotalOut">
            <summary> Returns the total number of bytes output so far.</summary>
        </member>
        <member name="P:KellermanSoftware.Zlib.ZOutputStream.TotalIn">
            <summary> Returns the total number of bytes input so far.</summary>
        </member>
        <member name="P:KellermanSoftware.Zlib.ZOutputStream.TotalOut">
            <summary> Returns the total number of bytes output so far.</summary>
        </member>
    </members>
</doc>
